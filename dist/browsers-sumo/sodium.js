(function(root) {

function expose_libsodium(exports) {
    "use strict";
    var Module = exports;
    if (typeof Module === 'undefined') {
      var Module = {};
    }
    var _Module = Module;
    Module.ready = new Promise(function (resolve, reject) {
      var Module = _Module;
      Module.onAbort = reject;
      Module.onRuntimeInitialized = resolve;
      // The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(f);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('Unknown runtime environment. Where are we?');
}

function globalEval(x) {
  abort('NO_DYNAMIC_EXECUTION=1 was set, cannot eval');
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 1*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-1)/1] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    if (!func) return; // on null pointer, return undefined
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 1024,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Runs assert if ASSERTIONS is true
function maybeAssert(condition, text) {
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    abort('NO_DYNAMIC_EXECUTION=1 was set, cannot eval');
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  // NO_DYNAMIC_EXECUTION is on, so we can't use the fast version of cwrap.
  // Fall back to returning a bound version of ccall.
  cwrap = function cwrap(ident, returnType, argTypes) {
    return function() {
      return ccall(ident, returnType, argTypes, arguments);
    }
  }
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 67108864;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE, 'maximum': TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = Module['wasmMemory'].buffer;
  } else
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];

if (!Math['fround']) {
  var froundBuffer = new Float32Array(1);
  Math['fround'] = function(x) { froundBuffer[0] = x; return froundBuffer[0] };
}
Math.fround = Math['fround'];

if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





function integrateWasmJS() {
  // wasm.js has several methods for creating the compiled code module here:
  //  * 'native-wasm' : use native WebAssembly support in the browser
  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret
  //  * 'interpret-binary': load binary wasm and interpret
  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret
  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)
  // The method can be set at compile time (BINARYEN_METHOD), or runtime by setting Module['wasmJSMethod'].
  // The method can be a comma-separated list, in which case, we will try the
  // options one by one. Some of them can fail gracefully, and then we can try
  // the next.

  // inputs

  var method = Module['wasmJSMethod'] || 'native-wasm';
  Module['wasmJSMethod'] = method;

  var wasmTextFile = Module['wasmTextFile'] || '';
  var wasmBinaryFile = Module['wasmBinaryFile'] || 'data:application/octet-stream;base64,';
  var asmjsCodeFile = Module['asmjsCodeFile'] || '';

  if (typeof Module['locateFile'] === 'function') {
    wasmTextFile = Module['locateFile'](wasmTextFile);
    wasmBinaryFile = Module['locateFile'](wasmBinaryFile);
    asmjsCodeFile = Module['locateFile'](asmjsCodeFile);
  }

  // utilities

  var wasmPageSize = 64*1024;

  var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
      return x % y;
    },
    "f64-to-int": function(x) {
      return x | 0;
    },
    "i32s-div": function(x, y) {
      return ((x | 0) / (y | 0)) | 0;
    },
    "i32u-div": function(x, y) {
      return ((x >>> 0) / (y >>> 0)) >>> 0;
    },
    "i32s-rem": function(x, y) {
      return ((x | 0) % (y | 0)) | 0;
    },
    "i32u-rem": function(x, y) {
      return ((x >>> 0) % (y >>> 0)) >>> 0;
    },
    "debugger": function() {
      debugger;
    },
  };

  var info = {
    'global': null,
    'env': null,
    'asm2wasm': asm2wasmImports,
    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.
  };

  var exports = null;

  function lookupImport(mod, base) {
    var lookup = info;
    if (mod.indexOf('.') < 0) {
      lookup = (lookup || {})[mod];
    } else {
      var parts = mod.split('.');
      lookup = (lookup || {})[parts[0]];
      lookup = (lookup || {})[parts[1]];
    }
    if (base) {
      lookup = (lookup || {})[base];
    }
    if (lookup === undefined) {
      abort('bad lookupImport to (' + mod + ').' + base);
    }
    return lookup;
  }

  function mergeMemory(newBuffer) {
    // The wasm instance creates its memory. But static init code might have written to
    // buffer already, including the mem init file, and we must copy it over in a proper merge.
    // TODO: avoid this copy, by avoiding such static init writes
    // TODO: in shorter term, just copy up to the last static init write
    var oldBuffer = Module['buffer'];
    if (newBuffer.byteLength < oldBuffer.byteLength) {
      Module['printErr']('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');
    }
    var oldView = new Int8Array(oldBuffer);
    var newView = new Int8Array(newBuffer);

    // If we have a mem init file, do not trample it
    if (!memoryInitializer) {
      oldView.set(newView.subarray(Module['STATIC_BASE'], Module['STATIC_BASE'] + Module['STATIC_BUMP']), Module['STATIC_BASE']);
    }

    newView.set(oldView);
    updateGlobalBuffer(newBuffer);
    updateGlobalBufferViews();
  }

  var WasmTypes = {
    none: 0,
    i32: 1,
    i64: 2,
    f32: 3,
    f64: 4
  };

  function fixImports(imports) {
    if (!0) return imports;
    var ret = {};
    for (var i in imports) {
      var fixed = i;
      if (fixed[0] == '_') fixed = fixed.substr(1);
      ret[fixed] = imports[i];
    }
    return ret;
  }

  function getBinary() {
    try {
      if (Module['wasmBinary']) {
        return new Uint8Array(Module['wasmBinary']);
      }
      var binary = tryParseAsDataURI(wasmBinaryFile);
      if (binary) {
        return binary;
      }
      if (Module['readBinary']) {
        return Module['readBinary'](wasmBinaryFile);
      } else {
        throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";
      }
    }
    catch (err) {
      abort(err);
    }
  }

  function getBinaryPromise() {
    // if we don't have the binary yet, and have the Fetch api, use that
    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
        return getBinary();
      });
    }
    // Otherwise, getBinary should be able to get it synchronously
    return new Promise(function(resolve, reject) {
      resolve(getBinary());
    });
  }

  // do-method functions

  function doJustAsm(global, env, providedBuffer) {
    // if no Module.asm, or it's the method handler helper (see below), then apply
    // the asmjs
    if (typeof Module['asm'] !== 'function' || Module['asm'] === methodHandler) {
      if (!Module['asmPreload']) {
        // you can load the .asm.js file before this, to avoid this sync xhr and eval
        abort('NO_DYNAMIC_EXECUTION=1 was set, cannot eval'); // set Module.asm
      } else {
        Module['asm'] = Module['asmPreload'];
      }
    }
    if (typeof Module['asm'] !== 'function') {
      Module['printErr']('asm evalling did not set the module properly');
      return false;
    }
    return Module['asm'](global, env, providedBuffer);
  }

  function doNativeWasm(global, env, providedBuffer) {
    if (typeof WebAssembly !== 'object') {
      Module['printErr']('no native wasm support detected');
      return false;
    }
    // prepare memory import
    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {
      Module['printErr']('no native wasm Memory in use');
      return false;
    }
    env['memory'] = Module['wasmMemory'];
    // Load the wasm module and create an instance of using native support in the JS engine.
    info['global'] = {
      'NaN': NaN,
      'Infinity': Infinity
    };
    info['global.Math'] = global.Math;
    info['env'] = env;
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    function receiveInstance(instance) {
      exports = instance.exports;
      if (exports.memory) mergeMemory(exports.memory);
      Module['asm'] = exports;
      Module["usingWasm"] = true;
      removeRunDependency('wasm-instantiate');
    }

    addRunDependency('wasm-instantiate'); // we can't run yet

    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
    // to any other async startup actions they are performing.
    if (Module['instantiateWasm']) {
      try {
        return Module['instantiateWasm'](info, receiveInstance);
      } catch(e) {
        Module['printErr']('Module.instantiateWasm callback failed with error: ' + e);
        return false;
      }
    }

    function receiveInstantiatedSource(output) {
      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
      // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      receiveInstance(output['instance']);
    }
    function instantiateArrayBuffer(receiver) {
      getBinaryPromise().then(function(binary) {
        return WebAssembly.instantiate(binary, info);
      }).then(receiver).catch(function(reason) {
        Module['printErr']('failed to asynchronously prepare wasm: ' + reason);
        abort(reason);
      });
    }
    // Prefer streaming instantiation if available.
    if (!Module['wasmBinary'] && typeof WebAssembly.instantiateStreaming === 'function') {
      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)
        .then(receiveInstantiatedSource)
        .catch(function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          Module['printErr']('wasm streaming compile failed: ' + reason);
          Module['printErr']('falling back to ArrayBuffer instantiation');
          instantiateArrayBuffer(receiveInstantiatedSource);
        });
    } else {
      instantiateArrayBuffer(receiveInstantiatedSource);
    }
    return {}; // no exports yet; we'll fill them in later
  }

  function doWasmPolyfill(global, env, providedBuffer, method) {
    if (typeof WasmJS !== 'function') {
      Module['printErr']('WasmJS not detected - polyfill not bundled?');
      return false;
    }

    // Use wasm.js to polyfill and execute code in a wasm interpreter.
    var wasmJS = WasmJS({});

    // XXX don't be confused. Module here is in the outside program. wasmJS is the inner wasm-js.cpp.
    wasmJS['outside'] = Module; // Inside wasm-js.cpp, Module['outside'] reaches the outside module.

    // Information for the instance of the module.
    wasmJS['info'] = info;

    wasmJS['lookupImport'] = lookupImport;

    assert(providedBuffer === Module['buffer']); // we should not even need to pass it as a 3rd arg for wasm, but that's the asm.js way.

    info.global = global;
    info.env = env;

    // polyfill interpreter expects an ArrayBuffer
    assert(providedBuffer === Module['buffer']);
    env['memory'] = providedBuffer;
    assert(env['memory'] instanceof ArrayBuffer);

    wasmJS['providedTotalMemory'] = Module['buffer'].byteLength;

    // Prepare to generate wasm, using either asm2wasm or s-exprs
    var code;
    if (method === 'interpret-binary') {
      code = getBinary();
    } else {
      code = Module['read'](method == 'interpret-asm2wasm' ? asmjsCodeFile : wasmTextFile);
    }
    var temp;
    if (method == 'interpret-asm2wasm') {
      temp = wasmJS['_malloc'](code.length + 1);
      wasmJS['writeAsciiToMemory'](code, temp);
      wasmJS['_load_asm2wasm'](temp);
    } else if (method === 'interpret-s-expr') {
      temp = wasmJS['_malloc'](code.length + 1);
      wasmJS['writeAsciiToMemory'](code, temp);
      wasmJS['_load_s_expr2wasm'](temp);
    } else if (method === 'interpret-binary') {
      temp = wasmJS['_malloc'](code.length);
      wasmJS['HEAPU8'].set(code, temp);
      wasmJS['_load_binary2wasm'](temp, code.length);
    } else {
      throw 'what? ' + method;
    }
    wasmJS['_free'](temp);

    wasmJS['_instantiate'](temp);

    if (Module['newBuffer']) {
      mergeMemory(Module['newBuffer']);
      Module['newBuffer'] = null;
    }

    exports = wasmJS['asmExports'];

    return exports;
  }

  // We may have a preloaded value in Module.asm, save it
  Module['asmPreload'] = Module['asm'];

  // Memory growth integration code

  var asmjsReallocBuffer = Module['reallocBuffer'];

  var wasmReallocBuffer = function(size) {
    var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size
    var old = Module['buffer'];
    var oldSize = old.byteLength;
    if (Module["usingWasm"]) {
      // native wasm support
      try {
        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size
        if (result !== (-1 | 0)) {
          // success in native wasm memory growth, get the buffer from the memory
          return Module['buffer'] = Module['wasmMemory'].buffer;
        } else {
          return null;
        }
      } catch(e) {
        return null;
      }
    } else {
      // wasm interpreter support
      exports['__growWasmMemory']((size - oldSize) / wasmPageSize); // tiny wasm method that just does grow_memory
      // in interpreter, we replace Module.buffer if we allocate
      return Module['buffer'] !== old ? Module['buffer'] : null; // if it was reallocated, it changed
    }
  };

  Module['reallocBuffer'] = function(size) {
    if (finalMethod === 'asmjs') {
      return asmjsReallocBuffer(size);
    } else {
      return wasmReallocBuffer(size);
    }
  };

  // we may try more than one; this is the final one, that worked and we are using
  var finalMethod = '';

  // Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
  // the wasm module at that time, and it receives imports and provides exports and so forth, the app
  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.

  Module['asm'] = function(global, env, providedBuffer) {
    global = fixImports(global);
    env = fixImports(env);

    // import table
    if (!env['table']) {
      var TABLE_SIZE = Module['wasmTableSize'];
      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least
      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];
      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {
        if (MAX_TABLE_SIZE !== undefined) {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });
        } else {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });
        }
      } else {
        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least
      }
      Module['wasmTable'] = env['table'];
    }

    if (!env['memoryBase']) {
      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves
    }
    if (!env['tableBase']) {
      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change
    }

    // try the methods. each should return the exports if it succeeded

    var exports;
    exports = doNativeWasm(global, env, providedBuffer);


    return exports;
  };

  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later
}

integrateWasmJS();

// === Body ===

var ASM_CONSTS = [function() { return Module.getRandomValue(); },
 function() { if (Module.getRandomValue === undefined) { try { var window_ = 'object' === typeof window ? window : self; var crypto_ = typeof window_.crypto !== 'undefined' ? window_.crypto : window_.msCrypto; var randomValuesStandard = function() { var buf = new Uint32Array(1); crypto_.getRandomValues(buf); return buf[0] >>> 0; }; randomValuesStandard(); Module.getRandomValue = randomValuesStandard; } catch (e) { try { var crypto = require('crypto'); var randomValueNodeJS = function() { var buf = crypto.randomBytes(4); return (buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3]) >>> 0; }; randomValueNodeJS(); Module.getRandomValue = randomValueNodeJS; } catch (e) { throw 'No secure random number generator found'; } } } }];

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 37056;
/* global initializers */  __ATINIT__.push();


memoryInitializer = null;




var STATIC_BUMP = 37056;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;

/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85:
          var maxHeapSize = 2*1024*1024*1024 - 65536;
          maxHeapSize = HEAPU8.length;
          return maxHeapSize / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }  

   

  var _emscripten_asm_const_int=true;

  function _abort() {
      Module['abort']();
    }

   

DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory


Module['wasmTableSize'] = 0;

Module['wasmMaxTableSize'] = 0;

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "_emscripten_asm_const_i": _emscripten_asm_const_i, "___assert_fail": ___assert_fail, "_abort": _abort, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm =Module["asm"]// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

Module["asm"] = asm;
var _crypto_onetimeauth_poly1305_init = Module["_crypto_onetimeauth_poly1305_init"] = function() {  return Module["asm"]["_crypto_onetimeauth_poly1305_init"].apply(null, arguments) };
var _crypto_hash_sha512_init = Module["_crypto_hash_sha512_init"] = function() {  return Module["asm"]["_crypto_hash_sha512_init"].apply(null, arguments) };
var _crypto_sign_ed25519_pk_to_curve25519 = Module["_crypto_sign_ed25519_pk_to_curve25519"] = function() {  return Module["asm"]["_crypto_sign_ed25519_pk_to_curve25519"].apply(null, arguments) };
var _sodium_unpad = Module["_sodium_unpad"] = function() {  return Module["asm"]["_sodium_unpad"].apply(null, arguments) };
var _crypto_scalarmult_primitive = Module["_crypto_scalarmult_primitive"] = function() {  return Module["asm"]["_crypto_scalarmult_primitive"].apply(null, arguments) };
var _crypto_scalarmult_base = Module["_crypto_scalarmult_base"] = function() {  return Module["asm"]["_crypto_scalarmult_base"].apply(null, arguments) };
var _crypto_auth_bytes = Module["_crypto_auth_bytes"] = function() {  return Module["asm"]["_crypto_auth_bytes"].apply(null, arguments) };
var _crypto_stream_chacha20_keybytes = Module["_crypto_stream_chacha20_keybytes"] = function() {  return Module["asm"]["_crypto_stream_chacha20_keybytes"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_decrypt_detached = Module["_crypto_aead_chacha20poly1305_decrypt_detached"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_decrypt_detached"].apply(null, arguments) };
var _crypto_kdf_blake2b_bytes_min = Module["_crypto_kdf_blake2b_bytes_min"] = function() {  return Module["asm"]["_crypto_kdf_blake2b_bytes_min"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_open_easy_afternm = Module["_crypto_box_curve25519xchacha20poly1305_open_easy_afternm"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_open_easy_afternm"].apply(null, arguments) };
var _crypto_generichash_blake2b_keybytes_max = Module["_crypto_generichash_blake2b_keybytes_max"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_keybytes_max"].apply(null, arguments) };
var _crypto_box_beforenmbytes = Module["_crypto_box_beforenmbytes"] = function() {  return Module["asm"]["_crypto_box_beforenmbytes"].apply(null, arguments) };
var _crypto_stream_salsa208 = Module["_crypto_stream_salsa208"] = function() {  return Module["asm"]["_crypto_stream_salsa208"].apply(null, arguments) };
var _crypto_sign_ed25519_sk_to_curve25519 = Module["_crypto_sign_ed25519_sk_to_curve25519"] = function() {  return Module["asm"]["_crypto_sign_ed25519_sk_to_curve25519"].apply(null, arguments) };
var _crypto_stream_chacha20_ietf_xor_ic = Module["_crypto_stream_chacha20_ietf_xor_ic"] = function() {  return Module["asm"]["_crypto_stream_chacha20_ietf_xor_ic"].apply(null, arguments) };
var _crypto_secretbox_xsalsa20poly1305_open = Module["_crypto_secretbox_xsalsa20poly1305_open"] = function() {  return Module["asm"]["_crypto_secretbox_xsalsa20poly1305_open"].apply(null, arguments) };
var _crypto_box_zerobytes = Module["_crypto_box_zerobytes"] = function() {  return Module["asm"]["_crypto_box_zerobytes"].apply(null, arguments) };
var _crypto_secretbox_xchacha20poly1305_open_detached = Module["_crypto_secretbox_xchacha20poly1305_open_detached"] = function() {  return Module["asm"]["_crypto_secretbox_xchacha20poly1305_open_detached"].apply(null, arguments) };
var _crypto_stream_salsa208_keybytes = Module["_crypto_stream_salsa208_keybytes"] = function() {  return Module["asm"]["_crypto_stream_salsa208_keybytes"].apply(null, arguments) };
var _crypto_hash_sha512_bytes = Module["_crypto_hash_sha512_bytes"] = function() {  return Module["asm"]["_crypto_hash_sha512_bytes"].apply(null, arguments) };
var _crypto_pwhash_argon2id_opslimit_interactive = Module["_crypto_pwhash_argon2id_opslimit_interactive"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_opslimit_interactive"].apply(null, arguments) };
var _crypto_stream_xsalsa20_xor_ic = Module["_crypto_stream_xsalsa20_xor_ic"] = function() {  return Module["asm"]["_crypto_stream_xsalsa20_xor_ic"].apply(null, arguments) };
var _crypto_core_hsalsa20_keybytes = Module["_crypto_core_hsalsa20_keybytes"] = function() {  return Module["asm"]["_crypto_core_hsalsa20_keybytes"].apply(null, arguments) };
var _crypto_sign_primitive = Module["_crypto_sign_primitive"] = function() {  return Module["asm"]["_crypto_sign_primitive"].apply(null, arguments) };
var _crypto_scalarmult_curve25519_bytes = Module["_crypto_scalarmult_curve25519_bytes"] = function() {  return Module["asm"]["_crypto_scalarmult_curve25519_bytes"].apply(null, arguments) };
var _crypto_scalarmult_curve25519_scalarbytes = Module["_crypto_scalarmult_curve25519_scalarbytes"] = function() {  return Module["asm"]["_crypto_scalarmult_curve25519_scalarbytes"].apply(null, arguments) };
var _crypto_sign_ed25519_bytes = Module["_crypto_sign_ed25519_bytes"] = function() {  return Module["asm"]["_crypto_sign_ed25519_bytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_str_verify = Module["_crypto_pwhash_argon2i_str_verify"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_str_verify"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_secretkeybytes = Module["_crypto_box_curve25519xchacha20poly1305_secretkeybytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_secretkeybytes"].apply(null, arguments) };
var _crypto_auth_hmacsha512_keygen = Module["_crypto_auth_hmacsha512_keygen"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512_keygen"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_sealbytes = Module["_crypto_box_curve25519xchacha20poly1305_sealbytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_sealbytes"].apply(null, arguments) };
var _crypto_box_detached_afternm = Module["_crypto_box_detached_afternm"] = function() {  return Module["asm"]["_crypto_box_detached_afternm"].apply(null, arguments) };
var _crypto_stream_salsa20_xor_ic = Module["_crypto_stream_salsa20_xor_ic"] = function() {  return Module["asm"]["_crypto_stream_salsa20_xor_ic"].apply(null, arguments) };
var _crypto_auth_hmacsha256_init = Module["_crypto_auth_hmacsha256_init"] = function() {  return Module["asm"]["_crypto_auth_hmacsha256_init"].apply(null, arguments) };
var _crypto_stream_chacha20_ietf_xor = Module["_crypto_stream_chacha20_ietf_xor"] = function() {  return Module["asm"]["_crypto_stream_chacha20_ietf_xor"].apply(null, arguments) };
var _crypto_auth_hmacsha512256_final = Module["_crypto_auth_hmacsha512256_final"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512256_final"].apply(null, arguments) };
var _crypto_pwhash_argon2id_opslimit_sensitive = Module["_crypto_pwhash_argon2id_opslimit_sensitive"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_opslimit_sensitive"].apply(null, arguments) };
var setThrew = Module["setThrew"] = function() {  return Module["asm"]["setThrew"].apply(null, arguments) };
var _crypto_pwhash_argon2id_passwd_min = Module["_crypto_pwhash_argon2id_passwd_min"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_passwd_min"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_keygen = Module["_crypto_secretstream_xchacha20poly1305_keygen"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_keygen"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_ietf_nsecbytes = Module["_crypto_aead_chacha20poly1305_ietf_nsecbytes"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_ietf_nsecbytes"].apply(null, arguments) };
var _crypto_kdf_blake2b_derive_from_key = Module["_crypto_kdf_blake2b_derive_from_key"] = function() {  return Module["asm"]["_crypto_kdf_blake2b_derive_from_key"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_keypair = Module["_crypto_box_curve25519xsalsa20poly1305_keypair"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_keypair"].apply(null, arguments) };
var _crypto_hash_sha256_init = Module["_crypto_hash_sha256_init"] = function() {  return Module["asm"]["_crypto_hash_sha256_init"].apply(null, arguments) };
var _crypto_stream_xsalsa20_noncebytes = Module["_crypto_stream_xsalsa20_noncebytes"] = function() {  return Module["asm"]["_crypto_stream_xsalsa20_noncebytes"].apply(null, arguments) };
var _crypto_generichash_keybytes_max = Module["_crypto_generichash_keybytes_max"] = function() {  return Module["asm"]["_crypto_generichash_keybytes_max"].apply(null, arguments) };
var _crypto_verify_64 = Module["_crypto_verify_64"] = function() {  return Module["asm"]["_crypto_verify_64"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256 = Module["_crypto_pwhash_scryptsalsa208sha256"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_keypair = Module["_crypto_box_curve25519xchacha20poly1305_keypair"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_keypair"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_open = Module["_crypto_box_curve25519xsalsa20poly1305_open"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_open"].apply(null, arguments) };
var _crypto_pwhash_memlimit_sensitive = Module["_crypto_pwhash_memlimit_sensitive"] = function() {  return Module["asm"]["_crypto_pwhash_memlimit_sensitive"].apply(null, arguments) };
var _crypto_pwhash_argon2i_opslimit_interactive = Module["_crypto_pwhash_argon2i_opslimit_interactive"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_opslimit_interactive"].apply(null, arguments) };
var _crypto_kdf_blake2b_keybytes = Module["_crypto_kdf_blake2b_keybytes"] = function() {  return Module["asm"]["_crypto_kdf_blake2b_keybytes"].apply(null, arguments) };
var _crypto_pwhash_argon2id_str = Module["_crypto_pwhash_argon2id_str"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_str"].apply(null, arguments) };
var _crypto_hash_sha512_update = Module["_crypto_hash_sha512_update"] = function() {  return Module["asm"]["_crypto_hash_sha512_update"].apply(null, arguments) };
var _crypto_core_hchacha20 = Module["_crypto_core_hchacha20"] = function() {  return Module["asm"]["_crypto_core_hchacha20"].apply(null, arguments) };
var _crypto_pwhash_bytes_min = Module["_crypto_pwhash_bytes_min"] = function() {  return Module["asm"]["_crypto_pwhash_bytes_min"].apply(null, arguments) };
var _crypto_secretbox_open = Module["_crypto_secretbox_open"] = function() {  return Module["asm"]["_crypto_secretbox_open"].apply(null, arguments) };
var _crypto_auth_hmacsha256_final = Module["_crypto_auth_hmacsha256_final"] = function() {  return Module["asm"]["_crypto_auth_hmacsha256_final"].apply(null, arguments) };
var _crypto_verify_16 = Module["_crypto_verify_16"] = function() {  return Module["asm"]["_crypto_verify_16"].apply(null, arguments) };
var _crypto_pwhash_argon2id = Module["_crypto_pwhash_argon2id"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_memlimit_max = Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_max"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_memlimit_max"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_ll = Module["_crypto_pwhash_scryptsalsa208sha256_ll"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_ll"].apply(null, arguments) };
var _crypto_pwhash_argon2id_memlimit_interactive = Module["_crypto_pwhash_argon2id_memlimit_interactive"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_memlimit_interactive"].apply(null, arguments) };
var _crypto_stream_salsa208_xor = Module["_crypto_stream_salsa208_xor"] = function() {  return Module["asm"]["_crypto_stream_salsa208_xor"].apply(null, arguments) };
var _crypto_secretbox_xsalsa20poly1305_keygen = Module["_crypto_secretbox_xsalsa20poly1305_keygen"] = function() {  return Module["asm"]["_crypto_secretbox_xsalsa20poly1305_keygen"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_abytes = Module["_crypto_aead_chacha20poly1305_abytes"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_abytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_bytes_max = Module["_crypto_pwhash_argon2i_bytes_max"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_bytes_max"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_easy_afternm = Module["_crypto_box_curve25519xchacha20poly1305_easy_afternm"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_easy_afternm"].apply(null, arguments) };
var _crypto_onetimeauth_poly1305_update = Module["_crypto_onetimeauth_poly1305_update"] = function() {  return Module["asm"]["_crypto_onetimeauth_poly1305_update"].apply(null, arguments) };
var _crypto_pwhash_memlimit_max = Module["_crypto_pwhash_memlimit_max"] = function() {  return Module["asm"]["_crypto_pwhash_memlimit_max"].apply(null, arguments) };
var _crypto_verify_64_bytes = Module["_crypto_verify_64_bytes"] = function() {  return Module["asm"]["_crypto_verify_64_bytes"].apply(null, arguments) };
var _crypto_onetimeauth_poly1305_keygen = Module["_crypto_onetimeauth_poly1305_keygen"] = function() {  return Module["asm"]["_crypto_onetimeauth_poly1305_keygen"].apply(null, arguments) };
var _crypto_generichash_blake2b_keygen = Module["_crypto_generichash_blake2b_keygen"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_keygen"].apply(null, arguments) };
var _crypto_pwhash_argon2i_strprefix = Module["_crypto_pwhash_argon2i_strprefix"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_strprefix"].apply(null, arguments) };
var _crypto_auth_hmacsha256_update = Module["_crypto_auth_hmacsha256_update"] = function() {  return Module["asm"]["_crypto_auth_hmacsha256_update"].apply(null, arguments) };
var _crypto_aead_xchacha20poly1305_ietf_encrypt = Module["_crypto_aead_xchacha20poly1305_ietf_encrypt"] = function() {  return Module["asm"]["_crypto_aead_xchacha20poly1305_ietf_encrypt"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_strbytes = Module["_crypto_pwhash_scryptsalsa208sha256_strbytes"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_strbytes"].apply(null, arguments) };
var _crypto_stream_xsalsa20_keybytes = Module["_crypto_stream_xsalsa20_keybytes"] = function() {  return Module["asm"]["_crypto_stream_xsalsa20_keybytes"].apply(null, arguments) };
var _crypto_generichash_keygen = Module["_crypto_generichash_keygen"] = function() {  return Module["asm"]["_crypto_generichash_keygen"].apply(null, arguments) };
var _crypto_pwhash_argon2i_str = Module["_crypto_pwhash_argon2i_str"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_str"].apply(null, arguments) };
var _crypto_pwhash_argon2id_bytes_max = Module["_crypto_pwhash_argon2id_bytes_max"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_bytes_max"].apply(null, arguments) };
var _crypto_box_sealbytes = Module["_crypto_box_sealbytes"] = function() {  return Module["asm"]["_crypto_box_sealbytes"].apply(null, arguments) };
var _crypto_onetimeauth = Module["_crypto_onetimeauth"] = function() {  return Module["asm"]["_crypto_onetimeauth"].apply(null, arguments) };
var _crypto_secretbox_boxzerobytes = Module["_crypto_secretbox_boxzerobytes"] = function() {  return Module["asm"]["_crypto_secretbox_boxzerobytes"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_ietf_keygen = Module["_crypto_aead_chacha20poly1305_ietf_keygen"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_ietf_keygen"].apply(null, arguments) };
var _crypto_stream_chacha20 = Module["_crypto_stream_chacha20"] = function() {  return Module["asm"]["_crypto_stream_chacha20"].apply(null, arguments) };
var _crypto_box_open_afternm = Module["_crypto_box_open_afternm"] = function() {  return Module["asm"]["_crypto_box_open_afternm"].apply(null, arguments) };
var _sodium_bin2base64 = Module["_sodium_bin2base64"] = function() {  return Module["asm"]["_sodium_bin2base64"].apply(null, arguments) };
var _crypto_pwhash_opslimit_moderate = Module["_crypto_pwhash_opslimit_moderate"] = function() {  return Module["asm"]["_crypto_pwhash_opslimit_moderate"].apply(null, arguments) };
var _crypto_box_macbytes = Module["_crypto_box_macbytes"] = function() {  return Module["asm"]["_crypto_box_macbytes"].apply(null, arguments) };
var _crypto_shorthash_bytes = Module["_crypto_shorthash_bytes"] = function() {  return Module["asm"]["_crypto_shorthash_bytes"].apply(null, arguments) };
var _crypto_pwhash_argon2id_saltbytes = Module["_crypto_pwhash_argon2id_saltbytes"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_saltbytes"].apply(null, arguments) };
var _crypto_generichash_primitive = Module["_crypto_generichash_primitive"] = function() {  return Module["asm"]["_crypto_generichash_primitive"].apply(null, arguments) };
var _crypto_sign_ed25519_keypair = Module["_crypto_sign_ed25519_keypair"] = function() {  return Module["asm"]["_crypto_sign_ed25519_keypair"].apply(null, arguments) };
var _crypto_sign_ed25519ph_statebytes = Module["_crypto_sign_ed25519ph_statebytes"] = function() {  return Module["asm"]["_crypto_sign_ed25519ph_statebytes"].apply(null, arguments) };
var _crypto_aead_xchacha20poly1305_ietf_keybytes = Module["_crypto_aead_xchacha20poly1305_ietf_keybytes"] = function() {  return Module["asm"]["_crypto_aead_xchacha20poly1305_ietf_keybytes"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_rekey = Module["_crypto_secretstream_xchacha20poly1305_rekey"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_rekey"].apply(null, arguments) };
var _crypto_auth_primitive = Module["_crypto_auth_primitive"] = function() {  return Module["asm"]["_crypto_auth_primitive"].apply(null, arguments) };
var _crypto_core_salsa2012_keybytes = Module["_crypto_core_salsa2012_keybytes"] = function() {  return Module["asm"]["_crypto_core_salsa2012_keybytes"].apply(null, arguments) };
var _malloc = Module["_malloc"] = function() {  return Module["asm"]["_malloc"].apply(null, arguments) };
var _crypto_stream_noncebytes = Module["_crypto_stream_noncebytes"] = function() {  return Module["asm"]["_crypto_stream_noncebytes"].apply(null, arguments) };
var _crypto_secretbox_xchacha20poly1305_keybytes = Module["_crypto_secretbox_xchacha20poly1305_keybytes"] = function() {  return Module["asm"]["_crypto_secretbox_xchacha20poly1305_keybytes"].apply(null, arguments) };
var _crypto_secretbox_xsalsa20poly1305_keybytes = Module["_crypto_secretbox_xsalsa20poly1305_keybytes"] = function() {  return Module["asm"]["_crypto_secretbox_xsalsa20poly1305_keybytes"].apply(null, arguments) };
var _crypto_pwhash_saltbytes = Module["_crypto_pwhash_saltbytes"] = function() {  return Module["asm"]["_crypto_pwhash_saltbytes"].apply(null, arguments) };
var _crypto_secretbox_noncebytes = Module["_crypto_secretbox_noncebytes"] = function() {  return Module["asm"]["_crypto_secretbox_noncebytes"].apply(null, arguments) };
var _crypto_pwhash_str_alg = Module["_crypto_pwhash_str_alg"] = function() {  return Module["asm"]["_crypto_pwhash_str_alg"].apply(null, arguments) };
var _crypto_secretbox_xsalsa20poly1305_macbytes = Module["_crypto_secretbox_xsalsa20poly1305_macbytes"] = function() {  return Module["asm"]["_crypto_secretbox_xsalsa20poly1305_macbytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_opslimit_max = Module["_crypto_pwhash_argon2i_opslimit_max"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_opslimit_max"].apply(null, arguments) };
var _crypto_auth_hmacsha512_bytes = Module["_crypto_auth_hmacsha512_bytes"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512_bytes"].apply(null, arguments) };
var _crypto_generichash_keybytes = Module["_crypto_generichash_keybytes"] = function() {  return Module["asm"]["_crypto_generichash_keybytes"].apply(null, arguments) };
var _crypto_hash_bytes = Module["_crypto_hash_bytes"] = function() {  return Module["asm"]["_crypto_hash_bytes"].apply(null, arguments) };
var _crypto_sign_publickeybytes = Module["_crypto_sign_publickeybytes"] = function() {  return Module["asm"]["_crypto_sign_publickeybytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_memlimit_moderate = Module["_crypto_pwhash_argon2i_memlimit_moderate"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_memlimit_moderate"].apply(null, arguments) };
var _crypto_generichash_blake2b = Module["_crypto_generichash_blake2b"] = function() {  return Module["asm"]["_crypto_generichash_blake2b"].apply(null, arguments) };
var _crypto_core_hchacha20_keybytes = Module["_crypto_core_hchacha20_keybytes"] = function() {  return Module["asm"]["_crypto_core_hchacha20_keybytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_opslimit_moderate = Module["_crypto_pwhash_argon2i_opslimit_moderate"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_opslimit_moderate"].apply(null, arguments) };
var _randombytes_implementation_name = Module["_randombytes_implementation_name"] = function() {  return Module["asm"]["_randombytes_implementation_name"].apply(null, arguments) };
var _crypto_stream_xchacha20_noncebytes = Module["_crypto_stream_xchacha20_noncebytes"] = function() {  return Module["asm"]["_crypto_stream_xchacha20_noncebytes"].apply(null, arguments) };
var _crypto_sign_ed25519_verify_detached = Module["_crypto_sign_ed25519_verify_detached"] = function() {  return Module["asm"]["_crypto_sign_ed25519_verify_detached"].apply(null, arguments) };
var _crypto_hash_sha512_statebytes = Module["_crypto_hash_sha512_statebytes"] = function() {  return Module["asm"]["_crypto_hash_sha512_statebytes"].apply(null, arguments) };
var _crypto_secretbox_primitive = Module["_crypto_secretbox_primitive"] = function() {  return Module["asm"]["_crypto_secretbox_primitive"].apply(null, arguments) };
var _crypto_verify_32_bytes = Module["_crypto_verify_32_bytes"] = function() {  return Module["asm"]["_crypto_verify_32_bytes"].apply(null, arguments) };
var stackRestore = Module["stackRestore"] = function() {  return Module["asm"]["stackRestore"].apply(null, arguments) };
var _crypto_kdf_keygen = Module["_crypto_kdf_keygen"] = function() {  return Module["asm"]["_crypto_kdf_keygen"].apply(null, arguments) };
var _crypto_stream_xsalsa20_xor = Module["_crypto_stream_xsalsa20_xor"] = function() {  return Module["asm"]["_crypto_stream_xsalsa20_xor"].apply(null, arguments) };
var _crypto_stream_chacha20_ietf_keygen = Module["_crypto_stream_chacha20_ietf_keygen"] = function() {  return Module["asm"]["_crypto_stream_chacha20_ietf_keygen"].apply(null, arguments) };
var _crypto_stream_chacha20_keygen = Module["_crypto_stream_chacha20_keygen"] = function() {  return Module["asm"]["_crypto_stream_chacha20_keygen"].apply(null, arguments) };
var _crypto_box_easy = Module["_crypto_box_easy"] = function() {  return Module["asm"]["_crypto_box_easy"].apply(null, arguments) };
var _crypto_hash_sha256 = Module["_crypto_hash_sha256"] = function() {  return Module["asm"]["_crypto_hash_sha256"].apply(null, arguments) };
var _crypto_sign_ed25519_seedbytes = Module["_crypto_sign_ed25519_seedbytes"] = function() {  return Module["asm"]["_crypto_sign_ed25519_seedbytes"].apply(null, arguments) };
var _crypto_pwhash_alg_argon2i13 = Module["_crypto_pwhash_alg_argon2i13"] = function() {  return Module["asm"]["_crypto_pwhash_alg_argon2i13"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_seal_open = Module["_crypto_box_curve25519xchacha20poly1305_seal_open"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_seal_open"].apply(null, arguments) };
var _crypto_pwhash_opslimit_min = Module["_crypto_pwhash_opslimit_min"] = function() {  return Module["asm"]["_crypto_pwhash_opslimit_min"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_publickeybytes = Module["_crypto_box_curve25519xsalsa20poly1305_publickeybytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_publickeybytes"].apply(null, arguments) };
var _crypto_kdf_blake2b_bytes_max = Module["_crypto_kdf_blake2b_bytes_max"] = function() {  return Module["asm"]["_crypto_kdf_blake2b_bytes_max"].apply(null, arguments) };
var _crypto_hash_sha256_statebytes = Module["_crypto_hash_sha256_statebytes"] = function() {  return Module["asm"]["_crypto_hash_sha256_statebytes"].apply(null, arguments) };
var _crypto_stream_chacha20_ietf_noncebytes = Module["_crypto_stream_chacha20_ietf_noncebytes"] = function() {  return Module["asm"]["_crypto_stream_chacha20_ietf_noncebytes"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive = Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_open_easy = Module["_crypto_box_curve25519xchacha20poly1305_open_easy"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_open_easy"].apply(null, arguments) };
var _crypto_box_beforenm = Module["_crypto_box_beforenm"] = function() {  return Module["asm"]["_crypto_box_beforenm"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_afternm = Module["_crypto_box_curve25519xsalsa20poly1305_afternm"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_afternm"].apply(null, arguments) };
var _crypto_sign_statebytes = Module["_crypto_sign_statebytes"] = function() {  return Module["asm"]["_crypto_sign_statebytes"].apply(null, arguments) };
var _crypto_sign_open = Module["_crypto_sign_open"] = function() {  return Module["asm"]["_crypto_sign_open"].apply(null, arguments) };
var stackSave = Module["stackSave"] = function() {  return Module["asm"]["stackSave"].apply(null, arguments) };
var _crypto_box_seed_keypair = Module["_crypto_box_seed_keypair"] = function() {  return Module["asm"]["_crypto_box_seed_keypair"].apply(null, arguments) };
var _crypto_auth_hmacsha512_init = Module["_crypto_auth_hmacsha512_init"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512_init"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_str_needs_rehash = Module["_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash"].apply(null, arguments) };
var _crypto_sign_ed25519_sk_to_pk = Module["_crypto_sign_ed25519_sk_to_pk"] = function() {  return Module["asm"]["_crypto_sign_ed25519_sk_to_pk"].apply(null, arguments) };
var _crypto_scalarmult_curve25519 = Module["_crypto_scalarmult_curve25519"] = function() {  return Module["asm"]["_crypto_scalarmult_curve25519"].apply(null, arguments) };
var _crypto_box_open_easy = Module["_crypto_box_open_easy"] = function() {  return Module["asm"]["_crypto_box_open_easy"].apply(null, arguments) };
var _crypto_auth_hmacsha512 = Module["_crypto_auth_hmacsha512"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512"].apply(null, arguments) };
var _crypto_stream_keygen = Module["_crypto_stream_keygen"] = function() {  return Module["asm"]["_crypto_stream_keygen"].apply(null, arguments) };
var _crypto_secretbox_xsalsa20poly1305_zerobytes = Module["_crypto_secretbox_xsalsa20poly1305_zerobytes"] = function() {  return Module["asm"]["_crypto_secretbox_xsalsa20poly1305_zerobytes"].apply(null, arguments) };
var _crypto_auth_hmacsha512256_keybytes = Module["_crypto_auth_hmacsha512256_keybytes"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512256_keybytes"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_keybytes = Module["_crypto_aead_chacha20poly1305_keybytes"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_keybytes"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_tag_message = Module["_crypto_secretstream_xchacha20poly1305_tag_message"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_tag_message"].apply(null, arguments) };
var _free = Module["_free"] = function() {  return Module["asm"]["_free"].apply(null, arguments) };
var _crypto_kx_client_session_keys = Module["_crypto_kx_client_session_keys"] = function() {  return Module["asm"]["_crypto_kx_client_session_keys"].apply(null, arguments) };
var _crypto_sign_verify_detached = Module["_crypto_sign_verify_detached"] = function() {  return Module["asm"]["_crypto_sign_verify_detached"].apply(null, arguments) };
var _crypto_onetimeauth_poly1305_keybytes = Module["_crypto_onetimeauth_poly1305_keybytes"] = function() {  return Module["asm"]["_crypto_onetimeauth_poly1305_keybytes"].apply(null, arguments) };
var _crypto_sign_ed25519_secretkeybytes = Module["_crypto_sign_ed25519_secretkeybytes"] = function() {  return Module["asm"]["_crypto_sign_ed25519_secretkeybytes"].apply(null, arguments) };
var _crypto_kdf_blake2b_contextbytes = Module["_crypto_kdf_blake2b_contextbytes"] = function() {  return Module["asm"]["_crypto_kdf_blake2b_contextbytes"].apply(null, arguments) };
var _crypto_stream_salsa2012 = Module["_crypto_stream_salsa2012"] = function() {  return Module["asm"]["_crypto_stream_salsa2012"].apply(null, arguments) };
var _crypto_sign_seedbytes = Module["_crypto_sign_seedbytes"] = function() {  return Module["asm"]["_crypto_sign_seedbytes"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_beforenmbytes = Module["_crypto_box_curve25519xchacha20poly1305_beforenmbytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_beforenmbytes"].apply(null, arguments) };
var _randombytes_random = Module["_randombytes_random"] = function() {  return Module["asm"]["_randombytes_random"].apply(null, arguments) };
var _crypto_sign_ed25519ph_update = Module["_crypto_sign_ed25519ph_update"] = function() {  return Module["asm"]["_crypto_sign_ed25519ph_update"].apply(null, arguments) };
var _crypto_auth_hmacsha256_keygen = Module["_crypto_auth_hmacsha256_keygen"] = function() {  return Module["asm"]["_crypto_auth_hmacsha256_keygen"].apply(null, arguments) };
var _crypto_auth_hmacsha256_statebytes = Module["_crypto_auth_hmacsha256_statebytes"] = function() {  return Module["asm"]["_crypto_auth_hmacsha256_statebytes"].apply(null, arguments) };
var _randombytes_buf_deterministic = Module["_randombytes_buf_deterministic"] = function() {  return Module["asm"]["_randombytes_buf_deterministic"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_encrypt_detached = Module["_crypto_aead_chacha20poly1305_encrypt_detached"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_encrypt_detached"].apply(null, arguments) };
var _crypto_stream_xsalsa20_keygen = Module["_crypto_stream_xsalsa20_keygen"] = function() {  return Module["asm"]["_crypto_stream_xsalsa20_keygen"].apply(null, arguments) };
var _crypto_hash_primitive = Module["_crypto_hash_primitive"] = function() {  return Module["asm"]["_crypto_hash_primitive"].apply(null, arguments) };
var _crypto_pwhash_argon2id_passwd_max = Module["_crypto_pwhash_argon2id_passwd_max"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_passwd_max"].apply(null, arguments) };
var _crypto_shorthash_siphash24 = Module["_crypto_shorthash_siphash24"] = function() {  return Module["asm"]["_crypto_shorthash_siphash24"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_macbytes = Module["_crypto_box_curve25519xsalsa20poly1305_macbytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_macbytes"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_saltbytes = Module["_crypto_pwhash_scryptsalsa208sha256_saltbytes"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_saltbytes"].apply(null, arguments) };
var _crypto_sign_ed25519 = Module["_crypto_sign_ed25519"] = function() {  return Module["asm"]["_crypto_sign_ed25519"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_seal = Module["_crypto_box_curve25519xchacha20poly1305_seal"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_seal"].apply(null, arguments) };
var _crypto_core_salsa20_constbytes = Module["_crypto_core_salsa20_constbytes"] = function() {  return Module["asm"]["_crypto_core_salsa20_constbytes"].apply(null, arguments) };
var _crypto_pwhash_argon2id_str_verify = Module["_crypto_pwhash_argon2id_str_verify"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_str_verify"].apply(null, arguments) };
var _crypto_box_boxzerobytes = Module["_crypto_box_boxzerobytes"] = function() {  return Module["asm"]["_crypto_box_boxzerobytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_saltbytes = Module["_crypto_pwhash_argon2i_saltbytes"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_saltbytes"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_open_detached_afternm = Module["_crypto_box_curve25519xchacha20poly1305_open_detached_afternm"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_open_detached_afternm"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_beforenmbytes = Module["_crypto_box_curve25519xsalsa20poly1305_beforenmbytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_beforenmbytes"].apply(null, arguments) };
var _crypto_stream_xchacha20_keygen = Module["_crypto_stream_xchacha20_keygen"] = function() {  return Module["asm"]["_crypto_stream_xchacha20_keygen"].apply(null, arguments) };
var _crypto_core_hchacha20_constbytes = Module["_crypto_core_hchacha20_constbytes"] = function() {  return Module["asm"]["_crypto_core_hchacha20_constbytes"].apply(null, arguments) };
var _crypto_stream_xchacha20_xor = Module["_crypto_stream_xchacha20_xor"] = function() {  return Module["asm"]["_crypto_stream_xchacha20_xor"].apply(null, arguments) };
var _randombytes_seedbytes = Module["_randombytes_seedbytes"] = function() {  return Module["asm"]["_randombytes_seedbytes"].apply(null, arguments) };
var _crypto_sign_final_create = Module["_crypto_sign_final_create"] = function() {  return Module["asm"]["_crypto_sign_final_create"].apply(null, arguments) };
var _crypto_kx_secretkeybytes = Module["_crypto_kx_secretkeybytes"] = function() {  return Module["asm"]["_crypto_kx_secretkeybytes"].apply(null, arguments) };
var _crypto_box_detached = Module["_crypto_box_detached"] = function() {  return Module["asm"]["_crypto_box_detached"].apply(null, arguments) };
var _randombytes_buf = Module["_randombytes_buf"] = function() {  return Module["asm"]["_randombytes_buf"].apply(null, arguments) };
var _crypto_generichash_blake2b_saltbytes = Module["_crypto_generichash_blake2b_saltbytes"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_saltbytes"].apply(null, arguments) };
var _crypto_box_open_detached = Module["_crypto_box_open_detached"] = function() {  return Module["asm"]["_crypto_box_open_detached"].apply(null, arguments) };
var _crypto_kx_seedbytes = Module["_crypto_kx_seedbytes"] = function() {  return Module["asm"]["_crypto_kx_seedbytes"].apply(null, arguments) };
var _crypto_pwhash_argon2id_strprefix = Module["_crypto_pwhash_argon2id_strprefix"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_strprefix"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_open_detached = Module["_crypto_box_curve25519xchacha20poly1305_open_detached"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_open_detached"].apply(null, arguments) };
var _crypto_generichash_blake2b_keybytes = Module["_crypto_generichash_blake2b_keybytes"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_keybytes"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_easy = Module["_crypto_box_curve25519xchacha20poly1305_easy"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_easy"].apply(null, arguments) };
var _crypto_pwhash_argon2i_bytes_min = Module["_crypto_pwhash_argon2i_bytes_min"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_bytes_min"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_str = Module["_crypto_pwhash_scryptsalsa208sha256_str"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_str"].apply(null, arguments) };
var _crypto_pwhash_argon2id_bytes_min = Module["_crypto_pwhash_argon2id_bytes_min"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_bytes_min"].apply(null, arguments) };
var _crypto_box_seedbytes = Module["_crypto_box_seedbytes"] = function() {  return Module["asm"]["_crypto_box_seedbytes"].apply(null, arguments) };
var _crypto_generichash_blake2b_bytes_min = Module["_crypto_generichash_blake2b_bytes_min"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_bytes_min"].apply(null, arguments) };
var _crypto_hash = Module["_crypto_hash"] = function() {  return Module["asm"]["_crypto_hash"].apply(null, arguments) };
var _crypto_generichash_blake2b_statebytes = Module["_crypto_generichash_blake2b_statebytes"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_statebytes"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_beforenm = Module["_crypto_box_curve25519xsalsa20poly1305_beforenm"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_beforenm"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_headerbytes = Module["_crypto_secretstream_xchacha20poly1305_headerbytes"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_headerbytes"].apply(null, arguments) };
var _crypto_sign_ed25519ph_final_create = Module["_crypto_sign_ed25519ph_final_create"] = function() {  return Module["asm"]["_crypto_sign_ed25519ph_final_create"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_ietf_decrypt_detached = Module["_crypto_aead_chacha20poly1305_ietf_decrypt_detached"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_ietf_decrypt_detached"].apply(null, arguments) };
var _crypto_generichash_final = Module["_crypto_generichash_final"] = function() {  return Module["asm"]["_crypto_generichash_final"].apply(null, arguments) };
var _crypto_auth_hmacsha512_update = Module["_crypto_auth_hmacsha512_update"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512_update"].apply(null, arguments) };
var _crypto_auth_hmacsha256 = Module["_crypto_auth_hmacsha256"] = function() {  return Module["asm"]["_crypto_auth_hmacsha256"].apply(null, arguments) };
var _crypto_box_keypair = Module["_crypto_box_keypair"] = function() {  return Module["asm"]["_crypto_box_keypair"].apply(null, arguments) };
var _crypto_hash_sha256_bytes = Module["_crypto_hash_sha256_bytes"] = function() {  return Module["asm"]["_crypto_hash_sha256_bytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_passwd_max = Module["_crypto_pwhash_argon2i_passwd_max"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_passwd_max"].apply(null, arguments) };
var _sodium_init = Module["_sodium_init"] = function() {  return Module["asm"]["_sodium_init"].apply(null, arguments) };
var _crypto_secretbox_macbytes = Module["_crypto_secretbox_macbytes"] = function() {  return Module["asm"]["_crypto_secretbox_macbytes"].apply(null, arguments) };
var _crypto_aead_xchacha20poly1305_ietf_npubbytes = Module["_crypto_aead_xchacha20poly1305_ietf_npubbytes"] = function() {  return Module["asm"]["_crypto_aead_xchacha20poly1305_ietf_npubbytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_opslimit_min = Module["_crypto_pwhash_argon2i_opslimit_min"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_opslimit_min"].apply(null, arguments) };
var setTempRet0 = Module["setTempRet0"] = function() {  return Module["asm"]["setTempRet0"].apply(null, arguments) };
var _crypto_shorthash_siphash24_keybytes = Module["_crypto_shorthash_siphash24_keybytes"] = function() {  return Module["asm"]["_crypto_shorthash_siphash24_keybytes"].apply(null, arguments) };
var _crypto_core_hchacha20_inputbytes = Module["_crypto_core_hchacha20_inputbytes"] = function() {  return Module["asm"]["_crypto_core_hchacha20_inputbytes"].apply(null, arguments) };
var _crypto_core_salsa2012_constbytes = Module["_crypto_core_salsa2012_constbytes"] = function() {  return Module["asm"]["_crypto_core_salsa2012_constbytes"].apply(null, arguments) };
var _crypto_kx_seed_keypair = Module["_crypto_kx_seed_keypair"] = function() {  return Module["asm"]["_crypto_kx_seed_keypair"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_detached_afternm = Module["_crypto_box_curve25519xchacha20poly1305_detached_afternm"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_detached_afternm"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305 = Module["_crypto_box_curve25519xsalsa20poly1305"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_nsecbytes = Module["_crypto_aead_chacha20poly1305_nsecbytes"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_nsecbytes"].apply(null, arguments) };
var _sodium_library_minimal = Module["_sodium_library_minimal"] = function() {  return Module["asm"]["_sodium_library_minimal"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_keybytes = Module["_crypto_secretstream_xchacha20poly1305_keybytes"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_keybytes"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_pull = Module["_crypto_secretstream_xchacha20poly1305_pull"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_pull"].apply(null, arguments) };
var _crypto_pwhash_argon2i_strbytes = Module["_crypto_pwhash_argon2i_strbytes"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_strbytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_memlimit_max = Module["_crypto_pwhash_argon2i_memlimit_max"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_memlimit_max"].apply(null, arguments) };
var _crypto_generichash_blake2b_salt_personal = Module["_crypto_generichash_blake2b_salt_personal"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_salt_personal"].apply(null, arguments) };
var _crypto_kdf_derive_from_key = Module["_crypto_kdf_derive_from_key"] = function() {  return Module["asm"]["_crypto_kdf_derive_from_key"].apply(null, arguments) };
var _crypto_secretbox_xsalsa20poly1305_noncebytes = Module["_crypto_secretbox_xsalsa20poly1305_noncebytes"] = function() {  return Module["asm"]["_crypto_secretbox_xsalsa20poly1305_noncebytes"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive = Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive"].apply(null, arguments) };
var _crypto_pwhash_argon2i_memlimit_interactive = Module["_crypto_pwhash_argon2i_memlimit_interactive"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_memlimit_interactive"].apply(null, arguments) };
var _crypto_pwhash_alg_argon2id13 = Module["_crypto_pwhash_alg_argon2id13"] = function() {  return Module["asm"]["_crypto_pwhash_alg_argon2id13"].apply(null, arguments) };
var _crypto_stream_keybytes = Module["_crypto_stream_keybytes"] = function() {  return Module["asm"]["_crypto_stream_keybytes"].apply(null, arguments) };
var _crypto_pwhash_memlimit_min = Module["_crypto_pwhash_memlimit_min"] = function() {  return Module["asm"]["_crypto_pwhash_memlimit_min"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_ietf_npubbytes = Module["_crypto_aead_chacha20poly1305_ietf_npubbytes"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_ietf_npubbytes"].apply(null, arguments) };
var _crypto_stream_salsa208_noncebytes = Module["_crypto_stream_salsa208_noncebytes"] = function() {  return Module["asm"]["_crypto_stream_salsa208_noncebytes"].apply(null, arguments) };
var _sodium_library_version_minor = Module["_sodium_library_version_minor"] = function() {  return Module["asm"]["_sodium_library_version_minor"].apply(null, arguments) };
var _crypto_onetimeauth_bytes = Module["_crypto_onetimeauth_bytes"] = function() {  return Module["asm"]["_crypto_onetimeauth_bytes"].apply(null, arguments) };
var _crypto_box_open = Module["_crypto_box_open"] = function() {  return Module["asm"]["_crypto_box_open"].apply(null, arguments) };
var _crypto_secretbox_xchacha20poly1305_open_easy = Module["_crypto_secretbox_xchacha20poly1305_open_easy"] = function() {  return Module["asm"]["_crypto_secretbox_xchacha20poly1305_open_easy"].apply(null, arguments) };
var _crypto_scalarmult_curve25519_base = Module["_crypto_scalarmult_curve25519_base"] = function() {  return Module["asm"]["_crypto_scalarmult_curve25519_base"].apply(null, arguments) };
var _crypto_sign_ed25519_open = Module["_crypto_sign_ed25519_open"] = function() {  return Module["asm"]["_crypto_sign_ed25519_open"].apply(null, arguments) };
var _crypto_stream_chacha20_ietf_keybytes = Module["_crypto_stream_chacha20_ietf_keybytes"] = function() {  return Module["asm"]["_crypto_stream_chacha20_ietf_keybytes"].apply(null, arguments) };
var _crypto_box_noncebytes = Module["_crypto_box_noncebytes"] = function() {  return Module["asm"]["_crypto_box_noncebytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_str_needs_rehash = Module["_crypto_pwhash_argon2i_str_needs_rehash"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_str_needs_rehash"].apply(null, arguments) };
var _crypto_core_hchacha20_outputbytes = Module["_crypto_core_hchacha20_outputbytes"] = function() {  return Module["asm"]["_crypto_core_hchacha20_outputbytes"].apply(null, arguments) };
var _crypto_stream_salsa2012_xor = Module["_crypto_stream_salsa2012_xor"] = function() {  return Module["asm"]["_crypto_stream_salsa2012_xor"].apply(null, arguments) };
var _crypto_onetimeauth_keygen = Module["_crypto_onetimeauth_keygen"] = function() {  return Module["asm"]["_crypto_onetimeauth_keygen"].apply(null, arguments) };
var _crypto_pwhash_strbytes = Module["_crypto_pwhash_strbytes"] = function() {  return Module["asm"]["_crypto_pwhash_strbytes"].apply(null, arguments) };
var _crypto_auth_hmacsha512256_update = Module["_crypto_auth_hmacsha512256_update"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512256_update"].apply(null, arguments) };
var _crypto_core_salsa208_outputbytes = Module["_crypto_core_salsa208_outputbytes"] = function() {  return Module["asm"]["_crypto_core_salsa208_outputbytes"].apply(null, arguments) };
var _crypto_onetimeauth_poly1305 = Module["_crypto_onetimeauth_poly1305"] = function() {  return Module["asm"]["_crypto_onetimeauth_poly1305"].apply(null, arguments) };
var _crypto_secretbox_xchacha20poly1305_macbytes = Module["_crypto_secretbox_xchacha20poly1305_macbytes"] = function() {  return Module["asm"]["_crypto_secretbox_xchacha20poly1305_macbytes"].apply(null, arguments) };
var _crypto_kdf_bytes_min = Module["_crypto_kdf_bytes_min"] = function() {  return Module["asm"]["_crypto_kdf_bytes_min"].apply(null, arguments) };
var _crypto_sign_ed25519_sk_to_seed = Module["_crypto_sign_ed25519_sk_to_seed"] = function() {  return Module["asm"]["_crypto_sign_ed25519_sk_to_seed"].apply(null, arguments) };
var stackAlloc = Module["stackAlloc"] = function() {  return Module["asm"]["stackAlloc"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive = Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive"].apply(null, arguments) };
var _crypto_stream_xsalsa20 = Module["_crypto_stream_xsalsa20"] = function() {  return Module["asm"]["_crypto_stream_xsalsa20"].apply(null, arguments) };
var _crypto_box_open_easy_afternm = Module["_crypto_box_open_easy_afternm"] = function() {  return Module["asm"]["_crypto_box_open_easy_afternm"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_seedbytes = Module["_crypto_box_curve25519xsalsa20poly1305_seedbytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_seedbytes"].apply(null, arguments) };
var _crypto_stream_salsa20_keybytes = Module["_crypto_stream_salsa20_keybytes"] = function() {  return Module["asm"]["_crypto_stream_salsa20_keybytes"].apply(null, arguments) };
var _crypto_kdf_primitive = Module["_crypto_kdf_primitive"] = function() {  return Module["asm"]["_crypto_kdf_primitive"].apply(null, arguments) };
var _crypto_sign_ed25519ph_final_verify = Module["_crypto_sign_ed25519ph_final_verify"] = function() {  return Module["asm"]["_crypto_sign_ed25519ph_final_verify"].apply(null, arguments) };
var _crypto_sign_ed25519_publickeybytes = Module["_crypto_sign_ed25519_publickeybytes"] = function() {  return Module["asm"]["_crypto_sign_ed25519_publickeybytes"].apply(null, arguments) };
var _crypto_shorthash = Module["_crypto_shorthash"] = function() {  return Module["asm"]["_crypto_shorthash"].apply(null, arguments) };
var _crypto_auth_keybytes = Module["_crypto_auth_keybytes"] = function() {  return Module["asm"]["_crypto_auth_keybytes"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_open_afternm = Module["_crypto_box_curve25519xsalsa20poly1305_open_afternm"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_open_afternm"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_npubbytes = Module["_crypto_aead_chacha20poly1305_npubbytes"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_npubbytes"].apply(null, arguments) };
var _crypto_aead_xchacha20poly1305_ietf_abytes = Module["_crypto_aead_xchacha20poly1305_ietf_abytes"] = function() {  return Module["asm"]["_crypto_aead_xchacha20poly1305_ietf_abytes"].apply(null, arguments) };
var _crypto_onetimeauth_poly1305_final = Module["_crypto_onetimeauth_poly1305_final"] = function() {  return Module["asm"]["_crypto_onetimeauth_poly1305_final"].apply(null, arguments) };
var _crypto_onetimeauth_poly1305_bytes = Module["_crypto_onetimeauth_poly1305_bytes"] = function() {  return Module["asm"]["_crypto_onetimeauth_poly1305_bytes"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_seed_keypair = Module["_crypto_box_curve25519xsalsa20poly1305_seed_keypair"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_seed_keypair"].apply(null, arguments) };
var _crypto_box_primitive = Module["_crypto_box_primitive"] = function() {  return Module["asm"]["_crypto_box_primitive"].apply(null, arguments) };
var _crypto_pwhash_str = Module["_crypto_pwhash_str"] = function() {  return Module["asm"]["_crypto_pwhash_str"].apply(null, arguments) };
var _crypto_auth_hmacsha512_keybytes = Module["_crypto_auth_hmacsha512_keybytes"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512_keybytes"].apply(null, arguments) };
var _crypto_auth = Module["_crypto_auth"] = function() {  return Module["asm"]["_crypto_auth"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_bytes_min = Module["_crypto_pwhash_scryptsalsa208sha256_bytes_min"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_bytes_min"].apply(null, arguments) };
var _crypto_core_salsa20_keybytes = Module["_crypto_core_salsa20_keybytes"] = function() {  return Module["asm"]["_crypto_core_salsa20_keybytes"].apply(null, arguments) };
var _crypto_box_afternm = Module["_crypto_box_afternm"] = function() {  return Module["asm"]["_crypto_box_afternm"].apply(null, arguments) };
var _crypto_core_salsa208_constbytes = Module["_crypto_core_salsa208_constbytes"] = function() {  return Module["asm"]["_crypto_core_salsa208_constbytes"].apply(null, arguments) };
var _crypto_pwhash_argon2id_memlimit_sensitive = Module["_crypto_pwhash_argon2id_memlimit_sensitive"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_memlimit_sensitive"].apply(null, arguments) };
var _crypto_onetimeauth_primitive = Module["_crypto_onetimeauth_primitive"] = function() {  return Module["asm"]["_crypto_onetimeauth_primitive"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_str_verify = Module["_crypto_pwhash_scryptsalsa208sha256_str_verify"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_str_verify"].apply(null, arguments) };
var _sodium_version_string = Module["_sodium_version_string"] = function() {  return Module["asm"]["_sodium_version_string"].apply(null, arguments) };
var _crypto_stream_xchacha20_xor_ic = Module["_crypto_stream_xchacha20_xor_ic"] = function() {  return Module["asm"]["_crypto_stream_xchacha20_xor_ic"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_passwd_min = Module["_crypto_pwhash_scryptsalsa208sha256_passwd_min"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_passwd_min"].apply(null, arguments) };
var _crypto_stream_chacha20_ietf = Module["_crypto_stream_chacha20_ietf"] = function() {  return Module["asm"]["_crypto_stream_chacha20_ietf"].apply(null, arguments) };
var _crypto_generichash = Module["_crypto_generichash"] = function() {  return Module["asm"]["_crypto_generichash"].apply(null, arguments) };
var _crypto_core_hsalsa20_outputbytes = Module["_crypto_core_hsalsa20_outputbytes"] = function() {  return Module["asm"]["_crypto_core_hsalsa20_outputbytes"].apply(null, arguments) };
var _crypto_pwhash_opslimit_interactive = Module["_crypto_pwhash_opslimit_interactive"] = function() {  return Module["asm"]["_crypto_pwhash_opslimit_interactive"].apply(null, arguments) };
var getTempRet0 = Module["getTempRet0"] = function() {  return Module["asm"]["getTempRet0"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_noncebytes = Module["_crypto_box_curve25519xsalsa20poly1305_noncebytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_noncebytes"].apply(null, arguments) };
var _crypto_stream_salsa2012_noncebytes = Module["_crypto_stream_salsa2012_noncebytes"] = function() {  return Module["asm"]["_crypto_stream_salsa2012_noncebytes"].apply(null, arguments) };
var _crypto_core_salsa208_keybytes = Module["_crypto_core_salsa208_keybytes"] = function() {  return Module["asm"]["_crypto_core_salsa208_keybytes"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_tag_final = Module["_crypto_secretstream_xchacha20poly1305_tag_final"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_tag_final"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_ietf_keybytes = Module["_crypto_aead_chacha20poly1305_ietf_keybytes"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_ietf_keybytes"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_ietf_decrypt = Module["_crypto_aead_chacha20poly1305_ietf_decrypt"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_ietf_decrypt"].apply(null, arguments) };
var _crypto_auth_hmacsha512256_init = Module["_crypto_auth_hmacsha512256_init"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512256_init"].apply(null, arguments) };
var _crypto_kx_server_session_keys = Module["_crypto_kx_server_session_keys"] = function() {  return Module["asm"]["_crypto_kx_server_session_keys"].apply(null, arguments) };
var _crypto_onetimeauth_poly1305_verify = Module["_crypto_onetimeauth_poly1305_verify"] = function() {  return Module["asm"]["_crypto_onetimeauth_poly1305_verify"].apply(null, arguments) };
var _crypto_auth_hmacsha512_final = Module["_crypto_auth_hmacsha512_final"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512_final"].apply(null, arguments) };
var _crypto_auth_hmacsha512256_verify = Module["_crypto_auth_hmacsha512256_verify"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512256_verify"].apply(null, arguments) };
var _crypto_box_secretkeybytes = Module["_crypto_box_secretkeybytes"] = function() {  return Module["asm"]["_crypto_box_secretkeybytes"].apply(null, arguments) };
var _crypto_stream_salsa2012_keygen = Module["_crypto_stream_salsa2012_keygen"] = function() {  return Module["asm"]["_crypto_stream_salsa2012_keygen"].apply(null, arguments) };
var _crypto_onetimeauth_update = Module["_crypto_onetimeauth_update"] = function() {  return Module["asm"]["_crypto_onetimeauth_update"].apply(null, arguments) };
var _crypto_core_salsa20 = Module["_crypto_core_salsa20"] = function() {  return Module["asm"]["_crypto_core_salsa20"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_abytes = Module["_crypto_secretstream_xchacha20poly1305_abytes"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_abytes"].apply(null, arguments) };
var _crypto_pwhash_memlimit_interactive = Module["_crypto_pwhash_memlimit_interactive"] = function() {  return Module["asm"]["_crypto_pwhash_memlimit_interactive"].apply(null, arguments) };
var _crypto_scalarmult_bytes = Module["_crypto_scalarmult_bytes"] = function() {  return Module["asm"]["_crypto_scalarmult_bytes"].apply(null, arguments) };
var _crypto_secretbox_zerobytes = Module["_crypto_secretbox_zerobytes"] = function() {  return Module["asm"]["_crypto_secretbox_zerobytes"].apply(null, arguments) };
var _crypto_pwhash_argon2id_memlimit_moderate = Module["_crypto_pwhash_argon2id_memlimit_moderate"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_memlimit_moderate"].apply(null, arguments) };
var _crypto_secretbox_detached = Module["_crypto_secretbox_detached"] = function() {  return Module["asm"]["_crypto_secretbox_detached"].apply(null, arguments) };
var _crypto_stream_xor = Module["_crypto_stream_xor"] = function() {  return Module["asm"]["_crypto_stream_xor"].apply(null, arguments) };
var _crypto_secretbox_xchacha20poly1305_easy = Module["_crypto_secretbox_xchacha20poly1305_easy"] = function() {  return Module["asm"]["_crypto_secretbox_xchacha20poly1305_easy"].apply(null, arguments) };
var _crypto_secretbox_easy = Module["_crypto_secretbox_easy"] = function() {  return Module["asm"]["_crypto_secretbox_easy"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_init_pull = Module["_crypto_secretstream_xchacha20poly1305_init_pull"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_init_pull"].apply(null, arguments) };
var _crypto_aead_xchacha20poly1305_ietf_decrypt_detached = Module["_crypto_aead_xchacha20poly1305_ietf_decrypt_detached"] = function() {  return Module["asm"]["_crypto_aead_xchacha20poly1305_ietf_decrypt_detached"].apply(null, arguments) };
var _crypto_stream_salsa20 = Module["_crypto_stream_salsa20"] = function() {  return Module["asm"]["_crypto_stream_salsa20"].apply(null, arguments) };
var _sodium_base642bin = Module["_sodium_base642bin"] = function() {  return Module["asm"]["_sodium_base642bin"].apply(null, arguments) };
var _sodium_bin2hex = Module["_sodium_bin2hex"] = function() {  return Module["asm"]["_sodium_bin2hex"].apply(null, arguments) };
var _crypto_auth_hmacsha512_statebytes = Module["_crypto_auth_hmacsha512_statebytes"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512_statebytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i_opslimit_sensitive = Module["_crypto_pwhash_argon2i_opslimit_sensitive"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_opslimit_sensitive"].apply(null, arguments) };
var _crypto_generichash_blake2b_bytes_max = Module["_crypto_generichash_blake2b_bytes_max"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_bytes_max"].apply(null, arguments) };
var _crypto_hash_sha256_update = Module["_crypto_hash_sha256_update"] = function() {  return Module["asm"]["_crypto_hash_sha256_update"].apply(null, arguments) };
var _crypto_core_hsalsa20_constbytes = Module["_crypto_core_hsalsa20_constbytes"] = function() {  return Module["asm"]["_crypto_core_hsalsa20_constbytes"].apply(null, arguments) };
var _crypto_box_easy_afternm = Module["_crypto_box_easy_afternm"] = function() {  return Module["asm"]["_crypto_box_easy_afternm"].apply(null, arguments) };
var _crypto_pwhash_memlimit_moderate = Module["_crypto_pwhash_memlimit_moderate"] = function() {  return Module["asm"]["_crypto_pwhash_memlimit_moderate"].apply(null, arguments) };
var _crypto_core_salsa20_inputbytes = Module["_crypto_core_salsa20_inputbytes"] = function() {  return Module["asm"]["_crypto_core_salsa20_inputbytes"].apply(null, arguments) };
var _crypto_box_publickeybytes = Module["_crypto_box_publickeybytes"] = function() {  return Module["asm"]["_crypto_box_publickeybytes"].apply(null, arguments) };
var _crypto_sign_secretkeybytes = Module["_crypto_sign_secretkeybytes"] = function() {  return Module["asm"]["_crypto_sign_secretkeybytes"].apply(null, arguments) };
var _crypto_scalarmult_scalarbytes = Module["_crypto_scalarmult_scalarbytes"] = function() {  return Module["asm"]["_crypto_scalarmult_scalarbytes"].apply(null, arguments) };
var _crypto_verify_32 = Module["_crypto_verify_32"] = function() {  return Module["asm"]["_crypto_verify_32"].apply(null, arguments) };
var _crypto_kx_sessionkeybytes = Module["_crypto_kx_sessionkeybytes"] = function() {  return Module["asm"]["_crypto_kx_sessionkeybytes"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_decrypt = Module["_crypto_aead_chacha20poly1305_decrypt"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_decrypt"].apply(null, arguments) };
var _crypto_pwhash_argon2id_opslimit_moderate = Module["_crypto_pwhash_argon2id_opslimit_moderate"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_opslimit_moderate"].apply(null, arguments) };
var _crypto_pwhash_argon2id_opslimit_min = Module["_crypto_pwhash_argon2id_opslimit_min"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_opslimit_min"].apply(null, arguments) };
var _crypto_sign = Module["_crypto_sign"] = function() {  return Module["asm"]["_crypto_sign"].apply(null, arguments) };
var _crypto_pwhash_argon2id_memlimit_min = Module["_crypto_pwhash_argon2id_memlimit_min"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_memlimit_min"].apply(null, arguments) };
var _crypto_pwhash_passwd_max = Module["_crypto_pwhash_passwd_max"] = function() {  return Module["asm"]["_crypto_pwhash_passwd_max"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_opslimit_min = Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_min"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_opslimit_min"].apply(null, arguments) };
var _sodium_hex2bin = Module["_sodium_hex2bin"] = function() {  return Module["asm"]["_sodium_hex2bin"].apply(null, arguments) };
var _crypto_pwhash_argon2i_alg_argon2i13 = Module["_crypto_pwhash_argon2i_alg_argon2i13"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_alg_argon2i13"].apply(null, arguments) };
var _crypto_secretbox_keybytes = Module["_crypto_secretbox_keybytes"] = function() {  return Module["asm"]["_crypto_secretbox_keybytes"].apply(null, arguments) };
var _crypto_pwhash_argon2id_alg_argon2id13 = Module["_crypto_pwhash_argon2id_alg_argon2id13"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_alg_argon2id13"].apply(null, arguments) };
var _randombytes = Module["_randombytes"] = function() {  return Module["asm"]["_randombytes"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_ietf_abytes = Module["_crypto_aead_chacha20poly1305_ietf_abytes"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_ietf_abytes"].apply(null, arguments) };
var _crypto_stream_salsa20_keygen = Module["_crypto_stream_salsa20_keygen"] = function() {  return Module["asm"]["_crypto_stream_salsa20_keygen"].apply(null, arguments) };
var _crypto_pwhash_str_needs_rehash = Module["_crypto_pwhash_str_needs_rehash"] = function() {  return Module["asm"]["_crypto_pwhash_str_needs_rehash"].apply(null, arguments) };
var _crypto_generichash_bytes_max = Module["_crypto_generichash_bytes_max"] = function() {  return Module["asm"]["_crypto_generichash_bytes_max"].apply(null, arguments) };
var _crypto_pwhash_argon2i_passwd_min = Module["_crypto_pwhash_argon2i_passwd_min"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_passwd_min"].apply(null, arguments) };
var _crypto_pwhash_opslimit_sensitive = Module["_crypto_pwhash_opslimit_sensitive"] = function() {  return Module["asm"]["_crypto_pwhash_opslimit_sensitive"].apply(null, arguments) };
var _crypto_sign_init = Module["_crypto_sign_init"] = function() {  return Module["asm"]["_crypto_sign_init"].apply(null, arguments) };
var _crypto_generichash_blake2b_personalbytes = Module["_crypto_generichash_blake2b_personalbytes"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_personalbytes"].apply(null, arguments) };
var _crypto_stream_chacha20_xor_ic = Module["_crypto_stream_chacha20_xor_ic"] = function() {  return Module["asm"]["_crypto_stream_chacha20_xor_ic"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_seedbytes = Module["_crypto_box_curve25519xchacha20poly1305_seedbytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_seedbytes"].apply(null, arguments) };
var _crypto_onetimeauth_verify = Module["_crypto_onetimeauth_verify"] = function() {  return Module["asm"]["_crypto_onetimeauth_verify"].apply(null, arguments) };
var _crypto_sign_ed25519_detached = Module["_crypto_sign_ed25519_detached"] = function() {  return Module["asm"]["_crypto_sign_ed25519_detached"].apply(null, arguments) };
var _crypto_generichash_init = Module["_crypto_generichash_init"] = function() {  return Module["asm"]["_crypto_generichash_init"].apply(null, arguments) };
var _crypto_sign_bytes = Module["_crypto_sign_bytes"] = function() {  return Module["asm"]["_crypto_sign_bytes"].apply(null, arguments) };
var _crypto_generichash_update = Module["_crypto_generichash_update"] = function() {  return Module["asm"]["_crypto_generichash_update"].apply(null, arguments) };
var _crypto_scalarmult = Module["_crypto_scalarmult"] = function() {  return Module["asm"]["_crypto_scalarmult"].apply(null, arguments) };
var _crypto_sign_detached = Module["_crypto_sign_detached"] = function() {  return Module["asm"]["_crypto_sign_detached"].apply(null, arguments) };
var _crypto_generichash_blake2b_update = Module["_crypto_generichash_blake2b_update"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_update"].apply(null, arguments) };
var _sodium_base64_encoded_len = Module["_sodium_base64_encoded_len"] = function() {  return Module["asm"]["_sodium_base64_encoded_len"].apply(null, arguments) };
var _crypto_generichash_blake2b_bytes = Module["_crypto_generichash_blake2b_bytes"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_bytes"].apply(null, arguments) };
var _crypto_auth_hmacsha512256_bytes = Module["_crypto_auth_hmacsha512256_bytes"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512256_bytes"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_noncebytes = Module["_crypto_box_curve25519xchacha20poly1305_noncebytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_noncebytes"].apply(null, arguments) };
var _randombytes_uniform = Module["_randombytes_uniform"] = function() {  return Module["asm"]["_randombytes_uniform"].apply(null, arguments) };
var _crypto_sign_seed_keypair = Module["_crypto_sign_seed_keypair"] = function() {  return Module["asm"]["_crypto_sign_seed_keypair"].apply(null, arguments) };
var _crypto_shorthash_keygen = Module["_crypto_shorthash_keygen"] = function() {  return Module["asm"]["_crypto_shorthash_keygen"].apply(null, arguments) };
var _crypto_onetimeauth_init = Module["_crypto_onetimeauth_init"] = function() {  return Module["asm"]["_crypto_onetimeauth_init"].apply(null, arguments) };
var _crypto_sign_ed25519_seed_keypair = Module["_crypto_sign_ed25519_seed_keypair"] = function() {  return Module["asm"]["_crypto_sign_ed25519_seed_keypair"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_init_push = Module["_crypto_secretstream_xchacha20poly1305_init_push"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_init_push"].apply(null, arguments) };
var _crypto_stream_salsa20_xor = Module["_crypto_stream_salsa20_xor"] = function() {  return Module["asm"]["_crypto_stream_salsa20_xor"].apply(null, arguments) };
var _crypto_auth_hmacsha512_verify = Module["_crypto_auth_hmacsha512_verify"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512_verify"].apply(null, arguments) };
var _crypto_generichash_blake2b_keybytes_min = Module["_crypto_generichash_blake2b_keybytes_min"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_keybytes_min"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_statebytes = Module["_crypto_secretstream_xchacha20poly1305_statebytes"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_statebytes"].apply(null, arguments) };
var _crypto_kx_publickeybytes = Module["_crypto_kx_publickeybytes"] = function() {  return Module["asm"]["_crypto_kx_publickeybytes"].apply(null, arguments) };
var _crypto_pwhash_bytes_max = Module["_crypto_pwhash_bytes_max"] = function() {  return Module["asm"]["_crypto_pwhash_bytes_max"].apply(null, arguments) };
var _crypto_pwhash_argon2id_str_needs_rehash = Module["_crypto_pwhash_argon2id_str_needs_rehash"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_str_needs_rehash"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_ietf_encrypt_detached = Module["_crypto_aead_chacha20poly1305_ietf_encrypt_detached"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_ietf_encrypt_detached"].apply(null, arguments) };
var _sodium_pad = Module["_sodium_pad"] = function() {  return Module["asm"]["_sodium_pad"].apply(null, arguments) };
var _crypto_stream = Module["_crypto_stream"] = function() {  return Module["asm"]["_crypto_stream"].apply(null, arguments) };
var _sbrk = Module["_sbrk"] = function() {  return Module["asm"]["_sbrk"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_beforenm = Module["_crypto_box_curve25519xchacha20poly1305_beforenm"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_beforenm"].apply(null, arguments) };
var _memcpy = Module["_memcpy"] = function() {  return Module["asm"]["_memcpy"].apply(null, arguments) };
var _crypto_pwhash = Module["_crypto_pwhash"] = function() {  return Module["asm"]["_crypto_pwhash"].apply(null, arguments) };
var _crypto_auth_hmacsha512256 = Module["_crypto_auth_hmacsha512256"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512256"].apply(null, arguments) };
var _crypto_secretbox_xsalsa20poly1305 = Module["_crypto_secretbox_xsalsa20poly1305"] = function() {  return Module["asm"]["_crypto_secretbox_xsalsa20poly1305"].apply(null, arguments) };
var _crypto_verify_16_bytes = Module["_crypto_verify_16_bytes"] = function() {  return Module["asm"]["_crypto_verify_16_bytes"].apply(null, arguments) };
var _crypto_stream_salsa208_keygen = Module["_crypto_stream_salsa208_keygen"] = function() {  return Module["asm"]["_crypto_stream_salsa208_keygen"].apply(null, arguments) };
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = function() {  return Module["asm"]["_emscripten_get_global_libc"].apply(null, arguments) };
var _crypto_shorthash_siphashx24_bytes = Module["_crypto_shorthash_siphashx24_bytes"] = function() {  return Module["asm"]["_crypto_shorthash_siphashx24_bytes"].apply(null, arguments) };
var _crypto_generichash_blake2b_final = Module["_crypto_generichash_blake2b_final"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_final"].apply(null, arguments) };
var _crypto_generichash_blake2b_init_salt_personal = Module["_crypto_generichash_blake2b_init_salt_personal"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_init_salt_personal"].apply(null, arguments) };
var _crypto_box_seal = Module["_crypto_box_seal"] = function() {  return Module["asm"]["_crypto_box_seal"].apply(null, arguments) };
var _crypto_aead_xchacha20poly1305_ietf_keygen = Module["_crypto_aead_xchacha20poly1305_ietf_keygen"] = function() {  return Module["asm"]["_crypto_aead_xchacha20poly1305_ietf_keygen"].apply(null, arguments) };
var _crypto_kx_keypair = Module["_crypto_kx_keypair"] = function() {  return Module["asm"]["_crypto_kx_keypair"].apply(null, arguments) };
var runPostSets = Module["runPostSets"] = function() {  return Module["asm"]["runPostSets"].apply(null, arguments) };
var _crypto_pwhash_alg_default = Module["_crypto_pwhash_alg_default"] = function() {  return Module["asm"]["_crypto_pwhash_alg_default"].apply(null, arguments) };
var _crypto_box = Module["_crypto_box"] = function() {  return Module["asm"]["_crypto_box"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_tag_rekey = Module["_crypto_secretstream_xchacha20poly1305_tag_rekey"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_tag_rekey"].apply(null, arguments) };
var _crypto_stream_primitive = Module["_crypto_stream_primitive"] = function() {  return Module["asm"]["_crypto_stream_primitive"].apply(null, arguments) };
var _crypto_secretbox_xsalsa20poly1305_boxzerobytes = Module["_crypto_secretbox_xsalsa20poly1305_boxzerobytes"] = function() {  return Module["asm"]["_crypto_secretbox_xsalsa20poly1305_boxzerobytes"].apply(null, arguments) };
var _crypto_pwhash_str_verify = Module["_crypto_pwhash_str_verify"] = function() {  return Module["asm"]["_crypto_pwhash_str_verify"].apply(null, arguments) };
var _crypto_generichash_keybytes_min = Module["_crypto_generichash_keybytes_min"] = function() {  return Module["asm"]["_crypto_generichash_keybytes_min"].apply(null, arguments) };
var _crypto_generichash_statebytes = Module["_crypto_generichash_statebytes"] = function() {  return Module["asm"]["_crypto_generichash_statebytes"].apply(null, arguments) };
var _crypto_onetimeauth_poly1305_statebytes = Module["_crypto_onetimeauth_poly1305_statebytes"] = function() {  return Module["asm"]["_crypto_onetimeauth_poly1305_statebytes"].apply(null, arguments) };
var _crypto_sign_final_verify = Module["_crypto_sign_final_verify"] = function() {  return Module["asm"]["_crypto_sign_final_verify"].apply(null, arguments) };
var _crypto_pwhash_strprefix = Module["_crypto_pwhash_strprefix"] = function() {  return Module["asm"]["_crypto_pwhash_strprefix"].apply(null, arguments) };
var _crypto_secretbox_keygen = Module["_crypto_secretbox_keygen"] = function() {  return Module["asm"]["_crypto_secretbox_keygen"].apply(null, arguments) };
var _crypto_secretbox_xchacha20poly1305_noncebytes = Module["_crypto_secretbox_xchacha20poly1305_noncebytes"] = function() {  return Module["asm"]["_crypto_secretbox_xchacha20poly1305_noncebytes"].apply(null, arguments) };
var _crypto_hash_sha512 = Module["_crypto_hash_sha512"] = function() {  return Module["asm"]["_crypto_hash_sha512"].apply(null, arguments) };
var _crypto_shorthash_siphash24_bytes = Module["_crypto_shorthash_siphash24_bytes"] = function() {  return Module["asm"]["_crypto_shorthash_siphash24_bytes"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_push = Module["_crypto_secretstream_xchacha20poly1305_push"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_push"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_bytes_max = Module["_crypto_pwhash_scryptsalsa208sha256_bytes_max"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_bytes_max"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_detached = Module["_crypto_box_curve25519xchacha20poly1305_detached"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_detached"].apply(null, arguments) };
var _sodium_library_version_major = Module["_sodium_library_version_major"] = function() {  return Module["asm"]["_sodium_library_version_major"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_ietf_encrypt = Module["_crypto_aead_chacha20poly1305_ietf_encrypt"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_ietf_encrypt"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_tag_push = Module["_crypto_secretstream_xchacha20poly1305_tag_push"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_tag_push"].apply(null, arguments) };
var _crypto_secretbox_xchacha20poly1305_detached = Module["_crypto_secretbox_xchacha20poly1305_detached"] = function() {  return Module["asm"]["_crypto_secretbox_xchacha20poly1305_detached"].apply(null, arguments) };
var _crypto_generichash_blake2b_init = Module["_crypto_generichash_blake2b_init"] = function() {  return Module["asm"]["_crypto_generichash_blake2b_init"].apply(null, arguments) };
var _randombytes_close = Module["_randombytes_close"] = function() {  return Module["asm"]["_randombytes_close"].apply(null, arguments) };
var _crypto_pwhash_primitive = Module["_crypto_pwhash_primitive"] = function() {  return Module["asm"]["_crypto_pwhash_primitive"].apply(null, arguments) };
var _crypto_onetimeauth_keybytes = Module["_crypto_onetimeauth_keybytes"] = function() {  return Module["asm"]["_crypto_onetimeauth_keybytes"].apply(null, arguments) };
var _crypto_pwhash_argon2i = Module["_crypto_pwhash_argon2i"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i"].apply(null, arguments) };
var _crypto_pwhash_argon2id_strbytes = Module["_crypto_pwhash_argon2id_strbytes"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_strbytes"].apply(null, arguments) };
var _crypto_pwhash_argon2id_opslimit_max = Module["_crypto_pwhash_argon2id_opslimit_max"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_opslimit_max"].apply(null, arguments) };
var _crypto_kdf_keybytes = Module["_crypto_kdf_keybytes"] = function() {  return Module["asm"]["_crypto_kdf_keybytes"].apply(null, arguments) };
var establishStackSpace = Module["establishStackSpace"] = function() {  return Module["asm"]["establishStackSpace"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_encrypt = Module["_crypto_aead_chacha20poly1305_encrypt"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_encrypt"].apply(null, arguments) };
var _crypto_core_salsa2012_inputbytes = Module["_crypto_core_salsa2012_inputbytes"] = function() {  return Module["asm"]["_crypto_core_salsa2012_inputbytes"].apply(null, arguments) };
var _crypto_secretstream_xchacha20poly1305_messagebytes_max = Module["_crypto_secretstream_xchacha20poly1305_messagebytes_max"] = function() {  return Module["asm"]["_crypto_secretstream_xchacha20poly1305_messagebytes_max"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_memlimit_min = Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_min"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_memlimit_min"].apply(null, arguments) };
var _crypto_core_salsa208 = Module["_crypto_core_salsa208"] = function() {  return Module["asm"]["_crypto_core_salsa208"].apply(null, arguments) };
var _crypto_pwhash_opslimit_max = Module["_crypto_pwhash_opslimit_max"] = function() {  return Module["asm"]["_crypto_pwhash_opslimit_max"].apply(null, arguments) };
var _crypto_aead_xchacha20poly1305_ietf_nsecbytes = Module["_crypto_aead_xchacha20poly1305_ietf_nsecbytes"] = function() {  return Module["asm"]["_crypto_aead_xchacha20poly1305_ietf_nsecbytes"].apply(null, arguments) };
var _crypto_auth_verify = Module["_crypto_auth_verify"] = function() {  return Module["asm"]["_crypto_auth_verify"].apply(null, arguments) };
var _crypto_generichash_bytes = Module["_crypto_generichash_bytes"] = function() {  return Module["asm"]["_crypto_generichash_bytes"].apply(null, arguments) };
var _crypto_auth_hmacsha512256_keygen = Module["_crypto_auth_hmacsha512256_keygen"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512256_keygen"].apply(null, arguments) };
var _randombytes_stir = Module["_randombytes_stir"] = function() {  return Module["asm"]["_randombytes_stir"].apply(null, arguments) };
var _memset = Module["_memset"] = function() {  return Module["asm"]["_memset"].apply(null, arguments) };
var _crypto_box_open_detached_afternm = Module["_crypto_box_open_detached_afternm"] = function() {  return Module["asm"]["_crypto_box_open_detached_afternm"].apply(null, arguments) };
var _crypto_pwhash_argon2i_memlimit_sensitive = Module["_crypto_pwhash_argon2i_memlimit_sensitive"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_memlimit_sensitive"].apply(null, arguments) };
var _crypto_kx_primitive = Module["_crypto_kx_primitive"] = function() {  return Module["asm"]["_crypto_kx_primitive"].apply(null, arguments) };
var _crypto_stream_salsa2012_keybytes = Module["_crypto_stream_salsa2012_keybytes"] = function() {  return Module["asm"]["_crypto_stream_salsa2012_keybytes"].apply(null, arguments) };
var _crypto_aead_xchacha20poly1305_ietf_decrypt = Module["_crypto_aead_xchacha20poly1305_ietf_decrypt"] = function() {  return Module["asm"]["_crypto_aead_xchacha20poly1305_ietf_decrypt"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_strprefix = Module["_crypto_pwhash_scryptsalsa208sha256_strprefix"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_strprefix"].apply(null, arguments) };
var _crypto_core_salsa20_outputbytes = Module["_crypto_core_salsa20_outputbytes"] = function() {  return Module["asm"]["_crypto_core_salsa20_outputbytes"].apply(null, arguments) };
var _crypto_auth_keygen = Module["_crypto_auth_keygen"] = function() {  return Module["asm"]["_crypto_auth_keygen"].apply(null, arguments) };
var _crypto_secretbox = Module["_crypto_secretbox"] = function() {  return Module["asm"]["_crypto_secretbox"].apply(null, arguments) };
var _crypto_aead_xchacha20poly1305_ietf_encrypt_detached = Module["_crypto_aead_xchacha20poly1305_ietf_encrypt_detached"] = function() {  return Module["asm"]["_crypto_aead_xchacha20poly1305_ietf_encrypt_detached"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_passwd_max = Module["_crypto_pwhash_scryptsalsa208sha256_passwd_max"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_passwd_max"].apply(null, arguments) };
var _crypto_auth_hmacsha256_bytes = Module["_crypto_auth_hmacsha256_bytes"] = function() {  return Module["asm"]["_crypto_auth_hmacsha256_bytes"].apply(null, arguments) };
var _crypto_auth_hmacsha256_verify = Module["_crypto_auth_hmacsha256_verify"] = function() {  return Module["asm"]["_crypto_auth_hmacsha256_verify"].apply(null, arguments) };
var _crypto_sign_keypair = Module["_crypto_sign_keypair"] = function() {  return Module["asm"]["_crypto_sign_keypair"].apply(null, arguments) };
var _crypto_stream_xchacha20 = Module["_crypto_stream_xchacha20"] = function() {  return Module["asm"]["_crypto_stream_xchacha20"].apply(null, arguments) };
var _crypto_onetimeauth_statebytes = Module["_crypto_onetimeauth_statebytes"] = function() {  return Module["asm"]["_crypto_onetimeauth_statebytes"].apply(null, arguments) };
var _crypto_sign_ed25519ph_init = Module["_crypto_sign_ed25519ph_init"] = function() {  return Module["asm"]["_crypto_sign_ed25519ph_init"].apply(null, arguments) };
var _crypto_stream_salsa20_noncebytes = Module["_crypto_stream_salsa20_noncebytes"] = function() {  return Module["asm"]["_crypto_stream_salsa20_noncebytes"].apply(null, arguments) };
var _crypto_shorthash_keybytes = Module["_crypto_shorthash_keybytes"] = function() {  return Module["asm"]["_crypto_shorthash_keybytes"].apply(null, arguments) };
var _crypto_aead_chacha20poly1305_keygen = Module["_crypto_aead_chacha20poly1305_keygen"] = function() {  return Module["asm"]["_crypto_aead_chacha20poly1305_keygen"].apply(null, arguments) };
var _crypto_shorthash_siphashx24 = Module["_crypto_shorthash_siphashx24"] = function() {  return Module["asm"]["_crypto_shorthash_siphashx24"].apply(null, arguments) };
var _memmove = Module["_memmove"] = function() {  return Module["asm"]["_memmove"].apply(null, arguments) };
var _crypto_hash_sha512_final = Module["_crypto_hash_sha512_final"] = function() {  return Module["asm"]["_crypto_hash_sha512_final"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_zerobytes = Module["_crypto_box_curve25519xsalsa20poly1305_zerobytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_zerobytes"].apply(null, arguments) };
var _crypto_shorthash_siphashx24_keybytes = Module["_crypto_shorthash_siphashx24_keybytes"] = function() {  return Module["asm"]["_crypto_shorthash_siphashx24_keybytes"].apply(null, arguments) };
var _crypto_pwhash_passwd_min = Module["_crypto_pwhash_passwd_min"] = function() {  return Module["asm"]["_crypto_pwhash_passwd_min"].apply(null, arguments) };
var _crypto_kdf_bytes_max = Module["_crypto_kdf_bytes_max"] = function() {  return Module["asm"]["_crypto_kdf_bytes_max"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_boxzerobytes = Module["_crypto_box_curve25519xsalsa20poly1305_boxzerobytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_boxzerobytes"].apply(null, arguments) };
var _crypto_generichash_bytes_min = Module["_crypto_generichash_bytes_min"] = function() {  return Module["asm"]["_crypto_generichash_bytes_min"].apply(null, arguments) };
var _crypto_core_salsa2012_outputbytes = Module["_crypto_core_salsa2012_outputbytes"] = function() {  return Module["asm"]["_crypto_core_salsa2012_outputbytes"].apply(null, arguments) };
var _crypto_auth_hmacsha256_keybytes = Module["_crypto_auth_hmacsha256_keybytes"] = function() {  return Module["asm"]["_crypto_auth_hmacsha256_keybytes"].apply(null, arguments) };
var _crypto_core_salsa208_inputbytes = Module["_crypto_core_salsa208_inputbytes"] = function() {  return Module["asm"]["_crypto_core_salsa208_inputbytes"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_opslimit_max = Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_max"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_opslimit_max"].apply(null, arguments) };
var _crypto_sign_update = Module["_crypto_sign_update"] = function() {  return Module["asm"]["_crypto_sign_update"].apply(null, arguments) };
var _crypto_stream_salsa208_messagebytes_max = Module["_crypto_stream_salsa208_messagebytes_max"] = function() {  return Module["asm"]["_crypto_stream_salsa208_messagebytes_max"].apply(null, arguments) };
var _crypto_stream_chacha20_noncebytes = Module["_crypto_stream_chacha20_noncebytes"] = function() {  return Module["asm"]["_crypto_stream_chacha20_noncebytes"].apply(null, arguments) };
var _crypto_secretbox_open_detached = Module["_crypto_secretbox_open_detached"] = function() {  return Module["asm"]["_crypto_secretbox_open_detached"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_seed_keypair = Module["_crypto_box_curve25519xchacha20poly1305_seed_keypair"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_seed_keypair"].apply(null, arguments) };
var _crypto_pwhash_argon2id_memlimit_max = Module["_crypto_pwhash_argon2id_memlimit_max"] = function() {  return Module["asm"]["_crypto_pwhash_argon2id_memlimit_max"].apply(null, arguments) };
var _crypto_pwhash_argon2i_memlimit_min = Module["_crypto_pwhash_argon2i_memlimit_min"] = function() {  return Module["asm"]["_crypto_pwhash_argon2i_memlimit_min"].apply(null, arguments) };
var _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive = Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive"] = function() {  return Module["asm"]["_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive"].apply(null, arguments) };
var _crypto_box_curve25519xsalsa20poly1305_secretkeybytes = Module["_crypto_box_curve25519xsalsa20poly1305_secretkeybytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xsalsa20poly1305_secretkeybytes"].apply(null, arguments) };
var _crypto_kdf_contextbytes = Module["_crypto_kdf_contextbytes"] = function() {  return Module["asm"]["_crypto_kdf_contextbytes"].apply(null, arguments) };
var _crypto_hash_sha256_final = Module["_crypto_hash_sha256_final"] = function() {  return Module["asm"]["_crypto_hash_sha256_final"].apply(null, arguments) };
var _crypto_stream_xchacha20_keybytes = Module["_crypto_stream_xchacha20_keybytes"] = function() {  return Module["asm"]["_crypto_stream_xchacha20_keybytes"].apply(null, arguments) };
var _crypto_box_seal_open = Module["_crypto_box_seal_open"] = function() {  return Module["asm"]["_crypto_box_seal_open"].apply(null, arguments) };
var _crypto_shorthash_primitive = Module["_crypto_shorthash_primitive"] = function() {  return Module["asm"]["_crypto_shorthash_primitive"].apply(null, arguments) };
var _crypto_core_hsalsa20_inputbytes = Module["_crypto_core_hsalsa20_inputbytes"] = function() {  return Module["asm"]["_crypto_core_hsalsa20_inputbytes"].apply(null, arguments) };
var _crypto_onetimeauth_final = Module["_crypto_onetimeauth_final"] = function() {  return Module["asm"]["_crypto_onetimeauth_final"].apply(null, arguments) };
var _crypto_secretbox_open_easy = Module["_crypto_secretbox_open_easy"] = function() {  return Module["asm"]["_crypto_secretbox_open_easy"].apply(null, arguments) };
var _crypto_core_salsa2012 = Module["_crypto_core_salsa2012"] = function() {  return Module["asm"]["_crypto_core_salsa2012"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_macbytes = Module["_crypto_box_curve25519xchacha20poly1305_macbytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_macbytes"].apply(null, arguments) };
var _crypto_auth_hmacsha512256_statebytes = Module["_crypto_auth_hmacsha512256_statebytes"] = function() {  return Module["asm"]["_crypto_auth_hmacsha512256_statebytes"].apply(null, arguments) };
var _crypto_box_curve25519xchacha20poly1305_publickeybytes = Module["_crypto_box_curve25519xchacha20poly1305_publickeybytes"] = function() {  return Module["asm"]["_crypto_box_curve25519xchacha20poly1305_publickeybytes"].apply(null, arguments) };
var _crypto_stream_chacha20_xor = Module["_crypto_stream_chacha20_xor"] = function() {  return Module["asm"]["_crypto_stream_chacha20_xor"].apply(null, arguments) };
var _crypto_core_hsalsa20 = Module["_crypto_core_hsalsa20"] = function() {  return Module["asm"]["_crypto_core_hsalsa20"].apply(null, arguments) };
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];

// All functions here should be maybeExported from jsifier.js

if (typeof maybeAssert !== 'function') {
  function maybeAssert() {}
}

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      maybeAssert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


Module["intArrayFromString"] = intArrayFromString;
Module["intArrayToString"] = intArrayToString;
// All functions here should be maybeExported from jsifier.js

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

var btoa = btoa || function (input) {
  /**
   * Encodes a string in base64
   * @param {String} input The string to encode in base64.
   */
  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  do {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++);

    enc1 = chr1 >> 2;
    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
    enc4 = chr3 & 63;

    if (isNaN(chr2)) {
      enc2 = ((chr1 & 3) << 4);
      enc3 = enc4 = 64;
    } else if (isNaN(chr3)) {
      enc4 = 64;
    }
    output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
  } while (i < input.length);
  return output;
};

var atob = atob || function (input) {
  /**
   * Decodes a base64 string.
   * @param {String} input The string to decode.
   */
  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = atob(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  var dataURIPrefix = 'data:application/octet-stream;base64,';

  if (!(
    String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0
  )) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}





// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;




if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, Runtime.GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, Runtime.GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
        if (memoryInitializerBytes) {
          applyMemoryInitializer(memoryInitializerBytes.buffer);
          return;
        }
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(request.response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}
    }).catch(function () {
      var Module = _Module;
      Module.onAbort = undefined;
      Module.onRuntimeInitialized = undefined;
      // The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(f);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('Unknown runtime environment. Where are we?');
}

function globalEval(x) {
  abort('NO_DYNAMIC_EXECUTION=1 was set, cannot eval');
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 1*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-1)/1] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    if (!func) return; // on null pointer, return undefined
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Runs assert if ASSERTIONS is true
function maybeAssert(condition, text) {
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    abort('NO_DYNAMIC_EXECUTION=1 was set, cannot eval');
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  // NO_DYNAMIC_EXECUTION is on, so we can't use the fast version of cwrap.
  // Fall back to returning a bound version of ccall.
  cwrap = function cwrap(ident, returnType, argTypes) {
    return function() {
      return ccall(ident, returnType, argTypes, arguments);
    }
  }
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 67108864;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function() { return Module.getRandomValue(); },
 function() { if (Module.getRandomValue === undefined) { try { var window_ = 'object' === typeof window ? window : self; var crypto_ = typeof window_.crypto !== 'undefined' ? window_.crypto : window_.msCrypto; var randomValuesStandard = function() { var buf = new Uint32Array(1); crypto_.getRandomValues(buf); return buf[0] >>> 0; }; randomValuesStandard(); Module.getRandomValue = randomValuesStandard; } catch (e) { try { var crypto = require('crypto'); var randomValueNodeJS = function() { var buf = crypto.randomBytes(4); return (buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3]) >>> 0; }; randomValueNodeJS(); Module.getRandomValue = randomValueNodeJS; } catch (e) { throw 'No secure random number generator found'; } } } }];

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 36048;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   

   

   

   

   

   

  function _abort() {
      Module['abort']();
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85:
          var maxHeapSize = 2*1024*1024*1024 - 16777216;
          maxHeapSize = HEAPU8.length;
          return maxHeapSize / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   

   

   

  var _emscripten_asm_const_int=true;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory


Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_sysconf": _sysconf, "_abort": _abort, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___assert_fail": ___assert_fail, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _sysconf=env._sysconf;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___assert_fail=env.___assert_fail;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _crypto_aead_chacha20poly1305_encrypt_detached($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $12 = sp;
 $13 = sp + 264|0;
 $14 = sp + 256|0;
 (_crypto_stream_chacha20($13,64,0,$10,$11)|0);
 (_crypto_onetimeauth_poly1305_init($12,$13)|0);
 _sodium_memzero($13,64);
 (_crypto_onetimeauth_poly1305_update($12,$6,$7,$8)|0);
 _store64_le($14,$7,$8);
 (_crypto_onetimeauth_poly1305_update($12,$14,8,0)|0);
 (_crypto_stream_chacha20_xor_ic($0,$3,$4,$5,$10,1,0,$11)|0);
 (_crypto_onetimeauth_poly1305_update($12,$0,$4,$5)|0);
 _store64_le($14,$4,$5);
 (_crypto_onetimeauth_poly1305_update($12,$14,8,0)|0);
 (_crypto_onetimeauth_poly1305_final($12,$1)|0);
 _sodium_memzero($12,256);
 $15 = ($2|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return 0;
 }
 $16 = $2;
 $17 = $16;
 HEAP32[$17>>2] = 16;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return 0;
}
function _store64_le($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 HEAP8[$4>>0]=$1&255;HEAP8[$4+1>>0]=($1>>8)&255;HEAP8[$4+2>>0]=($1>>16)&255;HEAP8[$4+3>>0]=$1>>24;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP8[$6>>0]=$2&255;HEAP8[$6+1>>0]=($2>>8)&255;HEAP8[$6+2>>0]=($2>>16)&255;HEAP8[$6+3>>0]=$2>>24;
 return;
}
function _crypto_aead_chacha20poly1305_encrypt($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = ($4>>>0)>(0);
 $12 = ($3>>>0)>(4294967279);
 $13 = ($4|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  _sodium_misuse();
  // unreachable;
 }
 $16 = (($0) + ($3)|0);
 (_crypto_aead_chacha20poly1305_encrypt_detached($0,$16,0,$2,$3,$4,$5,$6,$7,0,$9,$10)|0);
 $17 = ($1|0)==(0|0);
 if ($17) {
  return 0;
 }
 $18 = (_i64Add(($3|0),($4|0),16,0)|0);
 $19 = tempRet0;
 $20 = $1;
 $21 = $20;
 HEAP32[$21>>2] = $18;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $19;
 return 0;
}
function _crypto_aead_chacha20poly1305_ietf_encrypt_detached($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $12 = sp;
 $13 = sp + 264|0;
 $14 = sp + 256|0;
 (_crypto_stream_chacha20_ietf($13,64,0,$10,$11)|0);
 (_crypto_onetimeauth_poly1305_init($12,$13)|0);
 _sodium_memzero($13,64);
 (_crypto_onetimeauth_poly1305_update($12,$6,$7,$8)|0);
 $15 = (_i64Subtract(0,0,($7|0),($8|0))|0);
 $16 = tempRet0;
 $17 = $15 & 15;
 (_crypto_onetimeauth_poly1305_update($12,35928,$17,0)|0);
 (_crypto_stream_chacha20_ietf_xor_ic($0,$3,$4,$5,$10,1,$11)|0);
 (_crypto_onetimeauth_poly1305_update($12,$0,$4,$5)|0);
 $18 = (_i64Subtract(0,0,($4|0),($5|0))|0);
 $19 = tempRet0;
 $20 = $18 & 15;
 (_crypto_onetimeauth_poly1305_update($12,35928,$20,0)|0);
 _store64_le($14,$7,$8);
 (_crypto_onetimeauth_poly1305_update($12,$14,8,0)|0);
 _store64_le($14,$4,$5);
 (_crypto_onetimeauth_poly1305_update($12,$14,8,0)|0);
 (_crypto_onetimeauth_poly1305_final($12,$1)|0);
 _sodium_memzero($12,256);
 $21 = ($2|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return 0;
 }
 $22 = $2;
 $23 = $22;
 HEAP32[$23>>2] = 16;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 STACKTOP = sp;return 0;
}
function _crypto_aead_chacha20poly1305_ietf_encrypt($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = ($4>>>0)>(0);
 $12 = ($3>>>0)>(4294967279);
 $13 = ($4|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  _sodium_misuse();
  // unreachable;
 }
 $16 = (($0) + ($3)|0);
 (_crypto_aead_chacha20poly1305_ietf_encrypt_detached($0,$16,0,$2,$3,$4,$5,$6,$7,0,$9,$10)|0);
 $17 = ($1|0)==(0|0);
 if ($17) {
  return 0;
 }
 $18 = (_i64Add(($3|0),($4|0),16,0)|0);
 $19 = tempRet0;
 $20 = $1;
 $21 = $20;
 HEAP32[$21>>2] = $18;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $19;
 return 0;
}
function _crypto_aead_chacha20poly1305_decrypt_detached($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $11 = sp;
 $12 = sp + 280|0;
 $13 = sp + 272|0;
 $14 = sp + 256|0;
 (_crypto_stream_chacha20($12,64,0,$9,$10)|0);
 (_crypto_onetimeauth_poly1305_init($11,$12)|0);
 _sodium_memzero($12,64);
 (_crypto_onetimeauth_poly1305_update($11,$6,$7,$8)|0);
 _store64_le($13,$7,$8);
 (_crypto_onetimeauth_poly1305_update($11,$13,8,0)|0);
 (_crypto_onetimeauth_poly1305_update($11,$2,$3,$4)|0);
 _store64_le($13,$3,$4);
 (_crypto_onetimeauth_poly1305_update($11,$13,8,0)|0);
 (_crypto_onetimeauth_poly1305_final($11,$14)|0);
 _sodium_memzero($11,256);
 $15 = (_crypto_verify_16($14,$5)|0);
 _sodium_memzero($14,16);
 $16 = ($0|0)==(0|0);
 if ($16) {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($15|0)==(0);
 if ($17) {
  (_crypto_stream_chacha20_xor_ic($0,$2,$3,$4,$9,1,0,$10)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  _memset(($0|0),0,($3|0))|0;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _crypto_aead_chacha20poly1305_decrypt($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = ($5>>>0)>(0);
 $12 = ($4>>>0)>(15);
 $13 = ($5|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  $16 = (_i64Add(($4|0),($5|0),-16,-1)|0);
  $17 = tempRet0;
  $18 = (($3) + ($4)|0);
  $19 = ((($18)) + -16|0);
  $20 = (_crypto_aead_chacha20poly1305_decrypt_detached($0,0,$3,$16,$17,$19,$6,$7,$8,$9,$10)|0);
  $$0 = $20;
 } else {
  $$0 = -1;
 }
 $21 = ($1|0)==(0|0);
 if ($21) {
  return ($$0|0);
 }
 $22 = ($$0|0)==(0);
 $23 = (_i64Add(($4|0),($5|0),-16,-1)|0);
 $24 = tempRet0;
 $25 = $22 ? $23 : 0;
 $26 = $22 ? $24 : 0;
 $27 = $1;
 $28 = $27;
 HEAP32[$28>>2] = $25;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 return ($$0|0);
}
function _crypto_aead_chacha20poly1305_ietf_decrypt_detached($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $11 = sp;
 $12 = sp + 280|0;
 $13 = sp + 272|0;
 $14 = sp + 256|0;
 (_crypto_stream_chacha20_ietf($12,64,0,$9,$10)|0);
 (_crypto_onetimeauth_poly1305_init($11,$12)|0);
 _sodium_memzero($12,64);
 (_crypto_onetimeauth_poly1305_update($11,$6,$7,$8)|0);
 $15 = (_i64Subtract(0,0,($7|0),($8|0))|0);
 $16 = tempRet0;
 $17 = $15 & 15;
 (_crypto_onetimeauth_poly1305_update($11,35928,$17,0)|0);
 (_crypto_onetimeauth_poly1305_update($11,$2,$3,$4)|0);
 $18 = (_i64Subtract(0,0,($3|0),($4|0))|0);
 $19 = tempRet0;
 $20 = $18 & 15;
 (_crypto_onetimeauth_poly1305_update($11,35928,$20,0)|0);
 _store64_le($13,$7,$8);
 (_crypto_onetimeauth_poly1305_update($11,$13,8,0)|0);
 _store64_le($13,$3,$4);
 (_crypto_onetimeauth_poly1305_update($11,$13,8,0)|0);
 (_crypto_onetimeauth_poly1305_final($11,$14)|0);
 _sodium_memzero($11,256);
 $21 = (_crypto_verify_16($14,$5)|0);
 _sodium_memzero($14,16);
 $22 = ($0|0)==(0|0);
 if ($22) {
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = ($21|0)==(0);
 if ($23) {
  (_crypto_stream_chacha20_ietf_xor_ic($0,$2,$3,$4,$9,1,$10)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  _memset(($0|0),0,($3|0))|0;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _crypto_aead_chacha20poly1305_ietf_decrypt($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = ($5>>>0)>(0);
 $12 = ($4>>>0)>(15);
 $13 = ($5|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  $16 = (_i64Add(($4|0),($5|0),-16,-1)|0);
  $17 = tempRet0;
  $18 = (($3) + ($4)|0);
  $19 = ((($18)) + -16|0);
  $20 = (_crypto_aead_chacha20poly1305_ietf_decrypt_detached($0,0,$3,$16,$17,$19,$6,$7,$8,$9,$10)|0);
  $$0 = $20;
 } else {
  $$0 = -1;
 }
 $21 = ($1|0)==(0|0);
 if ($21) {
  return ($$0|0);
 }
 $22 = ($$0|0)==(0);
 $23 = (_i64Add(($4|0),($5|0),-16,-1)|0);
 $24 = tempRet0;
 $25 = $22 ? $23 : 0;
 $26 = $22 ? $24 : 0;
 $27 = $1;
 $28 = $27;
 HEAP32[$28>>2] = $25;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 return ($$0|0);
}
function _crypto_aead_chacha20poly1305_ietf_keybytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_aead_chacha20poly1305_ietf_npubbytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 12;
}
function _crypto_aead_chacha20poly1305_ietf_nsecbytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _crypto_aead_chacha20poly1305_ietf_abytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_aead_chacha20poly1305_ietf_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_aead_chacha20poly1305_keybytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_aead_chacha20poly1305_npubbytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_aead_chacha20poly1305_nsecbytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _crypto_aead_chacha20poly1305_abytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_aead_chacha20poly1305_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_aead_xchacha20poly1305_ietf_encrypt_detached($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $12 = sp + 16|0;
 $13 = sp;
 HEAP32[$13>>2] = 0;
 (_crypto_core_hchacha20($12,$10,$11,0)|0);
 $14 = ((($13)) + 4|0);
 $15 = ((($10)) + 16|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
 $22 = $14;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 (_crypto_aead_chacha20poly1305_ietf_encrypt_detached($0,$1,$2,$3,$4,$5,$6,$7,$8,0,$13,$12)|0);
 _sodium_memzero($12,32);
 STACKTOP = sp;return 0;
}
function _crypto_aead_xchacha20poly1305_ietf_encrypt($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = ($4>>>0)>(4294967295);
 $12 = ($3>>>0)>(4294967279);
 $13 = ($4|0)==(-1);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  _sodium_misuse();
  // unreachable;
 }
 $16 = (($0) + ($3)|0);
 $17 = (_crypto_aead_xchacha20poly1305_ietf_encrypt_detached($0,$16,0,$2,$3,$4,$5,$6,$7,0,$9,$10)|0);
 $18 = ($1|0)==(0|0);
 if ($18) {
  return ($17|0);
 }
 $19 = ($17|0)==(0);
 $20 = (_i64Add(($3|0),($4|0),16,0)|0);
 $21 = tempRet0;
 $22 = $19 ? $20 : 0;
 $23 = $19 ? $21 : 0;
 $24 = $1;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 return ($17|0);
}
function _crypto_aead_xchacha20poly1305_ietf_decrypt_detached($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $11 = sp + 16|0;
 $12 = sp;
 HEAP32[$12>>2] = 0;
 (_crypto_core_hchacha20($11,$9,$10,0)|0);
 $13 = ((($12)) + 4|0);
 $14 = ((($9)) + 16|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8)|(HEAPU8[$19+2>>0]<<16)|(HEAPU8[$19+3>>0]<<24);
 $21 = $13;
 $22 = $21;
 HEAP32[$22>>2] = $17;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $20;
 $25 = (_crypto_aead_chacha20poly1305_ietf_decrypt_detached($0,0,$2,$3,$4,$5,$6,$7,$8,$12,$11)|0);
 _sodium_memzero($11,32);
 STACKTOP = sp;return ($25|0);
}
function _crypto_aead_xchacha20poly1305_ietf_decrypt($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = ($5>>>0)>(0);
 $12 = ($4>>>0)>(15);
 $13 = ($5|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 if ($15) {
  $16 = (_i64Add(($4|0),($5|0),-16,-1)|0);
  $17 = tempRet0;
  $18 = (($3) + ($4)|0);
  $19 = ((($18)) + -16|0);
  $20 = (_crypto_aead_xchacha20poly1305_ietf_decrypt_detached($0,0,$3,$16,$17,$19,$6,$7,$8,$9,$10)|0);
  $$0 = $20;
 } else {
  $$0 = -1;
 }
 $21 = ($1|0)==(0|0);
 if ($21) {
  return ($$0|0);
 }
 $22 = ($$0|0)==(0);
 $23 = (_i64Add(($4|0),($5|0),-16,-1)|0);
 $24 = tempRet0;
 $25 = $22 ? $23 : 0;
 $26 = $22 ? $24 : 0;
 $27 = $1;
 $28 = $27;
 HEAP32[$28>>2] = $25;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 return ($$0|0);
}
function _crypto_aead_xchacha20poly1305_ietf_keybytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_aead_xchacha20poly1305_ietf_npubbytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_aead_xchacha20poly1305_ietf_nsecbytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _crypto_aead_xchacha20poly1305_ietf_abytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_aead_xchacha20poly1305_ietf_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_auth_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_auth_keybytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_auth_primitive() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (33436|0);
}
function _crypto_auth($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_crypto_auth_hmacsha512256($0,$1,$2,$3,$4)|0);
 return 0;
}
function _crypto_auth_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_crypto_auth_hmacsha512256_verify($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_auth_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_auth_hmacsha256_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_auth_hmacsha256_keybytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_auth_hmacsha256_statebytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 208;
}
function _crypto_auth_hmacsha256_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_auth_hmacsha256_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $3 = sp + 32|0;
 $4 = sp;
 $5 = ($2>>>0)>(64);
 if ($5) {
  (_crypto_hash_sha256_init($0)|0);
  (_crypto_hash_sha256_update($0,$1,$2,0)|0);
  (_crypto_hash_sha256_final($0,$4)|0);
  $$01 = $4;$$02 = 32;
 } else {
  $$01 = $1;$$02 = $2;
 }
 (_crypto_hash_sha256_init($0)|0);
 dest=$3; stop=dest+64|0; do { HEAP8[dest>>0]=54|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $$0 = 0;
 while(1) {
  $exitcond3 = ($$0|0)==($$02|0);
  if ($exitcond3) {
   break;
  }
  $6 = (($$01) + ($$0)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = (($3) + ($$0)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 ^ $7;
  HEAP8[$8>>0] = $10;
  $11 = (($$0) + 1)|0;
  $$0 = $11;
 }
 (_crypto_hash_sha256_update($0,$3,64,0)|0);
 $12 = ((($0)) + 104|0);
 (_crypto_hash_sha256_init($12)|0);
 dest=$3; stop=dest+64|0; do { HEAP8[dest>>0]=92|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $$1 = 0;
 while(1) {
  $exitcond = ($$1|0)==($$02|0);
  if ($exitcond) {
   break;
  }
  $13 = (($$01) + ($$1)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = (($3) + ($$1)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 ^ $14;
  HEAP8[$15>>0] = $17;
  $18 = (($$1) + 1)|0;
  $$1 = $18;
 }
 (_crypto_hash_sha256_update($12,$3,64,0)|0);
 _sodium_memzero($3,64);
 _sodium_memzero($4,32);
 STACKTOP = sp;return 0;
}
function _crypto_auth_hmacsha256_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_crypto_hash_sha256_update($0,$1,$2,$3)|0);
 return 0;
}
function _crypto_auth_hmacsha256_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 (_crypto_hash_sha256_final($0,$2)|0);
 $3 = ((($0)) + 104|0);
 (_crypto_hash_sha256_update($3,$2,32,0)|0);
 (_crypto_hash_sha256_final($3,$1)|0);
 _sodium_memzero($2,32);
 STACKTOP = sp;return 0;
}
function _crypto_auth_hmacsha256($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $5 = sp;
 (_crypto_auth_hmacsha256_init($5,$4,32)|0);
 (_crypto_auth_hmacsha256_update($5,$1,$2,$3)|0);
 (_crypto_auth_hmacsha256_final($5,$0)|0);
 STACKTOP = sp;return 0;
}
function _crypto_auth_hmacsha256_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 (_crypto_auth_hmacsha256($5,$1,$2,$3,$4)|0);
 $6 = (_crypto_verify_32($0,$5)|0);
 $7 = ($5|0)==($0|0);
 $8 = $7 ? -1 : $6;
 $9 = (_sodium_memcmp($5,$0,32)|0);
 $10 = $8 | $9;
 STACKTOP = sp;return ($10|0);
}
function _crypto_auth_hmacsha512_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_auth_hmacsha512_keybytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_auth_hmacsha512_statebytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 416;
}
function _crypto_auth_hmacsha512_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_auth_hmacsha512_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $3 = sp + 64|0;
 $4 = sp;
 $5 = ($2>>>0)>(128);
 if ($5) {
  (_crypto_hash_sha512_init($0)|0);
  (_crypto_hash_sha512_update($0,$1,$2,0)|0);
  (_crypto_hash_sha512_final($0,$4)|0);
  $$01 = $4;$$02 = 64;
 } else {
  $$01 = $1;$$02 = $2;
 }
 (_crypto_hash_sha512_init($0)|0);
 dest=$3; stop=dest+128|0; do { HEAP8[dest>>0]=54|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $$0 = 0;
 while(1) {
  $exitcond3 = ($$0|0)==($$02|0);
  if ($exitcond3) {
   break;
  }
  $6 = (($$01) + ($$0)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = (($3) + ($$0)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 ^ $7;
  HEAP8[$8>>0] = $10;
  $11 = (($$0) + 1)|0;
  $$0 = $11;
 }
 (_crypto_hash_sha512_update($0,$3,128,0)|0);
 $12 = ((($0)) + 208|0);
 (_crypto_hash_sha512_init($12)|0);
 dest=$3; stop=dest+128|0; do { HEAP8[dest>>0]=92|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $$1 = 0;
 while(1) {
  $exitcond = ($$1|0)==($$02|0);
  if ($exitcond) {
   break;
  }
  $13 = (($$01) + ($$1)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = (($3) + ($$1)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 ^ $14;
  HEAP8[$15>>0] = $17;
  $18 = (($$1) + 1)|0;
  $$1 = $18;
 }
 (_crypto_hash_sha512_update($12,$3,128,0)|0);
 _sodium_memzero($3,128);
 _sodium_memzero($4,64);
 STACKTOP = sp;return 0;
}
function _crypto_auth_hmacsha512_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_crypto_hash_sha512_update($0,$1,$2,$3)|0);
 return 0;
}
function _crypto_auth_hmacsha512_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $2 = sp;
 (_crypto_hash_sha512_final($0,$2)|0);
 $3 = ((($0)) + 208|0);
 (_crypto_hash_sha512_update($3,$2,64,0)|0);
 (_crypto_hash_sha512_final($3,$1)|0);
 _sodium_memzero($2,64);
 STACKTOP = sp;return 0;
}
function _crypto_auth_hmacsha512($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $5 = sp;
 (_crypto_auth_hmacsha512_init($5,$4,32)|0);
 (_crypto_auth_hmacsha512_update($5,$1,$2,$3)|0);
 (_crypto_auth_hmacsha512_final($5,$0)|0);
 STACKTOP = sp;return 0;
}
function _crypto_auth_hmacsha512_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp;
 (_crypto_auth_hmacsha512($5,$1,$2,$3,$4)|0);
 $6 = (_crypto_verify_64($0,$5)|0);
 $7 = ($5|0)==($0|0);
 $8 = $7 ? -1 : $6;
 $9 = (_sodium_memcmp($5,$0,64)|0);
 $10 = $8 | $9;
 STACKTOP = sp;return ($10|0);
}
function _crypto_auth_hmacsha512256_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_auth_hmacsha512256_keybytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_auth_hmacsha512256_statebytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 416;
}
function _crypto_auth_hmacsha512256_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_auth_hmacsha512256_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_crypto_auth_hmacsha512_init($0,$1,$2)|0);
 return 0;
}
function _crypto_auth_hmacsha512256_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_crypto_auth_hmacsha512_update($0,$1,$2,$3)|0);
 return 0;
}
function _crypto_auth_hmacsha512256_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $2 = sp;
 (_crypto_auth_hmacsha512_final($0,$2)|0);
 dest=$1; src=$2; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return 0;
}
function _crypto_auth_hmacsha512256($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $5 = sp;
 (_crypto_auth_hmacsha512256_init($5,$4,32)|0);
 (_crypto_auth_hmacsha512256_update($5,$1,$2,$3)|0);
 (_crypto_auth_hmacsha512256_final($5,$0)|0);
 STACKTOP = sp;return 0;
}
function _crypto_auth_hmacsha512256_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 (_crypto_auth_hmacsha512256($5,$1,$2,$3,$4)|0);
 $6 = (_crypto_verify_32($0,$5)|0);
 $7 = ($5|0)==($0|0);
 $8 = $7 ? -1 : $6;
 $9 = (_sodium_memcmp($5,$0,32)|0);
 $10 = $8 | $9;
 STACKTOP = sp;return ($10|0);
}
function _crypto_box_seedbytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_publickeybytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_secretkeybytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_beforenmbytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_noncebytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_box_zerobytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_boxzerobytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_box_macbytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_box_primitive() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (33450|0);
}
function _crypto_box_seed_keypair($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_crypto_box_curve25519xsalsa20poly1305_seed_keypair($0,$1,$2)|0);
 return ($3|0);
}
function _crypto_box_keypair($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_crypto_box_curve25519xsalsa20poly1305_keypair($0,$1)|0);
 return ($2|0);
}
function _crypto_box_beforenm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_crypto_box_curve25519xsalsa20poly1305_beforenm($0,$1,$2)|0);
 return ($3|0);
}
function _crypto_box_afternm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (_crypto_box_curve25519xsalsa20poly1305_afternm($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_box_open_afternm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (_crypto_box_curve25519xsalsa20poly1305_open_afternm($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_box($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (_crypto_box_curve25519xsalsa20poly1305($0,$1,$2,$3,$4,$5,$6)|0);
 return ($7|0);
}
function _crypto_box_open($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (_crypto_box_curve25519xsalsa20poly1305_open($0,$1,$2,$3,$4,$5,$6)|0);
 return ($7|0);
}
function _crypto_box_detached_afternm($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_crypto_secretbox_detached($0,$1,$2,$3,$4,$5,$6)|0);
 return 0;
}
function _crypto_box_detached($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $10 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $8 = sp;
 $9 = (_crypto_box_beforenm($8,$6,$7)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_crypto_box_detached_afternm($0,$1,$2,$3,$4,$5,$8)|0);
 _sodium_memzero($8,32);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_easy_afternm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)>(0);
 $7 = ($2>>>0)>(4294967279);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  _sodium_misuse();
  // unreachable;
 } else {
  $11 = ((($0)) + 16|0);
  (_crypto_box_detached_afternm($11,$0,$1,$2,$3,$4,$5)|0);
  return 0;
 }
 return (0)|0;
}
function _crypto_box_easy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($3>>>0)>(0);
 $8 = ($2>>>0)>(4294967279);
 $9 = ($3|0)==(0);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if ($11) {
  _sodium_misuse();
  // unreachable;
 } else {
  $12 = ((($0)) + 16|0);
  $13 = (_crypto_box_detached($12,$0,$1,$2,$3,$4,$5,$6)|0);
  return ($13|0);
 }
 return (0)|0;
}
function _crypto_box_open_detached_afternm($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (_crypto_secretbox_open_detached($0,$1,$2,$3,$4,$5,$6)|0);
 return ($7|0);
}
function _crypto_box_open_detached($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $10 = 0, $11 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $8 = sp;
 $9 = (_crypto_box_beforenm($8,$6,$7)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_crypto_box_open_detached_afternm($0,$1,$2,$3,$4,$5,$8)|0);
 _sodium_memzero($8,32);
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_open_easy_afternm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)<(0);
 $7 = ($2>>>0)<(16);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $$0 = -1;
  return ($$0|0);
 }
 $11 = ((($1)) + 16|0);
 $12 = (_i64Add(($2|0),($3|0),-16,-1)|0);
 $13 = tempRet0;
 $14 = (_crypto_box_open_detached_afternm($0,$11,$1,$12,$13,$4,$5)|0);
 $$0 = $14;
 return ($$0|0);
}
function _crypto_box_open_easy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($3>>>0)<(0);
 $8 = ($2>>>0)<(16);
 $9 = ($3|0)==(0);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if ($11) {
  $$0 = -1;
  return ($$0|0);
 }
 $12 = ((($1)) + 16|0);
 $13 = (_i64Add(($2|0),($3|0),-16,-1)|0);
 $14 = tempRet0;
 $15 = (_crypto_box_open_detached($0,$12,$1,$13,$14,$4,$5,$6)|0);
 $$0 = $15;
 return ($$0|0);
}
function _crypto_box_seal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $5 = sp + 64|0;
 $6 = sp + 32|0;
 $7 = sp;
 $8 = (_crypto_box_keypair($6,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$0; src=$6; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 __crypto_box_seal_nonce($5,$6,$4);
 $10 = ((($0)) + 32|0);
 $11 = (_crypto_box_easy($10,$1,$2,$3,$5,$4,$7)|0);
 _sodium_memzero($7,32);
 _sodium_memzero($6,32);
 _sodium_memzero($5,24);
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function __crypto_box_seal_nonce($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 384|0;
 $3 = sp_a;
 (_crypto_generichash_init($3,0,0,24)|0);
 (_crypto_generichash_update($3,$1,32,0)|0);
 (_crypto_generichash_update($3,$2,32,0)|0);
 (_crypto_generichash_final($3,$0,24)|0);
 STACKTOP = sp;return;
}
function _crypto_box_seal_open($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp_a;
 $7 = ($3>>>0)<(0);
 $8 = ($2>>>0)<(48);
 $9 = ($3|0)==(0);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if ($11) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 __crypto_box_seal_nonce($6,$1,$4);
 $12 = ((($1)) + 32|0);
 $13 = (_i64Add(($2|0),($3|0),-32,-1)|0);
 $14 = tempRet0;
 $15 = (_crypto_box_open_easy($0,$12,$13,$14,$6,$1,$5)|0);
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_sealbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 48;
}
function _crypto_box_curve25519xsalsa20poly1305_seed_keypair($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp_a;
 (_crypto_hash_sha512($3,$2,32,0)|0);
 dest=$1; src=$3; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _sodium_memzero($3,64);
 $4 = (_crypto_scalarmult_curve25519_base($0,$1)|0);
 STACKTOP = sp;return ($4|0);
}
function _crypto_box_curve25519xsalsa20poly1305_keypair($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($1,32);
 $2 = (_crypto_scalarmult_curve25519_base($0,$1)|0);
 return ($2|0);
}
function _crypto_box_curve25519xsalsa20poly1305_beforenm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp_a;
 $4 = (_crypto_scalarmult_curve25519($3,$2,$1)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_crypto_core_hsalsa20($0,35944,$3,0)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_curve25519xsalsa20poly1305_afternm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_secretbox_xsalsa20poly1305($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_box_curve25519xsalsa20poly1305_open_afternm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_secretbox_xsalsa20poly1305_open($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_box_curve25519xsalsa20poly1305($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $7 = sp_a;
 $8 = (_crypto_box_curve25519xsalsa20poly1305_beforenm($7,$5,$6)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_crypto_box_curve25519xsalsa20poly1305_afternm($0,$1,$2,$3,$4,$7)|0);
 _sodium_memzero($7,32);
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_curve25519xsalsa20poly1305_open($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $7 = sp_a;
 $8 = (_crypto_box_curve25519xsalsa20poly1305_beforenm($7,$5,$6)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_crypto_box_curve25519xsalsa20poly1305_open_afternm($0,$1,$2,$3,$4,$7)|0);
 _sodium_memzero($7,32);
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_curve25519xsalsa20poly1305_seedbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_curve25519xsalsa20poly1305_publickeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_curve25519xsalsa20poly1305_secretkeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_curve25519xsalsa20poly1305_beforenmbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_curve25519xsalsa20poly1305_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_box_curve25519xsalsa20poly1305_zerobytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_curve25519xsalsa20poly1305_boxzerobytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_box_curve25519xsalsa20poly1305_macbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_curve25519_ref10_fe_0($0) {
 $0 = $0|0;
 var dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _crypto_core_curve25519_ref10_fe_1($0) {
 $0 = $0|0;
 var $1 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 1;
 $1 = ((($0)) + 4|0);
 dest=$1; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _crypto_core_curve25519_ref10_fe_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($1)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$2>>2]|0;
 $23 = ((($2)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($2)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($2)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($2)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($2)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($2)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($2)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($2)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($3) + ($22))|0;
 $42 = (($5) + ($24))|0;
 $43 = (($7) + ($26))|0;
 $44 = (($9) + ($28))|0;
 $45 = (($11) + ($30))|0;
 $46 = (($13) + ($32))|0;
 $47 = (($15) + ($34))|0;
 $48 = (($17) + ($36))|0;
 $49 = (($19) + ($38))|0;
 $50 = (($21) + ($40))|0;
 HEAP32[$0>>2] = $41;
 $51 = ((($0)) + 4|0);
 HEAP32[$51>>2] = $42;
 $52 = ((($0)) + 8|0);
 HEAP32[$52>>2] = $43;
 $53 = ((($0)) + 12|0);
 HEAP32[$53>>2] = $44;
 $54 = ((($0)) + 16|0);
 HEAP32[$54>>2] = $45;
 $55 = ((($0)) + 20|0);
 HEAP32[$55>>2] = $46;
 $56 = ((($0)) + 24|0);
 HEAP32[$56>>2] = $47;
 $57 = ((($0)) + 28|0);
 HEAP32[$57>>2] = $48;
 $58 = ((($0)) + 32|0);
 HEAP32[$58>>2] = $49;
 $59 = ((($0)) + 36|0);
 HEAP32[$59>>2] = $50;
 return;
}
function _crypto_core_curve25519_ref10_fe_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($1)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$0>>2] = $2;
 $21 = ((($0)) + 4|0);
 HEAP32[$21>>2] = $4;
 $22 = ((($0)) + 8|0);
 HEAP32[$22>>2] = $6;
 $23 = ((($0)) + 12|0);
 HEAP32[$23>>2] = $8;
 $24 = ((($0)) + 16|0);
 HEAP32[$24>>2] = $10;
 $25 = ((($0)) + 20|0);
 HEAP32[$25>>2] = $12;
 $26 = ((($0)) + 24|0);
 HEAP32[$26>>2] = $14;
 $27 = ((($0)) + 28|0);
 HEAP32[$27>>2] = $16;
 $28 = ((($0)) + 32|0);
 HEAP32[$28>>2] = $18;
 $29 = ((($0)) + 36|0);
 HEAP32[$29>>2] = $20;
 return;
}
function _crypto_core_curve25519_ref10_fe_frombytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx12 = 0, $$idx12$val = 0, $$idx13 = 0, $$idx13$val = 0, $$idx15 = 0, $$idx15$val = 0, $$idx16 = 0, $$idx16$val = 0, $$idx18 = 0, $$idx18$val = 0, $$idx19 = 0, $$idx19$val = 0, $$idx21 = 0, $$idx21$val = 0;
 var $$idx22 = 0, $$idx22$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx4 = 0, $$idx4$val = 0, $$idx6 = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx9 = 0, $$idx9$val = 0, $$val = 0, $$val11 = 0, $$val14 = 0, $$val17 = 0, $$val2 = 0, $$val20 = 0, $$val5 = 0, $$val8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 var sp_a = 0;
 sp = STACKTOP;
 $2 = (_load_4($1)|0);
 $3 = tempRet0;
 $4 = ((($1)) + 4|0);
 $$val20 = HEAP8[$4>>0]|0;
 $$idx21 = ((($1)) + 5|0);
 $$idx21$val = HEAP8[$$idx21>>0]|0;
 $$idx22 = ((($1)) + 6|0);
 $$idx22$val = HEAP8[$$idx22>>0]|0;
 $5 = (_load_3($$val20,$$idx21$val,$$idx22$val)|0);
 $6 = tempRet0;
 $7 = (_bitshift64Shl(($5|0),($6|0),6)|0);
 $8 = tempRet0;
 $9 = ((($1)) + 7|0);
 $$val17 = HEAP8[$9>>0]|0;
 $$idx18 = ((($1)) + 8|0);
 $$idx18$val = HEAP8[$$idx18>>0]|0;
 $$idx19 = ((($1)) + 9|0);
 $$idx19$val = HEAP8[$$idx19>>0]|0;
 $10 = (_load_3($$val17,$$idx18$val,$$idx19$val)|0);
 $11 = tempRet0;
 $12 = (_bitshift64Shl(($10|0),($11|0),5)|0);
 $13 = tempRet0;
 $14 = ((($1)) + 10|0);
 $$val14 = HEAP8[$14>>0]|0;
 $$idx15 = ((($1)) + 11|0);
 $$idx15$val = HEAP8[$$idx15>>0]|0;
 $$idx16 = ((($1)) + 12|0);
 $$idx16$val = HEAP8[$$idx16>>0]|0;
 $15 = (_load_3($$val14,$$idx15$val,$$idx16$val)|0);
 $16 = tempRet0;
 $17 = (_bitshift64Shl(($15|0),($16|0),3)|0);
 $18 = tempRet0;
 $19 = ((($1)) + 13|0);
 $$val11 = HEAP8[$19>>0]|0;
 $$idx12 = ((($1)) + 14|0);
 $$idx12$val = HEAP8[$$idx12>>0]|0;
 $$idx13 = ((($1)) + 15|0);
 $$idx13$val = HEAP8[$$idx13>>0]|0;
 $20 = (_load_3($$val11,$$idx12$val,$$idx13$val)|0);
 $21 = tempRet0;
 $22 = (_bitshift64Shl(($20|0),($21|0),2)|0);
 $23 = tempRet0;
 $24 = ((($1)) + 16|0);
 $25 = (_load_4($24)|0);
 $26 = tempRet0;
 $27 = ((($1)) + 20|0);
 $$val8 = HEAP8[$27>>0]|0;
 $$idx9 = ((($1)) + 21|0);
 $$idx9$val = HEAP8[$$idx9>>0]|0;
 $$idx10 = ((($1)) + 22|0);
 $$idx10$val = HEAP8[$$idx10>>0]|0;
 $28 = (_load_3($$val8,$$idx9$val,$$idx10$val)|0);
 $29 = tempRet0;
 $30 = (_bitshift64Shl(($28|0),($29|0),7)|0);
 $31 = tempRet0;
 $32 = ((($1)) + 23|0);
 $$val5 = HEAP8[$32>>0]|0;
 $$idx6 = ((($1)) + 24|0);
 $$idx6$val = HEAP8[$$idx6>>0]|0;
 $$idx7 = ((($1)) + 25|0);
 $$idx7$val = HEAP8[$$idx7>>0]|0;
 $33 = (_load_3($$val5,$$idx6$val,$$idx7$val)|0);
 $34 = tempRet0;
 $35 = (_bitshift64Shl(($33|0),($34|0),5)|0);
 $36 = tempRet0;
 $37 = ((($1)) + 26|0);
 $$val2 = HEAP8[$37>>0]|0;
 $$idx3 = ((($1)) + 27|0);
 $$idx3$val = HEAP8[$$idx3>>0]|0;
 $$idx4 = ((($1)) + 28|0);
 $$idx4$val = HEAP8[$$idx4>>0]|0;
 $38 = (_load_3($$val2,$$idx3$val,$$idx4$val)|0);
 $39 = tempRet0;
 $40 = (_bitshift64Shl(($38|0),($39|0),4)|0);
 $41 = tempRet0;
 $42 = ((($1)) + 29|0);
 $$val = HEAP8[$42>>0]|0;
 $$idx = ((($1)) + 30|0);
 $$idx$val = HEAP8[$$idx>>0]|0;
 $$idx1 = ((($1)) + 31|0);
 $$idx1$val = HEAP8[$$idx1>>0]|0;
 $43 = (_load_3($$val,$$idx$val,$$idx1$val)|0);
 $44 = tempRet0;
 $45 = (_bitshift64Shl(($43|0),($44|0),2)|0);
 $46 = tempRet0;
 $47 = $45 & 33554428;
 $48 = (_i64Add(($47|0),0,16777216,0)|0);
 $49 = tempRet0;
 $50 = (_bitshift64Lshr(($48|0),($49|0),25)|0);
 $51 = tempRet0;
 $52 = (_i64Subtract(0,0,($50|0),($51|0))|0);
 $53 = tempRet0;
 $54 = $52 & 19;
 $55 = (_i64Add(($2|0),($3|0),($54|0),0)|0);
 $56 = tempRet0;
 $57 = (_bitshift64Shl(($50|0),($51|0),25)|0);
 $58 = tempRet0;
 $59 = (_i64Subtract(($47|0),0,($57|0),($58|0))|0);
 $60 = tempRet0;
 $61 = (_i64Add(($7|0),($8|0),16777216,0)|0);
 $62 = tempRet0;
 $63 = (_bitshift64Ashr(($61|0),($62|0),25)|0);
 $64 = tempRet0;
 $65 = (_i64Add(($12|0),($13|0),($63|0),($64|0))|0);
 $66 = tempRet0;
 $67 = (_bitshift64Shl(($63|0),($64|0),25)|0);
 $68 = tempRet0;
 $69 = (_i64Subtract(($7|0),($8|0),($67|0),($68|0))|0);
 $70 = tempRet0;
 $71 = (_i64Add(($17|0),($18|0),16777216,0)|0);
 $72 = tempRet0;
 $73 = (_bitshift64Ashr(($71|0),($72|0),25)|0);
 $74 = tempRet0;
 $75 = (_i64Add(($22|0),($23|0),($73|0),($74|0))|0);
 $76 = tempRet0;
 $77 = (_bitshift64Shl(($73|0),($74|0),25)|0);
 $78 = tempRet0;
 $79 = (_i64Subtract(($17|0),($18|0),($77|0),($78|0))|0);
 $80 = tempRet0;
 $81 = (_i64Add(($25|0),($26|0),16777216,0)|0);
 $82 = tempRet0;
 $83 = (_bitshift64Ashr(($81|0),($82|0),25)|0);
 $84 = tempRet0;
 $85 = (_i64Add(($30|0),($31|0),($83|0),($84|0))|0);
 $86 = tempRet0;
 $87 = (_bitshift64Shl(($83|0),($84|0),25)|0);
 $88 = tempRet0;
 $89 = (_i64Subtract(($25|0),($26|0),($87|0),($88|0))|0);
 $90 = tempRet0;
 $91 = (_i64Add(($35|0),($36|0),16777216,0)|0);
 $92 = tempRet0;
 $93 = (_bitshift64Ashr(($91|0),($92|0),25)|0);
 $94 = tempRet0;
 $95 = (_i64Add(($40|0),($41|0),($93|0),($94|0))|0);
 $96 = tempRet0;
 $97 = (_bitshift64Shl(($93|0),($94|0),25)|0);
 $98 = tempRet0;
 $99 = (_i64Subtract(($35|0),($36|0),($97|0),($98|0))|0);
 $100 = tempRet0;
 $101 = (_i64Add(($55|0),($56|0),33554432,0)|0);
 $102 = tempRet0;
 $103 = (_bitshift64Ashr(($101|0),($102|0),26)|0);
 $104 = tempRet0;
 $105 = (_i64Add(($69|0),($70|0),($103|0),($104|0))|0);
 $106 = tempRet0;
 $107 = (_bitshift64Shl(($103|0),($104|0),26)|0);
 $108 = tempRet0;
 $109 = (_i64Subtract(($55|0),($56|0),($107|0),($108|0))|0);
 $110 = tempRet0;
 $111 = (_i64Add(($65|0),($66|0),33554432,0)|0);
 $112 = tempRet0;
 $113 = (_bitshift64Ashr(($111|0),($112|0),26)|0);
 $114 = tempRet0;
 $115 = (_i64Add(($79|0),($80|0),($113|0),($114|0))|0);
 $116 = tempRet0;
 $117 = (_bitshift64Shl(($113|0),($114|0),26)|0);
 $118 = tempRet0;
 $119 = (_i64Subtract(($65|0),($66|0),($117|0),($118|0))|0);
 $120 = tempRet0;
 $121 = (_i64Add(($75|0),($76|0),33554432,0)|0);
 $122 = tempRet0;
 $123 = (_bitshift64Ashr(($121|0),($122|0),26)|0);
 $124 = tempRet0;
 $125 = (_i64Add(($89|0),($90|0),($123|0),($124|0))|0);
 $126 = tempRet0;
 $127 = (_bitshift64Shl(($123|0),($124|0),26)|0);
 $128 = tempRet0;
 $129 = (_i64Subtract(($75|0),($76|0),($127|0),($128|0))|0);
 $130 = tempRet0;
 $131 = (_i64Add(($85|0),($86|0),33554432,0)|0);
 $132 = tempRet0;
 $133 = (_bitshift64Ashr(($131|0),($132|0),26)|0);
 $134 = tempRet0;
 $135 = (_i64Add(($99|0),($100|0),($133|0),($134|0))|0);
 $136 = tempRet0;
 $137 = (_bitshift64Shl(($133|0),($134|0),26)|0);
 $138 = tempRet0;
 $139 = (_i64Subtract(($85|0),($86|0),($137|0),($138|0))|0);
 $140 = tempRet0;
 $141 = (_i64Add(($95|0),($96|0),33554432,0)|0);
 $142 = tempRet0;
 $143 = (_bitshift64Ashr(($141|0),($142|0),26)|0);
 $144 = tempRet0;
 $145 = (_i64Add(($59|0),($60|0),($143|0),($144|0))|0);
 $146 = tempRet0;
 $147 = (_bitshift64Shl(($143|0),($144|0),26)|0);
 $148 = tempRet0;
 $149 = (_i64Subtract(($95|0),($96|0),($147|0),($148|0))|0);
 $150 = tempRet0;
 HEAP32[$0>>2] = $109;
 $151 = ((($0)) + 4|0);
 HEAP32[$151>>2] = $105;
 $152 = ((($0)) + 8|0);
 HEAP32[$152>>2] = $119;
 $153 = ((($0)) + 12|0);
 HEAP32[$153>>2] = $115;
 $154 = ((($0)) + 16|0);
 HEAP32[$154>>2] = $129;
 $155 = ((($0)) + 20|0);
 HEAP32[$155>>2] = $125;
 $156 = ((($0)) + 24|0);
 HEAP32[$156>>2] = $139;
 $157 = ((($0)) + 28|0);
 HEAP32[$157>>2] = $135;
 $158 = ((($0)) + 32|0);
 HEAP32[$158>>2] = $149;
 $159 = ((($0)) + 36|0);
 HEAP32[$159>>2] = $145;
 return;
}
function _load_4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ((($0)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (_bitshift64Shl(($5|0),0,8)|0);
 $7 = tempRet0;
 $8 = $2 | $6;
 $9 = ((($0)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,16)|0);
 $13 = tempRet0;
 $14 = $8 | $12;
 $15 = $7 | $13;
 $16 = ((($0)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (_bitshift64Shl(($18|0),0,24)|0);
 $20 = tempRet0;
 $21 = $14 | $19;
 $22 = $15 | $20;
 tempRet0 = ($22);
 return ($21|0);
}
function _load_3($$val,$$1$val,$$2$val) {
 $$val = $$val|0;
 $$1$val = $$1$val|0;
 $$2$val = $$2$val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $0 = $$val&255;
 $1 = $$1$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = tempRet0;
 $4 = $0 | $2;
 $5 = $$2$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = tempRet0;
 $8 = $4 | $6;
 $9 = $3 | $7;
 tempRet0 = ($9);
 return ($8|0);
}
function _crypto_core_curve25519_ref10_fe_tobytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($1)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20*19)|0;
 $22 = (($21) + 16777216)|0;
 $23 = $22 >>> 25;
 $24 = (($2) + ($23))|0;
 $25 = $24 >> 26;
 $26 = (($4) + ($25))|0;
 $27 = $26 >> 25;
 $28 = (($6) + ($27))|0;
 $29 = $28 >> 26;
 $30 = (($8) + ($29))|0;
 $31 = $30 >> 25;
 $32 = (($10) + ($31))|0;
 $33 = $32 >> 26;
 $34 = (($12) + ($33))|0;
 $35 = $34 >> 25;
 $36 = (($14) + ($35))|0;
 $37 = $36 >> 26;
 $38 = (($16) + ($37))|0;
 $39 = $38 >> 25;
 $40 = (($18) + ($39))|0;
 $41 = $40 >> 26;
 $42 = (($20) + ($41))|0;
 $43 = $42 >> 25;
 $44 = ($43*19)|0;
 $45 = (($2) + ($44))|0;
 $46 = $45 >> 26;
 $47 = (($4) + ($46))|0;
 $48 = $46 << 26;
 $49 = (($45) - ($48))|0;
 $50 = $47 >> 25;
 $51 = (($6) + ($50))|0;
 $52 = $50 << 25;
 $53 = (($47) - ($52))|0;
 $54 = $51 >> 26;
 $55 = (($8) + ($54))|0;
 $56 = $54 << 26;
 $57 = (($51) - ($56))|0;
 $58 = $55 >> 25;
 $59 = (($10) + ($58))|0;
 $60 = $58 << 25;
 $61 = (($55) - ($60))|0;
 $62 = $59 >> 26;
 $63 = (($12) + ($62))|0;
 $64 = $62 << 26;
 $65 = (($59) - ($64))|0;
 $66 = $63 >> 25;
 $67 = (($14) + ($66))|0;
 $68 = $66 << 25;
 $69 = (($63) - ($68))|0;
 $70 = $67 >> 26;
 $71 = (($16) + ($70))|0;
 $72 = $70 << 26;
 $73 = (($67) - ($72))|0;
 $74 = $71 >> 25;
 $75 = (($18) + ($74))|0;
 $76 = $74 << 25;
 $77 = (($71) - ($76))|0;
 $78 = $75 >> 26;
 $79 = (($20) + ($78))|0;
 $80 = $78 << 26;
 $81 = (($75) - ($80))|0;
 $82 = $79 & 33554431;
 $83 = $49&255;
 HEAP8[$0>>0] = $83;
 $84 = $49 >>> 8;
 $85 = $84&255;
 $86 = ((($0)) + 1|0);
 HEAP8[$86>>0] = $85;
 $87 = $49 >>> 16;
 $88 = $87&255;
 $89 = ((($0)) + 2|0);
 HEAP8[$89>>0] = $88;
 $90 = $49 >>> 24;
 $91 = $53 << 2;
 $92 = $90 | $91;
 $93 = $92&255;
 $94 = ((($0)) + 3|0);
 HEAP8[$94>>0] = $93;
 $95 = $53 >>> 6;
 $96 = $95&255;
 $97 = ((($0)) + 4|0);
 HEAP8[$97>>0] = $96;
 $98 = $53 >>> 14;
 $99 = $98&255;
 $100 = ((($0)) + 5|0);
 HEAP8[$100>>0] = $99;
 $101 = $53 >>> 22;
 $102 = $57 << 3;
 $103 = $101 | $102;
 $104 = $103&255;
 $105 = ((($0)) + 6|0);
 HEAP8[$105>>0] = $104;
 $106 = $57 >>> 5;
 $107 = $106&255;
 $108 = ((($0)) + 7|0);
 HEAP8[$108>>0] = $107;
 $109 = $57 >>> 13;
 $110 = $109&255;
 $111 = ((($0)) + 8|0);
 HEAP8[$111>>0] = $110;
 $112 = $57 >>> 21;
 $113 = $61 << 5;
 $114 = $112 | $113;
 $115 = $114&255;
 $116 = ((($0)) + 9|0);
 HEAP8[$116>>0] = $115;
 $117 = $61 >>> 3;
 $118 = $117&255;
 $119 = ((($0)) + 10|0);
 HEAP8[$119>>0] = $118;
 $120 = $61 >>> 11;
 $121 = $120&255;
 $122 = ((($0)) + 11|0);
 HEAP8[$122>>0] = $121;
 $123 = $61 >>> 19;
 $124 = $65 << 6;
 $125 = $123 | $124;
 $126 = $125&255;
 $127 = ((($0)) + 12|0);
 HEAP8[$127>>0] = $126;
 $128 = $65 >>> 2;
 $129 = $128&255;
 $130 = ((($0)) + 13|0);
 HEAP8[$130>>0] = $129;
 $131 = $65 >>> 10;
 $132 = $131&255;
 $133 = ((($0)) + 14|0);
 HEAP8[$133>>0] = $132;
 $134 = $65 >>> 18;
 $135 = $134&255;
 $136 = ((($0)) + 15|0);
 HEAP8[$136>>0] = $135;
 $137 = $69&255;
 $138 = ((($0)) + 16|0);
 HEAP8[$138>>0] = $137;
 $139 = $69 >>> 8;
 $140 = $139&255;
 $141 = ((($0)) + 17|0);
 HEAP8[$141>>0] = $140;
 $142 = $69 >>> 16;
 $143 = $142&255;
 $144 = ((($0)) + 18|0);
 HEAP8[$144>>0] = $143;
 $145 = $69 >>> 24;
 $146 = $73 << 1;
 $147 = $145 | $146;
 $148 = $147&255;
 $149 = ((($0)) + 19|0);
 HEAP8[$149>>0] = $148;
 $150 = $73 >>> 7;
 $151 = $150&255;
 $152 = ((($0)) + 20|0);
 HEAP8[$152>>0] = $151;
 $153 = $73 >>> 15;
 $154 = $153&255;
 $155 = ((($0)) + 21|0);
 HEAP8[$155>>0] = $154;
 $156 = $73 >>> 23;
 $157 = $77 << 3;
 $158 = $156 | $157;
 $159 = $158&255;
 $160 = ((($0)) + 22|0);
 HEAP8[$160>>0] = $159;
 $161 = $77 >>> 5;
 $162 = $161&255;
 $163 = ((($0)) + 23|0);
 HEAP8[$163>>0] = $162;
 $164 = $77 >>> 13;
 $165 = $164&255;
 $166 = ((($0)) + 24|0);
 HEAP8[$166>>0] = $165;
 $167 = $77 >>> 21;
 $168 = $81 << 4;
 $169 = $167 | $168;
 $170 = $169&255;
 $171 = ((($0)) + 25|0);
 HEAP8[$171>>0] = $170;
 $172 = $81 >>> 4;
 $173 = $172&255;
 $174 = ((($0)) + 26|0);
 HEAP8[$174>>0] = $173;
 $175 = $81 >>> 12;
 $176 = $175&255;
 $177 = ((($0)) + 27|0);
 HEAP8[$177>>0] = $176;
 $178 = $81 >>> 20;
 $179 = $82 << 6;
 $180 = $178 | $179;
 $181 = $180&255;
 $182 = ((($0)) + 28|0);
 HEAP8[$182>>0] = $181;
 $183 = $79 >>> 2;
 $184 = $183&255;
 $185 = ((($0)) + 29|0);
 HEAP8[$185>>0] = $184;
 $186 = $79 >>> 10;
 $187 = $186&255;
 $188 = ((($0)) + 30|0);
 HEAP8[$188>>0] = $187;
 $189 = $82 >>> 18;
 $190 = $189&255;
 $191 = ((($0)) + 31|0);
 HEAP8[$191>>0] = $190;
 return;
}
function _crypto_core_curve25519_ref10_fe_isnonzero($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp_a;
 _crypto_core_curve25519_ref10_fe_tobytes($1,$0);
 $2 = (_crypto_verify_32($1,35960)|0);
 STACKTOP = sp;return ($2|0);
}
function _crypto_core_curve25519_ref10_fe_mul($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($1)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$2>>2]|0;
 $23 = ((($2)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($2)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($2)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($2)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($2)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($2)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($2)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($2)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($24*19)|0;
 $42 = ($26*19)|0;
 $43 = ($28*19)|0;
 $44 = ($30*19)|0;
 $45 = ($32*19)|0;
 $46 = ($34*19)|0;
 $47 = ($36*19)|0;
 $48 = ($38*19)|0;
 $49 = ($40*19)|0;
 $50 = $5 << 1;
 $51 = $9 << 1;
 $52 = $13 << 1;
 $53 = $17 << 1;
 $54 = $21 << 1;
 $55 = ($3|0)<(0);
 $56 = $55 << 31 >> 31;
 $57 = ($22|0)<(0);
 $58 = $57 << 31 >> 31;
 $59 = (___muldi3(($3|0),($56|0),($22|0),($58|0))|0);
 $60 = tempRet0;
 $61 = ($24|0)<(0);
 $62 = $61 << 31 >> 31;
 $63 = (___muldi3(($3|0),($56|0),($24|0),($62|0))|0);
 $64 = tempRet0;
 $65 = ($26|0)<(0);
 $66 = $65 << 31 >> 31;
 $67 = (___muldi3(($3|0),($56|0),($26|0),($66|0))|0);
 $68 = tempRet0;
 $69 = ($28|0)<(0);
 $70 = $69 << 31 >> 31;
 $71 = (___muldi3(($3|0),($56|0),($28|0),($70|0))|0);
 $72 = tempRet0;
 $73 = ($30|0)<(0);
 $74 = $73 << 31 >> 31;
 $75 = (___muldi3(($3|0),($56|0),($30|0),($74|0))|0);
 $76 = tempRet0;
 $77 = ($32|0)<(0);
 $78 = $77 << 31 >> 31;
 $79 = (___muldi3(($3|0),($56|0),($32|0),($78|0))|0);
 $80 = tempRet0;
 $81 = ($34|0)<(0);
 $82 = $81 << 31 >> 31;
 $83 = (___muldi3(($3|0),($56|0),($34|0),($82|0))|0);
 $84 = tempRet0;
 $85 = ($36|0)<(0);
 $86 = $85 << 31 >> 31;
 $87 = (___muldi3(($3|0),($56|0),($36|0),($86|0))|0);
 $88 = tempRet0;
 $89 = ($38|0)<(0);
 $90 = $89 << 31 >> 31;
 $91 = (___muldi3(($3|0),($56|0),($38|0),($90|0))|0);
 $92 = tempRet0;
 $93 = ($40|0)<(0);
 $94 = $93 << 31 >> 31;
 $95 = (___muldi3(($3|0),($56|0),($40|0),($94|0))|0);
 $96 = tempRet0;
 $97 = ($5|0)<(0);
 $98 = $97 << 31 >> 31;
 $99 = (___muldi3(($5|0),($98|0),($22|0),($58|0))|0);
 $100 = tempRet0;
 $101 = ($50|0)<(0);
 $102 = $101 << 31 >> 31;
 $103 = (___muldi3(($50|0),($102|0),($24|0),($62|0))|0);
 $104 = tempRet0;
 $105 = (___muldi3(($5|0),($98|0),($26|0),($66|0))|0);
 $106 = tempRet0;
 $107 = (___muldi3(($50|0),($102|0),($28|0),($70|0))|0);
 $108 = tempRet0;
 $109 = (___muldi3(($5|0),($98|0),($30|0),($74|0))|0);
 $110 = tempRet0;
 $111 = (___muldi3(($50|0),($102|0),($32|0),($78|0))|0);
 $112 = tempRet0;
 $113 = (___muldi3(($5|0),($98|0),($34|0),($82|0))|0);
 $114 = tempRet0;
 $115 = (___muldi3(($50|0),($102|0),($36|0),($86|0))|0);
 $116 = tempRet0;
 $117 = (___muldi3(($5|0),($98|0),($38|0),($90|0))|0);
 $118 = tempRet0;
 $119 = ($49|0)<(0);
 $120 = $119 << 31 >> 31;
 $121 = (___muldi3(($50|0),($102|0),($49|0),($120|0))|0);
 $122 = tempRet0;
 $123 = ($7|0)<(0);
 $124 = $123 << 31 >> 31;
 $125 = (___muldi3(($7|0),($124|0),($22|0),($58|0))|0);
 $126 = tempRet0;
 $127 = (___muldi3(($7|0),($124|0),($24|0),($62|0))|0);
 $128 = tempRet0;
 $129 = (___muldi3(($7|0),($124|0),($26|0),($66|0))|0);
 $130 = tempRet0;
 $131 = (___muldi3(($7|0),($124|0),($28|0),($70|0))|0);
 $132 = tempRet0;
 $133 = (___muldi3(($7|0),($124|0),($30|0),($74|0))|0);
 $134 = tempRet0;
 $135 = (___muldi3(($7|0),($124|0),($32|0),($78|0))|0);
 $136 = tempRet0;
 $137 = (___muldi3(($7|0),($124|0),($34|0),($82|0))|0);
 $138 = tempRet0;
 $139 = (___muldi3(($7|0),($124|0),($36|0),($86|0))|0);
 $140 = tempRet0;
 $141 = ($48|0)<(0);
 $142 = $141 << 31 >> 31;
 $143 = (___muldi3(($7|0),($124|0),($48|0),($142|0))|0);
 $144 = tempRet0;
 $145 = (___muldi3(($7|0),($124|0),($49|0),($120|0))|0);
 $146 = tempRet0;
 $147 = ($9|0)<(0);
 $148 = $147 << 31 >> 31;
 $149 = (___muldi3(($9|0),($148|0),($22|0),($58|0))|0);
 $150 = tempRet0;
 $151 = ($51|0)<(0);
 $152 = $151 << 31 >> 31;
 $153 = (___muldi3(($51|0),($152|0),($24|0),($62|0))|0);
 $154 = tempRet0;
 $155 = (___muldi3(($9|0),($148|0),($26|0),($66|0))|0);
 $156 = tempRet0;
 $157 = (___muldi3(($51|0),($152|0),($28|0),($70|0))|0);
 $158 = tempRet0;
 $159 = (___muldi3(($9|0),($148|0),($30|0),($74|0))|0);
 $160 = tempRet0;
 $161 = (___muldi3(($51|0),($152|0),($32|0),($78|0))|0);
 $162 = tempRet0;
 $163 = (___muldi3(($9|0),($148|0),($34|0),($82|0))|0);
 $164 = tempRet0;
 $165 = ($47|0)<(0);
 $166 = $165 << 31 >> 31;
 $167 = (___muldi3(($51|0),($152|0),($47|0),($166|0))|0);
 $168 = tempRet0;
 $169 = (___muldi3(($9|0),($148|0),($48|0),($142|0))|0);
 $170 = tempRet0;
 $171 = (___muldi3(($51|0),($152|0),($49|0),($120|0))|0);
 $172 = tempRet0;
 $173 = ($11|0)<(0);
 $174 = $173 << 31 >> 31;
 $175 = (___muldi3(($11|0),($174|0),($22|0),($58|0))|0);
 $176 = tempRet0;
 $177 = (___muldi3(($11|0),($174|0),($24|0),($62|0))|0);
 $178 = tempRet0;
 $179 = (___muldi3(($11|0),($174|0),($26|0),($66|0))|0);
 $180 = tempRet0;
 $181 = (___muldi3(($11|0),($174|0),($28|0),($70|0))|0);
 $182 = tempRet0;
 $183 = (___muldi3(($11|0),($174|0),($30|0),($74|0))|0);
 $184 = tempRet0;
 $185 = (___muldi3(($11|0),($174|0),($32|0),($78|0))|0);
 $186 = tempRet0;
 $187 = ($46|0)<(0);
 $188 = $187 << 31 >> 31;
 $189 = (___muldi3(($11|0),($174|0),($46|0),($188|0))|0);
 $190 = tempRet0;
 $191 = (___muldi3(($11|0),($174|0),($47|0),($166|0))|0);
 $192 = tempRet0;
 $193 = (___muldi3(($11|0),($174|0),($48|0),($142|0))|0);
 $194 = tempRet0;
 $195 = (___muldi3(($11|0),($174|0),($49|0),($120|0))|0);
 $196 = tempRet0;
 $197 = ($13|0)<(0);
 $198 = $197 << 31 >> 31;
 $199 = (___muldi3(($13|0),($198|0),($22|0),($58|0))|0);
 $200 = tempRet0;
 $201 = ($52|0)<(0);
 $202 = $201 << 31 >> 31;
 $203 = (___muldi3(($52|0),($202|0),($24|0),($62|0))|0);
 $204 = tempRet0;
 $205 = (___muldi3(($13|0),($198|0),($26|0),($66|0))|0);
 $206 = tempRet0;
 $207 = (___muldi3(($52|0),($202|0),($28|0),($70|0))|0);
 $208 = tempRet0;
 $209 = (___muldi3(($13|0),($198|0),($30|0),($74|0))|0);
 $210 = tempRet0;
 $211 = ($45|0)<(0);
 $212 = $211 << 31 >> 31;
 $213 = (___muldi3(($52|0),($202|0),($45|0),($212|0))|0);
 $214 = tempRet0;
 $215 = (___muldi3(($13|0),($198|0),($46|0),($188|0))|0);
 $216 = tempRet0;
 $217 = (___muldi3(($52|0),($202|0),($47|0),($166|0))|0);
 $218 = tempRet0;
 $219 = (___muldi3(($13|0),($198|0),($48|0),($142|0))|0);
 $220 = tempRet0;
 $221 = (___muldi3(($52|0),($202|0),($49|0),($120|0))|0);
 $222 = tempRet0;
 $223 = ($15|0)<(0);
 $224 = $223 << 31 >> 31;
 $225 = (___muldi3(($15|0),($224|0),($22|0),($58|0))|0);
 $226 = tempRet0;
 $227 = (___muldi3(($15|0),($224|0),($24|0),($62|0))|0);
 $228 = tempRet0;
 $229 = (___muldi3(($15|0),($224|0),($26|0),($66|0))|0);
 $230 = tempRet0;
 $231 = (___muldi3(($15|0),($224|0),($28|0),($70|0))|0);
 $232 = tempRet0;
 $233 = ($44|0)<(0);
 $234 = $233 << 31 >> 31;
 $235 = (___muldi3(($15|0),($224|0),($44|0),($234|0))|0);
 $236 = tempRet0;
 $237 = (___muldi3(($15|0),($224|0),($45|0),($212|0))|0);
 $238 = tempRet0;
 $239 = (___muldi3(($15|0),($224|0),($46|0),($188|0))|0);
 $240 = tempRet0;
 $241 = (___muldi3(($15|0),($224|0),($47|0),($166|0))|0);
 $242 = tempRet0;
 $243 = (___muldi3(($15|0),($224|0),($48|0),($142|0))|0);
 $244 = tempRet0;
 $245 = (___muldi3(($15|0),($224|0),($49|0),($120|0))|0);
 $246 = tempRet0;
 $247 = ($17|0)<(0);
 $248 = $247 << 31 >> 31;
 $249 = (___muldi3(($17|0),($248|0),($22|0),($58|0))|0);
 $250 = tempRet0;
 $251 = ($53|0)<(0);
 $252 = $251 << 31 >> 31;
 $253 = (___muldi3(($53|0),($252|0),($24|0),($62|0))|0);
 $254 = tempRet0;
 $255 = (___muldi3(($17|0),($248|0),($26|0),($66|0))|0);
 $256 = tempRet0;
 $257 = ($43|0)<(0);
 $258 = $257 << 31 >> 31;
 $259 = (___muldi3(($53|0),($252|0),($43|0),($258|0))|0);
 $260 = tempRet0;
 $261 = (___muldi3(($17|0),($248|0),($44|0),($234|0))|0);
 $262 = tempRet0;
 $263 = (___muldi3(($53|0),($252|0),($45|0),($212|0))|0);
 $264 = tempRet0;
 $265 = (___muldi3(($17|0),($248|0),($46|0),($188|0))|0);
 $266 = tempRet0;
 $267 = (___muldi3(($53|0),($252|0),($47|0),($166|0))|0);
 $268 = tempRet0;
 $269 = (___muldi3(($17|0),($248|0),($48|0),($142|0))|0);
 $270 = tempRet0;
 $271 = (___muldi3(($53|0),($252|0),($49|0),($120|0))|0);
 $272 = tempRet0;
 $273 = ($19|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = (___muldi3(($19|0),($274|0),($22|0),($58|0))|0);
 $276 = tempRet0;
 $277 = (___muldi3(($19|0),($274|0),($24|0),($62|0))|0);
 $278 = tempRet0;
 $279 = ($42|0)<(0);
 $280 = $279 << 31 >> 31;
 $281 = (___muldi3(($19|0),($274|0),($42|0),($280|0))|0);
 $282 = tempRet0;
 $283 = (___muldi3(($19|0),($274|0),($43|0),($258|0))|0);
 $284 = tempRet0;
 $285 = (___muldi3(($19|0),($274|0),($44|0),($234|0))|0);
 $286 = tempRet0;
 $287 = (___muldi3(($19|0),($274|0),($45|0),($212|0))|0);
 $288 = tempRet0;
 $289 = (___muldi3(($19|0),($274|0),($46|0),($188|0))|0);
 $290 = tempRet0;
 $291 = (___muldi3(($19|0),($274|0),($47|0),($166|0))|0);
 $292 = tempRet0;
 $293 = (___muldi3(($19|0),($274|0),($48|0),($142|0))|0);
 $294 = tempRet0;
 $295 = (___muldi3(($19|0),($274|0),($49|0),($120|0))|0);
 $296 = tempRet0;
 $297 = ($21|0)<(0);
 $298 = $297 << 31 >> 31;
 $299 = (___muldi3(($21|0),($298|0),($22|0),($58|0))|0);
 $300 = tempRet0;
 $301 = ($54|0)<(0);
 $302 = $301 << 31 >> 31;
 $303 = ($41|0)<(0);
 $304 = $303 << 31 >> 31;
 $305 = (___muldi3(($54|0),($302|0),($41|0),($304|0))|0);
 $306 = tempRet0;
 $307 = (___muldi3(($21|0),($298|0),($42|0),($280|0))|0);
 $308 = tempRet0;
 $309 = (___muldi3(($54|0),($302|0),($43|0),($258|0))|0);
 $310 = tempRet0;
 $311 = (___muldi3(($21|0),($298|0),($44|0),($234|0))|0);
 $312 = tempRet0;
 $313 = (___muldi3(($54|0),($302|0),($45|0),($212|0))|0);
 $314 = tempRet0;
 $315 = (___muldi3(($21|0),($298|0),($46|0),($188|0))|0);
 $316 = tempRet0;
 $317 = (___muldi3(($54|0),($302|0),($47|0),($166|0))|0);
 $318 = tempRet0;
 $319 = (___muldi3(($21|0),($298|0),($48|0),($142|0))|0);
 $320 = tempRet0;
 $321 = (___muldi3(($54|0),($302|0),($49|0),($120|0))|0);
 $322 = tempRet0;
 $323 = (_i64Add(($59|0),($60|0),($121|0),($122|0))|0);
 $324 = tempRet0;
 $325 = (_i64Add(($323|0),($324|0),($143|0),($144|0))|0);
 $326 = tempRet0;
 $327 = (_i64Add(($325|0),($326|0),($167|0),($168|0))|0);
 $328 = tempRet0;
 $329 = (_i64Add(($327|0),($328|0),($189|0),($190|0))|0);
 $330 = tempRet0;
 $331 = (_i64Add(($329|0),($330|0),($213|0),($214|0))|0);
 $332 = tempRet0;
 $333 = (_i64Add(($331|0),($332|0),($235|0),($236|0))|0);
 $334 = tempRet0;
 $335 = (_i64Add(($333|0),($334|0),($259|0),($260|0))|0);
 $336 = tempRet0;
 $337 = (_i64Add(($335|0),($336|0),($281|0),($282|0))|0);
 $338 = tempRet0;
 $339 = (_i64Add(($337|0),($338|0),($305|0),($306|0))|0);
 $340 = tempRet0;
 $341 = (_i64Add(($63|0),($64|0),($99|0),($100|0))|0);
 $342 = tempRet0;
 $343 = (_i64Add(($341|0),($342|0),($145|0),($146|0))|0);
 $344 = tempRet0;
 $345 = (_i64Add(($343|0),($344|0),($169|0),($170|0))|0);
 $346 = tempRet0;
 $347 = (_i64Add(($345|0),($346|0),($191|0),($192|0))|0);
 $348 = tempRet0;
 $349 = (_i64Add(($347|0),($348|0),($215|0),($216|0))|0);
 $350 = tempRet0;
 $351 = (_i64Add(($349|0),($350|0),($237|0),($238|0))|0);
 $352 = tempRet0;
 $353 = (_i64Add(($351|0),($352|0),($261|0),($262|0))|0);
 $354 = tempRet0;
 $355 = (_i64Add(($353|0),($354|0),($283|0),($284|0))|0);
 $356 = tempRet0;
 $357 = (_i64Add(($355|0),($356|0),($307|0),($308|0))|0);
 $358 = tempRet0;
 $359 = (_i64Add(($67|0),($68|0),($103|0),($104|0))|0);
 $360 = tempRet0;
 $361 = (_i64Add(($359|0),($360|0),($125|0),($126|0))|0);
 $362 = tempRet0;
 $363 = (_i64Add(($361|0),($362|0),($171|0),($172|0))|0);
 $364 = tempRet0;
 $365 = (_i64Add(($363|0),($364|0),($193|0),($194|0))|0);
 $366 = tempRet0;
 $367 = (_i64Add(($365|0),($366|0),($217|0),($218|0))|0);
 $368 = tempRet0;
 $369 = (_i64Add(($367|0),($368|0),($239|0),($240|0))|0);
 $370 = tempRet0;
 $371 = (_i64Add(($369|0),($370|0),($263|0),($264|0))|0);
 $372 = tempRet0;
 $373 = (_i64Add(($371|0),($372|0),($285|0),($286|0))|0);
 $374 = tempRet0;
 $375 = (_i64Add(($373|0),($374|0),($309|0),($310|0))|0);
 $376 = tempRet0;
 $377 = (_i64Add(($71|0),($72|0),($105|0),($106|0))|0);
 $378 = tempRet0;
 $379 = (_i64Add(($377|0),($378|0),($127|0),($128|0))|0);
 $380 = tempRet0;
 $381 = (_i64Add(($379|0),($380|0),($149|0),($150|0))|0);
 $382 = tempRet0;
 $383 = (_i64Add(($381|0),($382|0),($195|0),($196|0))|0);
 $384 = tempRet0;
 $385 = (_i64Add(($383|0),($384|0),($219|0),($220|0))|0);
 $386 = tempRet0;
 $387 = (_i64Add(($385|0),($386|0),($241|0),($242|0))|0);
 $388 = tempRet0;
 $389 = (_i64Add(($387|0),($388|0),($265|0),($266|0))|0);
 $390 = tempRet0;
 $391 = (_i64Add(($389|0),($390|0),($287|0),($288|0))|0);
 $392 = tempRet0;
 $393 = (_i64Add(($391|0),($392|0),($311|0),($312|0))|0);
 $394 = tempRet0;
 $395 = (_i64Add(($75|0),($76|0),($107|0),($108|0))|0);
 $396 = tempRet0;
 $397 = (_i64Add(($395|0),($396|0),($129|0),($130|0))|0);
 $398 = tempRet0;
 $399 = (_i64Add(($397|0),($398|0),($153|0),($154|0))|0);
 $400 = tempRet0;
 $401 = (_i64Add(($399|0),($400|0),($175|0),($176|0))|0);
 $402 = tempRet0;
 $403 = (_i64Add(($401|0),($402|0),($221|0),($222|0))|0);
 $404 = tempRet0;
 $405 = (_i64Add(($403|0),($404|0),($243|0),($244|0))|0);
 $406 = tempRet0;
 $407 = (_i64Add(($405|0),($406|0),($267|0),($268|0))|0);
 $408 = tempRet0;
 $409 = (_i64Add(($407|0),($408|0),($289|0),($290|0))|0);
 $410 = tempRet0;
 $411 = (_i64Add(($409|0),($410|0),($313|0),($314|0))|0);
 $412 = tempRet0;
 $413 = (_i64Add(($79|0),($80|0),($109|0),($110|0))|0);
 $414 = tempRet0;
 $415 = (_i64Add(($413|0),($414|0),($131|0),($132|0))|0);
 $416 = tempRet0;
 $417 = (_i64Add(($415|0),($416|0),($155|0),($156|0))|0);
 $418 = tempRet0;
 $419 = (_i64Add(($417|0),($418|0),($177|0),($178|0))|0);
 $420 = tempRet0;
 $421 = (_i64Add(($419|0),($420|0),($199|0),($200|0))|0);
 $422 = tempRet0;
 $423 = (_i64Add(($421|0),($422|0),($245|0),($246|0))|0);
 $424 = tempRet0;
 $425 = (_i64Add(($423|0),($424|0),($269|0),($270|0))|0);
 $426 = tempRet0;
 $427 = (_i64Add(($425|0),($426|0),($291|0),($292|0))|0);
 $428 = tempRet0;
 $429 = (_i64Add(($427|0),($428|0),($315|0),($316|0))|0);
 $430 = tempRet0;
 $431 = (_i64Add(($83|0),($84|0),($111|0),($112|0))|0);
 $432 = tempRet0;
 $433 = (_i64Add(($431|0),($432|0),($133|0),($134|0))|0);
 $434 = tempRet0;
 $435 = (_i64Add(($433|0),($434|0),($157|0),($158|0))|0);
 $436 = tempRet0;
 $437 = (_i64Add(($435|0),($436|0),($179|0),($180|0))|0);
 $438 = tempRet0;
 $439 = (_i64Add(($437|0),($438|0),($203|0),($204|0))|0);
 $440 = tempRet0;
 $441 = (_i64Add(($439|0),($440|0),($225|0),($226|0))|0);
 $442 = tempRet0;
 $443 = (_i64Add(($441|0),($442|0),($271|0),($272|0))|0);
 $444 = tempRet0;
 $445 = (_i64Add(($443|0),($444|0),($293|0),($294|0))|0);
 $446 = tempRet0;
 $447 = (_i64Add(($445|0),($446|0),($317|0),($318|0))|0);
 $448 = tempRet0;
 $449 = (_i64Add(($87|0),($88|0),($113|0),($114|0))|0);
 $450 = tempRet0;
 $451 = (_i64Add(($449|0),($450|0),($135|0),($136|0))|0);
 $452 = tempRet0;
 $453 = (_i64Add(($451|0),($452|0),($159|0),($160|0))|0);
 $454 = tempRet0;
 $455 = (_i64Add(($453|0),($454|0),($181|0),($182|0))|0);
 $456 = tempRet0;
 $457 = (_i64Add(($455|0),($456|0),($205|0),($206|0))|0);
 $458 = tempRet0;
 $459 = (_i64Add(($457|0),($458|0),($227|0),($228|0))|0);
 $460 = tempRet0;
 $461 = (_i64Add(($459|0),($460|0),($249|0),($250|0))|0);
 $462 = tempRet0;
 $463 = (_i64Add(($461|0),($462|0),($295|0),($296|0))|0);
 $464 = tempRet0;
 $465 = (_i64Add(($463|0),($464|0),($319|0),($320|0))|0);
 $466 = tempRet0;
 $467 = (_i64Add(($91|0),($92|0),($115|0),($116|0))|0);
 $468 = tempRet0;
 $469 = (_i64Add(($467|0),($468|0),($137|0),($138|0))|0);
 $470 = tempRet0;
 $471 = (_i64Add(($469|0),($470|0),($161|0),($162|0))|0);
 $472 = tempRet0;
 $473 = (_i64Add(($471|0),($472|0),($183|0),($184|0))|0);
 $474 = tempRet0;
 $475 = (_i64Add(($473|0),($474|0),($207|0),($208|0))|0);
 $476 = tempRet0;
 $477 = (_i64Add(($475|0),($476|0),($229|0),($230|0))|0);
 $478 = tempRet0;
 $479 = (_i64Add(($477|0),($478|0),($253|0),($254|0))|0);
 $480 = tempRet0;
 $481 = (_i64Add(($479|0),($480|0),($275|0),($276|0))|0);
 $482 = tempRet0;
 $483 = (_i64Add(($481|0),($482|0),($321|0),($322|0))|0);
 $484 = tempRet0;
 $485 = (_i64Add(($95|0),($96|0),($117|0),($118|0))|0);
 $486 = tempRet0;
 $487 = (_i64Add(($485|0),($486|0),($139|0),($140|0))|0);
 $488 = tempRet0;
 $489 = (_i64Add(($487|0),($488|0),($163|0),($164|0))|0);
 $490 = tempRet0;
 $491 = (_i64Add(($489|0),($490|0),($185|0),($186|0))|0);
 $492 = tempRet0;
 $493 = (_i64Add(($491|0),($492|0),($209|0),($210|0))|0);
 $494 = tempRet0;
 $495 = (_i64Add(($493|0),($494|0),($231|0),($232|0))|0);
 $496 = tempRet0;
 $497 = (_i64Add(($495|0),($496|0),($255|0),($256|0))|0);
 $498 = tempRet0;
 $499 = (_i64Add(($497|0),($498|0),($277|0),($278|0))|0);
 $500 = tempRet0;
 $501 = (_i64Add(($499|0),($500|0),($299|0),($300|0))|0);
 $502 = tempRet0;
 $503 = (_i64Add(($339|0),($340|0),33554432,0)|0);
 $504 = tempRet0;
 $505 = (_bitshift64Ashr(($503|0),($504|0),26)|0);
 $506 = tempRet0;
 $507 = (_i64Add(($357|0),($358|0),($505|0),($506|0))|0);
 $508 = tempRet0;
 $509 = (_bitshift64Shl(($505|0),($506|0),26)|0);
 $510 = tempRet0;
 $511 = (_i64Subtract(($339|0),($340|0),($509|0),($510|0))|0);
 $512 = tempRet0;
 $513 = (_i64Add(($411|0),($412|0),33554432,0)|0);
 $514 = tempRet0;
 $515 = (_bitshift64Ashr(($513|0),($514|0),26)|0);
 $516 = tempRet0;
 $517 = (_i64Add(($429|0),($430|0),($515|0),($516|0))|0);
 $518 = tempRet0;
 $519 = (_bitshift64Shl(($515|0),($516|0),26)|0);
 $520 = tempRet0;
 $521 = (_i64Subtract(($411|0),($412|0),($519|0),($520|0))|0);
 $522 = tempRet0;
 $523 = (_i64Add(($507|0),($508|0),16777216,0)|0);
 $524 = tempRet0;
 $525 = (_bitshift64Ashr(($523|0),($524|0),25)|0);
 $526 = tempRet0;
 $527 = (_i64Add(($375|0),($376|0),($525|0),($526|0))|0);
 $528 = tempRet0;
 $529 = (_bitshift64Shl(($525|0),($526|0),25)|0);
 $530 = tempRet0;
 $531 = (_i64Subtract(($507|0),($508|0),($529|0),($530|0))|0);
 $532 = tempRet0;
 $533 = (_i64Add(($517|0),($518|0),16777216,0)|0);
 $534 = tempRet0;
 $535 = (_bitshift64Ashr(($533|0),($534|0),25)|0);
 $536 = tempRet0;
 $537 = (_i64Add(($447|0),($448|0),($535|0),($536|0))|0);
 $538 = tempRet0;
 $539 = (_bitshift64Shl(($535|0),($536|0),25)|0);
 $540 = tempRet0;
 $541 = (_i64Subtract(($517|0),($518|0),($539|0),($540|0))|0);
 $542 = tempRet0;
 $543 = (_i64Add(($527|0),($528|0),33554432,0)|0);
 $544 = tempRet0;
 $545 = (_bitshift64Ashr(($543|0),($544|0),26)|0);
 $546 = tempRet0;
 $547 = (_i64Add(($393|0),($394|0),($545|0),($546|0))|0);
 $548 = tempRet0;
 $549 = (_bitshift64Shl(($545|0),($546|0),26)|0);
 $550 = tempRet0;
 $551 = (_i64Subtract(($527|0),($528|0),($549|0),($550|0))|0);
 $552 = tempRet0;
 $553 = (_i64Add(($537|0),($538|0),33554432,0)|0);
 $554 = tempRet0;
 $555 = (_bitshift64Ashr(($553|0),($554|0),26)|0);
 $556 = tempRet0;
 $557 = (_i64Add(($465|0),($466|0),($555|0),($556|0))|0);
 $558 = tempRet0;
 $559 = (_bitshift64Shl(($555|0),($556|0),26)|0);
 $560 = tempRet0;
 $561 = (_i64Subtract(($537|0),($538|0),($559|0),($560|0))|0);
 $562 = tempRet0;
 $563 = (_i64Add(($547|0),($548|0),16777216,0)|0);
 $564 = tempRet0;
 $565 = (_bitshift64Ashr(($563|0),($564|0),25)|0);
 $566 = tempRet0;
 $567 = (_i64Add(($521|0),($522|0),($565|0),($566|0))|0);
 $568 = tempRet0;
 $569 = (_bitshift64Shl(($565|0),($566|0),25)|0);
 $570 = tempRet0;
 $571 = (_i64Subtract(($547|0),($548|0),($569|0),($570|0))|0);
 $572 = tempRet0;
 $573 = (_i64Add(($557|0),($558|0),16777216,0)|0);
 $574 = tempRet0;
 $575 = (_bitshift64Ashr(($573|0),($574|0),25)|0);
 $576 = tempRet0;
 $577 = (_i64Add(($483|0),($484|0),($575|0),($576|0))|0);
 $578 = tempRet0;
 $579 = (_bitshift64Shl(($575|0),($576|0),25)|0);
 $580 = tempRet0;
 $581 = (_i64Subtract(($557|0),($558|0),($579|0),($580|0))|0);
 $582 = tempRet0;
 $583 = (_i64Add(($567|0),($568|0),33554432,0)|0);
 $584 = tempRet0;
 $585 = (_bitshift64Ashr(($583|0),($584|0),26)|0);
 $586 = tempRet0;
 $587 = (_i64Add(($541|0),($542|0),($585|0),($586|0))|0);
 $588 = tempRet0;
 $589 = (_bitshift64Shl(($585|0),($586|0),26)|0);
 $590 = tempRet0;
 $591 = (_i64Subtract(($567|0),($568|0),($589|0),($590|0))|0);
 $592 = tempRet0;
 $593 = (_i64Add(($577|0),($578|0),33554432,0)|0);
 $594 = tempRet0;
 $595 = (_bitshift64Ashr(($593|0),($594|0),26)|0);
 $596 = tempRet0;
 $597 = (_i64Add(($501|0),($502|0),($595|0),($596|0))|0);
 $598 = tempRet0;
 $599 = (_bitshift64Shl(($595|0),($596|0),26)|0);
 $600 = tempRet0;
 $601 = (_i64Subtract(($577|0),($578|0),($599|0),($600|0))|0);
 $602 = tempRet0;
 $603 = (_i64Add(($597|0),($598|0),16777216,0)|0);
 $604 = tempRet0;
 $605 = (_bitshift64Ashr(($603|0),($604|0),25)|0);
 $606 = tempRet0;
 $607 = (___muldi3(($605|0),($606|0),19,0)|0);
 $608 = tempRet0;
 $609 = (_i64Add(($511|0),($512|0),($607|0),($608|0))|0);
 $610 = tempRet0;
 $611 = (_bitshift64Shl(($605|0),($606|0),25)|0);
 $612 = tempRet0;
 $613 = (_i64Subtract(($597|0),($598|0),($611|0),($612|0))|0);
 $614 = tempRet0;
 $615 = (_i64Add(($609|0),($610|0),33554432,0)|0);
 $616 = tempRet0;
 $617 = (_bitshift64Ashr(($615|0),($616|0),26)|0);
 $618 = tempRet0;
 $619 = (_i64Add(($531|0),($532|0),($617|0),($618|0))|0);
 $620 = tempRet0;
 $621 = (_bitshift64Shl(($617|0),($618|0),26)|0);
 $622 = tempRet0;
 $623 = (_i64Subtract(($609|0),($610|0),($621|0),($622|0))|0);
 $624 = tempRet0;
 HEAP32[$0>>2] = $623;
 $625 = ((($0)) + 4|0);
 HEAP32[$625>>2] = $619;
 $626 = ((($0)) + 8|0);
 HEAP32[$626>>2] = $551;
 $627 = ((($0)) + 12|0);
 HEAP32[$627>>2] = $571;
 $628 = ((($0)) + 16|0);
 HEAP32[$628>>2] = $591;
 $629 = ((($0)) + 20|0);
 HEAP32[$629>>2] = $587;
 $630 = ((($0)) + 24|0);
 HEAP32[$630>>2] = $561;
 $631 = ((($0)) + 28|0);
 HEAP32[$631>>2] = $581;
 $632 = ((($0)) + 32|0);
 HEAP32[$632>>2] = $601;
 $633 = ((($0)) + 36|0);
 HEAP32[$633>>2] = $613;
 return;
}
function _crypto_core_curve25519_ref10_fe_sq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($1)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2 << 1;
 $22 = $4 << 1;
 $23 = $6 << 1;
 $24 = $8 << 1;
 $25 = $10 << 1;
 $26 = $12 << 1;
 $27 = $14 << 1;
 $28 = $16 << 1;
 $29 = ($12*38)|0;
 $30 = ($14*19)|0;
 $31 = ($16*38)|0;
 $32 = ($18*19)|0;
 $33 = ($20*38)|0;
 $34 = ($2|0)<(0);
 $35 = $34 << 31 >> 31;
 $36 = (___muldi3(($2|0),($35|0),($2|0),($35|0))|0);
 $37 = tempRet0;
 $38 = ($21|0)<(0);
 $39 = $38 << 31 >> 31;
 $40 = ($4|0)<(0);
 $41 = $40 << 31 >> 31;
 $42 = (___muldi3(($21|0),($39|0),($4|0),($41|0))|0);
 $43 = tempRet0;
 $44 = ($6|0)<(0);
 $45 = $44 << 31 >> 31;
 $46 = (___muldi3(($21|0),($39|0),($6|0),($45|0))|0);
 $47 = tempRet0;
 $48 = ($8|0)<(0);
 $49 = $48 << 31 >> 31;
 $50 = (___muldi3(($21|0),($39|0),($8|0),($49|0))|0);
 $51 = tempRet0;
 $52 = ($10|0)<(0);
 $53 = $52 << 31 >> 31;
 $54 = (___muldi3(($21|0),($39|0),($10|0),($53|0))|0);
 $55 = tempRet0;
 $56 = ($12|0)<(0);
 $57 = $56 << 31 >> 31;
 $58 = (___muldi3(($21|0),($39|0),($12|0),($57|0))|0);
 $59 = tempRet0;
 $60 = ($14|0)<(0);
 $61 = $60 << 31 >> 31;
 $62 = (___muldi3(($21|0),($39|0),($14|0),($61|0))|0);
 $63 = tempRet0;
 $64 = ($16|0)<(0);
 $65 = $64 << 31 >> 31;
 $66 = (___muldi3(($21|0),($39|0),($16|0),($65|0))|0);
 $67 = tempRet0;
 $68 = ($18|0)<(0);
 $69 = $68 << 31 >> 31;
 $70 = (___muldi3(($21|0),($39|0),($18|0),($69|0))|0);
 $71 = tempRet0;
 $72 = ($20|0)<(0);
 $73 = $72 << 31 >> 31;
 $74 = (___muldi3(($21|0),($39|0),($20|0),($73|0))|0);
 $75 = tempRet0;
 $76 = ($22|0)<(0);
 $77 = $76 << 31 >> 31;
 $78 = (___muldi3(($22|0),($77|0),($4|0),($41|0))|0);
 $79 = tempRet0;
 $80 = (___muldi3(($22|0),($77|0),($6|0),($45|0))|0);
 $81 = tempRet0;
 $82 = ($24|0)<(0);
 $83 = $82 << 31 >> 31;
 $84 = (___muldi3(($22|0),($77|0),($24|0),($83|0))|0);
 $85 = tempRet0;
 $86 = (___muldi3(($22|0),($77|0),($10|0),($53|0))|0);
 $87 = tempRet0;
 $88 = ($26|0)<(0);
 $89 = $88 << 31 >> 31;
 $90 = (___muldi3(($22|0),($77|0),($26|0),($89|0))|0);
 $91 = tempRet0;
 $92 = (___muldi3(($22|0),($77|0),($14|0),($61|0))|0);
 $93 = tempRet0;
 $94 = ($28|0)<(0);
 $95 = $94 << 31 >> 31;
 $96 = (___muldi3(($22|0),($77|0),($28|0),($95|0))|0);
 $97 = tempRet0;
 $98 = (___muldi3(($22|0),($77|0),($18|0),($69|0))|0);
 $99 = tempRet0;
 $100 = ($33|0)<(0);
 $101 = $100 << 31 >> 31;
 $102 = (___muldi3(($22|0),($77|0),($33|0),($101|0))|0);
 $103 = tempRet0;
 $104 = (___muldi3(($6|0),($45|0),($6|0),($45|0))|0);
 $105 = tempRet0;
 $106 = ($23|0)<(0);
 $107 = $106 << 31 >> 31;
 $108 = (___muldi3(($23|0),($107|0),($8|0),($49|0))|0);
 $109 = tempRet0;
 $110 = (___muldi3(($23|0),($107|0),($10|0),($53|0))|0);
 $111 = tempRet0;
 $112 = (___muldi3(($23|0),($107|0),($12|0),($57|0))|0);
 $113 = tempRet0;
 $114 = (___muldi3(($23|0),($107|0),($14|0),($61|0))|0);
 $115 = tempRet0;
 $116 = (___muldi3(($23|0),($107|0),($16|0),($65|0))|0);
 $117 = tempRet0;
 $118 = ($32|0)<(0);
 $119 = $118 << 31 >> 31;
 $120 = (___muldi3(($23|0),($107|0),($32|0),($119|0))|0);
 $121 = tempRet0;
 $122 = (___muldi3(($6|0),($45|0),($33|0),($101|0))|0);
 $123 = tempRet0;
 $124 = (___muldi3(($24|0),($83|0),($8|0),($49|0))|0);
 $125 = tempRet0;
 $126 = (___muldi3(($24|0),($83|0),($10|0),($53|0))|0);
 $127 = tempRet0;
 $128 = (___muldi3(($24|0),($83|0),($26|0),($89|0))|0);
 $129 = tempRet0;
 $130 = (___muldi3(($24|0),($83|0),($14|0),($61|0))|0);
 $131 = tempRet0;
 $132 = ($31|0)<(0);
 $133 = $132 << 31 >> 31;
 $134 = (___muldi3(($24|0),($83|0),($31|0),($133|0))|0);
 $135 = tempRet0;
 $136 = (___muldi3(($24|0),($83|0),($32|0),($119|0))|0);
 $137 = tempRet0;
 $138 = (___muldi3(($24|0),($83|0),($33|0),($101|0))|0);
 $139 = tempRet0;
 $140 = (___muldi3(($10|0),($53|0),($10|0),($53|0))|0);
 $141 = tempRet0;
 $142 = ($25|0)<(0);
 $143 = $142 << 31 >> 31;
 $144 = (___muldi3(($25|0),($143|0),($12|0),($57|0))|0);
 $145 = tempRet0;
 $146 = ($30|0)<(0);
 $147 = $146 << 31 >> 31;
 $148 = (___muldi3(($25|0),($143|0),($30|0),($147|0))|0);
 $149 = tempRet0;
 $150 = (___muldi3(($10|0),($53|0),($31|0),($133|0))|0);
 $151 = tempRet0;
 $152 = (___muldi3(($25|0),($143|0),($32|0),($119|0))|0);
 $153 = tempRet0;
 $154 = (___muldi3(($10|0),($53|0),($33|0),($101|0))|0);
 $155 = tempRet0;
 $156 = ($29|0)<(0);
 $157 = $156 << 31 >> 31;
 $158 = (___muldi3(($12|0),($57|0),($29|0),($157|0))|0);
 $159 = tempRet0;
 $160 = (___muldi3(($26|0),($89|0),($30|0),($147|0))|0);
 $161 = tempRet0;
 $162 = (___muldi3(($26|0),($89|0),($31|0),($133|0))|0);
 $163 = tempRet0;
 $164 = (___muldi3(($26|0),($89|0),($32|0),($119|0))|0);
 $165 = tempRet0;
 $166 = (___muldi3(($26|0),($89|0),($33|0),($101|0))|0);
 $167 = tempRet0;
 $168 = (___muldi3(($14|0),($61|0),($30|0),($147|0))|0);
 $169 = tempRet0;
 $170 = (___muldi3(($14|0),($61|0),($31|0),($133|0))|0);
 $171 = tempRet0;
 $172 = ($27|0)<(0);
 $173 = $172 << 31 >> 31;
 $174 = (___muldi3(($27|0),($173|0),($32|0),($119|0))|0);
 $175 = tempRet0;
 $176 = (___muldi3(($14|0),($61|0),($33|0),($101|0))|0);
 $177 = tempRet0;
 $178 = (___muldi3(($16|0),($65|0),($31|0),($133|0))|0);
 $179 = tempRet0;
 $180 = (___muldi3(($28|0),($95|0),($32|0),($119|0))|0);
 $181 = tempRet0;
 $182 = (___muldi3(($28|0),($95|0),($33|0),($101|0))|0);
 $183 = tempRet0;
 $184 = (___muldi3(($18|0),($69|0),($32|0),($119|0))|0);
 $185 = tempRet0;
 $186 = (___muldi3(($18|0),($69|0),($33|0),($101|0))|0);
 $187 = tempRet0;
 $188 = (___muldi3(($20|0),($73|0),($33|0),($101|0))|0);
 $189 = tempRet0;
 $190 = (_i64Add(($36|0),($37|0),($102|0),($103|0))|0);
 $191 = tempRet0;
 $192 = (_i64Add(($190|0),($191|0),($120|0),($121|0))|0);
 $193 = tempRet0;
 $194 = (_i64Add(($192|0),($193|0),($134|0),($135|0))|0);
 $195 = tempRet0;
 $196 = (_i64Add(($194|0),($195|0),($148|0),($149|0))|0);
 $197 = tempRet0;
 $198 = (_i64Add(($196|0),($197|0),($158|0),($159|0))|0);
 $199 = tempRet0;
 $200 = (_i64Add(($42|0),($43|0),($122|0),($123|0))|0);
 $201 = tempRet0;
 $202 = (_i64Add(($200|0),($201|0),($136|0),($137|0))|0);
 $203 = tempRet0;
 $204 = (_i64Add(($202|0),($203|0),($150|0),($151|0))|0);
 $205 = tempRet0;
 $206 = (_i64Add(($204|0),($205|0),($160|0),($161|0))|0);
 $207 = tempRet0;
 $208 = (_i64Add(($46|0),($47|0),($78|0),($79|0))|0);
 $209 = tempRet0;
 $210 = (_i64Add(($208|0),($209|0),($138|0),($139|0))|0);
 $211 = tempRet0;
 $212 = (_i64Add(($210|0),($211|0),($152|0),($153|0))|0);
 $213 = tempRet0;
 $214 = (_i64Add(($212|0),($213|0),($162|0),($163|0))|0);
 $215 = tempRet0;
 $216 = (_i64Add(($214|0),($215|0),($168|0),($169|0))|0);
 $217 = tempRet0;
 $218 = (_i64Add(($50|0),($51|0),($80|0),($81|0))|0);
 $219 = tempRet0;
 $220 = (_i64Add(($218|0),($219|0),($154|0),($155|0))|0);
 $221 = tempRet0;
 $222 = (_i64Add(($220|0),($221|0),($164|0),($165|0))|0);
 $223 = tempRet0;
 $224 = (_i64Add(($222|0),($223|0),($170|0),($171|0))|0);
 $225 = tempRet0;
 $226 = (_i64Add(($54|0),($55|0),($84|0),($85|0))|0);
 $227 = tempRet0;
 $228 = (_i64Add(($226|0),($227|0),($104|0),($105|0))|0);
 $229 = tempRet0;
 $230 = (_i64Add(($228|0),($229|0),($166|0),($167|0))|0);
 $231 = tempRet0;
 $232 = (_i64Add(($230|0),($231|0),($174|0),($175|0))|0);
 $233 = tempRet0;
 $234 = (_i64Add(($232|0),($233|0),($178|0),($179|0))|0);
 $235 = tempRet0;
 $236 = (_i64Add(($58|0),($59|0),($86|0),($87|0))|0);
 $237 = tempRet0;
 $238 = (_i64Add(($236|0),($237|0),($108|0),($109|0))|0);
 $239 = tempRet0;
 $240 = (_i64Add(($238|0),($239|0),($176|0),($177|0))|0);
 $241 = tempRet0;
 $242 = (_i64Add(($240|0),($241|0),($180|0),($181|0))|0);
 $243 = tempRet0;
 $244 = (_i64Add(($62|0),($63|0),($90|0),($91|0))|0);
 $245 = tempRet0;
 $246 = (_i64Add(($244|0),($245|0),($110|0),($111|0))|0);
 $247 = tempRet0;
 $248 = (_i64Add(($246|0),($247|0),($124|0),($125|0))|0);
 $249 = tempRet0;
 $250 = (_i64Add(($248|0),($249|0),($182|0),($183|0))|0);
 $251 = tempRet0;
 $252 = (_i64Add(($250|0),($251|0),($184|0),($185|0))|0);
 $253 = tempRet0;
 $254 = (_i64Add(($66|0),($67|0),($92|0),($93|0))|0);
 $255 = tempRet0;
 $256 = (_i64Add(($254|0),($255|0),($112|0),($113|0))|0);
 $257 = tempRet0;
 $258 = (_i64Add(($256|0),($257|0),($126|0),($127|0))|0);
 $259 = tempRet0;
 $260 = (_i64Add(($258|0),($259|0),($186|0),($187|0))|0);
 $261 = tempRet0;
 $262 = (_i64Add(($70|0),($71|0),($96|0),($97|0))|0);
 $263 = tempRet0;
 $264 = (_i64Add(($262|0),($263|0),($114|0),($115|0))|0);
 $265 = tempRet0;
 $266 = (_i64Add(($264|0),($265|0),($128|0),($129|0))|0);
 $267 = tempRet0;
 $268 = (_i64Add(($266|0),($267|0),($140|0),($141|0))|0);
 $269 = tempRet0;
 $270 = (_i64Add(($268|0),($269|0),($188|0),($189|0))|0);
 $271 = tempRet0;
 $272 = (_i64Add(($74|0),($75|0),($98|0),($99|0))|0);
 $273 = tempRet0;
 $274 = (_i64Add(($272|0),($273|0),($116|0),($117|0))|0);
 $275 = tempRet0;
 $276 = (_i64Add(($274|0),($275|0),($130|0),($131|0))|0);
 $277 = tempRet0;
 $278 = (_i64Add(($276|0),($277|0),($144|0),($145|0))|0);
 $279 = tempRet0;
 $280 = (_i64Add(($198|0),($199|0),33554432,0)|0);
 $281 = tempRet0;
 $282 = (_bitshift64Ashr(($280|0),($281|0),26)|0);
 $283 = tempRet0;
 $284 = (_i64Add(($206|0),($207|0),($282|0),($283|0))|0);
 $285 = tempRet0;
 $286 = (_bitshift64Shl(($282|0),($283|0),26)|0);
 $287 = tempRet0;
 $288 = (_i64Subtract(($198|0),($199|0),($286|0),($287|0))|0);
 $289 = tempRet0;
 $290 = (_i64Add(($234|0),($235|0),33554432,0)|0);
 $291 = tempRet0;
 $292 = (_bitshift64Ashr(($290|0),($291|0),26)|0);
 $293 = tempRet0;
 $294 = (_i64Add(($242|0),($243|0),($292|0),($293|0))|0);
 $295 = tempRet0;
 $296 = (_bitshift64Shl(($292|0),($293|0),26)|0);
 $297 = tempRet0;
 $298 = (_i64Subtract(($234|0),($235|0),($296|0),($297|0))|0);
 $299 = tempRet0;
 $300 = (_i64Add(($284|0),($285|0),16777216,0)|0);
 $301 = tempRet0;
 $302 = (_bitshift64Ashr(($300|0),($301|0),25)|0);
 $303 = tempRet0;
 $304 = (_i64Add(($216|0),($217|0),($302|0),($303|0))|0);
 $305 = tempRet0;
 $306 = (_bitshift64Shl(($302|0),($303|0),25)|0);
 $307 = tempRet0;
 $308 = (_i64Subtract(($284|0),($285|0),($306|0),($307|0))|0);
 $309 = tempRet0;
 $310 = (_i64Add(($294|0),($295|0),16777216,0)|0);
 $311 = tempRet0;
 $312 = (_bitshift64Ashr(($310|0),($311|0),25)|0);
 $313 = tempRet0;
 $314 = (_i64Add(($252|0),($253|0),($312|0),($313|0))|0);
 $315 = tempRet0;
 $316 = (_bitshift64Shl(($312|0),($313|0),25)|0);
 $317 = tempRet0;
 $318 = (_i64Subtract(($294|0),($295|0),($316|0),($317|0))|0);
 $319 = tempRet0;
 $320 = (_i64Add(($304|0),($305|0),33554432,0)|0);
 $321 = tempRet0;
 $322 = (_bitshift64Ashr(($320|0),($321|0),26)|0);
 $323 = tempRet0;
 $324 = (_i64Add(($224|0),($225|0),($322|0),($323|0))|0);
 $325 = tempRet0;
 $326 = (_bitshift64Shl(($322|0),($323|0),26)|0);
 $327 = tempRet0;
 $328 = (_i64Subtract(($304|0),($305|0),($326|0),($327|0))|0);
 $329 = tempRet0;
 $330 = (_i64Add(($314|0),($315|0),33554432,0)|0);
 $331 = tempRet0;
 $332 = (_bitshift64Ashr(($330|0),($331|0),26)|0);
 $333 = tempRet0;
 $334 = (_i64Add(($260|0),($261|0),($332|0),($333|0))|0);
 $335 = tempRet0;
 $336 = (_bitshift64Shl(($332|0),($333|0),26)|0);
 $337 = tempRet0;
 $338 = (_i64Subtract(($314|0),($315|0),($336|0),($337|0))|0);
 $339 = tempRet0;
 $340 = (_i64Add(($324|0),($325|0),16777216,0)|0);
 $341 = tempRet0;
 $342 = (_bitshift64Ashr(($340|0),($341|0),25)|0);
 $343 = tempRet0;
 $344 = (_i64Add(($298|0),($299|0),($342|0),($343|0))|0);
 $345 = tempRet0;
 $346 = (_bitshift64Shl(($342|0),($343|0),25)|0);
 $347 = tempRet0;
 $348 = (_i64Subtract(($324|0),($325|0),($346|0),($347|0))|0);
 $349 = tempRet0;
 $350 = (_i64Add(($334|0),($335|0),16777216,0)|0);
 $351 = tempRet0;
 $352 = (_bitshift64Ashr(($350|0),($351|0),25)|0);
 $353 = tempRet0;
 $354 = (_i64Add(($270|0),($271|0),($352|0),($353|0))|0);
 $355 = tempRet0;
 $356 = (_bitshift64Shl(($352|0),($353|0),25)|0);
 $357 = tempRet0;
 $358 = (_i64Subtract(($334|0),($335|0),($356|0),($357|0))|0);
 $359 = tempRet0;
 $360 = (_i64Add(($344|0),($345|0),33554432,0)|0);
 $361 = tempRet0;
 $362 = (_bitshift64Ashr(($360|0),($361|0),26)|0);
 $363 = tempRet0;
 $364 = (_i64Add(($318|0),($319|0),($362|0),($363|0))|0);
 $365 = tempRet0;
 $366 = (_bitshift64Shl(($362|0),($363|0),26)|0);
 $367 = tempRet0;
 $368 = (_i64Subtract(($344|0),($345|0),($366|0),($367|0))|0);
 $369 = tempRet0;
 $370 = (_i64Add(($354|0),($355|0),33554432,0)|0);
 $371 = tempRet0;
 $372 = (_bitshift64Ashr(($370|0),($371|0),26)|0);
 $373 = tempRet0;
 $374 = (_i64Add(($278|0),($279|0),($372|0),($373|0))|0);
 $375 = tempRet0;
 $376 = (_bitshift64Shl(($372|0),($373|0),26)|0);
 $377 = tempRet0;
 $378 = (_i64Subtract(($354|0),($355|0),($376|0),($377|0))|0);
 $379 = tempRet0;
 $380 = (_i64Add(($374|0),($375|0),16777216,0)|0);
 $381 = tempRet0;
 $382 = (_bitshift64Ashr(($380|0),($381|0),25)|0);
 $383 = tempRet0;
 $384 = (___muldi3(($382|0),($383|0),19,0)|0);
 $385 = tempRet0;
 $386 = (_i64Add(($288|0),($289|0),($384|0),($385|0))|0);
 $387 = tempRet0;
 $388 = (_bitshift64Shl(($382|0),($383|0),25)|0);
 $389 = tempRet0;
 $390 = (_i64Subtract(($374|0),($375|0),($388|0),($389|0))|0);
 $391 = tempRet0;
 $392 = (_i64Add(($386|0),($387|0),33554432,0)|0);
 $393 = tempRet0;
 $394 = (_bitshift64Ashr(($392|0),($393|0),26)|0);
 $395 = tempRet0;
 $396 = (_i64Add(($308|0),($309|0),($394|0),($395|0))|0);
 $397 = tempRet0;
 $398 = (_bitshift64Shl(($394|0),($395|0),26)|0);
 $399 = tempRet0;
 $400 = (_i64Subtract(($386|0),($387|0),($398|0),($399|0))|0);
 $401 = tempRet0;
 HEAP32[$0>>2] = $400;
 $402 = ((($0)) + 4|0);
 HEAP32[$402>>2] = $396;
 $403 = ((($0)) + 8|0);
 HEAP32[$403>>2] = $328;
 $404 = ((($0)) + 12|0);
 HEAP32[$404>>2] = $348;
 $405 = ((($0)) + 16|0);
 HEAP32[$405>>2] = $368;
 $406 = ((($0)) + 20|0);
 HEAP32[$406>>2] = $364;
 $407 = ((($0)) + 24|0);
 HEAP32[$407>>2] = $338;
 $408 = ((($0)) + 28|0);
 HEAP32[$408>>2] = $358;
 $409 = ((($0)) + 32|0);
 HEAP32[$409>>2] = $378;
 $410 = ((($0)) + 36|0);
 HEAP32[$410>>2] = $390;
 return;
}
function _crypto_core_curve25519_ref10_fe_invert($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond1 = 0, $exitcond2 = 0, $exitcond3 = 0, $exitcond4 = 0, $exitcond5 = 0, $exitcond6 = 0, $exitcond7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 160|0;
 $2 = sp_a + 120|0;
 $3 = sp_a + 80|0;
 $4 = sp_a + 40|0;
 $5 = sp_a;
 _crypto_core_curve25519_ref10_fe_sq($2,$1);
 _crypto_core_curve25519_ref10_fe_sq($3,$2);
 _crypto_core_curve25519_ref10_fe_sq($3,$3);
 _crypto_core_curve25519_ref10_fe_mul($3,$1,$3);
 _crypto_core_curve25519_ref10_fe_mul($2,$2,$3);
 _crypto_core_curve25519_ref10_fe_sq($4,$2);
 _crypto_core_curve25519_ref10_fe_mul($3,$3,$4);
 _crypto_core_curve25519_ref10_fe_sq($4,$3);
 $$0 = 1;
 while(1) {
  $exitcond7 = ($$0|0)==(5);
  if ($exitcond7) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($4,$4);
  $6 = (($$0) + 1)|0;
  $$0 = $6;
 }
 _crypto_core_curve25519_ref10_fe_mul($3,$4,$3);
 _crypto_core_curve25519_ref10_fe_sq($4,$3);
 $$1 = 1;
 while(1) {
  $exitcond6 = ($$1|0)==(10);
  if ($exitcond6) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($4,$4);
  $7 = (($$1) + 1)|0;
  $$1 = $7;
 }
 _crypto_core_curve25519_ref10_fe_mul($4,$4,$3);
 _crypto_core_curve25519_ref10_fe_sq($5,$4);
 $$2 = 1;
 while(1) {
  $exitcond5 = ($$2|0)==(20);
  if ($exitcond5) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($5,$5);
  $8 = (($$2) + 1)|0;
  $$2 = $8;
 }
 _crypto_core_curve25519_ref10_fe_mul($4,$5,$4);
 _crypto_core_curve25519_ref10_fe_sq($4,$4);
 $$3 = 1;
 while(1) {
  $exitcond4 = ($$3|0)==(10);
  if ($exitcond4) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($4,$4);
  $9 = (($$3) + 1)|0;
  $$3 = $9;
 }
 _crypto_core_curve25519_ref10_fe_mul($3,$4,$3);
 _crypto_core_curve25519_ref10_fe_sq($4,$3);
 $$4 = 1;
 while(1) {
  $exitcond3 = ($$4|0)==(50);
  if ($exitcond3) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($4,$4);
  $10 = (($$4) + 1)|0;
  $$4 = $10;
 }
 _crypto_core_curve25519_ref10_fe_mul($4,$4,$3);
 _crypto_core_curve25519_ref10_fe_sq($5,$4);
 $$5 = 1;
 while(1) {
  $exitcond2 = ($$5|0)==(100);
  if ($exitcond2) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($5,$5);
  $11 = (($$5) + 1)|0;
  $$5 = $11;
 }
 _crypto_core_curve25519_ref10_fe_mul($4,$5,$4);
 _crypto_core_curve25519_ref10_fe_sq($4,$4);
 $$6 = 1;
 while(1) {
  $exitcond1 = ($$6|0)==(50);
  if ($exitcond1) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($4,$4);
  $12 = (($$6) + 1)|0;
  $$6 = $12;
 }
 _crypto_core_curve25519_ref10_fe_mul($3,$4,$3);
 _crypto_core_curve25519_ref10_fe_sq($3,$3);
 $$7 = 1;
 while(1) {
  $exitcond = ($$7|0)==(5);
  if ($exitcond) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($3,$3);
  $13 = (($$7) + 1)|0;
  $$7 = $13;
 }
 _crypto_core_curve25519_ref10_fe_mul($0,$3,$2);
 STACKTOP = sp;return;
}
function _crypto_core_curve25519_ref10_fe_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($1)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$2>>2]|0;
 $23 = ((($2)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($2)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($2)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($2)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($2)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($2)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($2)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($2)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($3) - ($22))|0;
 $42 = (($5) - ($24))|0;
 $43 = (($7) - ($26))|0;
 $44 = (($9) - ($28))|0;
 $45 = (($11) - ($30))|0;
 $46 = (($13) - ($32))|0;
 $47 = (($15) - ($34))|0;
 $48 = (($17) - ($36))|0;
 $49 = (($19) - ($38))|0;
 $50 = (($21) - ($40))|0;
 HEAP32[$0>>2] = $41;
 $51 = ((($0)) + 4|0);
 HEAP32[$51>>2] = $42;
 $52 = ((($0)) + 8|0);
 HEAP32[$52>>2] = $43;
 $53 = ((($0)) + 12|0);
 HEAP32[$53>>2] = $44;
 $54 = ((($0)) + 16|0);
 HEAP32[$54>>2] = $45;
 $55 = ((($0)) + 20|0);
 HEAP32[$55>>2] = $46;
 $56 = ((($0)) + 24|0);
 HEAP32[$56>>2] = $47;
 $57 = ((($0)) + 28|0);
 HEAP32[$57>>2] = $48;
 $58 = ((($0)) + 32|0);
 HEAP32[$58>>2] = $49;
 $59 = ((($0)) + 36|0);
 HEAP32[$59>>2] = $50;
 return;
}
function _crypto_core_curve25519_ref10_ge_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp_a;
 $4 = ((($1)) + 40|0);
 _crypto_core_curve25519_ref10_fe_add($0,$4,$1);
 $5 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_sub($5,$4,$1);
 $6 = ((($0)) + 80|0);
 _crypto_core_curve25519_ref10_fe_mul($6,$0,$2);
 $7 = ((($2)) + 40|0);
 _crypto_core_curve25519_ref10_fe_mul($5,$5,$7);
 $8 = ((($0)) + 120|0);
 $9 = ((($2)) + 120|0);
 $10 = ((($1)) + 120|0);
 _crypto_core_curve25519_ref10_fe_mul($8,$9,$10);
 $11 = ((($1)) + 80|0);
 $12 = ((($2)) + 80|0);
 _crypto_core_curve25519_ref10_fe_mul($0,$11,$12);
 _crypto_core_curve25519_ref10_fe_add($3,$0,$0);
 _crypto_core_curve25519_ref10_fe_sub($0,$6,$5);
 _crypto_core_curve25519_ref10_fe_add($5,$6,$5);
 _crypto_core_curve25519_ref10_fe_add($6,$3,$8);
 _crypto_core_curve25519_ref10_fe_sub($8,$3,$8);
 STACKTOP = sp;return;
}
function _crypto_core_curve25519_ref10_ge_frombytes_negate_vartime($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 208|0;
 $2 = sp_a + 160|0;
 $3 = sp_a + 120|0;
 $4 = sp_a + 80|0;
 $5 = sp_a + 40|0;
 $6 = sp_a;
 $7 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_frombytes($7,$1);
 $8 = ((($0)) + 80|0);
 _crypto_core_curve25519_ref10_fe_1($8);
 _crypto_core_curve25519_ref10_fe_sq($2,$7);
 _crypto_core_curve25519_ref10_fe_mul($3,$2,1104);
 _crypto_core_curve25519_ref10_fe_sub($2,$2,$8);
 _crypto_core_curve25519_ref10_fe_add($3,$3,$8);
 _crypto_core_curve25519_ref10_fe_sq($4,$3);
 _crypto_core_curve25519_ref10_fe_mul($4,$4,$3);
 _crypto_core_curve25519_ref10_fe_sq($0,$4);
 _crypto_core_curve25519_ref10_fe_mul($0,$0,$3);
 _crypto_core_curve25519_ref10_fe_mul($0,$0,$2);
 _fe_pow22523($0,$0);
 _crypto_core_curve25519_ref10_fe_mul($0,$0,$4);
 _crypto_core_curve25519_ref10_fe_mul($0,$0,$2);
 _crypto_core_curve25519_ref10_fe_sq($5,$0);
 _crypto_core_curve25519_ref10_fe_mul($5,$5,$3);
 _crypto_core_curve25519_ref10_fe_sub($6,$5,$2);
 $9 = (_crypto_core_curve25519_ref10_fe_isnonzero($6)|0);
 $10 = ($9|0)==(0);
 do {
  if (!($10)) {
   _crypto_core_curve25519_ref10_fe_add($6,$5,$2);
   $11 = (_crypto_core_curve25519_ref10_fe_isnonzero($6)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    _crypto_core_curve25519_ref10_fe_mul($0,$0,1144);
    break;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $13 = (_fe_isnegative($0)|0);
 $14 = ((($1)) + 31|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 >>> 7;
 $18 = ($13|0)==($17|0);
 if ($18) {
  _fe_neg($0,$0);
 }
 $19 = ((($0)) + 120|0);
 _crypto_core_curve25519_ref10_fe_mul($19,$0,$7);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _fe_pow22523($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond1 = 0, $exitcond2 = 0;
 var $exitcond3 = 0, $exitcond4 = 0, $exitcond5 = 0, $exitcond6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 128|0;
 $2 = sp_a + 80|0;
 $3 = sp_a + 40|0;
 $4 = sp_a;
 _crypto_core_curve25519_ref10_fe_sq($2,$1);
 _crypto_core_curve25519_ref10_fe_sq($3,$2);
 _crypto_core_curve25519_ref10_fe_sq($3,$3);
 _crypto_core_curve25519_ref10_fe_mul($3,$1,$3);
 _crypto_core_curve25519_ref10_fe_mul($2,$2,$3);
 _crypto_core_curve25519_ref10_fe_sq($2,$2);
 _crypto_core_curve25519_ref10_fe_mul($2,$3,$2);
 _crypto_core_curve25519_ref10_fe_sq($3,$2);
 $$0 = 1;
 while(1) {
  $exitcond6 = ($$0|0)==(5);
  if ($exitcond6) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($3,$3);
  $5 = (($$0) + 1)|0;
  $$0 = $5;
 }
 _crypto_core_curve25519_ref10_fe_mul($2,$3,$2);
 _crypto_core_curve25519_ref10_fe_sq($3,$2);
 $$1 = 1;
 while(1) {
  $exitcond5 = ($$1|0)==(10);
  if ($exitcond5) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($3,$3);
  $6 = (($$1) + 1)|0;
  $$1 = $6;
 }
 _crypto_core_curve25519_ref10_fe_mul($3,$3,$2);
 _crypto_core_curve25519_ref10_fe_sq($4,$3);
 $$2 = 1;
 while(1) {
  $exitcond4 = ($$2|0)==(20);
  if ($exitcond4) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($4,$4);
  $7 = (($$2) + 1)|0;
  $$2 = $7;
 }
 _crypto_core_curve25519_ref10_fe_mul($3,$4,$3);
 _crypto_core_curve25519_ref10_fe_sq($3,$3);
 $$3 = 1;
 while(1) {
  $exitcond3 = ($$3|0)==(10);
  if ($exitcond3) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($3,$3);
  $8 = (($$3) + 1)|0;
  $$3 = $8;
 }
 _crypto_core_curve25519_ref10_fe_mul($2,$3,$2);
 _crypto_core_curve25519_ref10_fe_sq($3,$2);
 $$4 = 1;
 while(1) {
  $exitcond2 = ($$4|0)==(50);
  if ($exitcond2) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($3,$3);
  $9 = (($$4) + 1)|0;
  $$4 = $9;
 }
 _crypto_core_curve25519_ref10_fe_mul($3,$3,$2);
 _crypto_core_curve25519_ref10_fe_sq($4,$3);
 $$5 = 1;
 while(1) {
  $exitcond1 = ($$5|0)==(100);
  if ($exitcond1) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($4,$4);
  $10 = (($$5) + 1)|0;
  $$5 = $10;
 }
 _crypto_core_curve25519_ref10_fe_mul($3,$4,$3);
 _crypto_core_curve25519_ref10_fe_sq($3,$3);
 $$6 = 1;
 while(1) {
  $exitcond = ($$6|0)==(50);
  if ($exitcond) {
   break;
  }
  _crypto_core_curve25519_ref10_fe_sq($3,$3);
  $11 = (($$6) + 1)|0;
  $$6 = $11;
 }
 _crypto_core_curve25519_ref10_fe_mul($2,$3,$2);
 _crypto_core_curve25519_ref10_fe_sq($2,$2);
 _crypto_core_curve25519_ref10_fe_sq($2,$2);
 _crypto_core_curve25519_ref10_fe_mul($0,$2,$1);
 STACKTOP = sp;return;
}
function _fe_isnegative($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp_a;
 _crypto_core_curve25519_ref10_fe_tobytes($1,$0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 1;
 $4 = $3&255;
 STACKTOP = sp;return ($4|0);
}
function _fe_neg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 var sp_a = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($1)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (0 - ($2))|0;
 $22 = (0 - ($4))|0;
 $23 = (0 - ($6))|0;
 $24 = (0 - ($8))|0;
 $25 = (0 - ($10))|0;
 $26 = (0 - ($12))|0;
 $27 = (0 - ($14))|0;
 $28 = (0 - ($16))|0;
 $29 = (0 - ($18))|0;
 $30 = (0 - ($20))|0;
 HEAP32[$0>>2] = $21;
 $31 = ((($0)) + 4|0);
 HEAP32[$31>>2] = $22;
 $32 = ((($0)) + 8|0);
 HEAP32[$32>>2] = $23;
 $33 = ((($0)) + 12|0);
 HEAP32[$33>>2] = $24;
 $34 = ((($0)) + 16|0);
 HEAP32[$34>>2] = $25;
 $35 = ((($0)) + 20|0);
 HEAP32[$35>>2] = $26;
 $36 = ((($0)) + 24|0);
 HEAP32[$36>>2] = $27;
 $37 = ((($0)) + 28|0);
 HEAP32[$37>>2] = $28;
 $38 = ((($0)) + 32|0);
 HEAP32[$38>>2] = $29;
 $39 = ((($0)) + 36|0);
 HEAP32[$39>>2] = $30;
 return;
}
function _crypto_core_curve25519_ref10_ge_p1p1_to_p2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 120|0);
 _crypto_core_curve25519_ref10_fe_mul($0,$1,$2);
 $3 = ((($0)) + 40|0);
 $4 = ((($1)) + 40|0);
 $5 = ((($1)) + 80|0);
 _crypto_core_curve25519_ref10_fe_mul($3,$4,$5);
 $6 = ((($0)) + 80|0);
 _crypto_core_curve25519_ref10_fe_mul($6,$5,$2);
 return;
}
function _crypto_core_curve25519_ref10_ge_p3_to_cached($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 40|0);
 _crypto_core_curve25519_ref10_fe_add($0,$2,$1);
 $3 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_sub($3,$2,$1);
 $4 = ((($0)) + 80|0);
 $5 = ((($1)) + 80|0);
 _crypto_core_curve25519_ref10_fe_copy($4,$5);
 $6 = ((($0)) + 120|0);
 $7 = ((($1)) + 120|0);
 _crypto_core_curve25519_ref10_fe_mul($6,$7,1184);
 return;
}
function _crypto_core_curve25519_ref10_ge_p3_tobytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 128|0;
 $2 = sp_a + 80|0;
 $3 = sp_a + 40|0;
 $4 = sp_a;
 $5 = ((($1)) + 80|0);
 _crypto_core_curve25519_ref10_fe_invert($2,$5);
 _crypto_core_curve25519_ref10_fe_mul($3,$1,$2);
 $6 = ((($1)) + 40|0);
 _crypto_core_curve25519_ref10_fe_mul($4,$6,$2);
 _crypto_core_curve25519_ref10_fe_tobytes($0,$4);
 $7 = (_fe_isnegative($3)|0);
 $8 = $7 << 7;
 $9 = ((($0)) + 31|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 ^ $8;
 $13 = $12&255;
 HEAP8[$9>>0] = $13;
 STACKTOP = sp;return;
}
function _crypto_core_curve25519_ref10_ge_tobytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 128|0;
 $2 = sp_a + 80|0;
 $3 = sp_a + 40|0;
 $4 = sp_a;
 $5 = ((($1)) + 80|0);
 _crypto_core_curve25519_ref10_fe_invert($2,$5);
 _crypto_core_curve25519_ref10_fe_mul($3,$1,$2);
 $6 = ((($1)) + 40|0);
 _crypto_core_curve25519_ref10_fe_mul($4,$6,$2);
 _crypto_core_curve25519_ref10_fe_tobytes($0,$4);
 $7 = (_fe_isnegative($3)|0);
 $8 = $7 << 7;
 $9 = ((($0)) + 31|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 ^ $8;
 $13 = $12&255;
 HEAP8[$9>>0] = $13;
 STACKTOP = sp;return;
}
function _crypto_core_curve25519_ref10_ge_double_scalarmult_vartime($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 2272|0;
 $4 = sp_a + 2016|0;
 $5 = sp_a + 1760|0;
 $6 = sp_a + 480|0;
 $7 = sp_a + 320|0;
 $8 = sp_a + 160|0;
 $9 = sp_a;
 _slide($4,$1);
 _slide($5,$3);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($6,$2);
 _ge_p3_dbl($7,$2);
 _ge_p1p1_to_p3($9,$7);
 _crypto_core_curve25519_ref10_ge_add($7,$9,$6);
 _ge_p1p1_to_p3($8,$7);
 $10 = ((($6)) + 160|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($10,$8);
 _crypto_core_curve25519_ref10_ge_add($7,$9,$10);
 _ge_p1p1_to_p3($8,$7);
 $11 = ((($6)) + 320|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($11,$8);
 _crypto_core_curve25519_ref10_ge_add($7,$9,$11);
 _ge_p1p1_to_p3($8,$7);
 $12 = ((($6)) + 480|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($12,$8);
 _crypto_core_curve25519_ref10_ge_add($7,$9,$12);
 _ge_p1p1_to_p3($8,$7);
 $13 = ((($6)) + 640|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($13,$8);
 _crypto_core_curve25519_ref10_ge_add($7,$9,$13);
 _ge_p1p1_to_p3($8,$7);
 $14 = ((($6)) + 800|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($14,$8);
 _crypto_core_curve25519_ref10_ge_add($7,$9,$14);
 _ge_p1p1_to_p3($8,$7);
 $15 = ((($6)) + 960|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($15,$8);
 _crypto_core_curve25519_ref10_ge_add($7,$9,$15);
 _ge_p1p1_to_p3($8,$7);
 $16 = ((($6)) + 1120|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($16,$8);
 _ge_p2_0($0);
 $$0 = 255;
 while(1) {
  $17 = ($$0|0)>(-1);
  if (!($17)) {
   $$1 = $$0;
   break;
  }
  $18 = (($4) + ($$0)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   $$1 = $$0;
   break;
  }
  $21 = (($5) + ($$0)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if (!($23)) {
   $$1 = $$0;
   break;
  }
  $24 = (($$0) + -1)|0;
  $$0 = $24;
 }
 while(1) {
  $25 = ($$1|0)>(-1);
  if (!($25)) {
   break;
  }
  _ge_p2_dbl($7,$0);
  $26 = (($4) + ($$1)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)>(0);
  if ($28) {
   _ge_p1p1_to_p3($8,$7);
   $29 = (($27<<24>>24) / 2)&-1;
   $30 = $29 << 24 >> 24;
   $31 = (($6) + (($30*160)|0)|0);
   _crypto_core_curve25519_ref10_ge_add($7,$8,$31);
  } else {
   $32 = ($27<<24>>24)<(0);
   if ($32) {
    _ge_p1p1_to_p3($8,$7);
    $33 = (($27<<24>>24) / -2)&-1;
    $34 = $33 << 24 >> 24;
    $35 = (($6) + (($34*160)|0)|0);
    _ge_sub($7,$8,$35);
   }
  }
  $36 = (($5) + ($$1)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = ($37<<24>>24)>(0);
  if ($38) {
   _ge_p1p1_to_p3($8,$7);
   $39 = (($37<<24>>24) / 2)&-1;
   $40 = $39 << 24 >> 24;
   $41 = (1224 + (($40*120)|0)|0);
   _ge_madd($7,$8,$41);
  } else {
   $42 = ($37<<24>>24)<(0);
   if ($42) {
    _ge_p1p1_to_p3($8,$7);
    $43 = (($37<<24>>24) / -2)&-1;
    $44 = $43 << 24 >> 24;
    $45 = (1224 + (($44*120)|0)|0);
    _ge_msub($7,$8,$45);
   }
  }
  _crypto_core_curve25519_ref10_ge_p1p1_to_p2($0,$7);
  $46 = (($$1) + -1)|0;
  $$1 = $46;
 }
 STACKTOP = sp;return;
}
function _slide($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$01 = 0;
 while(1) {
  $exitcond5 = ($$01|0)==(256);
  if ($exitcond5) {
   $$1 = 0;
   break;
  }
  $2 = $$01 >> 3;
  $3 = (($1) + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $$01 & 7;
  $7 = $5 >>> $6;
  $8 = $7 & 1;
  $9 = $8&255;
  $10 = (($0) + ($$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($$01) + 1)|0;
  $$01 = $11;
 }
 while(1) {
  $exitcond = ($$1|0)==(256);
  if ($exitcond) {
   break;
  }
  $12 = (($0) + ($$1)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(0);
  L7: do {
   if (!($14)) {
    $$02 = 1;
    while(1) {
     $15 = ($$02|0)<(7);
     if (!($15)) {
      break L7;
     }
     $16 = (($$1) + ($$02))|0;
     $17 = ($16|0)<(256);
     if (!($17)) {
      break L7;
     }
     $18 = (($0) + ($16)|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = ($19<<24>>24)==(0);
     L12: do {
      if (!($20)) {
       $21 = $19 << 24 >> 24;
       $22 = $21 << $$02;
       $23 = HEAP8[$12>>0]|0;
       $24 = $23 << 24 >> 24;
       $25 = (($24) + ($22))|0;
       $26 = ($25|0)<(16);
       if ($26) {
        $27 = $25&255;
        HEAP8[$12>>0] = $27;
        HEAP8[$18>>0] = 0;
        break;
       }
       $28 = (($24) - ($22))|0;
       $29 = ($28|0)>(-16);
       if (!($29)) {
        break L7;
       }
       $30 = $28&255;
       HEAP8[$12>>0] = $30;
       $$0 = $16;
       while(1) {
        $31 = ($$0|0)<(256);
        if (!($31)) {
         break L12;
        }
        $32 = (($0) + ($$0)|0);
        $33 = HEAP8[$32>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if ($34) {
         break;
        }
        HEAP8[$32>>0] = 0;
        $35 = (($$0) + 1)|0;
        $$0 = $35;
       }
       HEAP8[$32>>0] = 1;
      }
     } while(0);
     $36 = (($$02) + 1)|0;
     $$02 = $36;
    }
   }
  } while(0);
  $37 = (($$1) + 1)|0;
  $$1 = $37;
 }
 return;
}
function _ge_p3_dbl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 128|0;
 $2 = sp_a;
 _ge_p3_to_p2($2,$1);
 _ge_p2_dbl($0,$2);
 STACKTOP = sp;return;
}
function _ge_p1p1_to_p3($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 120|0);
 _crypto_core_curve25519_ref10_fe_mul($0,$1,$2);
 $3 = ((($0)) + 40|0);
 $4 = ((($1)) + 40|0);
 $5 = ((($1)) + 80|0);
 _crypto_core_curve25519_ref10_fe_mul($3,$4,$5);
 $6 = ((($0)) + 80|0);
 _crypto_core_curve25519_ref10_fe_mul($6,$5,$2);
 $7 = ((($0)) + 120|0);
 _crypto_core_curve25519_ref10_fe_mul($7,$1,$4);
 return;
}
function _ge_p2_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _crypto_core_curve25519_ref10_fe_0($0);
 $1 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_1($1);
 $2 = ((($0)) + 80|0);
 _crypto_core_curve25519_ref10_fe_1($2);
 return;
}
function _ge_p2_dbl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 48|0;
 $2 = sp_a;
 _crypto_core_curve25519_ref10_fe_sq($0,$1);
 $3 = ((($0)) + 80|0);
 $4 = ((($1)) + 40|0);
 _crypto_core_curve25519_ref10_fe_sq($3,$4);
 $5 = ((($0)) + 120|0);
 $6 = ((($1)) + 80|0);
 _fe_sq2($5,$6);
 $7 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_add($7,$1,$4);
 _crypto_core_curve25519_ref10_fe_sq($2,$7);
 _crypto_core_curve25519_ref10_fe_add($7,$3,$0);
 _crypto_core_curve25519_ref10_fe_sub($3,$3,$0);
 _crypto_core_curve25519_ref10_fe_sub($0,$2,$7);
 _crypto_core_curve25519_ref10_fe_sub($5,$5,$3);
 STACKTOP = sp;return;
}
function _ge_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp_a;
 $4 = ((($1)) + 40|0);
 _crypto_core_curve25519_ref10_fe_add($0,$4,$1);
 $5 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_sub($5,$4,$1);
 $6 = ((($0)) + 80|0);
 $7 = ((($2)) + 40|0);
 _crypto_core_curve25519_ref10_fe_mul($6,$0,$7);
 _crypto_core_curve25519_ref10_fe_mul($5,$5,$2);
 $8 = ((($0)) + 120|0);
 $9 = ((($2)) + 120|0);
 $10 = ((($1)) + 120|0);
 _crypto_core_curve25519_ref10_fe_mul($8,$9,$10);
 $11 = ((($1)) + 80|0);
 $12 = ((($2)) + 80|0);
 _crypto_core_curve25519_ref10_fe_mul($0,$11,$12);
 _crypto_core_curve25519_ref10_fe_add($3,$0,$0);
 _crypto_core_curve25519_ref10_fe_sub($0,$6,$5);
 _crypto_core_curve25519_ref10_fe_add($5,$6,$5);
 _crypto_core_curve25519_ref10_fe_sub($6,$3,$8);
 _crypto_core_curve25519_ref10_fe_add($8,$3,$8);
 STACKTOP = sp;return;
}
function _ge_madd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp_a;
 $4 = ((($1)) + 40|0);
 _crypto_core_curve25519_ref10_fe_add($0,$4,$1);
 $5 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_sub($5,$4,$1);
 $6 = ((($0)) + 80|0);
 _crypto_core_curve25519_ref10_fe_mul($6,$0,$2);
 $7 = ((($2)) + 40|0);
 _crypto_core_curve25519_ref10_fe_mul($5,$5,$7);
 $8 = ((($0)) + 120|0);
 $9 = ((($2)) + 80|0);
 $10 = ((($1)) + 120|0);
 _crypto_core_curve25519_ref10_fe_mul($8,$9,$10);
 $11 = ((($1)) + 80|0);
 _crypto_core_curve25519_ref10_fe_add($3,$11,$11);
 _crypto_core_curve25519_ref10_fe_sub($0,$6,$5);
 _crypto_core_curve25519_ref10_fe_add($5,$6,$5);
 _crypto_core_curve25519_ref10_fe_add($6,$3,$8);
 _crypto_core_curve25519_ref10_fe_sub($8,$3,$8);
 STACKTOP = sp;return;
}
function _ge_msub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp_a;
 $4 = ((($1)) + 40|0);
 _crypto_core_curve25519_ref10_fe_add($0,$4,$1);
 $5 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_sub($5,$4,$1);
 $6 = ((($0)) + 80|0);
 $7 = ((($2)) + 40|0);
 _crypto_core_curve25519_ref10_fe_mul($6,$0,$7);
 _crypto_core_curve25519_ref10_fe_mul($5,$5,$2);
 $8 = ((($0)) + 120|0);
 $9 = ((($2)) + 80|0);
 $10 = ((($1)) + 120|0);
 _crypto_core_curve25519_ref10_fe_mul($8,$9,$10);
 $11 = ((($1)) + 80|0);
 _crypto_core_curve25519_ref10_fe_add($3,$11,$11);
 _crypto_core_curve25519_ref10_fe_sub($0,$6,$5);
 _crypto_core_curve25519_ref10_fe_add($5,$6,$5);
 _crypto_core_curve25519_ref10_fe_sub($6,$3,$8);
 _crypto_core_curve25519_ref10_fe_add($8,$3,$8);
 STACKTOP = sp;return;
}
function _fe_sq2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($1)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2 << 1;
 $22 = $4 << 1;
 $23 = $6 << 1;
 $24 = $8 << 1;
 $25 = $10 << 1;
 $26 = $12 << 1;
 $27 = $14 << 1;
 $28 = $16 << 1;
 $29 = ($12*38)|0;
 $30 = ($14*19)|0;
 $31 = ($16*38)|0;
 $32 = ($18*19)|0;
 $33 = ($20*38)|0;
 $34 = ($2|0)<(0);
 $35 = $34 << 31 >> 31;
 $36 = (___muldi3(($2|0),($35|0),($2|0),($35|0))|0);
 $37 = tempRet0;
 $38 = ($21|0)<(0);
 $39 = $38 << 31 >> 31;
 $40 = ($4|0)<(0);
 $41 = $40 << 31 >> 31;
 $42 = (___muldi3(($21|0),($39|0),($4|0),($41|0))|0);
 $43 = tempRet0;
 $44 = ($6|0)<(0);
 $45 = $44 << 31 >> 31;
 $46 = (___muldi3(($21|0),($39|0),($6|0),($45|0))|0);
 $47 = tempRet0;
 $48 = ($8|0)<(0);
 $49 = $48 << 31 >> 31;
 $50 = (___muldi3(($21|0),($39|0),($8|0),($49|0))|0);
 $51 = tempRet0;
 $52 = ($10|0)<(0);
 $53 = $52 << 31 >> 31;
 $54 = (___muldi3(($21|0),($39|0),($10|0),($53|0))|0);
 $55 = tempRet0;
 $56 = ($12|0)<(0);
 $57 = $56 << 31 >> 31;
 $58 = (___muldi3(($21|0),($39|0),($12|0),($57|0))|0);
 $59 = tempRet0;
 $60 = ($14|0)<(0);
 $61 = $60 << 31 >> 31;
 $62 = (___muldi3(($21|0),($39|0),($14|0),($61|0))|0);
 $63 = tempRet0;
 $64 = ($16|0)<(0);
 $65 = $64 << 31 >> 31;
 $66 = (___muldi3(($21|0),($39|0),($16|0),($65|0))|0);
 $67 = tempRet0;
 $68 = ($18|0)<(0);
 $69 = $68 << 31 >> 31;
 $70 = (___muldi3(($21|0),($39|0),($18|0),($69|0))|0);
 $71 = tempRet0;
 $72 = ($20|0)<(0);
 $73 = $72 << 31 >> 31;
 $74 = (___muldi3(($21|0),($39|0),($20|0),($73|0))|0);
 $75 = tempRet0;
 $76 = ($22|0)<(0);
 $77 = $76 << 31 >> 31;
 $78 = (___muldi3(($22|0),($77|0),($4|0),($41|0))|0);
 $79 = tempRet0;
 $80 = (___muldi3(($22|0),($77|0),($6|0),($45|0))|0);
 $81 = tempRet0;
 $82 = ($24|0)<(0);
 $83 = $82 << 31 >> 31;
 $84 = (___muldi3(($22|0),($77|0),($24|0),($83|0))|0);
 $85 = tempRet0;
 $86 = (___muldi3(($22|0),($77|0),($10|0),($53|0))|0);
 $87 = tempRet0;
 $88 = ($26|0)<(0);
 $89 = $88 << 31 >> 31;
 $90 = (___muldi3(($22|0),($77|0),($26|0),($89|0))|0);
 $91 = tempRet0;
 $92 = (___muldi3(($22|0),($77|0),($14|0),($61|0))|0);
 $93 = tempRet0;
 $94 = ($28|0)<(0);
 $95 = $94 << 31 >> 31;
 $96 = (___muldi3(($22|0),($77|0),($28|0),($95|0))|0);
 $97 = tempRet0;
 $98 = (___muldi3(($22|0),($77|0),($18|0),($69|0))|0);
 $99 = tempRet0;
 $100 = ($33|0)<(0);
 $101 = $100 << 31 >> 31;
 $102 = (___muldi3(($22|0),($77|0),($33|0),($101|0))|0);
 $103 = tempRet0;
 $104 = (___muldi3(($6|0),($45|0),($6|0),($45|0))|0);
 $105 = tempRet0;
 $106 = ($23|0)<(0);
 $107 = $106 << 31 >> 31;
 $108 = (___muldi3(($23|0),($107|0),($8|0),($49|0))|0);
 $109 = tempRet0;
 $110 = (___muldi3(($23|0),($107|0),($10|0),($53|0))|0);
 $111 = tempRet0;
 $112 = (___muldi3(($23|0),($107|0),($12|0),($57|0))|0);
 $113 = tempRet0;
 $114 = (___muldi3(($23|0),($107|0),($14|0),($61|0))|0);
 $115 = tempRet0;
 $116 = (___muldi3(($23|0),($107|0),($16|0),($65|0))|0);
 $117 = tempRet0;
 $118 = ($32|0)<(0);
 $119 = $118 << 31 >> 31;
 $120 = (___muldi3(($23|0),($107|0),($32|0),($119|0))|0);
 $121 = tempRet0;
 $122 = (___muldi3(($6|0),($45|0),($33|0),($101|0))|0);
 $123 = tempRet0;
 $124 = (___muldi3(($24|0),($83|0),($8|0),($49|0))|0);
 $125 = tempRet0;
 $126 = (___muldi3(($24|0),($83|0),($10|0),($53|0))|0);
 $127 = tempRet0;
 $128 = (___muldi3(($24|0),($83|0),($26|0),($89|0))|0);
 $129 = tempRet0;
 $130 = (___muldi3(($24|0),($83|0),($14|0),($61|0))|0);
 $131 = tempRet0;
 $132 = ($31|0)<(0);
 $133 = $132 << 31 >> 31;
 $134 = (___muldi3(($24|0),($83|0),($31|0),($133|0))|0);
 $135 = tempRet0;
 $136 = (___muldi3(($24|0),($83|0),($32|0),($119|0))|0);
 $137 = tempRet0;
 $138 = (___muldi3(($24|0),($83|0),($33|0),($101|0))|0);
 $139 = tempRet0;
 $140 = (___muldi3(($10|0),($53|0),($10|0),($53|0))|0);
 $141 = tempRet0;
 $142 = ($25|0)<(0);
 $143 = $142 << 31 >> 31;
 $144 = (___muldi3(($25|0),($143|0),($12|0),($57|0))|0);
 $145 = tempRet0;
 $146 = ($30|0)<(0);
 $147 = $146 << 31 >> 31;
 $148 = (___muldi3(($25|0),($143|0),($30|0),($147|0))|0);
 $149 = tempRet0;
 $150 = (___muldi3(($10|0),($53|0),($31|0),($133|0))|0);
 $151 = tempRet0;
 $152 = (___muldi3(($25|0),($143|0),($32|0),($119|0))|0);
 $153 = tempRet0;
 $154 = (___muldi3(($10|0),($53|0),($33|0),($101|0))|0);
 $155 = tempRet0;
 $156 = ($29|0)<(0);
 $157 = $156 << 31 >> 31;
 $158 = (___muldi3(($12|0),($57|0),($29|0),($157|0))|0);
 $159 = tempRet0;
 $160 = (___muldi3(($26|0),($89|0),($30|0),($147|0))|0);
 $161 = tempRet0;
 $162 = (___muldi3(($26|0),($89|0),($31|0),($133|0))|0);
 $163 = tempRet0;
 $164 = (___muldi3(($26|0),($89|0),($32|0),($119|0))|0);
 $165 = tempRet0;
 $166 = (___muldi3(($26|0),($89|0),($33|0),($101|0))|0);
 $167 = tempRet0;
 $168 = (___muldi3(($14|0),($61|0),($30|0),($147|0))|0);
 $169 = tempRet0;
 $170 = (___muldi3(($14|0),($61|0),($31|0),($133|0))|0);
 $171 = tempRet0;
 $172 = ($27|0)<(0);
 $173 = $172 << 31 >> 31;
 $174 = (___muldi3(($27|0),($173|0),($32|0),($119|0))|0);
 $175 = tempRet0;
 $176 = (___muldi3(($14|0),($61|0),($33|0),($101|0))|0);
 $177 = tempRet0;
 $178 = (___muldi3(($16|0),($65|0),($31|0),($133|0))|0);
 $179 = tempRet0;
 $180 = (___muldi3(($28|0),($95|0),($32|0),($119|0))|0);
 $181 = tempRet0;
 $182 = (___muldi3(($28|0),($95|0),($33|0),($101|0))|0);
 $183 = tempRet0;
 $184 = (___muldi3(($18|0),($69|0),($32|0),($119|0))|0);
 $185 = tempRet0;
 $186 = (___muldi3(($18|0),($69|0),($33|0),($101|0))|0);
 $187 = tempRet0;
 $188 = (___muldi3(($20|0),($73|0),($33|0),($101|0))|0);
 $189 = tempRet0;
 $190 = (_i64Add(($36|0),($37|0),($102|0),($103|0))|0);
 $191 = tempRet0;
 $192 = (_i64Add(($190|0),($191|0),($120|0),($121|0))|0);
 $193 = tempRet0;
 $194 = (_i64Add(($192|0),($193|0),($134|0),($135|0))|0);
 $195 = tempRet0;
 $196 = (_i64Add(($194|0),($195|0),($148|0),($149|0))|0);
 $197 = tempRet0;
 $198 = (_i64Add(($196|0),($197|0),($158|0),($159|0))|0);
 $199 = tempRet0;
 $200 = (_i64Add(($42|0),($43|0),($122|0),($123|0))|0);
 $201 = tempRet0;
 $202 = (_i64Add(($200|0),($201|0),($136|0),($137|0))|0);
 $203 = tempRet0;
 $204 = (_i64Add(($202|0),($203|0),($150|0),($151|0))|0);
 $205 = tempRet0;
 $206 = (_i64Add(($204|0),($205|0),($160|0),($161|0))|0);
 $207 = tempRet0;
 $208 = (_i64Add(($46|0),($47|0),($78|0),($79|0))|0);
 $209 = tempRet0;
 $210 = (_i64Add(($208|0),($209|0),($138|0),($139|0))|0);
 $211 = tempRet0;
 $212 = (_i64Add(($210|0),($211|0),($152|0),($153|0))|0);
 $213 = tempRet0;
 $214 = (_i64Add(($212|0),($213|0),($162|0),($163|0))|0);
 $215 = tempRet0;
 $216 = (_i64Add(($214|0),($215|0),($168|0),($169|0))|0);
 $217 = tempRet0;
 $218 = (_i64Add(($50|0),($51|0),($80|0),($81|0))|0);
 $219 = tempRet0;
 $220 = (_i64Add(($218|0),($219|0),($154|0),($155|0))|0);
 $221 = tempRet0;
 $222 = (_i64Add(($220|0),($221|0),($164|0),($165|0))|0);
 $223 = tempRet0;
 $224 = (_i64Add(($222|0),($223|0),($170|0),($171|0))|0);
 $225 = tempRet0;
 $226 = (_i64Add(($54|0),($55|0),($84|0),($85|0))|0);
 $227 = tempRet0;
 $228 = (_i64Add(($226|0),($227|0),($104|0),($105|0))|0);
 $229 = tempRet0;
 $230 = (_i64Add(($228|0),($229|0),($166|0),($167|0))|0);
 $231 = tempRet0;
 $232 = (_i64Add(($230|0),($231|0),($174|0),($175|0))|0);
 $233 = tempRet0;
 $234 = (_i64Add(($232|0),($233|0),($178|0),($179|0))|0);
 $235 = tempRet0;
 $236 = (_i64Add(($58|0),($59|0),($86|0),($87|0))|0);
 $237 = tempRet0;
 $238 = (_i64Add(($236|0),($237|0),($108|0),($109|0))|0);
 $239 = tempRet0;
 $240 = (_i64Add(($238|0),($239|0),($176|0),($177|0))|0);
 $241 = tempRet0;
 $242 = (_i64Add(($240|0),($241|0),($180|0),($181|0))|0);
 $243 = tempRet0;
 $244 = (_i64Add(($62|0),($63|0),($90|0),($91|0))|0);
 $245 = tempRet0;
 $246 = (_i64Add(($244|0),($245|0),($110|0),($111|0))|0);
 $247 = tempRet0;
 $248 = (_i64Add(($246|0),($247|0),($124|0),($125|0))|0);
 $249 = tempRet0;
 $250 = (_i64Add(($248|0),($249|0),($182|0),($183|0))|0);
 $251 = tempRet0;
 $252 = (_i64Add(($250|0),($251|0),($184|0),($185|0))|0);
 $253 = tempRet0;
 $254 = (_i64Add(($66|0),($67|0),($92|0),($93|0))|0);
 $255 = tempRet0;
 $256 = (_i64Add(($254|0),($255|0),($112|0),($113|0))|0);
 $257 = tempRet0;
 $258 = (_i64Add(($256|0),($257|0),($126|0),($127|0))|0);
 $259 = tempRet0;
 $260 = (_i64Add(($258|0),($259|0),($186|0),($187|0))|0);
 $261 = tempRet0;
 $262 = (_i64Add(($70|0),($71|0),($96|0),($97|0))|0);
 $263 = tempRet0;
 $264 = (_i64Add(($262|0),($263|0),($114|0),($115|0))|0);
 $265 = tempRet0;
 $266 = (_i64Add(($264|0),($265|0),($128|0),($129|0))|0);
 $267 = tempRet0;
 $268 = (_i64Add(($266|0),($267|0),($140|0),($141|0))|0);
 $269 = tempRet0;
 $270 = (_i64Add(($268|0),($269|0),($188|0),($189|0))|0);
 $271 = tempRet0;
 $272 = (_i64Add(($74|0),($75|0),($98|0),($99|0))|0);
 $273 = tempRet0;
 $274 = (_i64Add(($272|0),($273|0),($116|0),($117|0))|0);
 $275 = tempRet0;
 $276 = (_i64Add(($274|0),($275|0),($130|0),($131|0))|0);
 $277 = tempRet0;
 $278 = (_i64Add(($276|0),($277|0),($144|0),($145|0))|0);
 $279 = tempRet0;
 $280 = (_bitshift64Shl(($198|0),($199|0),1)|0);
 $281 = tempRet0;
 $282 = (_bitshift64Shl(($206|0),($207|0),1)|0);
 $283 = tempRet0;
 $284 = (_bitshift64Shl(($216|0),($217|0),1)|0);
 $285 = tempRet0;
 $286 = (_bitshift64Shl(($224|0),($225|0),1)|0);
 $287 = tempRet0;
 $288 = (_bitshift64Shl(($234|0),($235|0),1)|0);
 $289 = tempRet0;
 $290 = (_bitshift64Shl(($242|0),($243|0),1)|0);
 $291 = tempRet0;
 $292 = (_bitshift64Shl(($252|0),($253|0),1)|0);
 $293 = tempRet0;
 $294 = (_bitshift64Shl(($260|0),($261|0),1)|0);
 $295 = tempRet0;
 $296 = (_bitshift64Shl(($270|0),($271|0),1)|0);
 $297 = tempRet0;
 $298 = (_bitshift64Shl(($278|0),($279|0),1)|0);
 $299 = tempRet0;
 $300 = (_i64Add(($280|0),($281|0),33554432,0)|0);
 $301 = tempRet0;
 $302 = (_bitshift64Ashr(($300|0),($301|0),26)|0);
 $303 = tempRet0;
 $304 = (_i64Add(($282|0),($283|0),($302|0),($303|0))|0);
 $305 = tempRet0;
 $306 = (_bitshift64Shl(($302|0),($303|0),26)|0);
 $307 = tempRet0;
 $308 = (_i64Subtract(($280|0),($281|0),($306|0),($307|0))|0);
 $309 = tempRet0;
 $310 = (_i64Add(($288|0),($289|0),33554432,0)|0);
 $311 = tempRet0;
 $312 = (_bitshift64Ashr(($310|0),($311|0),26)|0);
 $313 = tempRet0;
 $314 = (_i64Add(($290|0),($291|0),($312|0),($313|0))|0);
 $315 = tempRet0;
 $316 = (_bitshift64Shl(($312|0),($313|0),26)|0);
 $317 = tempRet0;
 $318 = (_i64Subtract(($288|0),($289|0),($316|0),($317|0))|0);
 $319 = tempRet0;
 $320 = (_i64Add(($304|0),($305|0),16777216,0)|0);
 $321 = tempRet0;
 $322 = (_bitshift64Ashr(($320|0),($321|0),25)|0);
 $323 = tempRet0;
 $324 = (_i64Add(($284|0),($285|0),($322|0),($323|0))|0);
 $325 = tempRet0;
 $326 = (_bitshift64Shl(($322|0),($323|0),25)|0);
 $327 = tempRet0;
 $328 = (_i64Subtract(($304|0),($305|0),($326|0),($327|0))|0);
 $329 = tempRet0;
 $330 = (_i64Add(($314|0),($315|0),16777216,0)|0);
 $331 = tempRet0;
 $332 = (_bitshift64Ashr(($330|0),($331|0),25)|0);
 $333 = tempRet0;
 $334 = (_i64Add(($292|0),($293|0),($332|0),($333|0))|0);
 $335 = tempRet0;
 $336 = (_bitshift64Shl(($332|0),($333|0),25)|0);
 $337 = tempRet0;
 $338 = (_i64Subtract(($314|0),($315|0),($336|0),($337|0))|0);
 $339 = tempRet0;
 $340 = (_i64Add(($324|0),($325|0),33554432,0)|0);
 $341 = tempRet0;
 $342 = (_bitshift64Ashr(($340|0),($341|0),26)|0);
 $343 = tempRet0;
 $344 = (_i64Add(($286|0),($287|0),($342|0),($343|0))|0);
 $345 = tempRet0;
 $346 = (_bitshift64Shl(($342|0),($343|0),26)|0);
 $347 = tempRet0;
 $348 = (_i64Subtract(($324|0),($325|0),($346|0),($347|0))|0);
 $349 = tempRet0;
 $350 = (_i64Add(($334|0),($335|0),33554432,0)|0);
 $351 = tempRet0;
 $352 = (_bitshift64Ashr(($350|0),($351|0),26)|0);
 $353 = tempRet0;
 $354 = (_i64Add(($294|0),($295|0),($352|0),($353|0))|0);
 $355 = tempRet0;
 $356 = (_bitshift64Shl(($352|0),($353|0),26)|0);
 $357 = tempRet0;
 $358 = (_i64Subtract(($334|0),($335|0),($356|0),($357|0))|0);
 $359 = tempRet0;
 $360 = (_i64Add(($344|0),($345|0),16777216,0)|0);
 $361 = tempRet0;
 $362 = (_bitshift64Ashr(($360|0),($361|0),25)|0);
 $363 = tempRet0;
 $364 = (_i64Add(($318|0),($319|0),($362|0),($363|0))|0);
 $365 = tempRet0;
 $366 = (_bitshift64Shl(($362|0),($363|0),25)|0);
 $367 = tempRet0;
 $368 = (_i64Subtract(($344|0),($345|0),($366|0),($367|0))|0);
 $369 = tempRet0;
 $370 = (_i64Add(($354|0),($355|0),16777216,0)|0);
 $371 = tempRet0;
 $372 = (_bitshift64Ashr(($370|0),($371|0),25)|0);
 $373 = tempRet0;
 $374 = (_i64Add(($296|0),($297|0),($372|0),($373|0))|0);
 $375 = tempRet0;
 $376 = (_bitshift64Shl(($372|0),($373|0),25)|0);
 $377 = tempRet0;
 $378 = (_i64Subtract(($354|0),($355|0),($376|0),($377|0))|0);
 $379 = tempRet0;
 $380 = (_i64Add(($364|0),($365|0),33554432,0)|0);
 $381 = tempRet0;
 $382 = (_bitshift64Ashr(($380|0),($381|0),26)|0);
 $383 = tempRet0;
 $384 = (_i64Add(($338|0),($339|0),($382|0),($383|0))|0);
 $385 = tempRet0;
 $386 = (_bitshift64Shl(($382|0),($383|0),26)|0);
 $387 = tempRet0;
 $388 = (_i64Subtract(($364|0),($365|0),($386|0),($387|0))|0);
 $389 = tempRet0;
 $390 = (_i64Add(($374|0),($375|0),33554432,0)|0);
 $391 = tempRet0;
 $392 = (_bitshift64Ashr(($390|0),($391|0),26)|0);
 $393 = tempRet0;
 $394 = (_i64Add(($298|0),($299|0),($392|0),($393|0))|0);
 $395 = tempRet0;
 $396 = (_bitshift64Shl(($392|0),($393|0),26)|0);
 $397 = tempRet0;
 $398 = (_i64Subtract(($374|0),($375|0),($396|0),($397|0))|0);
 $399 = tempRet0;
 $400 = (_i64Add(($394|0),($395|0),16777216,0)|0);
 $401 = tempRet0;
 $402 = (_bitshift64Ashr(($400|0),($401|0),25)|0);
 $403 = tempRet0;
 $404 = (___muldi3(($402|0),($403|0),19,0)|0);
 $405 = tempRet0;
 $406 = (_i64Add(($308|0),($309|0),($404|0),($405|0))|0);
 $407 = tempRet0;
 $408 = (_bitshift64Shl(($402|0),($403|0),25)|0);
 $409 = tempRet0;
 $410 = (_i64Subtract(($394|0),($395|0),($408|0),($409|0))|0);
 $411 = tempRet0;
 $412 = (_i64Add(($406|0),($407|0),33554432,0)|0);
 $413 = tempRet0;
 $414 = (_bitshift64Ashr(($412|0),($413|0),26)|0);
 $415 = tempRet0;
 $416 = (_i64Add(($328|0),($329|0),($414|0),($415|0))|0);
 $417 = tempRet0;
 $418 = (_bitshift64Shl(($414|0),($415|0),26)|0);
 $419 = tempRet0;
 $420 = (_i64Subtract(($406|0),($407|0),($418|0),($419|0))|0);
 $421 = tempRet0;
 HEAP32[$0>>2] = $420;
 $422 = ((($0)) + 4|0);
 HEAP32[$422>>2] = $416;
 $423 = ((($0)) + 8|0);
 HEAP32[$423>>2] = $348;
 $424 = ((($0)) + 12|0);
 HEAP32[$424>>2] = $368;
 $425 = ((($0)) + 16|0);
 HEAP32[$425>>2] = $388;
 $426 = ((($0)) + 20|0);
 HEAP32[$426>>2] = $384;
 $427 = ((($0)) + 24|0);
 HEAP32[$427>>2] = $358;
 $428 = ((($0)) + 28|0);
 HEAP32[$428>>2] = $378;
 $429 = ((($0)) + 32|0);
 HEAP32[$429>>2] = $398;
 $430 = ((($0)) + 36|0);
 HEAP32[$430>>2] = $410;
 return;
}
function _ge_p3_to_p2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _crypto_core_curve25519_ref10_fe_copy($0,$1);
 $2 = ((($0)) + 40|0);
 $3 = ((($1)) + 40|0);
 _crypto_core_curve25519_ref10_fe_copy($2,$3);
 $4 = ((($0)) + 80|0);
 $5 = ((($1)) + 80|0);
 _crypto_core_curve25519_ref10_fe_copy($4,$5);
 return;
}
function _ge_p3_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _crypto_core_curve25519_ref10_fe_0($0);
 $1 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_1($1);
 $2 = ((($0)) + 80|0);
 _crypto_core_curve25519_ref10_fe_1($2);
 $3 = ((($0)) + 120|0);
 _crypto_core_curve25519_ref10_fe_0($3);
 return;
}
function _crypto_core_curve25519_ref10_ge_scalarmult_base($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond3 = 0, $sext2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 464|0;
 $2 = sp_a + 400|0;
 $3 = sp_a + 240|0;
 $4 = sp_a + 120|0;
 $5 = sp_a;
 $$0 = 0;
 while(1) {
  $exitcond3 = ($$0|0)==(32);
  if ($exitcond3) {
   $$01 = 0;$$1 = 0;
   break;
  }
  $6 = (($1) + ($$0)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 & 15;
  $9 = $$0 << 1;
  $10 = (($2) + ($9)|0);
  HEAP8[$10>>0] = $8;
  $11 = ($7&255) >>> 4;
  $12 = $9 | 1;
  $13 = (($2) + ($12)|0);
  HEAP8[$13>>0] = $11;
  $14 = (($$0) + 1)|0;
  $$0 = $14;
 }
 while(1) {
  $exitcond = ($$1|0)==(63);
  if ($exitcond) {
   break;
  }
  $15 = $$01 & 255;
  $16 = (($2) + ($$1)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($18) + ($15))|0;
  $20 = $19 << 24;
  $sext2 = (($20) + 134217728)|0;
  $21 = $sext2 >> 28;
  $22 = $21 << 4;
  $23 = (($19) - ($22))|0;
  $24 = $23&255;
  HEAP8[$16>>0] = $24;
  $25 = (($$1) + 1)|0;
  $$01 = $21;$$1 = $25;
 }
 $26 = ((($2)) + 63|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (($28) + ($$01))|0;
 $30 = $29&255;
 HEAP8[$26>>0] = $30;
 _ge_p3_0($0);
 $$2 = 1;
 while(1) {
  $31 = ($$2|0)<(64);
  if (!($31)) {
   break;
  }
  $32 = (($$2|0) / 2)&-1;
  $33 = (($2) + ($$2)|0);
  $34 = HEAP8[$33>>0]|0;
  _ge_select($5,$32,$34);
  _ge_madd($3,$0,$5);
  _ge_p1p1_to_p3($0,$3);
  $35 = (($$2) + 2)|0;
  $$2 = $35;
 }
 _ge_p3_dbl($3,$0);
 _crypto_core_curve25519_ref10_ge_p1p1_to_p2($4,$3);
 _ge_p2_dbl($3,$4);
 _crypto_core_curve25519_ref10_ge_p1p1_to_p2($4,$3);
 _ge_p2_dbl($3,$4);
 _crypto_core_curve25519_ref10_ge_p1p1_to_p2($4,$3);
 _ge_p2_dbl($3,$4);
 _ge_p1p1_to_p3($0,$3);
 $$3 = 0;
 while(1) {
  $36 = ($$3|0)<(64);
  if (!($36)) {
   break;
  }
  $37 = (($$3|0) / 2)&-1;
  $38 = (($2) + ($$3)|0);
  $39 = HEAP8[$38>>0]|0;
  _ge_select($5,$37,$39);
  _ge_madd($3,$0,$5);
  _ge_p1p1_to_p3($0,$3);
  $40 = (($$3) + 2)|0;
  $$3 = $40;
 }
 STACKTOP = sp;return;
}
function _ge_select($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 128|0;
 $3 = sp_a;
 $4 = (_negative($2)|0);
 $5 = $2&255;
 $6 = $4&255;
 $7 = (0 - ($6))|0;
 $8 = $2 << 24 >> 24;
 $9 = $8 & $7;
 $10 = $9 << 1;
 $11 = (($5) - ($10))|0;
 $12 = $11&255;
 _ge_precomp_0($0);
 $13 = (2184 + (($1*960)|0)|0);
 $14 = (_equal($12,1)|0);
 _cmov($0,$13,$14);
 $15 = (((2184 + (($1*960)|0)|0)) + 120|0);
 $16 = (_equal($12,2)|0);
 _cmov($0,$15,$16);
 $17 = (((2184 + (($1*960)|0)|0)) + 240|0);
 $18 = (_equal($12,3)|0);
 _cmov($0,$17,$18);
 $19 = (((2184 + (($1*960)|0)|0)) + 360|0);
 $20 = (_equal($12,4)|0);
 _cmov($0,$19,$20);
 $21 = (((2184 + (($1*960)|0)|0)) + 480|0);
 $22 = (_equal($12,5)|0);
 _cmov($0,$21,$22);
 $23 = (((2184 + (($1*960)|0)|0)) + 600|0);
 $24 = (_equal($12,6)|0);
 _cmov($0,$23,$24);
 $25 = (((2184 + (($1*960)|0)|0)) + 720|0);
 $26 = (_equal($12,7)|0);
 _cmov($0,$25,$26);
 $27 = (((2184 + (($1*960)|0)|0)) + 840|0);
 $28 = (_equal($12,8)|0);
 _cmov($0,$27,$28);
 $29 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_copy($3,$29);
 $30 = ((($3)) + 40|0);
 _crypto_core_curve25519_ref10_fe_copy($30,$0);
 $31 = ((($3)) + 80|0);
 $32 = ((($0)) + 80|0);
 _fe_neg($31,$32);
 _cmov($0,$3,$4);
 STACKTOP = sp;return;
}
function _negative($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0 << 24 >> 24;
 $2 = ($1|0)<(0);
 $3 = $2 << 31 >> 31;
 $4 = (_bitshift64Lshr(($1|0),($3|0),63)|0);
 $5 = tempRet0;
 $6 = $4&255;
 return ($6|0);
}
function _ge_precomp_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _crypto_core_curve25519_ref10_fe_1($0);
 $1 = ((($0)) + 40|0);
 _crypto_core_curve25519_ref10_fe_1($1);
 $2 = ((($0)) + 80|0);
 _crypto_core_curve25519_ref10_fe_0($2);
 return;
}
function _equal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $0 ^ $1;
 $3 = $2&255;
 $4 = (($3) + -1)|0;
 $5 = $4 >>> 31;
 $6 = $5&255;
 return ($6|0);
}
function _cmov($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $2&255;
 _fe_cmov($0,$1,$3);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 40|0);
 _fe_cmov($4,$5,$3);
 $6 = ((($0)) + 80|0);
 $7 = ((($1)) + 80|0);
 _fe_cmov($6,$7,$3);
 return;
}
function _fe_cmov($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$1>>2]|0;
 $23 = ((($1)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($1)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($1)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($1)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($1)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($1)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($1)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $3 ^ $22;
 $42 = $5 ^ $24;
 $43 = $7 ^ $26;
 $44 = $9 ^ $28;
 $45 = $11 ^ $30;
 $46 = $13 ^ $32;
 $47 = $15 ^ $34;
 $48 = $17 ^ $36;
 $49 = $19 ^ $38;
 $50 = $21 ^ $40;
 $51 = (0 - ($2))|0;
 $52 = $41 & $51;
 $53 = $42 & $51;
 $54 = $43 & $51;
 $55 = $44 & $51;
 $56 = $45 & $51;
 $57 = $46 & $51;
 $58 = $47 & $51;
 $59 = $48 & $51;
 $60 = $49 & $51;
 $61 = $50 & $51;
 $62 = $3 ^ $52;
 HEAP32[$0>>2] = $62;
 $63 = $5 ^ $53;
 HEAP32[$4>>2] = $63;
 $64 = $7 ^ $54;
 HEAP32[$6>>2] = $64;
 $65 = $9 ^ $55;
 HEAP32[$8>>2] = $65;
 $66 = $11 ^ $56;
 HEAP32[$10>>2] = $66;
 $67 = $13 ^ $57;
 HEAP32[$12>>2] = $67;
 $68 = $15 ^ $58;
 HEAP32[$14>>2] = $68;
 $69 = $17 ^ $59;
 HEAP32[$16>>2] = $69;
 $70 = $19 ^ $60;
 HEAP32[$18>>2] = $70;
 $71 = $21 ^ $61;
 HEAP32[$20>>2] = $71;
 return;
}
function _crypto_core_curve25519_ref10_ge_mul_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 1760|0;
 $2 = sp_a + 480|0;
 $3 = sp_a + 320|0;
 $4 = sp_a + 160|0;
 $5 = sp_a;
 _crypto_core_curve25519_ref10_ge_p3_to_cached($2,$1);
 _ge_p3_dbl($3,$1);
 _ge_p1p1_to_p3($5,$3);
 _crypto_core_curve25519_ref10_ge_add($3,$5,$2);
 _ge_p1p1_to_p3($4,$3);
 $6 = ((($2)) + 160|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($6,$4);
 _crypto_core_curve25519_ref10_ge_add($3,$5,$6);
 _ge_p1p1_to_p3($4,$3);
 $7 = ((($2)) + 320|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($7,$4);
 _crypto_core_curve25519_ref10_ge_add($3,$5,$7);
 _ge_p1p1_to_p3($4,$3);
 $8 = ((($2)) + 480|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($8,$4);
 _crypto_core_curve25519_ref10_ge_add($3,$5,$8);
 _ge_p1p1_to_p3($4,$3);
 $9 = ((($2)) + 640|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($9,$4);
 _crypto_core_curve25519_ref10_ge_add($3,$5,$9);
 _ge_p1p1_to_p3($4,$3);
 $10 = ((($2)) + 800|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($10,$4);
 _crypto_core_curve25519_ref10_ge_add($3,$5,$10);
 _ge_p1p1_to_p3($4,$3);
 $11 = ((($2)) + 960|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($11,$4);
 _crypto_core_curve25519_ref10_ge_add($3,$5,$11);
 _ge_p1p1_to_p3($4,$3);
 $12 = ((($2)) + 1120|0);
 _crypto_core_curve25519_ref10_ge_p3_to_cached($12,$4);
 _ge_p3_0($0);
 $$0 = 252;
 while(1) {
  $13 = ($$0|0)>(-1);
  if (!($13)) {
   break;
  }
  _ge_p3_dbl($3,$0);
  $14 = (33477 + ($$0)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)>(0);
  if ($16) {
   _ge_p1p1_to_p3($4,$3);
   $17 = (($15<<24>>24) / 2)&-1;
   $18 = $17 << 24 >> 24;
   $19 = (($2) + (($18*160)|0)|0);
   _crypto_core_curve25519_ref10_ge_add($3,$4,$19);
  } else {
   $20 = ($15<<24>>24)<(0);
   if ($20) {
    _ge_p1p1_to_p3($4,$3);
    $21 = (($15<<24>>24) / -2)&-1;
    $22 = $21 << 24 >> 24;
    $23 = (($2) + (($22*160)|0)|0);
    _ge_sub($3,$4,$23);
   }
  }
  _ge_p1p1_to_p3($0,$3);
  $24 = (($$0) + -1)|0;
  $$0 = $24;
 }
 STACKTOP = sp;return;
}
function _crypto_core_curve25519_ref10_sc_muladd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx12 = 0, $$idx12$val = 0, $$idx13 = 0, $$idx13$val = 0, $$idx15 = 0, $$idx15$val = 0, $$idx16 = 0, $$idx16$val = 0, $$idx18 = 0, $$idx18$val = 0, $$idx19 = 0, $$idx19$val = 0, $$idx21 = 0, $$idx21$val = 0;
 var $$idx22 = 0, $$idx22$val = 0, $$idx24 = 0, $$idx24$val = 0, $$idx25 = 0, $$idx25$val = 0, $$idx27 = 0, $$idx27$val = 0, $$idx28 = 0, $$idx28$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx30 = 0, $$idx30$val = 0, $$idx31 = 0, $$idx31$val = 0, $$idx33 = 0, $$idx33$val = 0, $$idx34 = 0, $$idx34$val = 0;
 var $$idx36 = 0, $$idx36$val = 0, $$idx37 = 0, $$idx37$val = 0, $$idx39 = 0, $$idx39$val = 0, $$idx4 = 0, $$idx4$val = 0, $$idx40 = 0, $$idx40$val = 0, $$idx42 = 0, $$idx42$val = 0, $$idx43 = 0, $$idx43$val = 0, $$idx45 = 0, $$idx45$val = 0, $$idx46 = 0, $$idx46$val = 0, $$idx48 = 0, $$idx48$val = 0;
 var $$idx49 = 0, $$idx49$val = 0, $$idx51 = 0, $$idx51$val = 0, $$idx52 = 0, $$idx52$val = 0, $$idx6 = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx9 = 0, $$idx9$val = 0, $$val = 0, $$val11 = 0, $$val14 = 0, $$val17 = 0, $$val2 = 0, $$val20 = 0, $$val23 = 0, $$val26 = 0;
 var $$val29 = 0, $$val32 = 0, $$val35 = 0, $$val38 = 0, $$val41 = 0, $$val44 = 0, $$val47 = 0, $$val5 = 0, $$val50 = 0, $$val8 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0;
 var $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0;
 var $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0;
 var $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0;
 var $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0;
 var $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0;
 var $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0;
 var $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0;
 var $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0;
 var $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0;
 var $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0;
 var $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0;
 var $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0;
 var $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0;
 var $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0;
 var $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0;
 var $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0;
 var $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0;
 var $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0;
 var $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0;
 var $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0;
 var $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0;
 var $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0;
 var $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0;
 var $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0;
 var $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0;
 var $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0;
 var $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0;
 var $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0;
 var $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0;
 var $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0;
 var $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0;
 var $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0;
 var $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0;
 var $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0;
 var $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0;
 var $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0;
 var $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0;
 var $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0;
 var $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0;
 var $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0;
 var $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0;
 var $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0;
 var $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0;
 var $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$val50 = HEAP8[$1>>0]|0;
 $$idx51 = ((($1)) + 1|0);
 $$idx51$val = HEAP8[$$idx51>>0]|0;
 $$idx52 = ((($1)) + 2|0);
 $$idx52$val = HEAP8[$$idx52>>0]|0;
 $4 = (_load_3($$val50,$$idx51$val,$$idx52$val)|0);
 $5 = tempRet0;
 $6 = $4 & 2097151;
 $7 = (_load_4($$idx52)|0);
 $8 = tempRet0;
 $9 = (_bitshift64Lshr(($7|0),($8|0),5)|0);
 $10 = tempRet0;
 $11 = $9 & 2097151;
 $12 = ((($1)) + 5|0);
 $$val47 = HEAP8[$12>>0]|0;
 $$idx48 = ((($1)) + 6|0);
 $$idx48$val = HEAP8[$$idx48>>0]|0;
 $$idx49 = ((($1)) + 7|0);
 $$idx49$val = HEAP8[$$idx49>>0]|0;
 $13 = (_load_3($$val47,$$idx48$val,$$idx49$val)|0);
 $14 = tempRet0;
 $15 = (_bitshift64Lshr(($13|0),($14|0),2)|0);
 $16 = tempRet0;
 $17 = $15 & 2097151;
 $18 = (_load_4($$idx49)|0);
 $19 = tempRet0;
 $20 = (_bitshift64Lshr(($18|0),($19|0),7)|0);
 $21 = tempRet0;
 $22 = $20 & 2097151;
 $23 = ((($1)) + 10|0);
 $24 = (_load_4($23)|0);
 $25 = tempRet0;
 $26 = (_bitshift64Lshr(($24|0),($25|0),4)|0);
 $27 = tempRet0;
 $28 = $26 & 2097151;
 $29 = ((($1)) + 13|0);
 $$val44 = HEAP8[$29>>0]|0;
 $$idx45 = ((($1)) + 14|0);
 $$idx45$val = HEAP8[$$idx45>>0]|0;
 $$idx46 = ((($1)) + 15|0);
 $$idx46$val = HEAP8[$$idx46>>0]|0;
 $30 = (_load_3($$val44,$$idx45$val,$$idx46$val)|0);
 $31 = tempRet0;
 $32 = (_bitshift64Lshr(($30|0),($31|0),1)|0);
 $33 = tempRet0;
 $34 = $32 & 2097151;
 $35 = (_load_4($$idx46)|0);
 $36 = tempRet0;
 $37 = (_bitshift64Lshr(($35|0),($36|0),6)|0);
 $38 = tempRet0;
 $39 = $37 & 2097151;
 $40 = ((($1)) + 18|0);
 $$val41 = HEAP8[$40>>0]|0;
 $$idx42 = ((($1)) + 19|0);
 $$idx42$val = HEAP8[$$idx42>>0]|0;
 $$idx43 = ((($1)) + 20|0);
 $$idx43$val = HEAP8[$$idx43>>0]|0;
 $41 = (_load_3($$val41,$$idx42$val,$$idx43$val)|0);
 $42 = tempRet0;
 $43 = (_bitshift64Lshr(($41|0),($42|0),3)|0);
 $44 = tempRet0;
 $45 = $43 & 2097151;
 $46 = ((($1)) + 21|0);
 $$val38 = HEAP8[$46>>0]|0;
 $$idx39 = ((($1)) + 22|0);
 $$idx39$val = HEAP8[$$idx39>>0]|0;
 $$idx40 = ((($1)) + 23|0);
 $$idx40$val = HEAP8[$$idx40>>0]|0;
 $47 = (_load_3($$val38,$$idx39$val,$$idx40$val)|0);
 $48 = tempRet0;
 $49 = $47 & 2097151;
 $50 = (_load_4($$idx40)|0);
 $51 = tempRet0;
 $52 = (_bitshift64Lshr(($50|0),($51|0),5)|0);
 $53 = tempRet0;
 $54 = $52 & 2097151;
 $55 = ((($1)) + 26|0);
 $$val35 = HEAP8[$55>>0]|0;
 $$idx36 = ((($1)) + 27|0);
 $$idx36$val = HEAP8[$$idx36>>0]|0;
 $$idx37 = ((($1)) + 28|0);
 $$idx37$val = HEAP8[$$idx37>>0]|0;
 $56 = (_load_3($$val35,$$idx36$val,$$idx37$val)|0);
 $57 = tempRet0;
 $58 = (_bitshift64Lshr(($56|0),($57|0),2)|0);
 $59 = tempRet0;
 $60 = $58 & 2097151;
 $61 = (_load_4($$idx37)|0);
 $62 = tempRet0;
 $63 = (_bitshift64Lshr(($61|0),($62|0),7)|0);
 $64 = tempRet0;
 $$val32 = HEAP8[$2>>0]|0;
 $$idx33 = ((($2)) + 1|0);
 $$idx33$val = HEAP8[$$idx33>>0]|0;
 $$idx34 = ((($2)) + 2|0);
 $$idx34$val = HEAP8[$$idx34>>0]|0;
 $65 = (_load_3($$val32,$$idx33$val,$$idx34$val)|0);
 $66 = tempRet0;
 $67 = $65 & 2097151;
 $68 = (_load_4($$idx34)|0);
 $69 = tempRet0;
 $70 = (_bitshift64Lshr(($68|0),($69|0),5)|0);
 $71 = tempRet0;
 $72 = $70 & 2097151;
 $73 = ((($2)) + 5|0);
 $$val29 = HEAP8[$73>>0]|0;
 $$idx30 = ((($2)) + 6|0);
 $$idx30$val = HEAP8[$$idx30>>0]|0;
 $$idx31 = ((($2)) + 7|0);
 $$idx31$val = HEAP8[$$idx31>>0]|0;
 $74 = (_load_3($$val29,$$idx30$val,$$idx31$val)|0);
 $75 = tempRet0;
 $76 = (_bitshift64Lshr(($74|0),($75|0),2)|0);
 $77 = tempRet0;
 $78 = $76 & 2097151;
 $79 = (_load_4($$idx31)|0);
 $80 = tempRet0;
 $81 = (_bitshift64Lshr(($79|0),($80|0),7)|0);
 $82 = tempRet0;
 $83 = $81 & 2097151;
 $84 = ((($2)) + 10|0);
 $85 = (_load_4($84)|0);
 $86 = tempRet0;
 $87 = (_bitshift64Lshr(($85|0),($86|0),4)|0);
 $88 = tempRet0;
 $89 = $87 & 2097151;
 $90 = ((($2)) + 13|0);
 $$val26 = HEAP8[$90>>0]|0;
 $$idx27 = ((($2)) + 14|0);
 $$idx27$val = HEAP8[$$idx27>>0]|0;
 $$idx28 = ((($2)) + 15|0);
 $$idx28$val = HEAP8[$$idx28>>0]|0;
 $91 = (_load_3($$val26,$$idx27$val,$$idx28$val)|0);
 $92 = tempRet0;
 $93 = (_bitshift64Lshr(($91|0),($92|0),1)|0);
 $94 = tempRet0;
 $95 = $93 & 2097151;
 $96 = (_load_4($$idx28)|0);
 $97 = tempRet0;
 $98 = (_bitshift64Lshr(($96|0),($97|0),6)|0);
 $99 = tempRet0;
 $100 = $98 & 2097151;
 $101 = ((($2)) + 18|0);
 $$val23 = HEAP8[$101>>0]|0;
 $$idx24 = ((($2)) + 19|0);
 $$idx24$val = HEAP8[$$idx24>>0]|0;
 $$idx25 = ((($2)) + 20|0);
 $$idx25$val = HEAP8[$$idx25>>0]|0;
 $102 = (_load_3($$val23,$$idx24$val,$$idx25$val)|0);
 $103 = tempRet0;
 $104 = (_bitshift64Lshr(($102|0),($103|0),3)|0);
 $105 = tempRet0;
 $106 = $104 & 2097151;
 $107 = ((($2)) + 21|0);
 $$val20 = HEAP8[$107>>0]|0;
 $$idx21 = ((($2)) + 22|0);
 $$idx21$val = HEAP8[$$idx21>>0]|0;
 $$idx22 = ((($2)) + 23|0);
 $$idx22$val = HEAP8[$$idx22>>0]|0;
 $108 = (_load_3($$val20,$$idx21$val,$$idx22$val)|0);
 $109 = tempRet0;
 $110 = $108 & 2097151;
 $111 = (_load_4($$idx22)|0);
 $112 = tempRet0;
 $113 = (_bitshift64Lshr(($111|0),($112|0),5)|0);
 $114 = tempRet0;
 $115 = $113 & 2097151;
 $116 = ((($2)) + 26|0);
 $$val17 = HEAP8[$116>>0]|0;
 $$idx18 = ((($2)) + 27|0);
 $$idx18$val = HEAP8[$$idx18>>0]|0;
 $$idx19 = ((($2)) + 28|0);
 $$idx19$val = HEAP8[$$idx19>>0]|0;
 $117 = (_load_3($$val17,$$idx18$val,$$idx19$val)|0);
 $118 = tempRet0;
 $119 = (_bitshift64Lshr(($117|0),($118|0),2)|0);
 $120 = tempRet0;
 $121 = $119 & 2097151;
 $122 = (_load_4($$idx19)|0);
 $123 = tempRet0;
 $124 = (_bitshift64Lshr(($122|0),($123|0),7)|0);
 $125 = tempRet0;
 $$val14 = HEAP8[$3>>0]|0;
 $$idx15 = ((($3)) + 1|0);
 $$idx15$val = HEAP8[$$idx15>>0]|0;
 $$idx16 = ((($3)) + 2|0);
 $$idx16$val = HEAP8[$$idx16>>0]|0;
 $126 = (_load_3($$val14,$$idx15$val,$$idx16$val)|0);
 $127 = tempRet0;
 $128 = $126 & 2097151;
 $129 = (_load_4($$idx16)|0);
 $130 = tempRet0;
 $131 = (_bitshift64Lshr(($129|0),($130|0),5)|0);
 $132 = tempRet0;
 $133 = $131 & 2097151;
 $134 = ((($3)) + 5|0);
 $$val11 = HEAP8[$134>>0]|0;
 $$idx12 = ((($3)) + 6|0);
 $$idx12$val = HEAP8[$$idx12>>0]|0;
 $$idx13 = ((($3)) + 7|0);
 $$idx13$val = HEAP8[$$idx13>>0]|0;
 $135 = (_load_3($$val11,$$idx12$val,$$idx13$val)|0);
 $136 = tempRet0;
 $137 = (_bitshift64Lshr(($135|0),($136|0),2)|0);
 $138 = tempRet0;
 $139 = $137 & 2097151;
 $140 = (_load_4($$idx13)|0);
 $141 = tempRet0;
 $142 = (_bitshift64Lshr(($140|0),($141|0),7)|0);
 $143 = tempRet0;
 $144 = $142 & 2097151;
 $145 = ((($3)) + 10|0);
 $146 = (_load_4($145)|0);
 $147 = tempRet0;
 $148 = (_bitshift64Lshr(($146|0),($147|0),4)|0);
 $149 = tempRet0;
 $150 = $148 & 2097151;
 $151 = ((($3)) + 13|0);
 $$val8 = HEAP8[$151>>0]|0;
 $$idx9 = ((($3)) + 14|0);
 $$idx9$val = HEAP8[$$idx9>>0]|0;
 $$idx10 = ((($3)) + 15|0);
 $$idx10$val = HEAP8[$$idx10>>0]|0;
 $152 = (_load_3($$val8,$$idx9$val,$$idx10$val)|0);
 $153 = tempRet0;
 $154 = (_bitshift64Lshr(($152|0),($153|0),1)|0);
 $155 = tempRet0;
 $156 = $154 & 2097151;
 $157 = (_load_4($$idx10)|0);
 $158 = tempRet0;
 $159 = (_bitshift64Lshr(($157|0),($158|0),6)|0);
 $160 = tempRet0;
 $161 = $159 & 2097151;
 $162 = ((($3)) + 18|0);
 $$val5 = HEAP8[$162>>0]|0;
 $$idx6 = ((($3)) + 19|0);
 $$idx6$val = HEAP8[$$idx6>>0]|0;
 $$idx7 = ((($3)) + 20|0);
 $$idx7$val = HEAP8[$$idx7>>0]|0;
 $163 = (_load_3($$val5,$$idx6$val,$$idx7$val)|0);
 $164 = tempRet0;
 $165 = (_bitshift64Lshr(($163|0),($164|0),3)|0);
 $166 = tempRet0;
 $167 = $165 & 2097151;
 $168 = ((($3)) + 21|0);
 $$val2 = HEAP8[$168>>0]|0;
 $$idx3 = ((($3)) + 22|0);
 $$idx3$val = HEAP8[$$idx3>>0]|0;
 $$idx4 = ((($3)) + 23|0);
 $$idx4$val = HEAP8[$$idx4>>0]|0;
 $169 = (_load_3($$val2,$$idx3$val,$$idx4$val)|0);
 $170 = tempRet0;
 $171 = $169 & 2097151;
 $172 = (_load_4($$idx4)|0);
 $173 = tempRet0;
 $174 = (_bitshift64Lshr(($172|0),($173|0),5)|0);
 $175 = tempRet0;
 $176 = $174 & 2097151;
 $177 = ((($3)) + 26|0);
 $$val = HEAP8[$177>>0]|0;
 $$idx = ((($3)) + 27|0);
 $$idx$val = HEAP8[$$idx>>0]|0;
 $$idx1 = ((($3)) + 28|0);
 $$idx1$val = HEAP8[$$idx1>>0]|0;
 $178 = (_load_3($$val,$$idx$val,$$idx1$val)|0);
 $179 = tempRet0;
 $180 = (_bitshift64Lshr(($178|0),($179|0),2)|0);
 $181 = tempRet0;
 $182 = $180 & 2097151;
 $183 = (_load_4($$idx1)|0);
 $184 = tempRet0;
 $185 = (_bitshift64Lshr(($183|0),($184|0),7)|0);
 $186 = tempRet0;
 $187 = (___muldi3(($6|0),0,($67|0),0)|0);
 $188 = tempRet0;
 $189 = (_i64Add(($128|0),0,($187|0),($188|0))|0);
 $190 = tempRet0;
 $191 = (___muldi3(($6|0),0,($72|0),0)|0);
 $192 = tempRet0;
 $193 = (_i64Add(($133|0),0,($191|0),($192|0))|0);
 $194 = tempRet0;
 $195 = (___muldi3(($11|0),0,($67|0),0)|0);
 $196 = tempRet0;
 $197 = (_i64Add(($193|0),($194|0),($195|0),($196|0))|0);
 $198 = tempRet0;
 $199 = (___muldi3(($6|0),0,($78|0),0)|0);
 $200 = tempRet0;
 $201 = (_i64Add(($139|0),0,($199|0),($200|0))|0);
 $202 = tempRet0;
 $203 = (___muldi3(($11|0),0,($72|0),0)|0);
 $204 = tempRet0;
 $205 = (_i64Add(($201|0),($202|0),($203|0),($204|0))|0);
 $206 = tempRet0;
 $207 = (___muldi3(($17|0),0,($67|0),0)|0);
 $208 = tempRet0;
 $209 = (_i64Add(($205|0),($206|0),($207|0),($208|0))|0);
 $210 = tempRet0;
 $211 = (___muldi3(($6|0),0,($83|0),0)|0);
 $212 = tempRet0;
 $213 = (_i64Add(($144|0),0,($211|0),($212|0))|0);
 $214 = tempRet0;
 $215 = (___muldi3(($11|0),0,($78|0),0)|0);
 $216 = tempRet0;
 $217 = (_i64Add(($213|0),($214|0),($215|0),($216|0))|0);
 $218 = tempRet0;
 $219 = (___muldi3(($17|0),0,($72|0),0)|0);
 $220 = tempRet0;
 $221 = (_i64Add(($217|0),($218|0),($219|0),($220|0))|0);
 $222 = tempRet0;
 $223 = (___muldi3(($22|0),0,($67|0),0)|0);
 $224 = tempRet0;
 $225 = (_i64Add(($221|0),($222|0),($223|0),($224|0))|0);
 $226 = tempRet0;
 $227 = (___muldi3(($6|0),0,($89|0),0)|0);
 $228 = tempRet0;
 $229 = (_i64Add(($150|0),0,($227|0),($228|0))|0);
 $230 = tempRet0;
 $231 = (___muldi3(($11|0),0,($83|0),0)|0);
 $232 = tempRet0;
 $233 = (_i64Add(($229|0),($230|0),($231|0),($232|0))|0);
 $234 = tempRet0;
 $235 = (___muldi3(($17|0),0,($78|0),0)|0);
 $236 = tempRet0;
 $237 = (_i64Add(($233|0),($234|0),($235|0),($236|0))|0);
 $238 = tempRet0;
 $239 = (___muldi3(($22|0),0,($72|0),0)|0);
 $240 = tempRet0;
 $241 = (_i64Add(($237|0),($238|0),($239|0),($240|0))|0);
 $242 = tempRet0;
 $243 = (___muldi3(($28|0),0,($67|0),0)|0);
 $244 = tempRet0;
 $245 = (_i64Add(($241|0),($242|0),($243|0),($244|0))|0);
 $246 = tempRet0;
 $247 = (___muldi3(($6|0),0,($95|0),0)|0);
 $248 = tempRet0;
 $249 = (_i64Add(($156|0),0,($247|0),($248|0))|0);
 $250 = tempRet0;
 $251 = (___muldi3(($11|0),0,($89|0),0)|0);
 $252 = tempRet0;
 $253 = (_i64Add(($249|0),($250|0),($251|0),($252|0))|0);
 $254 = tempRet0;
 $255 = (___muldi3(($17|0),0,($83|0),0)|0);
 $256 = tempRet0;
 $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
 $258 = tempRet0;
 $259 = (___muldi3(($22|0),0,($78|0),0)|0);
 $260 = tempRet0;
 $261 = (_i64Add(($257|0),($258|0),($259|0),($260|0))|0);
 $262 = tempRet0;
 $263 = (___muldi3(($28|0),0,($72|0),0)|0);
 $264 = tempRet0;
 $265 = (_i64Add(($261|0),($262|0),($263|0),($264|0))|0);
 $266 = tempRet0;
 $267 = (___muldi3(($34|0),0,($67|0),0)|0);
 $268 = tempRet0;
 $269 = (_i64Add(($265|0),($266|0),($267|0),($268|0))|0);
 $270 = tempRet0;
 $271 = (___muldi3(($6|0),0,($100|0),0)|0);
 $272 = tempRet0;
 $273 = (_i64Add(($161|0),0,($271|0),($272|0))|0);
 $274 = tempRet0;
 $275 = (___muldi3(($11|0),0,($95|0),0)|0);
 $276 = tempRet0;
 $277 = (_i64Add(($273|0),($274|0),($275|0),($276|0))|0);
 $278 = tempRet0;
 $279 = (___muldi3(($17|0),0,($89|0),0)|0);
 $280 = tempRet0;
 $281 = (_i64Add(($277|0),($278|0),($279|0),($280|0))|0);
 $282 = tempRet0;
 $283 = (___muldi3(($22|0),0,($83|0),0)|0);
 $284 = tempRet0;
 $285 = (_i64Add(($281|0),($282|0),($283|0),($284|0))|0);
 $286 = tempRet0;
 $287 = (___muldi3(($28|0),0,($78|0),0)|0);
 $288 = tempRet0;
 $289 = (_i64Add(($285|0),($286|0),($287|0),($288|0))|0);
 $290 = tempRet0;
 $291 = (___muldi3(($34|0),0,($72|0),0)|0);
 $292 = tempRet0;
 $293 = (_i64Add(($289|0),($290|0),($291|0),($292|0))|0);
 $294 = tempRet0;
 $295 = (___muldi3(($39|0),0,($67|0),0)|0);
 $296 = tempRet0;
 $297 = (_i64Add(($293|0),($294|0),($295|0),($296|0))|0);
 $298 = tempRet0;
 $299 = (___muldi3(($6|0),0,($106|0),0)|0);
 $300 = tempRet0;
 $301 = (_i64Add(($167|0),0,($299|0),($300|0))|0);
 $302 = tempRet0;
 $303 = (___muldi3(($11|0),0,($100|0),0)|0);
 $304 = tempRet0;
 $305 = (_i64Add(($301|0),($302|0),($303|0),($304|0))|0);
 $306 = tempRet0;
 $307 = (___muldi3(($17|0),0,($95|0),0)|0);
 $308 = tempRet0;
 $309 = (_i64Add(($305|0),($306|0),($307|0),($308|0))|0);
 $310 = tempRet0;
 $311 = (___muldi3(($22|0),0,($89|0),0)|0);
 $312 = tempRet0;
 $313 = (_i64Add(($309|0),($310|0),($311|0),($312|0))|0);
 $314 = tempRet0;
 $315 = (___muldi3(($28|0),0,($83|0),0)|0);
 $316 = tempRet0;
 $317 = (_i64Add(($313|0),($314|0),($315|0),($316|0))|0);
 $318 = tempRet0;
 $319 = (___muldi3(($34|0),0,($78|0),0)|0);
 $320 = tempRet0;
 $321 = (_i64Add(($317|0),($318|0),($319|0),($320|0))|0);
 $322 = tempRet0;
 $323 = (___muldi3(($39|0),0,($72|0),0)|0);
 $324 = tempRet0;
 $325 = (_i64Add(($321|0),($322|0),($323|0),($324|0))|0);
 $326 = tempRet0;
 $327 = (___muldi3(($45|0),0,($67|0),0)|0);
 $328 = tempRet0;
 $329 = (_i64Add(($325|0),($326|0),($327|0),($328|0))|0);
 $330 = tempRet0;
 $331 = (___muldi3(($6|0),0,($110|0),0)|0);
 $332 = tempRet0;
 $333 = (_i64Add(($171|0),0,($331|0),($332|0))|0);
 $334 = tempRet0;
 $335 = (___muldi3(($11|0),0,($106|0),0)|0);
 $336 = tempRet0;
 $337 = (_i64Add(($333|0),($334|0),($335|0),($336|0))|0);
 $338 = tempRet0;
 $339 = (___muldi3(($17|0),0,($100|0),0)|0);
 $340 = tempRet0;
 $341 = (_i64Add(($337|0),($338|0),($339|0),($340|0))|0);
 $342 = tempRet0;
 $343 = (___muldi3(($22|0),0,($95|0),0)|0);
 $344 = tempRet0;
 $345 = (_i64Add(($341|0),($342|0),($343|0),($344|0))|0);
 $346 = tempRet0;
 $347 = (___muldi3(($28|0),0,($89|0),0)|0);
 $348 = tempRet0;
 $349 = (_i64Add(($345|0),($346|0),($347|0),($348|0))|0);
 $350 = tempRet0;
 $351 = (___muldi3(($34|0),0,($83|0),0)|0);
 $352 = tempRet0;
 $353 = (_i64Add(($349|0),($350|0),($351|0),($352|0))|0);
 $354 = tempRet0;
 $355 = (___muldi3(($39|0),0,($78|0),0)|0);
 $356 = tempRet0;
 $357 = (_i64Add(($353|0),($354|0),($355|0),($356|0))|0);
 $358 = tempRet0;
 $359 = (___muldi3(($45|0),0,($72|0),0)|0);
 $360 = tempRet0;
 $361 = (_i64Add(($357|0),($358|0),($359|0),($360|0))|0);
 $362 = tempRet0;
 $363 = (___muldi3(($49|0),0,($67|0),0)|0);
 $364 = tempRet0;
 $365 = (_i64Add(($361|0),($362|0),($363|0),($364|0))|0);
 $366 = tempRet0;
 $367 = (___muldi3(($6|0),0,($115|0),0)|0);
 $368 = tempRet0;
 $369 = (_i64Add(($176|0),0,($367|0),($368|0))|0);
 $370 = tempRet0;
 $371 = (___muldi3(($11|0),0,($110|0),0)|0);
 $372 = tempRet0;
 $373 = (_i64Add(($369|0),($370|0),($371|0),($372|0))|0);
 $374 = tempRet0;
 $375 = (___muldi3(($17|0),0,($106|0),0)|0);
 $376 = tempRet0;
 $377 = (_i64Add(($373|0),($374|0),($375|0),($376|0))|0);
 $378 = tempRet0;
 $379 = (___muldi3(($22|0),0,($100|0),0)|0);
 $380 = tempRet0;
 $381 = (_i64Add(($377|0),($378|0),($379|0),($380|0))|0);
 $382 = tempRet0;
 $383 = (___muldi3(($28|0),0,($95|0),0)|0);
 $384 = tempRet0;
 $385 = (_i64Add(($381|0),($382|0),($383|0),($384|0))|0);
 $386 = tempRet0;
 $387 = (___muldi3(($34|0),0,($89|0),0)|0);
 $388 = tempRet0;
 $389 = (_i64Add(($385|0),($386|0),($387|0),($388|0))|0);
 $390 = tempRet0;
 $391 = (___muldi3(($39|0),0,($83|0),0)|0);
 $392 = tempRet0;
 $393 = (_i64Add(($389|0),($390|0),($391|0),($392|0))|0);
 $394 = tempRet0;
 $395 = (___muldi3(($45|0),0,($78|0),0)|0);
 $396 = tempRet0;
 $397 = (_i64Add(($393|0),($394|0),($395|0),($396|0))|0);
 $398 = tempRet0;
 $399 = (___muldi3(($49|0),0,($72|0),0)|0);
 $400 = tempRet0;
 $401 = (_i64Add(($397|0),($398|0),($399|0),($400|0))|0);
 $402 = tempRet0;
 $403 = (___muldi3(($54|0),0,($67|0),0)|0);
 $404 = tempRet0;
 $405 = (_i64Add(($401|0),($402|0),($403|0),($404|0))|0);
 $406 = tempRet0;
 $407 = (___muldi3(($6|0),0,($121|0),0)|0);
 $408 = tempRet0;
 $409 = (_i64Add(($182|0),0,($407|0),($408|0))|0);
 $410 = tempRet0;
 $411 = (___muldi3(($11|0),0,($115|0),0)|0);
 $412 = tempRet0;
 $413 = (_i64Add(($409|0),($410|0),($411|0),($412|0))|0);
 $414 = tempRet0;
 $415 = (___muldi3(($17|0),0,($110|0),0)|0);
 $416 = tempRet0;
 $417 = (_i64Add(($413|0),($414|0),($415|0),($416|0))|0);
 $418 = tempRet0;
 $419 = (___muldi3(($22|0),0,($106|0),0)|0);
 $420 = tempRet0;
 $421 = (_i64Add(($417|0),($418|0),($419|0),($420|0))|0);
 $422 = tempRet0;
 $423 = (___muldi3(($28|0),0,($100|0),0)|0);
 $424 = tempRet0;
 $425 = (_i64Add(($421|0),($422|0),($423|0),($424|0))|0);
 $426 = tempRet0;
 $427 = (___muldi3(($34|0),0,($95|0),0)|0);
 $428 = tempRet0;
 $429 = (_i64Add(($425|0),($426|0),($427|0),($428|0))|0);
 $430 = tempRet0;
 $431 = (___muldi3(($39|0),0,($89|0),0)|0);
 $432 = tempRet0;
 $433 = (_i64Add(($429|0),($430|0),($431|0),($432|0))|0);
 $434 = tempRet0;
 $435 = (___muldi3(($45|0),0,($83|0),0)|0);
 $436 = tempRet0;
 $437 = (_i64Add(($433|0),($434|0),($435|0),($436|0))|0);
 $438 = tempRet0;
 $439 = (___muldi3(($49|0),0,($78|0),0)|0);
 $440 = tempRet0;
 $441 = (_i64Add(($437|0),($438|0),($439|0),($440|0))|0);
 $442 = tempRet0;
 $443 = (___muldi3(($54|0),0,($72|0),0)|0);
 $444 = tempRet0;
 $445 = (_i64Add(($441|0),($442|0),($443|0),($444|0))|0);
 $446 = tempRet0;
 $447 = (___muldi3(($60|0),0,($67|0),0)|0);
 $448 = tempRet0;
 $449 = (_i64Add(($445|0),($446|0),($447|0),($448|0))|0);
 $450 = tempRet0;
 $451 = (___muldi3(($6|0),0,($124|0),($125|0))|0);
 $452 = tempRet0;
 $453 = (_i64Add(($185|0),($186|0),($451|0),($452|0))|0);
 $454 = tempRet0;
 $455 = (___muldi3(($11|0),0,($121|0),0)|0);
 $456 = tempRet0;
 $457 = (_i64Add(($453|0),($454|0),($455|0),($456|0))|0);
 $458 = tempRet0;
 $459 = (___muldi3(($17|0),0,($115|0),0)|0);
 $460 = tempRet0;
 $461 = (_i64Add(($457|0),($458|0),($459|0),($460|0))|0);
 $462 = tempRet0;
 $463 = (___muldi3(($22|0),0,($110|0),0)|0);
 $464 = tempRet0;
 $465 = (_i64Add(($461|0),($462|0),($463|0),($464|0))|0);
 $466 = tempRet0;
 $467 = (___muldi3(($28|0),0,($106|0),0)|0);
 $468 = tempRet0;
 $469 = (_i64Add(($465|0),($466|0),($467|0),($468|0))|0);
 $470 = tempRet0;
 $471 = (___muldi3(($34|0),0,($100|0),0)|0);
 $472 = tempRet0;
 $473 = (_i64Add(($469|0),($470|0),($471|0),($472|0))|0);
 $474 = tempRet0;
 $475 = (___muldi3(($39|0),0,($95|0),0)|0);
 $476 = tempRet0;
 $477 = (_i64Add(($473|0),($474|0),($475|0),($476|0))|0);
 $478 = tempRet0;
 $479 = (___muldi3(($45|0),0,($89|0),0)|0);
 $480 = tempRet0;
 $481 = (_i64Add(($477|0),($478|0),($479|0),($480|0))|0);
 $482 = tempRet0;
 $483 = (___muldi3(($49|0),0,($83|0),0)|0);
 $484 = tempRet0;
 $485 = (_i64Add(($481|0),($482|0),($483|0),($484|0))|0);
 $486 = tempRet0;
 $487 = (___muldi3(($54|0),0,($78|0),0)|0);
 $488 = tempRet0;
 $489 = (_i64Add(($485|0),($486|0),($487|0),($488|0))|0);
 $490 = tempRet0;
 $491 = (___muldi3(($60|0),0,($72|0),0)|0);
 $492 = tempRet0;
 $493 = (_i64Add(($489|0),($490|0),($491|0),($492|0))|0);
 $494 = tempRet0;
 $495 = (___muldi3(($63|0),($64|0),($67|0),0)|0);
 $496 = tempRet0;
 $497 = (_i64Add(($493|0),($494|0),($495|0),($496|0))|0);
 $498 = tempRet0;
 $499 = (___muldi3(($11|0),0,($124|0),($125|0))|0);
 $500 = tempRet0;
 $501 = (___muldi3(($17|0),0,($121|0),0)|0);
 $502 = tempRet0;
 $503 = (_i64Add(($499|0),($500|0),($501|0),($502|0))|0);
 $504 = tempRet0;
 $505 = (___muldi3(($22|0),0,($115|0),0)|0);
 $506 = tempRet0;
 $507 = (_i64Add(($503|0),($504|0),($505|0),($506|0))|0);
 $508 = tempRet0;
 $509 = (___muldi3(($28|0),0,($110|0),0)|0);
 $510 = tempRet0;
 $511 = (_i64Add(($507|0),($508|0),($509|0),($510|0))|0);
 $512 = tempRet0;
 $513 = (___muldi3(($34|0),0,($106|0),0)|0);
 $514 = tempRet0;
 $515 = (_i64Add(($511|0),($512|0),($513|0),($514|0))|0);
 $516 = tempRet0;
 $517 = (___muldi3(($39|0),0,($100|0),0)|0);
 $518 = tempRet0;
 $519 = (_i64Add(($515|0),($516|0),($517|0),($518|0))|0);
 $520 = tempRet0;
 $521 = (___muldi3(($45|0),0,($95|0),0)|0);
 $522 = tempRet0;
 $523 = (_i64Add(($519|0),($520|0),($521|0),($522|0))|0);
 $524 = tempRet0;
 $525 = (___muldi3(($49|0),0,($89|0),0)|0);
 $526 = tempRet0;
 $527 = (_i64Add(($523|0),($524|0),($525|0),($526|0))|0);
 $528 = tempRet0;
 $529 = (___muldi3(($54|0),0,($83|0),0)|0);
 $530 = tempRet0;
 $531 = (_i64Add(($527|0),($528|0),($529|0),($530|0))|0);
 $532 = tempRet0;
 $533 = (___muldi3(($60|0),0,($78|0),0)|0);
 $534 = tempRet0;
 $535 = (_i64Add(($531|0),($532|0),($533|0),($534|0))|0);
 $536 = tempRet0;
 $537 = (___muldi3(($63|0),($64|0),($72|0),0)|0);
 $538 = tempRet0;
 $539 = (_i64Add(($535|0),($536|0),($537|0),($538|0))|0);
 $540 = tempRet0;
 $541 = (___muldi3(($17|0),0,($124|0),($125|0))|0);
 $542 = tempRet0;
 $543 = (___muldi3(($22|0),0,($121|0),0)|0);
 $544 = tempRet0;
 $545 = (_i64Add(($541|0),($542|0),($543|0),($544|0))|0);
 $546 = tempRet0;
 $547 = (___muldi3(($28|0),0,($115|0),0)|0);
 $548 = tempRet0;
 $549 = (_i64Add(($545|0),($546|0),($547|0),($548|0))|0);
 $550 = tempRet0;
 $551 = (___muldi3(($34|0),0,($110|0),0)|0);
 $552 = tempRet0;
 $553 = (_i64Add(($549|0),($550|0),($551|0),($552|0))|0);
 $554 = tempRet0;
 $555 = (___muldi3(($39|0),0,($106|0),0)|0);
 $556 = tempRet0;
 $557 = (_i64Add(($553|0),($554|0),($555|0),($556|0))|0);
 $558 = tempRet0;
 $559 = (___muldi3(($45|0),0,($100|0),0)|0);
 $560 = tempRet0;
 $561 = (_i64Add(($557|0),($558|0),($559|0),($560|0))|0);
 $562 = tempRet0;
 $563 = (___muldi3(($49|0),0,($95|0),0)|0);
 $564 = tempRet0;
 $565 = (_i64Add(($561|0),($562|0),($563|0),($564|0))|0);
 $566 = tempRet0;
 $567 = (___muldi3(($54|0),0,($89|0),0)|0);
 $568 = tempRet0;
 $569 = (_i64Add(($565|0),($566|0),($567|0),($568|0))|0);
 $570 = tempRet0;
 $571 = (___muldi3(($60|0),0,($83|0),0)|0);
 $572 = tempRet0;
 $573 = (_i64Add(($569|0),($570|0),($571|0),($572|0))|0);
 $574 = tempRet0;
 $575 = (___muldi3(($63|0),($64|0),($78|0),0)|0);
 $576 = tempRet0;
 $577 = (_i64Add(($573|0),($574|0),($575|0),($576|0))|0);
 $578 = tempRet0;
 $579 = (___muldi3(($22|0),0,($124|0),($125|0))|0);
 $580 = tempRet0;
 $581 = (___muldi3(($28|0),0,($121|0),0)|0);
 $582 = tempRet0;
 $583 = (_i64Add(($579|0),($580|0),($581|0),($582|0))|0);
 $584 = tempRet0;
 $585 = (___muldi3(($34|0),0,($115|0),0)|0);
 $586 = tempRet0;
 $587 = (_i64Add(($583|0),($584|0),($585|0),($586|0))|0);
 $588 = tempRet0;
 $589 = (___muldi3(($39|0),0,($110|0),0)|0);
 $590 = tempRet0;
 $591 = (_i64Add(($587|0),($588|0),($589|0),($590|0))|0);
 $592 = tempRet0;
 $593 = (___muldi3(($45|0),0,($106|0),0)|0);
 $594 = tempRet0;
 $595 = (_i64Add(($591|0),($592|0),($593|0),($594|0))|0);
 $596 = tempRet0;
 $597 = (___muldi3(($49|0),0,($100|0),0)|0);
 $598 = tempRet0;
 $599 = (_i64Add(($595|0),($596|0),($597|0),($598|0))|0);
 $600 = tempRet0;
 $601 = (___muldi3(($54|0),0,($95|0),0)|0);
 $602 = tempRet0;
 $603 = (_i64Add(($599|0),($600|0),($601|0),($602|0))|0);
 $604 = tempRet0;
 $605 = (___muldi3(($60|0),0,($89|0),0)|0);
 $606 = tempRet0;
 $607 = (_i64Add(($603|0),($604|0),($605|0),($606|0))|0);
 $608 = tempRet0;
 $609 = (___muldi3(($63|0),($64|0),($83|0),0)|0);
 $610 = tempRet0;
 $611 = (_i64Add(($607|0),($608|0),($609|0),($610|0))|0);
 $612 = tempRet0;
 $613 = (___muldi3(($28|0),0,($124|0),($125|0))|0);
 $614 = tempRet0;
 $615 = (___muldi3(($34|0),0,($121|0),0)|0);
 $616 = tempRet0;
 $617 = (_i64Add(($613|0),($614|0),($615|0),($616|0))|0);
 $618 = tempRet0;
 $619 = (___muldi3(($39|0),0,($115|0),0)|0);
 $620 = tempRet0;
 $621 = (_i64Add(($617|0),($618|0),($619|0),($620|0))|0);
 $622 = tempRet0;
 $623 = (___muldi3(($45|0),0,($110|0),0)|0);
 $624 = tempRet0;
 $625 = (_i64Add(($621|0),($622|0),($623|0),($624|0))|0);
 $626 = tempRet0;
 $627 = (___muldi3(($49|0),0,($106|0),0)|0);
 $628 = tempRet0;
 $629 = (_i64Add(($625|0),($626|0),($627|0),($628|0))|0);
 $630 = tempRet0;
 $631 = (___muldi3(($54|0),0,($100|0),0)|0);
 $632 = tempRet0;
 $633 = (_i64Add(($629|0),($630|0),($631|0),($632|0))|0);
 $634 = tempRet0;
 $635 = (___muldi3(($60|0),0,($95|0),0)|0);
 $636 = tempRet0;
 $637 = (_i64Add(($633|0),($634|0),($635|0),($636|0))|0);
 $638 = tempRet0;
 $639 = (___muldi3(($63|0),($64|0),($89|0),0)|0);
 $640 = tempRet0;
 $641 = (_i64Add(($637|0),($638|0),($639|0),($640|0))|0);
 $642 = tempRet0;
 $643 = (___muldi3(($34|0),0,($124|0),($125|0))|0);
 $644 = tempRet0;
 $645 = (___muldi3(($39|0),0,($121|0),0)|0);
 $646 = tempRet0;
 $647 = (_i64Add(($643|0),($644|0),($645|0),($646|0))|0);
 $648 = tempRet0;
 $649 = (___muldi3(($45|0),0,($115|0),0)|0);
 $650 = tempRet0;
 $651 = (_i64Add(($647|0),($648|0),($649|0),($650|0))|0);
 $652 = tempRet0;
 $653 = (___muldi3(($49|0),0,($110|0),0)|0);
 $654 = tempRet0;
 $655 = (_i64Add(($651|0),($652|0),($653|0),($654|0))|0);
 $656 = tempRet0;
 $657 = (___muldi3(($54|0),0,($106|0),0)|0);
 $658 = tempRet0;
 $659 = (_i64Add(($655|0),($656|0),($657|0),($658|0))|0);
 $660 = tempRet0;
 $661 = (___muldi3(($60|0),0,($100|0),0)|0);
 $662 = tempRet0;
 $663 = (_i64Add(($659|0),($660|0),($661|0),($662|0))|0);
 $664 = tempRet0;
 $665 = (___muldi3(($63|0),($64|0),($95|0),0)|0);
 $666 = tempRet0;
 $667 = (_i64Add(($663|0),($664|0),($665|0),($666|0))|0);
 $668 = tempRet0;
 $669 = (___muldi3(($39|0),0,($124|0),($125|0))|0);
 $670 = tempRet0;
 $671 = (___muldi3(($45|0),0,($121|0),0)|0);
 $672 = tempRet0;
 $673 = (_i64Add(($669|0),($670|0),($671|0),($672|0))|0);
 $674 = tempRet0;
 $675 = (___muldi3(($49|0),0,($115|0),0)|0);
 $676 = tempRet0;
 $677 = (_i64Add(($673|0),($674|0),($675|0),($676|0))|0);
 $678 = tempRet0;
 $679 = (___muldi3(($54|0),0,($110|0),0)|0);
 $680 = tempRet0;
 $681 = (_i64Add(($677|0),($678|0),($679|0),($680|0))|0);
 $682 = tempRet0;
 $683 = (___muldi3(($60|0),0,($106|0),0)|0);
 $684 = tempRet0;
 $685 = (_i64Add(($681|0),($682|0),($683|0),($684|0))|0);
 $686 = tempRet0;
 $687 = (___muldi3(($63|0),($64|0),($100|0),0)|0);
 $688 = tempRet0;
 $689 = (_i64Add(($685|0),($686|0),($687|0),($688|0))|0);
 $690 = tempRet0;
 $691 = (___muldi3(($45|0),0,($124|0),($125|0))|0);
 $692 = tempRet0;
 $693 = (___muldi3(($49|0),0,($121|0),0)|0);
 $694 = tempRet0;
 $695 = (_i64Add(($691|0),($692|0),($693|0),($694|0))|0);
 $696 = tempRet0;
 $697 = (___muldi3(($54|0),0,($115|0),0)|0);
 $698 = tempRet0;
 $699 = (_i64Add(($695|0),($696|0),($697|0),($698|0))|0);
 $700 = tempRet0;
 $701 = (___muldi3(($60|0),0,($110|0),0)|0);
 $702 = tempRet0;
 $703 = (_i64Add(($699|0),($700|0),($701|0),($702|0))|0);
 $704 = tempRet0;
 $705 = (___muldi3(($63|0),($64|0),($106|0),0)|0);
 $706 = tempRet0;
 $707 = (_i64Add(($703|0),($704|0),($705|0),($706|0))|0);
 $708 = tempRet0;
 $709 = (___muldi3(($49|0),0,($124|0),($125|0))|0);
 $710 = tempRet0;
 $711 = (___muldi3(($54|0),0,($121|0),0)|0);
 $712 = tempRet0;
 $713 = (_i64Add(($709|0),($710|0),($711|0),($712|0))|0);
 $714 = tempRet0;
 $715 = (___muldi3(($60|0),0,($115|0),0)|0);
 $716 = tempRet0;
 $717 = (_i64Add(($713|0),($714|0),($715|0),($716|0))|0);
 $718 = tempRet0;
 $719 = (___muldi3(($63|0),($64|0),($110|0),0)|0);
 $720 = tempRet0;
 $721 = (_i64Add(($717|0),($718|0),($719|0),($720|0))|0);
 $722 = tempRet0;
 $723 = (___muldi3(($54|0),0,($124|0),($125|0))|0);
 $724 = tempRet0;
 $725 = (___muldi3(($60|0),0,($121|0),0)|0);
 $726 = tempRet0;
 $727 = (_i64Add(($723|0),($724|0),($725|0),($726|0))|0);
 $728 = tempRet0;
 $729 = (___muldi3(($63|0),($64|0),($115|0),0)|0);
 $730 = tempRet0;
 $731 = (_i64Add(($727|0),($728|0),($729|0),($730|0))|0);
 $732 = tempRet0;
 $733 = (___muldi3(($60|0),0,($124|0),($125|0))|0);
 $734 = tempRet0;
 $735 = (___muldi3(($63|0),($64|0),($121|0),0)|0);
 $736 = tempRet0;
 $737 = (_i64Add(($733|0),($734|0),($735|0),($736|0))|0);
 $738 = tempRet0;
 $739 = (___muldi3(($63|0),($64|0),($124|0),($125|0))|0);
 $740 = tempRet0;
 $741 = (_i64Add(($189|0),($190|0),1048576,0)|0);
 $742 = tempRet0;
 $743 = (_bitshift64Lshr(($741|0),($742|0),21)|0);
 $744 = tempRet0;
 $745 = (_i64Add(($197|0),($198|0),($743|0),($744|0))|0);
 $746 = tempRet0;
 $747 = (_bitshift64Shl(($743|0),($744|0),21)|0);
 $748 = tempRet0;
 $749 = (_i64Subtract(($189|0),($190|0),($747|0),($748|0))|0);
 $750 = tempRet0;
 $751 = (_i64Add(($209|0),($210|0),1048576,0)|0);
 $752 = tempRet0;
 $753 = (_bitshift64Lshr(($751|0),($752|0),21)|0);
 $754 = tempRet0;
 $755 = (_i64Add(($225|0),($226|0),($753|0),($754|0))|0);
 $756 = tempRet0;
 $757 = (_bitshift64Shl(($753|0),($754|0),21)|0);
 $758 = tempRet0;
 $759 = (_i64Subtract(($209|0),($210|0),($757|0),($758|0))|0);
 $760 = tempRet0;
 $761 = (_i64Add(($245|0),($246|0),1048576,0)|0);
 $762 = tempRet0;
 $763 = (_bitshift64Ashr(($761|0),($762|0),21)|0);
 $764 = tempRet0;
 $765 = (_i64Add(($269|0),($270|0),($763|0),($764|0))|0);
 $766 = tempRet0;
 $767 = (_bitshift64Shl(($763|0),($764|0),21)|0);
 $768 = tempRet0;
 $769 = (_i64Subtract(($245|0),($246|0),($767|0),($768|0))|0);
 $770 = tempRet0;
 $771 = (_i64Add(($297|0),($298|0),1048576,0)|0);
 $772 = tempRet0;
 $773 = (_bitshift64Ashr(($771|0),($772|0),21)|0);
 $774 = tempRet0;
 $775 = (_i64Add(($329|0),($330|0),($773|0),($774|0))|0);
 $776 = tempRet0;
 $777 = (_bitshift64Shl(($773|0),($774|0),21)|0);
 $778 = tempRet0;
 $779 = (_i64Subtract(($297|0),($298|0),($777|0),($778|0))|0);
 $780 = tempRet0;
 $781 = (_i64Add(($365|0),($366|0),1048576,0)|0);
 $782 = tempRet0;
 $783 = (_bitshift64Ashr(($781|0),($782|0),21)|0);
 $784 = tempRet0;
 $785 = (_i64Add(($405|0),($406|0),($783|0),($784|0))|0);
 $786 = tempRet0;
 $787 = (_bitshift64Shl(($783|0),($784|0),21)|0);
 $788 = tempRet0;
 $789 = (_i64Subtract(($365|0),($366|0),($787|0),($788|0))|0);
 $790 = tempRet0;
 $791 = (_i64Add(($449|0),($450|0),1048576,0)|0);
 $792 = tempRet0;
 $793 = (_bitshift64Ashr(($791|0),($792|0),21)|0);
 $794 = tempRet0;
 $795 = (_i64Add(($497|0),($498|0),($793|0),($794|0))|0);
 $796 = tempRet0;
 $797 = (_bitshift64Shl(($793|0),($794|0),21)|0);
 $798 = tempRet0;
 $799 = (_i64Subtract(($449|0),($450|0),($797|0),($798|0))|0);
 $800 = tempRet0;
 $801 = (_i64Add(($539|0),($540|0),1048576,0)|0);
 $802 = tempRet0;
 $803 = (_bitshift64Ashr(($801|0),($802|0),21)|0);
 $804 = tempRet0;
 $805 = (_i64Add(($577|0),($578|0),($803|0),($804|0))|0);
 $806 = tempRet0;
 $807 = (_bitshift64Shl(($803|0),($804|0),21)|0);
 $808 = tempRet0;
 $809 = (_i64Subtract(($539|0),($540|0),($807|0),($808|0))|0);
 $810 = tempRet0;
 $811 = (_i64Add(($611|0),($612|0),1048576,0)|0);
 $812 = tempRet0;
 $813 = (_bitshift64Ashr(($811|0),($812|0),21)|0);
 $814 = tempRet0;
 $815 = (_i64Add(($641|0),($642|0),($813|0),($814|0))|0);
 $816 = tempRet0;
 $817 = (_bitshift64Shl(($813|0),($814|0),21)|0);
 $818 = tempRet0;
 $819 = (_i64Subtract(($611|0),($612|0),($817|0),($818|0))|0);
 $820 = tempRet0;
 $821 = (_i64Add(($667|0),($668|0),1048576,0)|0);
 $822 = tempRet0;
 $823 = (_bitshift64Ashr(($821|0),($822|0),21)|0);
 $824 = tempRet0;
 $825 = (_i64Add(($689|0),($690|0),($823|0),($824|0))|0);
 $826 = tempRet0;
 $827 = (_bitshift64Shl(($823|0),($824|0),21)|0);
 $828 = tempRet0;
 $829 = (_i64Subtract(($667|0),($668|0),($827|0),($828|0))|0);
 $830 = tempRet0;
 $831 = (_i64Add(($707|0),($708|0),1048576,0)|0);
 $832 = tempRet0;
 $833 = (_bitshift64Ashr(($831|0),($832|0),21)|0);
 $834 = tempRet0;
 $835 = (_i64Add(($721|0),($722|0),($833|0),($834|0))|0);
 $836 = tempRet0;
 $837 = (_bitshift64Shl(($833|0),($834|0),21)|0);
 $838 = tempRet0;
 $839 = (_i64Subtract(($707|0),($708|0),($837|0),($838|0))|0);
 $840 = tempRet0;
 $841 = (_i64Add(($731|0),($732|0),1048576,0)|0);
 $842 = tempRet0;
 $843 = (_bitshift64Ashr(($841|0),($842|0),21)|0);
 $844 = tempRet0;
 $845 = (_i64Add(($737|0),($738|0),($843|0),($844|0))|0);
 $846 = tempRet0;
 $847 = (_bitshift64Shl(($843|0),($844|0),21)|0);
 $848 = tempRet0;
 $849 = (_i64Subtract(($731|0),($732|0),($847|0),($848|0))|0);
 $850 = tempRet0;
 $851 = (_i64Add(($739|0),($740|0),1048576,0)|0);
 $852 = tempRet0;
 $853 = (_bitshift64Ashr(($851|0),($852|0),21)|0);
 $854 = tempRet0;
 $855 = (_bitshift64Shl(($853|0),($854|0),21)|0);
 $856 = tempRet0;
 $857 = (_i64Subtract(($739|0),($740|0),($855|0),($856|0))|0);
 $858 = tempRet0;
 $859 = (_i64Add(($745|0),($746|0),1048576,0)|0);
 $860 = tempRet0;
 $861 = (_bitshift64Lshr(($859|0),($860|0),21)|0);
 $862 = tempRet0;
 $863 = (_i64Add(($759|0),($760|0),($861|0),($862|0))|0);
 $864 = tempRet0;
 $865 = (_bitshift64Shl(($861|0),($862|0),21)|0);
 $866 = tempRet0;
 $867 = (_i64Subtract(($745|0),($746|0),($865|0),($866|0))|0);
 $868 = tempRet0;
 $869 = (_i64Add(($755|0),($756|0),1048576,0)|0);
 $870 = tempRet0;
 $871 = (_bitshift64Ashr(($869|0),($870|0),21)|0);
 $872 = tempRet0;
 $873 = (_i64Add(($769|0),($770|0),($871|0),($872|0))|0);
 $874 = tempRet0;
 $875 = (_bitshift64Shl(($871|0),($872|0),21)|0);
 $876 = tempRet0;
 $877 = (_i64Subtract(($755|0),($756|0),($875|0),($876|0))|0);
 $878 = tempRet0;
 $879 = (_i64Add(($765|0),($766|0),1048576,0)|0);
 $880 = tempRet0;
 $881 = (_bitshift64Ashr(($879|0),($880|0),21)|0);
 $882 = tempRet0;
 $883 = (_i64Add(($779|0),($780|0),($881|0),($882|0))|0);
 $884 = tempRet0;
 $885 = (_bitshift64Shl(($881|0),($882|0),21)|0);
 $886 = tempRet0;
 $887 = (_i64Subtract(($765|0),($766|0),($885|0),($886|0))|0);
 $888 = tempRet0;
 $889 = (_i64Add(($775|0),($776|0),1048576,0)|0);
 $890 = tempRet0;
 $891 = (_bitshift64Ashr(($889|0),($890|0),21)|0);
 $892 = tempRet0;
 $893 = (_i64Add(($789|0),($790|0),($891|0),($892|0))|0);
 $894 = tempRet0;
 $895 = (_bitshift64Shl(($891|0),($892|0),21)|0);
 $896 = tempRet0;
 $897 = (_i64Subtract(($775|0),($776|0),($895|0),($896|0))|0);
 $898 = tempRet0;
 $899 = (_i64Add(($785|0),($786|0),1048576,0)|0);
 $900 = tempRet0;
 $901 = (_bitshift64Ashr(($899|0),($900|0),21)|0);
 $902 = tempRet0;
 $903 = (_i64Add(($799|0),($800|0),($901|0),($902|0))|0);
 $904 = tempRet0;
 $905 = (_bitshift64Shl(($901|0),($902|0),21)|0);
 $906 = tempRet0;
 $907 = (_i64Subtract(($785|0),($786|0),($905|0),($906|0))|0);
 $908 = tempRet0;
 $909 = (_i64Add(($795|0),($796|0),1048576,0)|0);
 $910 = tempRet0;
 $911 = (_bitshift64Ashr(($909|0),($910|0),21)|0);
 $912 = tempRet0;
 $913 = (_i64Add(($809|0),($810|0),($911|0),($912|0))|0);
 $914 = tempRet0;
 $915 = (_bitshift64Shl(($911|0),($912|0),21)|0);
 $916 = tempRet0;
 $917 = (_i64Subtract(($795|0),($796|0),($915|0),($916|0))|0);
 $918 = tempRet0;
 $919 = (_i64Add(($805|0),($806|0),1048576,0)|0);
 $920 = tempRet0;
 $921 = (_bitshift64Ashr(($919|0),($920|0),21)|0);
 $922 = tempRet0;
 $923 = (_i64Add(($819|0),($820|0),($921|0),($922|0))|0);
 $924 = tempRet0;
 $925 = (_bitshift64Shl(($921|0),($922|0),21)|0);
 $926 = tempRet0;
 $927 = (_i64Subtract(($805|0),($806|0),($925|0),($926|0))|0);
 $928 = tempRet0;
 $929 = (_i64Add(($815|0),($816|0),1048576,0)|0);
 $930 = tempRet0;
 $931 = (_bitshift64Ashr(($929|0),($930|0),21)|0);
 $932 = tempRet0;
 $933 = (_i64Add(($829|0),($830|0),($931|0),($932|0))|0);
 $934 = tempRet0;
 $935 = (_bitshift64Shl(($931|0),($932|0),21)|0);
 $936 = tempRet0;
 $937 = (_i64Subtract(($815|0),($816|0),($935|0),($936|0))|0);
 $938 = tempRet0;
 $939 = (_i64Add(($825|0),($826|0),1048576,0)|0);
 $940 = tempRet0;
 $941 = (_bitshift64Ashr(($939|0),($940|0),21)|0);
 $942 = tempRet0;
 $943 = (_i64Add(($839|0),($840|0),($941|0),($942|0))|0);
 $944 = tempRet0;
 $945 = (_bitshift64Shl(($941|0),($942|0),21)|0);
 $946 = tempRet0;
 $947 = (_i64Subtract(($825|0),($826|0),($945|0),($946|0))|0);
 $948 = tempRet0;
 $949 = (_i64Add(($835|0),($836|0),1048576,0)|0);
 $950 = tempRet0;
 $951 = (_bitshift64Ashr(($949|0),($950|0),21)|0);
 $952 = tempRet0;
 $953 = (_i64Add(($849|0),($850|0),($951|0),($952|0))|0);
 $954 = tempRet0;
 $955 = (_bitshift64Shl(($951|0),($952|0),21)|0);
 $956 = tempRet0;
 $957 = (_i64Subtract(($835|0),($836|0),($955|0),($956|0))|0);
 $958 = tempRet0;
 $959 = (_i64Add(($845|0),($846|0),1048576,0)|0);
 $960 = tempRet0;
 $961 = (_bitshift64Ashr(($959|0),($960|0),21)|0);
 $962 = tempRet0;
 $963 = (_i64Add(($857|0),($858|0),($961|0),($962|0))|0);
 $964 = tempRet0;
 $965 = (_bitshift64Shl(($961|0),($962|0),21)|0);
 $966 = tempRet0;
 $967 = (_i64Subtract(($845|0),($846|0),($965|0),($966|0))|0);
 $968 = tempRet0;
 $969 = (___muldi3(($853|0),($854|0),666643,0)|0);
 $970 = tempRet0;
 $971 = (_i64Add(($917|0),($918|0),($969|0),($970|0))|0);
 $972 = tempRet0;
 $973 = (___muldi3(($853|0),($854|0),470296,0)|0);
 $974 = tempRet0;
 $975 = (_i64Add(($913|0),($914|0),($973|0),($974|0))|0);
 $976 = tempRet0;
 $977 = (___muldi3(($853|0),($854|0),654183,0)|0);
 $978 = tempRet0;
 $979 = (_i64Add(($927|0),($928|0),($977|0),($978|0))|0);
 $980 = tempRet0;
 $981 = (___muldi3(($853|0),($854|0),-997805,-1)|0);
 $982 = tempRet0;
 $983 = (_i64Add(($923|0),($924|0),($981|0),($982|0))|0);
 $984 = tempRet0;
 $985 = (___muldi3(($853|0),($854|0),136657,0)|0);
 $986 = tempRet0;
 $987 = (_i64Add(($937|0),($938|0),($985|0),($986|0))|0);
 $988 = tempRet0;
 $989 = (___muldi3(($853|0),($854|0),-683901,-1)|0);
 $990 = tempRet0;
 $991 = (_i64Add(($933|0),($934|0),($989|0),($990|0))|0);
 $992 = tempRet0;
 $993 = (___muldi3(($963|0),($964|0),666643,0)|0);
 $994 = tempRet0;
 $995 = (_i64Add(($903|0),($904|0),($993|0),($994|0))|0);
 $996 = tempRet0;
 $997 = (___muldi3(($963|0),($964|0),470296,0)|0);
 $998 = tempRet0;
 $999 = (_i64Add(($971|0),($972|0),($997|0),($998|0))|0);
 $1000 = tempRet0;
 $1001 = (___muldi3(($963|0),($964|0),654183,0)|0);
 $1002 = tempRet0;
 $1003 = (_i64Add(($975|0),($976|0),($1001|0),($1002|0))|0);
 $1004 = tempRet0;
 $1005 = (___muldi3(($963|0),($964|0),-997805,-1)|0);
 $1006 = tempRet0;
 $1007 = (_i64Add(($979|0),($980|0),($1005|0),($1006|0))|0);
 $1008 = tempRet0;
 $1009 = (___muldi3(($963|0),($964|0),136657,0)|0);
 $1010 = tempRet0;
 $1011 = (_i64Add(($983|0),($984|0),($1009|0),($1010|0))|0);
 $1012 = tempRet0;
 $1013 = (___muldi3(($963|0),($964|0),-683901,-1)|0);
 $1014 = tempRet0;
 $1015 = (_i64Add(($987|0),($988|0),($1013|0),($1014|0))|0);
 $1016 = tempRet0;
 $1017 = (___muldi3(($967|0),($968|0),666643,0)|0);
 $1018 = tempRet0;
 $1019 = (_i64Add(($907|0),($908|0),($1017|0),($1018|0))|0);
 $1020 = tempRet0;
 $1021 = (___muldi3(($967|0),($968|0),470296,0)|0);
 $1022 = tempRet0;
 $1023 = (_i64Add(($995|0),($996|0),($1021|0),($1022|0))|0);
 $1024 = tempRet0;
 $1025 = (___muldi3(($967|0),($968|0),654183,0)|0);
 $1026 = tempRet0;
 $1027 = (_i64Add(($999|0),($1000|0),($1025|0),($1026|0))|0);
 $1028 = tempRet0;
 $1029 = (___muldi3(($967|0),($968|0),-997805,-1)|0);
 $1030 = tempRet0;
 $1031 = (_i64Add(($1003|0),($1004|0),($1029|0),($1030|0))|0);
 $1032 = tempRet0;
 $1033 = (___muldi3(($967|0),($968|0),136657,0)|0);
 $1034 = tempRet0;
 $1035 = (_i64Add(($1007|0),($1008|0),($1033|0),($1034|0))|0);
 $1036 = tempRet0;
 $1037 = (___muldi3(($967|0),($968|0),-683901,-1)|0);
 $1038 = tempRet0;
 $1039 = (_i64Add(($1011|0),($1012|0),($1037|0),($1038|0))|0);
 $1040 = tempRet0;
 $1041 = (___muldi3(($953|0),($954|0),666643,0)|0);
 $1042 = tempRet0;
 $1043 = (_i64Add(($893|0),($894|0),($1041|0),($1042|0))|0);
 $1044 = tempRet0;
 $1045 = (___muldi3(($953|0),($954|0),470296,0)|0);
 $1046 = tempRet0;
 $1047 = (_i64Add(($1019|0),($1020|0),($1045|0),($1046|0))|0);
 $1048 = tempRet0;
 $1049 = (___muldi3(($953|0),($954|0),654183,0)|0);
 $1050 = tempRet0;
 $1051 = (_i64Add(($1023|0),($1024|0),($1049|0),($1050|0))|0);
 $1052 = tempRet0;
 $1053 = (___muldi3(($953|0),($954|0),-997805,-1)|0);
 $1054 = tempRet0;
 $1055 = (_i64Add(($1027|0),($1028|0),($1053|0),($1054|0))|0);
 $1056 = tempRet0;
 $1057 = (___muldi3(($953|0),($954|0),136657,0)|0);
 $1058 = tempRet0;
 $1059 = (_i64Add(($1031|0),($1032|0),($1057|0),($1058|0))|0);
 $1060 = tempRet0;
 $1061 = (___muldi3(($953|0),($954|0),-683901,-1)|0);
 $1062 = tempRet0;
 $1063 = (_i64Add(($1035|0),($1036|0),($1061|0),($1062|0))|0);
 $1064 = tempRet0;
 $1065 = (___muldi3(($957|0),($958|0),666643,0)|0);
 $1066 = tempRet0;
 $1067 = (_i64Add(($897|0),($898|0),($1065|0),($1066|0))|0);
 $1068 = tempRet0;
 $1069 = (___muldi3(($957|0),($958|0),470296,0)|0);
 $1070 = tempRet0;
 $1071 = (_i64Add(($1043|0),($1044|0),($1069|0),($1070|0))|0);
 $1072 = tempRet0;
 $1073 = (___muldi3(($957|0),($958|0),654183,0)|0);
 $1074 = tempRet0;
 $1075 = (_i64Add(($1047|0),($1048|0),($1073|0),($1074|0))|0);
 $1076 = tempRet0;
 $1077 = (___muldi3(($957|0),($958|0),-997805,-1)|0);
 $1078 = tempRet0;
 $1079 = (_i64Add(($1051|0),($1052|0),($1077|0),($1078|0))|0);
 $1080 = tempRet0;
 $1081 = (___muldi3(($957|0),($958|0),136657,0)|0);
 $1082 = tempRet0;
 $1083 = (_i64Add(($1055|0),($1056|0),($1081|0),($1082|0))|0);
 $1084 = tempRet0;
 $1085 = (___muldi3(($957|0),($958|0),-683901,-1)|0);
 $1086 = tempRet0;
 $1087 = (_i64Add(($1059|0),($1060|0),($1085|0),($1086|0))|0);
 $1088 = tempRet0;
 $1089 = (___muldi3(($943|0),($944|0),666643,0)|0);
 $1090 = tempRet0;
 $1091 = (_i64Add(($883|0),($884|0),($1089|0),($1090|0))|0);
 $1092 = tempRet0;
 $1093 = (___muldi3(($943|0),($944|0),470296,0)|0);
 $1094 = tempRet0;
 $1095 = (_i64Add(($1067|0),($1068|0),($1093|0),($1094|0))|0);
 $1096 = tempRet0;
 $1097 = (___muldi3(($943|0),($944|0),654183,0)|0);
 $1098 = tempRet0;
 $1099 = (_i64Add(($1071|0),($1072|0),($1097|0),($1098|0))|0);
 $1100 = tempRet0;
 $1101 = (___muldi3(($943|0),($944|0),-997805,-1)|0);
 $1102 = tempRet0;
 $1103 = (_i64Add(($1075|0),($1076|0),($1101|0),($1102|0))|0);
 $1104 = tempRet0;
 $1105 = (___muldi3(($943|0),($944|0),136657,0)|0);
 $1106 = tempRet0;
 $1107 = (_i64Add(($1079|0),($1080|0),($1105|0),($1106|0))|0);
 $1108 = tempRet0;
 $1109 = (___muldi3(($943|0),($944|0),-683901,-1)|0);
 $1110 = tempRet0;
 $1111 = (_i64Add(($1083|0),($1084|0),($1109|0),($1110|0))|0);
 $1112 = tempRet0;
 $1113 = (_i64Add(($1091|0),($1092|0),1048576,0)|0);
 $1114 = tempRet0;
 $1115 = (_bitshift64Ashr(($1113|0),($1114|0),21)|0);
 $1116 = tempRet0;
 $1117 = (_i64Add(($1095|0),($1096|0),($1115|0),($1116|0))|0);
 $1118 = tempRet0;
 $1119 = (_bitshift64Shl(($1115|0),($1116|0),21)|0);
 $1120 = tempRet0;
 $1121 = (_i64Subtract(($1091|0),($1092|0),($1119|0),($1120|0))|0);
 $1122 = tempRet0;
 $1123 = (_i64Add(($1099|0),($1100|0),1048576,0)|0);
 $1124 = tempRet0;
 $1125 = (_bitshift64Ashr(($1123|0),($1124|0),21)|0);
 $1126 = tempRet0;
 $1127 = (_i64Add(($1103|0),($1104|0),($1125|0),($1126|0))|0);
 $1128 = tempRet0;
 $1129 = (_bitshift64Shl(($1125|0),($1126|0),21)|0);
 $1130 = tempRet0;
 $1131 = (_i64Subtract(($1099|0),($1100|0),($1129|0),($1130|0))|0);
 $1132 = tempRet0;
 $1133 = (_i64Add(($1107|0),($1108|0),1048576,0)|0);
 $1134 = tempRet0;
 $1135 = (_bitshift64Ashr(($1133|0),($1134|0),21)|0);
 $1136 = tempRet0;
 $1137 = (_i64Add(($1111|0),($1112|0),($1135|0),($1136|0))|0);
 $1138 = tempRet0;
 $1139 = (_bitshift64Shl(($1135|0),($1136|0),21)|0);
 $1140 = tempRet0;
 $1141 = (_i64Subtract(($1107|0),($1108|0),($1139|0),($1140|0))|0);
 $1142 = tempRet0;
 $1143 = (_i64Add(($1087|0),($1088|0),1048576,0)|0);
 $1144 = tempRet0;
 $1145 = (_bitshift64Ashr(($1143|0),($1144|0),21)|0);
 $1146 = tempRet0;
 $1147 = (_i64Add(($1063|0),($1064|0),($1145|0),($1146|0))|0);
 $1148 = tempRet0;
 $1149 = (_bitshift64Shl(($1145|0),($1146|0),21)|0);
 $1150 = tempRet0;
 $1151 = (_i64Subtract(($1087|0),($1088|0),($1149|0),($1150|0))|0);
 $1152 = tempRet0;
 $1153 = (_i64Add(($1039|0),($1040|0),1048576,0)|0);
 $1154 = tempRet0;
 $1155 = (_bitshift64Ashr(($1153|0),($1154|0),21)|0);
 $1156 = tempRet0;
 $1157 = (_i64Add(($1015|0),($1016|0),($1155|0),($1156|0))|0);
 $1158 = tempRet0;
 $1159 = (_bitshift64Shl(($1155|0),($1156|0),21)|0);
 $1160 = tempRet0;
 $1161 = (_i64Subtract(($1039|0),($1040|0),($1159|0),($1160|0))|0);
 $1162 = tempRet0;
 $1163 = (_i64Add(($991|0),($992|0),1048576,0)|0);
 $1164 = tempRet0;
 $1165 = (_bitshift64Ashr(($1163|0),($1164|0),21)|0);
 $1166 = tempRet0;
 $1167 = (_i64Add(($947|0),($948|0),($1165|0),($1166|0))|0);
 $1168 = tempRet0;
 $1169 = (_bitshift64Shl(($1165|0),($1166|0),21)|0);
 $1170 = tempRet0;
 $1171 = (_i64Subtract(($991|0),($992|0),($1169|0),($1170|0))|0);
 $1172 = tempRet0;
 $1173 = (_i64Add(($1117|0),($1118|0),1048576,0)|0);
 $1174 = tempRet0;
 $1175 = (_bitshift64Ashr(($1173|0),($1174|0),21)|0);
 $1176 = tempRet0;
 $1177 = (_i64Add(($1131|0),($1132|0),($1175|0),($1176|0))|0);
 $1178 = tempRet0;
 $1179 = (_bitshift64Shl(($1175|0),($1176|0),21)|0);
 $1180 = tempRet0;
 $1181 = (_i64Subtract(($1117|0),($1118|0),($1179|0),($1180|0))|0);
 $1182 = tempRet0;
 $1183 = (_i64Add(($1127|0),($1128|0),1048576,0)|0);
 $1184 = tempRet0;
 $1185 = (_bitshift64Ashr(($1183|0),($1184|0),21)|0);
 $1186 = tempRet0;
 $1187 = (_i64Add(($1141|0),($1142|0),($1185|0),($1186|0))|0);
 $1188 = tempRet0;
 $1189 = (_bitshift64Shl(($1185|0),($1186|0),21)|0);
 $1190 = tempRet0;
 $1191 = (_i64Subtract(($1127|0),($1128|0),($1189|0),($1190|0))|0);
 $1192 = tempRet0;
 $1193 = (_i64Add(($1137|0),($1138|0),1048576,0)|0);
 $1194 = tempRet0;
 $1195 = (_bitshift64Ashr(($1193|0),($1194|0),21)|0);
 $1196 = tempRet0;
 $1197 = (_i64Add(($1151|0),($1152|0),($1195|0),($1196|0))|0);
 $1198 = tempRet0;
 $1199 = (_bitshift64Shl(($1195|0),($1196|0),21)|0);
 $1200 = tempRet0;
 $1201 = (_i64Subtract(($1137|0),($1138|0),($1199|0),($1200|0))|0);
 $1202 = tempRet0;
 $1203 = (_i64Add(($1147|0),($1148|0),1048576,0)|0);
 $1204 = tempRet0;
 $1205 = (_bitshift64Ashr(($1203|0),($1204|0),21)|0);
 $1206 = tempRet0;
 $1207 = (_i64Add(($1161|0),($1162|0),($1205|0),($1206|0))|0);
 $1208 = tempRet0;
 $1209 = (_bitshift64Shl(($1205|0),($1206|0),21)|0);
 $1210 = tempRet0;
 $1211 = (_i64Subtract(($1147|0),($1148|0),($1209|0),($1210|0))|0);
 $1212 = tempRet0;
 $1213 = (_i64Add(($1157|0),($1158|0),1048576,0)|0);
 $1214 = tempRet0;
 $1215 = (_bitshift64Ashr(($1213|0),($1214|0),21)|0);
 $1216 = tempRet0;
 $1217 = (_i64Add(($1171|0),($1172|0),($1215|0),($1216|0))|0);
 $1218 = tempRet0;
 $1219 = (_bitshift64Shl(($1215|0),($1216|0),21)|0);
 $1220 = tempRet0;
 $1221 = (_i64Subtract(($1157|0),($1158|0),($1219|0),($1220|0))|0);
 $1222 = tempRet0;
 $1223 = (___muldi3(($1167|0),($1168|0),666643,0)|0);
 $1224 = tempRet0;
 $1225 = (_i64Add(($887|0),($888|0),($1223|0),($1224|0))|0);
 $1226 = tempRet0;
 $1227 = (___muldi3(($1167|0),($1168|0),470296,0)|0);
 $1228 = tempRet0;
 $1229 = (_i64Add(($1121|0),($1122|0),($1227|0),($1228|0))|0);
 $1230 = tempRet0;
 $1231 = (___muldi3(($1167|0),($1168|0),654183,0)|0);
 $1232 = tempRet0;
 $1233 = (_i64Add(($1181|0),($1182|0),($1231|0),($1232|0))|0);
 $1234 = tempRet0;
 $1235 = (___muldi3(($1167|0),($1168|0),-997805,-1)|0);
 $1236 = tempRet0;
 $1237 = (_i64Add(($1177|0),($1178|0),($1235|0),($1236|0))|0);
 $1238 = tempRet0;
 $1239 = (___muldi3(($1167|0),($1168|0),136657,0)|0);
 $1240 = tempRet0;
 $1241 = (_i64Add(($1191|0),($1192|0),($1239|0),($1240|0))|0);
 $1242 = tempRet0;
 $1243 = (___muldi3(($1167|0),($1168|0),-683901,-1)|0);
 $1244 = tempRet0;
 $1245 = (_i64Add(($1187|0),($1188|0),($1243|0),($1244|0))|0);
 $1246 = tempRet0;
 $1247 = (___muldi3(($1217|0),($1218|0),666643,0)|0);
 $1248 = tempRet0;
 $1249 = (_i64Add(($873|0),($874|0),($1247|0),($1248|0))|0);
 $1250 = tempRet0;
 $1251 = (___muldi3(($1217|0),($1218|0),470296,0)|0);
 $1252 = tempRet0;
 $1253 = (_i64Add(($1225|0),($1226|0),($1251|0),($1252|0))|0);
 $1254 = tempRet0;
 $1255 = (___muldi3(($1217|0),($1218|0),654183,0)|0);
 $1256 = tempRet0;
 $1257 = (_i64Add(($1229|0),($1230|0),($1255|0),($1256|0))|0);
 $1258 = tempRet0;
 $1259 = (___muldi3(($1217|0),($1218|0),-997805,-1)|0);
 $1260 = tempRet0;
 $1261 = (_i64Add(($1233|0),($1234|0),($1259|0),($1260|0))|0);
 $1262 = tempRet0;
 $1263 = (___muldi3(($1217|0),($1218|0),136657,0)|0);
 $1264 = tempRet0;
 $1265 = (_i64Add(($1237|0),($1238|0),($1263|0),($1264|0))|0);
 $1266 = tempRet0;
 $1267 = (___muldi3(($1217|0),($1218|0),-683901,-1)|0);
 $1268 = tempRet0;
 $1269 = (_i64Add(($1241|0),($1242|0),($1267|0),($1268|0))|0);
 $1270 = tempRet0;
 $1271 = (___muldi3(($1221|0),($1222|0),666643,0)|0);
 $1272 = tempRet0;
 $1273 = (_i64Add(($877|0),($878|0),($1271|0),($1272|0))|0);
 $1274 = tempRet0;
 $1275 = (___muldi3(($1221|0),($1222|0),470296,0)|0);
 $1276 = tempRet0;
 $1277 = (_i64Add(($1249|0),($1250|0),($1275|0),($1276|0))|0);
 $1278 = tempRet0;
 $1279 = (___muldi3(($1221|0),($1222|0),654183,0)|0);
 $1280 = tempRet0;
 $1281 = (_i64Add(($1253|0),($1254|0),($1279|0),($1280|0))|0);
 $1282 = tempRet0;
 $1283 = (___muldi3(($1221|0),($1222|0),-997805,-1)|0);
 $1284 = tempRet0;
 $1285 = (_i64Add(($1257|0),($1258|0),($1283|0),($1284|0))|0);
 $1286 = tempRet0;
 $1287 = (___muldi3(($1221|0),($1222|0),136657,0)|0);
 $1288 = tempRet0;
 $1289 = (_i64Add(($1261|0),($1262|0),($1287|0),($1288|0))|0);
 $1290 = tempRet0;
 $1291 = (___muldi3(($1221|0),($1222|0),-683901,-1)|0);
 $1292 = tempRet0;
 $1293 = (_i64Add(($1265|0),($1266|0),($1291|0),($1292|0))|0);
 $1294 = tempRet0;
 $1295 = (___muldi3(($1207|0),($1208|0),666643,0)|0);
 $1296 = tempRet0;
 $1297 = (_i64Add(($863|0),($864|0),($1295|0),($1296|0))|0);
 $1298 = tempRet0;
 $1299 = (___muldi3(($1207|0),($1208|0),470296,0)|0);
 $1300 = tempRet0;
 $1301 = (_i64Add(($1273|0),($1274|0),($1299|0),($1300|0))|0);
 $1302 = tempRet0;
 $1303 = (___muldi3(($1207|0),($1208|0),654183,0)|0);
 $1304 = tempRet0;
 $1305 = (_i64Add(($1277|0),($1278|0),($1303|0),($1304|0))|0);
 $1306 = tempRet0;
 $1307 = (___muldi3(($1207|0),($1208|0),-997805,-1)|0);
 $1308 = tempRet0;
 $1309 = (_i64Add(($1281|0),($1282|0),($1307|0),($1308|0))|0);
 $1310 = tempRet0;
 $1311 = (___muldi3(($1207|0),($1208|0),136657,0)|0);
 $1312 = tempRet0;
 $1313 = (_i64Add(($1285|0),($1286|0),($1311|0),($1312|0))|0);
 $1314 = tempRet0;
 $1315 = (___muldi3(($1207|0),($1208|0),-683901,-1)|0);
 $1316 = tempRet0;
 $1317 = (_i64Add(($1289|0),($1290|0),($1315|0),($1316|0))|0);
 $1318 = tempRet0;
 $1319 = (___muldi3(($1211|0),($1212|0),666643,0)|0);
 $1320 = tempRet0;
 $1321 = (_i64Add(($867|0),($868|0),($1319|0),($1320|0))|0);
 $1322 = tempRet0;
 $1323 = (___muldi3(($1211|0),($1212|0),470296,0)|0);
 $1324 = tempRet0;
 $1325 = (_i64Add(($1297|0),($1298|0),($1323|0),($1324|0))|0);
 $1326 = tempRet0;
 $1327 = (___muldi3(($1211|0),($1212|0),654183,0)|0);
 $1328 = tempRet0;
 $1329 = (_i64Add(($1301|0),($1302|0),($1327|0),($1328|0))|0);
 $1330 = tempRet0;
 $1331 = (___muldi3(($1211|0),($1212|0),-997805,-1)|0);
 $1332 = tempRet0;
 $1333 = (_i64Add(($1305|0),($1306|0),($1331|0),($1332|0))|0);
 $1334 = tempRet0;
 $1335 = (___muldi3(($1211|0),($1212|0),136657,0)|0);
 $1336 = tempRet0;
 $1337 = (_i64Add(($1309|0),($1310|0),($1335|0),($1336|0))|0);
 $1338 = tempRet0;
 $1339 = (___muldi3(($1211|0),($1212|0),-683901,-1)|0);
 $1340 = tempRet0;
 $1341 = (_i64Add(($1313|0),($1314|0),($1339|0),($1340|0))|0);
 $1342 = tempRet0;
 $1343 = (___muldi3(($1197|0),($1198|0),666643,0)|0);
 $1344 = tempRet0;
 $1345 = (_i64Add(($749|0),($750|0),($1343|0),($1344|0))|0);
 $1346 = tempRet0;
 $1347 = (___muldi3(($1197|0),($1198|0),470296,0)|0);
 $1348 = tempRet0;
 $1349 = (_i64Add(($1321|0),($1322|0),($1347|0),($1348|0))|0);
 $1350 = tempRet0;
 $1351 = (___muldi3(($1197|0),($1198|0),654183,0)|0);
 $1352 = tempRet0;
 $1353 = (_i64Add(($1325|0),($1326|0),($1351|0),($1352|0))|0);
 $1354 = tempRet0;
 $1355 = (___muldi3(($1197|0),($1198|0),-997805,-1)|0);
 $1356 = tempRet0;
 $1357 = (_i64Add(($1329|0),($1330|0),($1355|0),($1356|0))|0);
 $1358 = tempRet0;
 $1359 = (___muldi3(($1197|0),($1198|0),136657,0)|0);
 $1360 = tempRet0;
 $1361 = (_i64Add(($1333|0),($1334|0),($1359|0),($1360|0))|0);
 $1362 = tempRet0;
 $1363 = (___muldi3(($1197|0),($1198|0),-683901,-1)|0);
 $1364 = tempRet0;
 $1365 = (_i64Add(($1337|0),($1338|0),($1363|0),($1364|0))|0);
 $1366 = tempRet0;
 $1367 = (_i64Add(($1345|0),($1346|0),1048576,0)|0);
 $1368 = tempRet0;
 $1369 = (_bitshift64Ashr(($1367|0),($1368|0),21)|0);
 $1370 = tempRet0;
 $1371 = (_i64Add(($1349|0),($1350|0),($1369|0),($1370|0))|0);
 $1372 = tempRet0;
 $1373 = (_bitshift64Shl(($1369|0),($1370|0),21)|0);
 $1374 = tempRet0;
 $1375 = (_i64Subtract(($1345|0),($1346|0),($1373|0),($1374|0))|0);
 $1376 = tempRet0;
 $1377 = (_i64Add(($1353|0),($1354|0),1048576,0)|0);
 $1378 = tempRet0;
 $1379 = (_bitshift64Ashr(($1377|0),($1378|0),21)|0);
 $1380 = tempRet0;
 $1381 = (_i64Add(($1357|0),($1358|0),($1379|0),($1380|0))|0);
 $1382 = tempRet0;
 $1383 = (_bitshift64Shl(($1379|0),($1380|0),21)|0);
 $1384 = tempRet0;
 $1385 = (_i64Subtract(($1353|0),($1354|0),($1383|0),($1384|0))|0);
 $1386 = tempRet0;
 $1387 = (_i64Add(($1361|0),($1362|0),1048576,0)|0);
 $1388 = tempRet0;
 $1389 = (_bitshift64Ashr(($1387|0),($1388|0),21)|0);
 $1390 = tempRet0;
 $1391 = (_i64Add(($1365|0),($1366|0),($1389|0),($1390|0))|0);
 $1392 = tempRet0;
 $1393 = (_bitshift64Shl(($1389|0),($1390|0),21)|0);
 $1394 = tempRet0;
 $1395 = (_i64Subtract(($1361|0),($1362|0),($1393|0),($1394|0))|0);
 $1396 = tempRet0;
 $1397 = (_i64Add(($1341|0),($1342|0),1048576,0)|0);
 $1398 = tempRet0;
 $1399 = (_bitshift64Ashr(($1397|0),($1398|0),21)|0);
 $1400 = tempRet0;
 $1401 = (_i64Add(($1317|0),($1318|0),($1399|0),($1400|0))|0);
 $1402 = tempRet0;
 $1403 = (_bitshift64Shl(($1399|0),($1400|0),21)|0);
 $1404 = tempRet0;
 $1405 = (_i64Subtract(($1341|0),($1342|0),($1403|0),($1404|0))|0);
 $1406 = tempRet0;
 $1407 = (_i64Add(($1293|0),($1294|0),1048576,0)|0);
 $1408 = tempRet0;
 $1409 = (_bitshift64Ashr(($1407|0),($1408|0),21)|0);
 $1410 = tempRet0;
 $1411 = (_i64Add(($1269|0),($1270|0),($1409|0),($1410|0))|0);
 $1412 = tempRet0;
 $1413 = (_bitshift64Shl(($1409|0),($1410|0),21)|0);
 $1414 = tempRet0;
 $1415 = (_i64Subtract(($1293|0),($1294|0),($1413|0),($1414|0))|0);
 $1416 = tempRet0;
 $1417 = (_i64Add(($1245|0),($1246|0),1048576,0)|0);
 $1418 = tempRet0;
 $1419 = (_bitshift64Ashr(($1417|0),($1418|0),21)|0);
 $1420 = tempRet0;
 $1421 = (_i64Add(($1201|0),($1202|0),($1419|0),($1420|0))|0);
 $1422 = tempRet0;
 $1423 = (_bitshift64Shl(($1419|0),($1420|0),21)|0);
 $1424 = tempRet0;
 $1425 = (_i64Subtract(($1245|0),($1246|0),($1423|0),($1424|0))|0);
 $1426 = tempRet0;
 $1427 = (_i64Add(($1371|0),($1372|0),1048576,0)|0);
 $1428 = tempRet0;
 $1429 = (_bitshift64Ashr(($1427|0),($1428|0),21)|0);
 $1430 = tempRet0;
 $1431 = (_i64Add(($1385|0),($1386|0),($1429|0),($1430|0))|0);
 $1432 = tempRet0;
 $1433 = (_bitshift64Shl(($1429|0),($1430|0),21)|0);
 $1434 = tempRet0;
 $1435 = (_i64Subtract(($1371|0),($1372|0),($1433|0),($1434|0))|0);
 $1436 = tempRet0;
 $1437 = (_i64Add(($1381|0),($1382|0),1048576,0)|0);
 $1438 = tempRet0;
 $1439 = (_bitshift64Ashr(($1437|0),($1438|0),21)|0);
 $1440 = tempRet0;
 $1441 = (_i64Add(($1395|0),($1396|0),($1439|0),($1440|0))|0);
 $1442 = tempRet0;
 $1443 = (_bitshift64Shl(($1439|0),($1440|0),21)|0);
 $1444 = tempRet0;
 $1445 = (_i64Subtract(($1381|0),($1382|0),($1443|0),($1444|0))|0);
 $1446 = tempRet0;
 $1447 = (_i64Add(($1391|0),($1392|0),1048576,0)|0);
 $1448 = tempRet0;
 $1449 = (_bitshift64Ashr(($1447|0),($1448|0),21)|0);
 $1450 = tempRet0;
 $1451 = (_i64Add(($1405|0),($1406|0),($1449|0),($1450|0))|0);
 $1452 = tempRet0;
 $1453 = (_bitshift64Shl(($1449|0),($1450|0),21)|0);
 $1454 = tempRet0;
 $1455 = (_i64Subtract(($1391|0),($1392|0),($1453|0),($1454|0))|0);
 $1456 = tempRet0;
 $1457 = (_i64Add(($1401|0),($1402|0),1048576,0)|0);
 $1458 = tempRet0;
 $1459 = (_bitshift64Ashr(($1457|0),($1458|0),21)|0);
 $1460 = tempRet0;
 $1461 = (_i64Add(($1415|0),($1416|0),($1459|0),($1460|0))|0);
 $1462 = tempRet0;
 $1463 = (_bitshift64Shl(($1459|0),($1460|0),21)|0);
 $1464 = tempRet0;
 $1465 = (_i64Subtract(($1401|0),($1402|0),($1463|0),($1464|0))|0);
 $1466 = tempRet0;
 $1467 = (_i64Add(($1411|0),($1412|0),1048576,0)|0);
 $1468 = tempRet0;
 $1469 = (_bitshift64Ashr(($1467|0),($1468|0),21)|0);
 $1470 = tempRet0;
 $1471 = (_i64Add(($1425|0),($1426|0),($1469|0),($1470|0))|0);
 $1472 = tempRet0;
 $1473 = (_bitshift64Shl(($1469|0),($1470|0),21)|0);
 $1474 = tempRet0;
 $1475 = (_i64Subtract(($1411|0),($1412|0),($1473|0),($1474|0))|0);
 $1476 = tempRet0;
 $1477 = (_i64Add(($1421|0),($1422|0),1048576,0)|0);
 $1478 = tempRet0;
 $1479 = (_bitshift64Ashr(($1477|0),($1478|0),21)|0);
 $1480 = tempRet0;
 $1481 = (_bitshift64Shl(($1479|0),($1480|0),21)|0);
 $1482 = tempRet0;
 $1483 = (_i64Subtract(($1421|0),($1422|0),($1481|0),($1482|0))|0);
 $1484 = tempRet0;
 $1485 = (___muldi3(($1479|0),($1480|0),666643,0)|0);
 $1486 = tempRet0;
 $1487 = (_i64Add(($1375|0),($1376|0),($1485|0),($1486|0))|0);
 $1488 = tempRet0;
 $1489 = (___muldi3(($1479|0),($1480|0),470296,0)|0);
 $1490 = tempRet0;
 $1491 = (_i64Add(($1435|0),($1436|0),($1489|0),($1490|0))|0);
 $1492 = tempRet0;
 $1493 = (___muldi3(($1479|0),($1480|0),654183,0)|0);
 $1494 = tempRet0;
 $1495 = (_i64Add(($1431|0),($1432|0),($1493|0),($1494|0))|0);
 $1496 = tempRet0;
 $1497 = (___muldi3(($1479|0),($1480|0),-997805,-1)|0);
 $1498 = tempRet0;
 $1499 = (_i64Add(($1445|0),($1446|0),($1497|0),($1498|0))|0);
 $1500 = tempRet0;
 $1501 = (___muldi3(($1479|0),($1480|0),136657,0)|0);
 $1502 = tempRet0;
 $1503 = (_i64Add(($1441|0),($1442|0),($1501|0),($1502|0))|0);
 $1504 = tempRet0;
 $1505 = (___muldi3(($1479|0),($1480|0),-683901,-1)|0);
 $1506 = tempRet0;
 $1507 = (_i64Add(($1455|0),($1456|0),($1505|0),($1506|0))|0);
 $1508 = tempRet0;
 $1509 = (_bitshift64Ashr(($1487|0),($1488|0),21)|0);
 $1510 = tempRet0;
 $1511 = (_i64Add(($1491|0),($1492|0),($1509|0),($1510|0))|0);
 $1512 = tempRet0;
 $1513 = (_bitshift64Shl(($1509|0),($1510|0),21)|0);
 $1514 = tempRet0;
 $1515 = (_i64Subtract(($1487|0),($1488|0),($1513|0),($1514|0))|0);
 $1516 = tempRet0;
 $1517 = (_bitshift64Ashr(($1511|0),($1512|0),21)|0);
 $1518 = tempRet0;
 $1519 = (_i64Add(($1495|0),($1496|0),($1517|0),($1518|0))|0);
 $1520 = tempRet0;
 $1521 = (_bitshift64Shl(($1517|0),($1518|0),21)|0);
 $1522 = tempRet0;
 $1523 = (_i64Subtract(($1511|0),($1512|0),($1521|0),($1522|0))|0);
 $1524 = tempRet0;
 $1525 = (_bitshift64Ashr(($1519|0),($1520|0),21)|0);
 $1526 = tempRet0;
 $1527 = (_i64Add(($1499|0),($1500|0),($1525|0),($1526|0))|0);
 $1528 = tempRet0;
 $1529 = (_bitshift64Shl(($1525|0),($1526|0),21)|0);
 $1530 = tempRet0;
 $1531 = (_i64Subtract(($1519|0),($1520|0),($1529|0),($1530|0))|0);
 $1532 = tempRet0;
 $1533 = (_bitshift64Ashr(($1527|0),($1528|0),21)|0);
 $1534 = tempRet0;
 $1535 = (_i64Add(($1503|0),($1504|0),($1533|0),($1534|0))|0);
 $1536 = tempRet0;
 $1537 = (_bitshift64Shl(($1533|0),($1534|0),21)|0);
 $1538 = tempRet0;
 $1539 = (_i64Subtract(($1527|0),($1528|0),($1537|0),($1538|0))|0);
 $1540 = tempRet0;
 $1541 = (_bitshift64Ashr(($1535|0),($1536|0),21)|0);
 $1542 = tempRet0;
 $1543 = (_i64Add(($1507|0),($1508|0),($1541|0),($1542|0))|0);
 $1544 = tempRet0;
 $1545 = (_bitshift64Shl(($1541|0),($1542|0),21)|0);
 $1546 = tempRet0;
 $1547 = (_i64Subtract(($1535|0),($1536|0),($1545|0),($1546|0))|0);
 $1548 = tempRet0;
 $1549 = (_bitshift64Ashr(($1543|0),($1544|0),21)|0);
 $1550 = tempRet0;
 $1551 = (_i64Add(($1451|0),($1452|0),($1549|0),($1550|0))|0);
 $1552 = tempRet0;
 $1553 = (_bitshift64Shl(($1549|0),($1550|0),21)|0);
 $1554 = tempRet0;
 $1555 = (_i64Subtract(($1543|0),($1544|0),($1553|0),($1554|0))|0);
 $1556 = tempRet0;
 $1557 = (_bitshift64Ashr(($1551|0),($1552|0),21)|0);
 $1558 = tempRet0;
 $1559 = (_i64Add(($1465|0),($1466|0),($1557|0),($1558|0))|0);
 $1560 = tempRet0;
 $1561 = (_bitshift64Shl(($1557|0),($1558|0),21)|0);
 $1562 = tempRet0;
 $1563 = (_i64Subtract(($1551|0),($1552|0),($1561|0),($1562|0))|0);
 $1564 = tempRet0;
 $1565 = (_bitshift64Ashr(($1559|0),($1560|0),21)|0);
 $1566 = tempRet0;
 $1567 = (_i64Add(($1461|0),($1462|0),($1565|0),($1566|0))|0);
 $1568 = tempRet0;
 $1569 = (_bitshift64Shl(($1565|0),($1566|0),21)|0);
 $1570 = tempRet0;
 $1571 = (_i64Subtract(($1559|0),($1560|0),($1569|0),($1570|0))|0);
 $1572 = tempRet0;
 $1573 = (_bitshift64Ashr(($1567|0),($1568|0),21)|0);
 $1574 = tempRet0;
 $1575 = (_i64Add(($1475|0),($1476|0),($1573|0),($1574|0))|0);
 $1576 = tempRet0;
 $1577 = (_bitshift64Shl(($1573|0),($1574|0),21)|0);
 $1578 = tempRet0;
 $1579 = (_i64Subtract(($1567|0),($1568|0),($1577|0),($1578|0))|0);
 $1580 = tempRet0;
 $1581 = (_bitshift64Ashr(($1575|0),($1576|0),21)|0);
 $1582 = tempRet0;
 $1583 = (_i64Add(($1471|0),($1472|0),($1581|0),($1582|0))|0);
 $1584 = tempRet0;
 $1585 = (_bitshift64Shl(($1581|0),($1582|0),21)|0);
 $1586 = tempRet0;
 $1587 = (_i64Subtract(($1575|0),($1576|0),($1585|0),($1586|0))|0);
 $1588 = tempRet0;
 $1589 = (_bitshift64Ashr(($1583|0),($1584|0),21)|0);
 $1590 = tempRet0;
 $1591 = (_i64Add(($1483|0),($1484|0),($1589|0),($1590|0))|0);
 $1592 = tempRet0;
 $1593 = (_bitshift64Shl(($1589|0),($1590|0),21)|0);
 $1594 = tempRet0;
 $1595 = (_i64Subtract(($1583|0),($1584|0),($1593|0),($1594|0))|0);
 $1596 = tempRet0;
 $1597 = (_bitshift64Ashr(($1591|0),($1592|0),21)|0);
 $1598 = tempRet0;
 $1599 = (_bitshift64Shl(($1597|0),($1598|0),21)|0);
 $1600 = tempRet0;
 $1601 = (_i64Subtract(($1591|0),($1592|0),($1599|0),($1600|0))|0);
 $1602 = tempRet0;
 $1603 = (___muldi3(($1597|0),($1598|0),666643,0)|0);
 $1604 = tempRet0;
 $1605 = (_i64Add(($1515|0),($1516|0),($1603|0),($1604|0))|0);
 $1606 = tempRet0;
 $1607 = (___muldi3(($1597|0),($1598|0),470296,0)|0);
 $1608 = tempRet0;
 $1609 = (_i64Add(($1523|0),($1524|0),($1607|0),($1608|0))|0);
 $1610 = tempRet0;
 $1611 = (___muldi3(($1597|0),($1598|0),654183,0)|0);
 $1612 = tempRet0;
 $1613 = (_i64Add(($1531|0),($1532|0),($1611|0),($1612|0))|0);
 $1614 = tempRet0;
 $1615 = (___muldi3(($1597|0),($1598|0),-997805,-1)|0);
 $1616 = tempRet0;
 $1617 = (_i64Add(($1539|0),($1540|0),($1615|0),($1616|0))|0);
 $1618 = tempRet0;
 $1619 = (___muldi3(($1597|0),($1598|0),136657,0)|0);
 $1620 = tempRet0;
 $1621 = (_i64Add(($1547|0),($1548|0),($1619|0),($1620|0))|0);
 $1622 = tempRet0;
 $1623 = (___muldi3(($1597|0),($1598|0),-683901,-1)|0);
 $1624 = tempRet0;
 $1625 = (_i64Add(($1555|0),($1556|0),($1623|0),($1624|0))|0);
 $1626 = tempRet0;
 $1627 = (_bitshift64Ashr(($1605|0),($1606|0),21)|0);
 $1628 = tempRet0;
 $1629 = (_i64Add(($1609|0),($1610|0),($1627|0),($1628|0))|0);
 $1630 = tempRet0;
 $1631 = (_bitshift64Shl(($1627|0),($1628|0),21)|0);
 $1632 = tempRet0;
 $1633 = (_i64Subtract(($1605|0),($1606|0),($1631|0),($1632|0))|0);
 $1634 = tempRet0;
 $1635 = (_bitshift64Ashr(($1629|0),($1630|0),21)|0);
 $1636 = tempRet0;
 $1637 = (_i64Add(($1613|0),($1614|0),($1635|0),($1636|0))|0);
 $1638 = tempRet0;
 $1639 = (_bitshift64Shl(($1635|0),($1636|0),21)|0);
 $1640 = tempRet0;
 $1641 = (_i64Subtract(($1629|0),($1630|0),($1639|0),($1640|0))|0);
 $1642 = tempRet0;
 $1643 = (_bitshift64Ashr(($1637|0),($1638|0),21)|0);
 $1644 = tempRet0;
 $1645 = (_i64Add(($1617|0),($1618|0),($1643|0),($1644|0))|0);
 $1646 = tempRet0;
 $1647 = (_bitshift64Shl(($1643|0),($1644|0),21)|0);
 $1648 = tempRet0;
 $1649 = (_i64Subtract(($1637|0),($1638|0),($1647|0),($1648|0))|0);
 $1650 = tempRet0;
 $1651 = (_bitshift64Ashr(($1645|0),($1646|0),21)|0);
 $1652 = tempRet0;
 $1653 = (_i64Add(($1621|0),($1622|0),($1651|0),($1652|0))|0);
 $1654 = tempRet0;
 $1655 = (_bitshift64Shl(($1651|0),($1652|0),21)|0);
 $1656 = tempRet0;
 $1657 = (_i64Subtract(($1645|0),($1646|0),($1655|0),($1656|0))|0);
 $1658 = tempRet0;
 $1659 = (_bitshift64Ashr(($1653|0),($1654|0),21)|0);
 $1660 = tempRet0;
 $1661 = (_i64Add(($1625|0),($1626|0),($1659|0),($1660|0))|0);
 $1662 = tempRet0;
 $1663 = (_bitshift64Shl(($1659|0),($1660|0),21)|0);
 $1664 = tempRet0;
 $1665 = (_i64Subtract(($1653|0),($1654|0),($1663|0),($1664|0))|0);
 $1666 = tempRet0;
 $1667 = (_bitshift64Ashr(($1661|0),($1662|0),21)|0);
 $1668 = tempRet0;
 $1669 = (_i64Add(($1563|0),($1564|0),($1667|0),($1668|0))|0);
 $1670 = tempRet0;
 $1671 = (_bitshift64Shl(($1667|0),($1668|0),21)|0);
 $1672 = tempRet0;
 $1673 = (_i64Subtract(($1661|0),($1662|0),($1671|0),($1672|0))|0);
 $1674 = tempRet0;
 $1675 = (_bitshift64Ashr(($1669|0),($1670|0),21)|0);
 $1676 = tempRet0;
 $1677 = (_i64Add(($1571|0),($1572|0),($1675|0),($1676|0))|0);
 $1678 = tempRet0;
 $1679 = (_bitshift64Shl(($1675|0),($1676|0),21)|0);
 $1680 = tempRet0;
 $1681 = (_i64Subtract(($1669|0),($1670|0),($1679|0),($1680|0))|0);
 $1682 = tempRet0;
 $1683 = (_bitshift64Ashr(($1677|0),($1678|0),21)|0);
 $1684 = tempRet0;
 $1685 = (_i64Add(($1579|0),($1580|0),($1683|0),($1684|0))|0);
 $1686 = tempRet0;
 $1687 = (_bitshift64Shl(($1683|0),($1684|0),21)|0);
 $1688 = tempRet0;
 $1689 = (_i64Subtract(($1677|0),($1678|0),($1687|0),($1688|0))|0);
 $1690 = tempRet0;
 $1691 = (_bitshift64Ashr(($1685|0),($1686|0),21)|0);
 $1692 = tempRet0;
 $1693 = (_i64Add(($1587|0),($1588|0),($1691|0),($1692|0))|0);
 $1694 = tempRet0;
 $1695 = (_bitshift64Shl(($1691|0),($1692|0),21)|0);
 $1696 = tempRet0;
 $1697 = (_i64Subtract(($1685|0),($1686|0),($1695|0),($1696|0))|0);
 $1698 = tempRet0;
 $1699 = (_bitshift64Ashr(($1693|0),($1694|0),21)|0);
 $1700 = tempRet0;
 $1701 = (_i64Add(($1595|0),($1596|0),($1699|0),($1700|0))|0);
 $1702 = tempRet0;
 $1703 = (_bitshift64Shl(($1699|0),($1700|0),21)|0);
 $1704 = tempRet0;
 $1705 = (_i64Subtract(($1693|0),($1694|0),($1703|0),($1704|0))|0);
 $1706 = tempRet0;
 $1707 = (_bitshift64Ashr(($1701|0),($1702|0),21)|0);
 $1708 = tempRet0;
 $1709 = (_i64Add(($1601|0),($1602|0),($1707|0),($1708|0))|0);
 $1710 = tempRet0;
 $1711 = (_bitshift64Shl(($1707|0),($1708|0),21)|0);
 $1712 = tempRet0;
 $1713 = (_i64Subtract(($1701|0),($1702|0),($1711|0),($1712|0))|0);
 $1714 = tempRet0;
 $1715 = $1633&255;
 HEAP8[$0>>0] = $1715;
 $1716 = (_bitshift64Lshr(($1633|0),($1634|0),8)|0);
 $1717 = tempRet0;
 $1718 = $1716&255;
 $1719 = ((($0)) + 1|0);
 HEAP8[$1719>>0] = $1718;
 $1720 = (_bitshift64Lshr(($1633|0),($1634|0),16)|0);
 $1721 = tempRet0;
 $1722 = (_bitshift64Shl(($1641|0),($1642|0),5)|0);
 $1723 = tempRet0;
 $1724 = $1720 | $1722;
 $1721 | $1723;
 $1725 = $1724&255;
 $1726 = ((($0)) + 2|0);
 HEAP8[$1726>>0] = $1725;
 $1727 = (_bitshift64Lshr(($1641|0),($1642|0),3)|0);
 $1728 = tempRet0;
 $1729 = $1727&255;
 $1730 = ((($0)) + 3|0);
 HEAP8[$1730>>0] = $1729;
 $1731 = (_bitshift64Lshr(($1641|0),($1642|0),11)|0);
 $1732 = tempRet0;
 $1733 = $1731&255;
 $1734 = ((($0)) + 4|0);
 HEAP8[$1734>>0] = $1733;
 $1735 = (_bitshift64Lshr(($1641|0),($1642|0),19)|0);
 $1736 = tempRet0;
 $1737 = (_bitshift64Shl(($1649|0),($1650|0),2)|0);
 $1738 = tempRet0;
 $1739 = $1735 | $1737;
 $1736 | $1738;
 $1740 = $1739&255;
 $1741 = ((($0)) + 5|0);
 HEAP8[$1741>>0] = $1740;
 $1742 = (_bitshift64Lshr(($1649|0),($1650|0),6)|0);
 $1743 = tempRet0;
 $1744 = $1742&255;
 $1745 = ((($0)) + 6|0);
 HEAP8[$1745>>0] = $1744;
 $1746 = (_bitshift64Lshr(($1649|0),($1650|0),14)|0);
 $1747 = tempRet0;
 $1748 = (_bitshift64Shl(($1657|0),($1658|0),7)|0);
 $1749 = tempRet0;
 $1750 = $1746 | $1748;
 $1747 | $1749;
 $1751 = $1750&255;
 $1752 = ((($0)) + 7|0);
 HEAP8[$1752>>0] = $1751;
 $1753 = (_bitshift64Lshr(($1657|0),($1658|0),1)|0);
 $1754 = tempRet0;
 $1755 = $1753&255;
 $1756 = ((($0)) + 8|0);
 HEAP8[$1756>>0] = $1755;
 $1757 = (_bitshift64Lshr(($1657|0),($1658|0),9)|0);
 $1758 = tempRet0;
 $1759 = $1757&255;
 $1760 = ((($0)) + 9|0);
 HEAP8[$1760>>0] = $1759;
 $1761 = (_bitshift64Lshr(($1657|0),($1658|0),17)|0);
 $1762 = tempRet0;
 $1763 = (_bitshift64Shl(($1665|0),($1666|0),4)|0);
 $1764 = tempRet0;
 $1765 = $1761 | $1763;
 $1762 | $1764;
 $1766 = $1765&255;
 $1767 = ((($0)) + 10|0);
 HEAP8[$1767>>0] = $1766;
 $1768 = (_bitshift64Lshr(($1665|0),($1666|0),4)|0);
 $1769 = tempRet0;
 $1770 = $1768&255;
 $1771 = ((($0)) + 11|0);
 HEAP8[$1771>>0] = $1770;
 $1772 = (_bitshift64Lshr(($1665|0),($1666|0),12)|0);
 $1773 = tempRet0;
 $1774 = $1772&255;
 $1775 = ((($0)) + 12|0);
 HEAP8[$1775>>0] = $1774;
 $1776 = (_bitshift64Lshr(($1665|0),($1666|0),20)|0);
 $1777 = tempRet0;
 $1778 = (_bitshift64Shl(($1673|0),($1674|0),1)|0);
 $1779 = tempRet0;
 $1780 = $1776 | $1778;
 $1777 | $1779;
 $1781 = $1780&255;
 $1782 = ((($0)) + 13|0);
 HEAP8[$1782>>0] = $1781;
 $1783 = (_bitshift64Lshr(($1673|0),($1674|0),7)|0);
 $1784 = tempRet0;
 $1785 = $1783&255;
 $1786 = ((($0)) + 14|0);
 HEAP8[$1786>>0] = $1785;
 $1787 = (_bitshift64Lshr(($1673|0),($1674|0),15)|0);
 $1788 = tempRet0;
 $1789 = (_bitshift64Shl(($1681|0),($1682|0),6)|0);
 $1790 = tempRet0;
 $1791 = $1787 | $1789;
 $1788 | $1790;
 $1792 = $1791&255;
 $1793 = ((($0)) + 15|0);
 HEAP8[$1793>>0] = $1792;
 $1794 = (_bitshift64Lshr(($1681|0),($1682|0),2)|0);
 $1795 = tempRet0;
 $1796 = $1794&255;
 $1797 = ((($0)) + 16|0);
 HEAP8[$1797>>0] = $1796;
 $1798 = (_bitshift64Lshr(($1681|0),($1682|0),10)|0);
 $1799 = tempRet0;
 $1800 = $1798&255;
 $1801 = ((($0)) + 17|0);
 HEAP8[$1801>>0] = $1800;
 $1802 = (_bitshift64Lshr(($1681|0),($1682|0),18)|0);
 $1803 = tempRet0;
 $1804 = (_bitshift64Shl(($1689|0),($1690|0),3)|0);
 $1805 = tempRet0;
 $1806 = $1802 | $1804;
 $1803 | $1805;
 $1807 = $1806&255;
 $1808 = ((($0)) + 18|0);
 HEAP8[$1808>>0] = $1807;
 $1809 = (_bitshift64Lshr(($1689|0),($1690|0),5)|0);
 $1810 = tempRet0;
 $1811 = $1809&255;
 $1812 = ((($0)) + 19|0);
 HEAP8[$1812>>0] = $1811;
 $1813 = (_bitshift64Lshr(($1689|0),($1690|0),13)|0);
 $1814 = tempRet0;
 $1815 = $1813&255;
 $1816 = ((($0)) + 20|0);
 HEAP8[$1816>>0] = $1815;
 $1817 = $1697&255;
 $1818 = ((($0)) + 21|0);
 HEAP8[$1818>>0] = $1817;
 $1819 = (_bitshift64Lshr(($1697|0),($1698|0),8)|0);
 $1820 = tempRet0;
 $1821 = $1819&255;
 $1822 = ((($0)) + 22|0);
 HEAP8[$1822>>0] = $1821;
 $1823 = (_bitshift64Lshr(($1697|0),($1698|0),16)|0);
 $1824 = tempRet0;
 $1825 = (_bitshift64Shl(($1705|0),($1706|0),5)|0);
 $1826 = tempRet0;
 $1827 = $1823 | $1825;
 $1824 | $1826;
 $1828 = $1827&255;
 $1829 = ((($0)) + 23|0);
 HEAP8[$1829>>0] = $1828;
 $1830 = (_bitshift64Lshr(($1705|0),($1706|0),3)|0);
 $1831 = tempRet0;
 $1832 = $1830&255;
 $1833 = ((($0)) + 24|0);
 HEAP8[$1833>>0] = $1832;
 $1834 = (_bitshift64Lshr(($1705|0),($1706|0),11)|0);
 $1835 = tempRet0;
 $1836 = $1834&255;
 $1837 = ((($0)) + 25|0);
 HEAP8[$1837>>0] = $1836;
 $1838 = (_bitshift64Lshr(($1705|0),($1706|0),19)|0);
 $1839 = tempRet0;
 $1840 = (_bitshift64Shl(($1713|0),($1714|0),2)|0);
 $1841 = tempRet0;
 $1842 = $1838 | $1840;
 $1839 | $1841;
 $1843 = $1842&255;
 $1844 = ((($0)) + 26|0);
 HEAP8[$1844>>0] = $1843;
 $1845 = (_bitshift64Lshr(($1713|0),($1714|0),6)|0);
 $1846 = tempRet0;
 $1847 = $1845&255;
 $1848 = ((($0)) + 27|0);
 HEAP8[$1848>>0] = $1847;
 $1849 = (_bitshift64Lshr(($1713|0),($1714|0),14)|0);
 $1850 = tempRet0;
 $1851 = (_bitshift64Shl(($1709|0),($1710|0),7)|0);
 $1852 = tempRet0;
 $1853 = $1849 | $1851;
 $1850 | $1852;
 $1854 = $1853&255;
 $1855 = ((($0)) + 28|0);
 HEAP8[$1855>>0] = $1854;
 $1856 = (_bitshift64Lshr(($1709|0),($1710|0),1)|0);
 $1857 = tempRet0;
 $1858 = $1856&255;
 $1859 = ((($0)) + 29|0);
 HEAP8[$1859>>0] = $1858;
 $1860 = (_bitshift64Lshr(($1709|0),($1710|0),9)|0);
 $1861 = tempRet0;
 $1862 = $1860&255;
 $1863 = ((($0)) + 30|0);
 HEAP8[$1863>>0] = $1862;
 $1864 = (_bitshift64Lshr(($1709|0),($1710|0),17)|0);
 $1865 = tempRet0;
 $1866 = $1864&255;
 $1867 = ((($0)) + 31|0);
 HEAP8[$1867>>0] = $1866;
 return;
}
function _crypto_core_curve25519_ref10_sc_reduce($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx12 = 0, $$idx12$val = 0, $$idx13 = 0, $$idx13$val = 0, $$idx15 = 0, $$idx15$val = 0, $$idx16 = 0, $$idx16$val = 0, $$idx18 = 0, $$idx18$val = 0, $$idx19 = 0, $$idx19$val = 0, $$idx21 = 0, $$idx21$val = 0;
 var $$idx22 = 0, $$idx22$val = 0, $$idx24 = 0, $$idx24$val = 0, $$idx25 = 0, $$idx25$val = 0, $$idx27 = 0, $$idx27$val = 0, $$idx28 = 0, $$idx28$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx30 = 0, $$idx30$val = 0, $$idx31 = 0, $$idx31$val = 0, $$idx4 = 0, $$idx4$val = 0, $$idx6 = 0, $$idx6$val = 0;
 var $$idx7 = 0, $$idx7$val = 0, $$idx9 = 0, $$idx9$val = 0, $$val = 0, $$val11 = 0, $$val14 = 0, $$val17 = 0, $$val2 = 0, $$val20 = 0, $$val23 = 0, $$val26 = 0, $$val29 = 0, $$val5 = 0, $$val8 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0;
 var $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$val29 = HEAP8[$0>>0]|0;
 $$idx30 = ((($0)) + 1|0);
 $$idx30$val = HEAP8[$$idx30>>0]|0;
 $$idx31 = ((($0)) + 2|0);
 $$idx31$val = HEAP8[$$idx31>>0]|0;
 $1 = (_load_3($$val29,$$idx30$val,$$idx31$val)|0);
 $2 = tempRet0;
 $3 = $1 & 2097151;
 $4 = (_load_4($$idx31)|0);
 $5 = tempRet0;
 $6 = (_bitshift64Lshr(($4|0),($5|0),5)|0);
 $7 = tempRet0;
 $8 = $6 & 2097151;
 $9 = ((($0)) + 5|0);
 $$val26 = HEAP8[$9>>0]|0;
 $$idx27 = ((($0)) + 6|0);
 $$idx27$val = HEAP8[$$idx27>>0]|0;
 $$idx28 = ((($0)) + 7|0);
 $$idx28$val = HEAP8[$$idx28>>0]|0;
 $10 = (_load_3($$val26,$$idx27$val,$$idx28$val)|0);
 $11 = tempRet0;
 $12 = (_bitshift64Lshr(($10|0),($11|0),2)|0);
 $13 = tempRet0;
 $14 = $12 & 2097151;
 $15 = (_load_4($$idx28)|0);
 $16 = tempRet0;
 $17 = (_bitshift64Lshr(($15|0),($16|0),7)|0);
 $18 = tempRet0;
 $19 = $17 & 2097151;
 $20 = ((($0)) + 10|0);
 $21 = (_load_4($20)|0);
 $22 = tempRet0;
 $23 = (_bitshift64Lshr(($21|0),($22|0),4)|0);
 $24 = tempRet0;
 $25 = $23 & 2097151;
 $26 = ((($0)) + 13|0);
 $$val23 = HEAP8[$26>>0]|0;
 $$idx24 = ((($0)) + 14|0);
 $$idx24$val = HEAP8[$$idx24>>0]|0;
 $$idx25 = ((($0)) + 15|0);
 $$idx25$val = HEAP8[$$idx25>>0]|0;
 $27 = (_load_3($$val23,$$idx24$val,$$idx25$val)|0);
 $28 = tempRet0;
 $29 = (_bitshift64Lshr(($27|0),($28|0),1)|0);
 $30 = tempRet0;
 $31 = $29 & 2097151;
 $32 = (_load_4($$idx25)|0);
 $33 = tempRet0;
 $34 = (_bitshift64Lshr(($32|0),($33|0),6)|0);
 $35 = tempRet0;
 $36 = $34 & 2097151;
 $37 = ((($0)) + 18|0);
 $$val20 = HEAP8[$37>>0]|0;
 $$idx21 = ((($0)) + 19|0);
 $$idx21$val = HEAP8[$$idx21>>0]|0;
 $$idx22 = ((($0)) + 20|0);
 $$idx22$val = HEAP8[$$idx22>>0]|0;
 $38 = (_load_3($$val20,$$idx21$val,$$idx22$val)|0);
 $39 = tempRet0;
 $40 = (_bitshift64Lshr(($38|0),($39|0),3)|0);
 $41 = tempRet0;
 $42 = $40 & 2097151;
 $43 = ((($0)) + 21|0);
 $$val17 = HEAP8[$43>>0]|0;
 $$idx18 = ((($0)) + 22|0);
 $$idx18$val = HEAP8[$$idx18>>0]|0;
 $$idx19 = ((($0)) + 23|0);
 $$idx19$val = HEAP8[$$idx19>>0]|0;
 $44 = (_load_3($$val17,$$idx18$val,$$idx19$val)|0);
 $45 = tempRet0;
 $46 = $44 & 2097151;
 $47 = (_load_4($$idx19)|0);
 $48 = tempRet0;
 $49 = (_bitshift64Lshr(($47|0),($48|0),5)|0);
 $50 = tempRet0;
 $51 = $49 & 2097151;
 $52 = ((($0)) + 26|0);
 $$val14 = HEAP8[$52>>0]|0;
 $$idx15 = ((($0)) + 27|0);
 $$idx15$val = HEAP8[$$idx15>>0]|0;
 $$idx16 = ((($0)) + 28|0);
 $$idx16$val = HEAP8[$$idx16>>0]|0;
 $53 = (_load_3($$val14,$$idx15$val,$$idx16$val)|0);
 $54 = tempRet0;
 $55 = (_bitshift64Lshr(($53|0),($54|0),2)|0);
 $56 = tempRet0;
 $57 = $55 & 2097151;
 $58 = (_load_4($$idx16)|0);
 $59 = tempRet0;
 $60 = (_bitshift64Lshr(($58|0),($59|0),7)|0);
 $61 = tempRet0;
 $62 = $60 & 2097151;
 $63 = ((($0)) + 31|0);
 $64 = (_load_4($63)|0);
 $65 = tempRet0;
 $66 = (_bitshift64Lshr(($64|0),($65|0),4)|0);
 $67 = tempRet0;
 $68 = $66 & 2097151;
 $69 = ((($0)) + 34|0);
 $$val11 = HEAP8[$69>>0]|0;
 $$idx12 = ((($0)) + 35|0);
 $$idx12$val = HEAP8[$$idx12>>0]|0;
 $$idx13 = ((($0)) + 36|0);
 $$idx13$val = HEAP8[$$idx13>>0]|0;
 $70 = (_load_3($$val11,$$idx12$val,$$idx13$val)|0);
 $71 = tempRet0;
 $72 = (_bitshift64Lshr(($70|0),($71|0),1)|0);
 $73 = tempRet0;
 $74 = $72 & 2097151;
 $75 = (_load_4($$idx13)|0);
 $76 = tempRet0;
 $77 = (_bitshift64Lshr(($75|0),($76|0),6)|0);
 $78 = tempRet0;
 $79 = $77 & 2097151;
 $80 = ((($0)) + 39|0);
 $$val8 = HEAP8[$80>>0]|0;
 $$idx9 = ((($0)) + 40|0);
 $$idx9$val = HEAP8[$$idx9>>0]|0;
 $$idx10 = ((($0)) + 41|0);
 $$idx10$val = HEAP8[$$idx10>>0]|0;
 $81 = (_load_3($$val8,$$idx9$val,$$idx10$val)|0);
 $82 = tempRet0;
 $83 = (_bitshift64Lshr(($81|0),($82|0),3)|0);
 $84 = tempRet0;
 $85 = $83 & 2097151;
 $86 = ((($0)) + 42|0);
 $$val5 = HEAP8[$86>>0]|0;
 $$idx6 = ((($0)) + 43|0);
 $$idx6$val = HEAP8[$$idx6>>0]|0;
 $$idx7 = ((($0)) + 44|0);
 $$idx7$val = HEAP8[$$idx7>>0]|0;
 $87 = (_load_3($$val5,$$idx6$val,$$idx7$val)|0);
 $88 = tempRet0;
 $89 = $87 & 2097151;
 $90 = (_load_4($$idx7)|0);
 $91 = tempRet0;
 $92 = (_bitshift64Lshr(($90|0),($91|0),5)|0);
 $93 = tempRet0;
 $94 = $92 & 2097151;
 $95 = ((($0)) + 47|0);
 $$val2 = HEAP8[$95>>0]|0;
 $$idx3 = ((($0)) + 48|0);
 $$idx3$val = HEAP8[$$idx3>>0]|0;
 $$idx4 = ((($0)) + 49|0);
 $$idx4$val = HEAP8[$$idx4>>0]|0;
 $96 = (_load_3($$val2,$$idx3$val,$$idx4$val)|0);
 $97 = tempRet0;
 $98 = (_bitshift64Lshr(($96|0),($97|0),2)|0);
 $99 = tempRet0;
 $100 = $98 & 2097151;
 $101 = (_load_4($$idx4)|0);
 $102 = tempRet0;
 $103 = (_bitshift64Lshr(($101|0),($102|0),7)|0);
 $104 = tempRet0;
 $105 = $103 & 2097151;
 $106 = ((($0)) + 52|0);
 $107 = (_load_4($106)|0);
 $108 = tempRet0;
 $109 = (_bitshift64Lshr(($107|0),($108|0),4)|0);
 $110 = tempRet0;
 $111 = $109 & 2097151;
 $112 = ((($0)) + 55|0);
 $$val = HEAP8[$112>>0]|0;
 $$idx = ((($0)) + 56|0);
 $$idx$val = HEAP8[$$idx>>0]|0;
 $$idx1 = ((($0)) + 57|0);
 $$idx1$val = HEAP8[$$idx1>>0]|0;
 $113 = (_load_3($$val,$$idx$val,$$idx1$val)|0);
 $114 = tempRet0;
 $115 = (_bitshift64Lshr(($113|0),($114|0),1)|0);
 $116 = tempRet0;
 $117 = $115 & 2097151;
 $118 = (_load_4($$idx1)|0);
 $119 = tempRet0;
 $120 = (_bitshift64Lshr(($118|0),($119|0),6)|0);
 $121 = tempRet0;
 $122 = $120 & 2097151;
 $123 = ((($0)) + 60|0);
 $124 = (_load_4($123)|0);
 $125 = tempRet0;
 $126 = (_bitshift64Lshr(($124|0),($125|0),3)|0);
 $127 = tempRet0;
 $128 = (___muldi3(($126|0),($127|0),666643,0)|0);
 $129 = tempRet0;
 $130 = (_i64Add(($62|0),0,($128|0),($129|0))|0);
 $131 = tempRet0;
 $132 = (___muldi3(($126|0),($127|0),470296,0)|0);
 $133 = tempRet0;
 $134 = (_i64Add(($68|0),0,($132|0),($133|0))|0);
 $135 = tempRet0;
 $136 = (___muldi3(($126|0),($127|0),654183,0)|0);
 $137 = tempRet0;
 $138 = (_i64Add(($74|0),0,($136|0),($137|0))|0);
 $139 = tempRet0;
 $140 = (___muldi3(($126|0),($127|0),-997805,-1)|0);
 $141 = tempRet0;
 $142 = (_i64Add(($79|0),0,($140|0),($141|0))|0);
 $143 = tempRet0;
 $144 = (___muldi3(($126|0),($127|0),136657,0)|0);
 $145 = tempRet0;
 $146 = (_i64Add(($85|0),0,($144|0),($145|0))|0);
 $147 = tempRet0;
 $148 = (___muldi3(($126|0),($127|0),-683901,-1)|0);
 $149 = tempRet0;
 $150 = (_i64Add(($89|0),0,($148|0),($149|0))|0);
 $151 = tempRet0;
 $152 = (___muldi3(($122|0),0,666643,0)|0);
 $153 = tempRet0;
 $154 = (_i64Add(($57|0),0,($152|0),($153|0))|0);
 $155 = tempRet0;
 $156 = (___muldi3(($122|0),0,470296,0)|0);
 $157 = tempRet0;
 $158 = (_i64Add(($130|0),($131|0),($156|0),($157|0))|0);
 $159 = tempRet0;
 $160 = (___muldi3(($122|0),0,654183,0)|0);
 $161 = tempRet0;
 $162 = (_i64Add(($134|0),($135|0),($160|0),($161|0))|0);
 $163 = tempRet0;
 $164 = (___muldi3(($122|0),0,-997805,-1)|0);
 $165 = tempRet0;
 $166 = (_i64Add(($138|0),($139|0),($164|0),($165|0))|0);
 $167 = tempRet0;
 $168 = (___muldi3(($122|0),0,136657,0)|0);
 $169 = tempRet0;
 $170 = (_i64Add(($142|0),($143|0),($168|0),($169|0))|0);
 $171 = tempRet0;
 $172 = (___muldi3(($122|0),0,-683901,-1)|0);
 $173 = tempRet0;
 $174 = (_i64Add(($146|0),($147|0),($172|0),($173|0))|0);
 $175 = tempRet0;
 $176 = (___muldi3(($117|0),0,666643,0)|0);
 $177 = tempRet0;
 $178 = (_i64Add(($51|0),0,($176|0),($177|0))|0);
 $179 = tempRet0;
 $180 = (___muldi3(($117|0),0,470296,0)|0);
 $181 = tempRet0;
 $182 = (_i64Add(($154|0),($155|0),($180|0),($181|0))|0);
 $183 = tempRet0;
 $184 = (___muldi3(($117|0),0,654183,0)|0);
 $185 = tempRet0;
 $186 = (_i64Add(($158|0),($159|0),($184|0),($185|0))|0);
 $187 = tempRet0;
 $188 = (___muldi3(($117|0),0,-997805,-1)|0);
 $189 = tempRet0;
 $190 = (_i64Add(($162|0),($163|0),($188|0),($189|0))|0);
 $191 = tempRet0;
 $192 = (___muldi3(($117|0),0,136657,0)|0);
 $193 = tempRet0;
 $194 = (_i64Add(($166|0),($167|0),($192|0),($193|0))|0);
 $195 = tempRet0;
 $196 = (___muldi3(($117|0),0,-683901,-1)|0);
 $197 = tempRet0;
 $198 = (_i64Add(($170|0),($171|0),($196|0),($197|0))|0);
 $199 = tempRet0;
 $200 = (___muldi3(($111|0),0,666643,0)|0);
 $201 = tempRet0;
 $202 = (_i64Add(($46|0),0,($200|0),($201|0))|0);
 $203 = tempRet0;
 $204 = (___muldi3(($111|0),0,470296,0)|0);
 $205 = tempRet0;
 $206 = (_i64Add(($178|0),($179|0),($204|0),($205|0))|0);
 $207 = tempRet0;
 $208 = (___muldi3(($111|0),0,654183,0)|0);
 $209 = tempRet0;
 $210 = (_i64Add(($182|0),($183|0),($208|0),($209|0))|0);
 $211 = tempRet0;
 $212 = (___muldi3(($111|0),0,-997805,-1)|0);
 $213 = tempRet0;
 $214 = (_i64Add(($186|0),($187|0),($212|0),($213|0))|0);
 $215 = tempRet0;
 $216 = (___muldi3(($111|0),0,136657,0)|0);
 $217 = tempRet0;
 $218 = (_i64Add(($190|0),($191|0),($216|0),($217|0))|0);
 $219 = tempRet0;
 $220 = (___muldi3(($111|0),0,-683901,-1)|0);
 $221 = tempRet0;
 $222 = (_i64Add(($194|0),($195|0),($220|0),($221|0))|0);
 $223 = tempRet0;
 $224 = (___muldi3(($105|0),0,666643,0)|0);
 $225 = tempRet0;
 $226 = (_i64Add(($42|0),0,($224|0),($225|0))|0);
 $227 = tempRet0;
 $228 = (___muldi3(($105|0),0,470296,0)|0);
 $229 = tempRet0;
 $230 = (_i64Add(($202|0),($203|0),($228|0),($229|0))|0);
 $231 = tempRet0;
 $232 = (___muldi3(($105|0),0,654183,0)|0);
 $233 = tempRet0;
 $234 = (_i64Add(($206|0),($207|0),($232|0),($233|0))|0);
 $235 = tempRet0;
 $236 = (___muldi3(($105|0),0,-997805,-1)|0);
 $237 = tempRet0;
 $238 = (_i64Add(($210|0),($211|0),($236|0),($237|0))|0);
 $239 = tempRet0;
 $240 = (___muldi3(($105|0),0,136657,0)|0);
 $241 = tempRet0;
 $242 = (_i64Add(($214|0),($215|0),($240|0),($241|0))|0);
 $243 = tempRet0;
 $244 = (___muldi3(($105|0),0,-683901,-1)|0);
 $245 = tempRet0;
 $246 = (_i64Add(($218|0),($219|0),($244|0),($245|0))|0);
 $247 = tempRet0;
 $248 = (___muldi3(($100|0),0,666643,0)|0);
 $249 = tempRet0;
 $250 = (_i64Add(($36|0),0,($248|0),($249|0))|0);
 $251 = tempRet0;
 $252 = (___muldi3(($100|0),0,470296,0)|0);
 $253 = tempRet0;
 $254 = (_i64Add(($226|0),($227|0),($252|0),($253|0))|0);
 $255 = tempRet0;
 $256 = (___muldi3(($100|0),0,654183,0)|0);
 $257 = tempRet0;
 $258 = (_i64Add(($230|0),($231|0),($256|0),($257|0))|0);
 $259 = tempRet0;
 $260 = (___muldi3(($100|0),0,-997805,-1)|0);
 $261 = tempRet0;
 $262 = (_i64Add(($234|0),($235|0),($260|0),($261|0))|0);
 $263 = tempRet0;
 $264 = (___muldi3(($100|0),0,136657,0)|0);
 $265 = tempRet0;
 $266 = (_i64Add(($238|0),($239|0),($264|0),($265|0))|0);
 $267 = tempRet0;
 $268 = (___muldi3(($100|0),0,-683901,-1)|0);
 $269 = tempRet0;
 $270 = (_i64Add(($242|0),($243|0),($268|0),($269|0))|0);
 $271 = tempRet0;
 $272 = (_i64Add(($250|0),($251|0),1048576,0)|0);
 $273 = tempRet0;
 $274 = (_bitshift64Lshr(($272|0),($273|0),21)|0);
 $275 = tempRet0;
 $276 = (_i64Add(($254|0),($255|0),($274|0),($275|0))|0);
 $277 = tempRet0;
 $278 = (_bitshift64Shl(($274|0),($275|0),21)|0);
 $279 = tempRet0;
 $280 = (_i64Subtract(($250|0),($251|0),($278|0),($279|0))|0);
 $281 = tempRet0;
 $282 = (_i64Add(($258|0),($259|0),1048576,0)|0);
 $283 = tempRet0;
 $284 = (_bitshift64Lshr(($282|0),($283|0),21)|0);
 $285 = tempRet0;
 $286 = (_i64Add(($262|0),($263|0),($284|0),($285|0))|0);
 $287 = tempRet0;
 $288 = (_bitshift64Shl(($284|0),($285|0),21)|0);
 $289 = tempRet0;
 $290 = (_i64Subtract(($258|0),($259|0),($288|0),($289|0))|0);
 $291 = tempRet0;
 $292 = (_i64Add(($266|0),($267|0),1048576,0)|0);
 $293 = tempRet0;
 $294 = (_bitshift64Ashr(($292|0),($293|0),21)|0);
 $295 = tempRet0;
 $296 = (_i64Add(($270|0),($271|0),($294|0),($295|0))|0);
 $297 = tempRet0;
 $298 = (_bitshift64Shl(($294|0),($295|0),21)|0);
 $299 = tempRet0;
 $300 = (_i64Subtract(($266|0),($267|0),($298|0),($299|0))|0);
 $301 = tempRet0;
 $302 = (_i64Add(($246|0),($247|0),1048576,0)|0);
 $303 = tempRet0;
 $304 = (_bitshift64Ashr(($302|0),($303|0),21)|0);
 $305 = tempRet0;
 $306 = (_i64Add(($222|0),($223|0),($304|0),($305|0))|0);
 $307 = tempRet0;
 $308 = (_bitshift64Shl(($304|0),($305|0),21)|0);
 $309 = tempRet0;
 $310 = (_i64Subtract(($246|0),($247|0),($308|0),($309|0))|0);
 $311 = tempRet0;
 $312 = (_i64Add(($198|0),($199|0),1048576,0)|0);
 $313 = tempRet0;
 $314 = (_bitshift64Ashr(($312|0),($313|0),21)|0);
 $315 = tempRet0;
 $316 = (_i64Add(($174|0),($175|0),($314|0),($315|0))|0);
 $317 = tempRet0;
 $318 = (_bitshift64Shl(($314|0),($315|0),21)|0);
 $319 = tempRet0;
 $320 = (_i64Subtract(($198|0),($199|0),($318|0),($319|0))|0);
 $321 = tempRet0;
 $322 = (_i64Add(($150|0),($151|0),1048576,0)|0);
 $323 = tempRet0;
 $324 = (_bitshift64Ashr(($322|0),($323|0),21)|0);
 $325 = tempRet0;
 $326 = (_i64Add(($94|0),0,($324|0),($325|0))|0);
 $327 = tempRet0;
 $328 = (_bitshift64Shl(($324|0),($325|0),21)|0);
 $329 = tempRet0;
 $330 = (_i64Subtract(($150|0),($151|0),($328|0),($329|0))|0);
 $331 = tempRet0;
 $332 = (_i64Add(($276|0),($277|0),1048576,0)|0);
 $333 = tempRet0;
 $334 = (_bitshift64Lshr(($332|0),($333|0),21)|0);
 $335 = tempRet0;
 $336 = (_i64Add(($290|0),($291|0),($334|0),($335|0))|0);
 $337 = tempRet0;
 $338 = (_bitshift64Shl(($334|0),($335|0),21)|0);
 $339 = tempRet0;
 $340 = (_i64Subtract(($276|0),($277|0),($338|0),($339|0))|0);
 $341 = tempRet0;
 $342 = (_i64Add(($286|0),($287|0),1048576,0)|0);
 $343 = tempRet0;
 $344 = (_bitshift64Ashr(($342|0),($343|0),21)|0);
 $345 = tempRet0;
 $346 = (_i64Add(($300|0),($301|0),($344|0),($345|0))|0);
 $347 = tempRet0;
 $348 = (_bitshift64Shl(($344|0),($345|0),21)|0);
 $349 = tempRet0;
 $350 = (_i64Subtract(($286|0),($287|0),($348|0),($349|0))|0);
 $351 = tempRet0;
 $352 = (_i64Add(($296|0),($297|0),1048576,0)|0);
 $353 = tempRet0;
 $354 = (_bitshift64Ashr(($352|0),($353|0),21)|0);
 $355 = tempRet0;
 $356 = (_i64Add(($310|0),($311|0),($354|0),($355|0))|0);
 $357 = tempRet0;
 $358 = (_bitshift64Shl(($354|0),($355|0),21)|0);
 $359 = tempRet0;
 $360 = (_i64Subtract(($296|0),($297|0),($358|0),($359|0))|0);
 $361 = tempRet0;
 $362 = (_i64Add(($306|0),($307|0),1048576,0)|0);
 $363 = tempRet0;
 $364 = (_bitshift64Ashr(($362|0),($363|0),21)|0);
 $365 = tempRet0;
 $366 = (_i64Add(($320|0),($321|0),($364|0),($365|0))|0);
 $367 = tempRet0;
 $368 = (_bitshift64Shl(($364|0),($365|0),21)|0);
 $369 = tempRet0;
 $370 = (_i64Subtract(($306|0),($307|0),($368|0),($369|0))|0);
 $371 = tempRet0;
 $372 = (_i64Add(($316|0),($317|0),1048576,0)|0);
 $373 = tempRet0;
 $374 = (_bitshift64Ashr(($372|0),($373|0),21)|0);
 $375 = tempRet0;
 $376 = (_i64Add(($330|0),($331|0),($374|0),($375|0))|0);
 $377 = tempRet0;
 $378 = (_bitshift64Shl(($374|0),($375|0),21)|0);
 $379 = tempRet0;
 $380 = (_i64Subtract(($316|0),($317|0),($378|0),($379|0))|0);
 $381 = tempRet0;
 $382 = (___muldi3(($326|0),($327|0),666643,0)|0);
 $383 = tempRet0;
 $384 = (_i64Add(($31|0),0,($382|0),($383|0))|0);
 $385 = tempRet0;
 $386 = (___muldi3(($326|0),($327|0),470296,0)|0);
 $387 = tempRet0;
 $388 = (_i64Add(($280|0),($281|0),($386|0),($387|0))|0);
 $389 = tempRet0;
 $390 = (___muldi3(($326|0),($327|0),654183,0)|0);
 $391 = tempRet0;
 $392 = (_i64Add(($340|0),($341|0),($390|0),($391|0))|0);
 $393 = tempRet0;
 $394 = (___muldi3(($326|0),($327|0),-997805,-1)|0);
 $395 = tempRet0;
 $396 = (_i64Add(($336|0),($337|0),($394|0),($395|0))|0);
 $397 = tempRet0;
 $398 = (___muldi3(($326|0),($327|0),136657,0)|0);
 $399 = tempRet0;
 $400 = (_i64Add(($350|0),($351|0),($398|0),($399|0))|0);
 $401 = tempRet0;
 $402 = (___muldi3(($326|0),($327|0),-683901,-1)|0);
 $403 = tempRet0;
 $404 = (_i64Add(($346|0),($347|0),($402|0),($403|0))|0);
 $405 = tempRet0;
 $406 = (___muldi3(($376|0),($377|0),666643,0)|0);
 $407 = tempRet0;
 $408 = (_i64Add(($25|0),0,($406|0),($407|0))|0);
 $409 = tempRet0;
 $410 = (___muldi3(($376|0),($377|0),470296,0)|0);
 $411 = tempRet0;
 $412 = (_i64Add(($384|0),($385|0),($410|0),($411|0))|0);
 $413 = tempRet0;
 $414 = (___muldi3(($376|0),($377|0),654183,0)|0);
 $415 = tempRet0;
 $416 = (_i64Add(($388|0),($389|0),($414|0),($415|0))|0);
 $417 = tempRet0;
 $418 = (___muldi3(($376|0),($377|0),-997805,-1)|0);
 $419 = tempRet0;
 $420 = (_i64Add(($392|0),($393|0),($418|0),($419|0))|0);
 $421 = tempRet0;
 $422 = (___muldi3(($376|0),($377|0),136657,0)|0);
 $423 = tempRet0;
 $424 = (_i64Add(($396|0),($397|0),($422|0),($423|0))|0);
 $425 = tempRet0;
 $426 = (___muldi3(($376|0),($377|0),-683901,-1)|0);
 $427 = tempRet0;
 $428 = (_i64Add(($400|0),($401|0),($426|0),($427|0))|0);
 $429 = tempRet0;
 $430 = (___muldi3(($380|0),($381|0),666643,0)|0);
 $431 = tempRet0;
 $432 = (_i64Add(($19|0),0,($430|0),($431|0))|0);
 $433 = tempRet0;
 $434 = (___muldi3(($380|0),($381|0),470296,0)|0);
 $435 = tempRet0;
 $436 = (_i64Add(($408|0),($409|0),($434|0),($435|0))|0);
 $437 = tempRet0;
 $438 = (___muldi3(($380|0),($381|0),654183,0)|0);
 $439 = tempRet0;
 $440 = (_i64Add(($412|0),($413|0),($438|0),($439|0))|0);
 $441 = tempRet0;
 $442 = (___muldi3(($380|0),($381|0),-997805,-1)|0);
 $443 = tempRet0;
 $444 = (_i64Add(($416|0),($417|0),($442|0),($443|0))|0);
 $445 = tempRet0;
 $446 = (___muldi3(($380|0),($381|0),136657,0)|0);
 $447 = tempRet0;
 $448 = (_i64Add(($420|0),($421|0),($446|0),($447|0))|0);
 $449 = tempRet0;
 $450 = (___muldi3(($380|0),($381|0),-683901,-1)|0);
 $451 = tempRet0;
 $452 = (_i64Add(($424|0),($425|0),($450|0),($451|0))|0);
 $453 = tempRet0;
 $454 = (___muldi3(($366|0),($367|0),666643,0)|0);
 $455 = tempRet0;
 $456 = (_i64Add(($14|0),0,($454|0),($455|0))|0);
 $457 = tempRet0;
 $458 = (___muldi3(($366|0),($367|0),470296,0)|0);
 $459 = tempRet0;
 $460 = (_i64Add(($432|0),($433|0),($458|0),($459|0))|0);
 $461 = tempRet0;
 $462 = (___muldi3(($366|0),($367|0),654183,0)|0);
 $463 = tempRet0;
 $464 = (_i64Add(($436|0),($437|0),($462|0),($463|0))|0);
 $465 = tempRet0;
 $466 = (___muldi3(($366|0),($367|0),-997805,-1)|0);
 $467 = tempRet0;
 $468 = (_i64Add(($440|0),($441|0),($466|0),($467|0))|0);
 $469 = tempRet0;
 $470 = (___muldi3(($366|0),($367|0),136657,0)|0);
 $471 = tempRet0;
 $472 = (_i64Add(($444|0),($445|0),($470|0),($471|0))|0);
 $473 = tempRet0;
 $474 = (___muldi3(($366|0),($367|0),-683901,-1)|0);
 $475 = tempRet0;
 $476 = (_i64Add(($448|0),($449|0),($474|0),($475|0))|0);
 $477 = tempRet0;
 $478 = (___muldi3(($370|0),($371|0),666643,0)|0);
 $479 = tempRet0;
 $480 = (_i64Add(($8|0),0,($478|0),($479|0))|0);
 $481 = tempRet0;
 $482 = (___muldi3(($370|0),($371|0),470296,0)|0);
 $483 = tempRet0;
 $484 = (_i64Add(($456|0),($457|0),($482|0),($483|0))|0);
 $485 = tempRet0;
 $486 = (___muldi3(($370|0),($371|0),654183,0)|0);
 $487 = tempRet0;
 $488 = (_i64Add(($460|0),($461|0),($486|0),($487|0))|0);
 $489 = tempRet0;
 $490 = (___muldi3(($370|0),($371|0),-997805,-1)|0);
 $491 = tempRet0;
 $492 = (_i64Add(($464|0),($465|0),($490|0),($491|0))|0);
 $493 = tempRet0;
 $494 = (___muldi3(($370|0),($371|0),136657,0)|0);
 $495 = tempRet0;
 $496 = (_i64Add(($468|0),($469|0),($494|0),($495|0))|0);
 $497 = tempRet0;
 $498 = (___muldi3(($370|0),($371|0),-683901,-1)|0);
 $499 = tempRet0;
 $500 = (_i64Add(($472|0),($473|0),($498|0),($499|0))|0);
 $501 = tempRet0;
 $502 = (___muldi3(($356|0),($357|0),666643,0)|0);
 $503 = tempRet0;
 $504 = (_i64Add(($3|0),0,($502|0),($503|0))|0);
 $505 = tempRet0;
 $506 = (___muldi3(($356|0),($357|0),470296,0)|0);
 $507 = tempRet0;
 $508 = (_i64Add(($480|0),($481|0),($506|0),($507|0))|0);
 $509 = tempRet0;
 $510 = (___muldi3(($356|0),($357|0),654183,0)|0);
 $511 = tempRet0;
 $512 = (_i64Add(($484|0),($485|0),($510|0),($511|0))|0);
 $513 = tempRet0;
 $514 = (___muldi3(($356|0),($357|0),-997805,-1)|0);
 $515 = tempRet0;
 $516 = (_i64Add(($488|0),($489|0),($514|0),($515|0))|0);
 $517 = tempRet0;
 $518 = (___muldi3(($356|0),($357|0),136657,0)|0);
 $519 = tempRet0;
 $520 = (_i64Add(($492|0),($493|0),($518|0),($519|0))|0);
 $521 = tempRet0;
 $522 = (___muldi3(($356|0),($357|0),-683901,-1)|0);
 $523 = tempRet0;
 $524 = (_i64Add(($496|0),($497|0),($522|0),($523|0))|0);
 $525 = tempRet0;
 $526 = (_i64Add(($504|0),($505|0),1048576,0)|0);
 $527 = tempRet0;
 $528 = (_bitshift64Ashr(($526|0),($527|0),21)|0);
 $529 = tempRet0;
 $530 = (_i64Add(($508|0),($509|0),($528|0),($529|0))|0);
 $531 = tempRet0;
 $532 = (_bitshift64Shl(($528|0),($529|0),21)|0);
 $533 = tempRet0;
 $534 = (_i64Subtract(($504|0),($505|0),($532|0),($533|0))|0);
 $535 = tempRet0;
 $536 = (_i64Add(($512|0),($513|0),1048576,0)|0);
 $537 = tempRet0;
 $538 = (_bitshift64Ashr(($536|0),($537|0),21)|0);
 $539 = tempRet0;
 $540 = (_i64Add(($516|0),($517|0),($538|0),($539|0))|0);
 $541 = tempRet0;
 $542 = (_bitshift64Shl(($538|0),($539|0),21)|0);
 $543 = tempRet0;
 $544 = (_i64Subtract(($512|0),($513|0),($542|0),($543|0))|0);
 $545 = tempRet0;
 $546 = (_i64Add(($520|0),($521|0),1048576,0)|0);
 $547 = tempRet0;
 $548 = (_bitshift64Ashr(($546|0),($547|0),21)|0);
 $549 = tempRet0;
 $550 = (_i64Add(($524|0),($525|0),($548|0),($549|0))|0);
 $551 = tempRet0;
 $552 = (_bitshift64Shl(($548|0),($549|0),21)|0);
 $553 = tempRet0;
 $554 = (_i64Subtract(($520|0),($521|0),($552|0),($553|0))|0);
 $555 = tempRet0;
 $556 = (_i64Add(($500|0),($501|0),1048576,0)|0);
 $557 = tempRet0;
 $558 = (_bitshift64Ashr(($556|0),($557|0),21)|0);
 $559 = tempRet0;
 $560 = (_i64Add(($476|0),($477|0),($558|0),($559|0))|0);
 $561 = tempRet0;
 $562 = (_bitshift64Shl(($558|0),($559|0),21)|0);
 $563 = tempRet0;
 $564 = (_i64Subtract(($500|0),($501|0),($562|0),($563|0))|0);
 $565 = tempRet0;
 $566 = (_i64Add(($452|0),($453|0),1048576,0)|0);
 $567 = tempRet0;
 $568 = (_bitshift64Ashr(($566|0),($567|0),21)|0);
 $569 = tempRet0;
 $570 = (_i64Add(($428|0),($429|0),($568|0),($569|0))|0);
 $571 = tempRet0;
 $572 = (_bitshift64Shl(($568|0),($569|0),21)|0);
 $573 = tempRet0;
 $574 = (_i64Subtract(($452|0),($453|0),($572|0),($573|0))|0);
 $575 = tempRet0;
 $576 = (_i64Add(($404|0),($405|0),1048576,0)|0);
 $577 = tempRet0;
 $578 = (_bitshift64Ashr(($576|0),($577|0),21)|0);
 $579 = tempRet0;
 $580 = (_i64Add(($360|0),($361|0),($578|0),($579|0))|0);
 $581 = tempRet0;
 $582 = (_bitshift64Shl(($578|0),($579|0),21)|0);
 $583 = tempRet0;
 $584 = (_i64Subtract(($404|0),($405|0),($582|0),($583|0))|0);
 $585 = tempRet0;
 $586 = (_i64Add(($530|0),($531|0),1048576,0)|0);
 $587 = tempRet0;
 $588 = (_bitshift64Ashr(($586|0),($587|0),21)|0);
 $589 = tempRet0;
 $590 = (_i64Add(($544|0),($545|0),($588|0),($589|0))|0);
 $591 = tempRet0;
 $592 = (_bitshift64Shl(($588|0),($589|0),21)|0);
 $593 = tempRet0;
 $594 = (_i64Subtract(($530|0),($531|0),($592|0),($593|0))|0);
 $595 = tempRet0;
 $596 = (_i64Add(($540|0),($541|0),1048576,0)|0);
 $597 = tempRet0;
 $598 = (_bitshift64Ashr(($596|0),($597|0),21)|0);
 $599 = tempRet0;
 $600 = (_i64Add(($554|0),($555|0),($598|0),($599|0))|0);
 $601 = tempRet0;
 $602 = (_bitshift64Shl(($598|0),($599|0),21)|0);
 $603 = tempRet0;
 $604 = (_i64Subtract(($540|0),($541|0),($602|0),($603|0))|0);
 $605 = tempRet0;
 $606 = (_i64Add(($550|0),($551|0),1048576,0)|0);
 $607 = tempRet0;
 $608 = (_bitshift64Ashr(($606|0),($607|0),21)|0);
 $609 = tempRet0;
 $610 = (_i64Add(($564|0),($565|0),($608|0),($609|0))|0);
 $611 = tempRet0;
 $612 = (_bitshift64Shl(($608|0),($609|0),21)|0);
 $613 = tempRet0;
 $614 = (_i64Subtract(($550|0),($551|0),($612|0),($613|0))|0);
 $615 = tempRet0;
 $616 = (_i64Add(($560|0),($561|0),1048576,0)|0);
 $617 = tempRet0;
 $618 = (_bitshift64Ashr(($616|0),($617|0),21)|0);
 $619 = tempRet0;
 $620 = (_i64Add(($574|0),($575|0),($618|0),($619|0))|0);
 $621 = tempRet0;
 $622 = (_bitshift64Shl(($618|0),($619|0),21)|0);
 $623 = tempRet0;
 $624 = (_i64Subtract(($560|0),($561|0),($622|0),($623|0))|0);
 $625 = tempRet0;
 $626 = (_i64Add(($570|0),($571|0),1048576,0)|0);
 $627 = tempRet0;
 $628 = (_bitshift64Ashr(($626|0),($627|0),21)|0);
 $629 = tempRet0;
 $630 = (_i64Add(($584|0),($585|0),($628|0),($629|0))|0);
 $631 = tempRet0;
 $632 = (_bitshift64Shl(($628|0),($629|0),21)|0);
 $633 = tempRet0;
 $634 = (_i64Subtract(($570|0),($571|0),($632|0),($633|0))|0);
 $635 = tempRet0;
 $636 = (_i64Add(($580|0),($581|0),1048576,0)|0);
 $637 = tempRet0;
 $638 = (_bitshift64Ashr(($636|0),($637|0),21)|0);
 $639 = tempRet0;
 $640 = (_bitshift64Shl(($638|0),($639|0),21)|0);
 $641 = tempRet0;
 $642 = (_i64Subtract(($580|0),($581|0),($640|0),($641|0))|0);
 $643 = tempRet0;
 $644 = (___muldi3(($638|0),($639|0),666643,0)|0);
 $645 = tempRet0;
 $646 = (_i64Add(($534|0),($535|0),($644|0),($645|0))|0);
 $647 = tempRet0;
 $648 = (___muldi3(($638|0),($639|0),470296,0)|0);
 $649 = tempRet0;
 $650 = (_i64Add(($594|0),($595|0),($648|0),($649|0))|0);
 $651 = tempRet0;
 $652 = (___muldi3(($638|0),($639|0),654183,0)|0);
 $653 = tempRet0;
 $654 = (_i64Add(($590|0),($591|0),($652|0),($653|0))|0);
 $655 = tempRet0;
 $656 = (___muldi3(($638|0),($639|0),-997805,-1)|0);
 $657 = tempRet0;
 $658 = (_i64Add(($604|0),($605|0),($656|0),($657|0))|0);
 $659 = tempRet0;
 $660 = (___muldi3(($638|0),($639|0),136657,0)|0);
 $661 = tempRet0;
 $662 = (_i64Add(($600|0),($601|0),($660|0),($661|0))|0);
 $663 = tempRet0;
 $664 = (___muldi3(($638|0),($639|0),-683901,-1)|0);
 $665 = tempRet0;
 $666 = (_i64Add(($614|0),($615|0),($664|0),($665|0))|0);
 $667 = tempRet0;
 $668 = (_bitshift64Ashr(($646|0),($647|0),21)|0);
 $669 = tempRet0;
 $670 = (_i64Add(($650|0),($651|0),($668|0),($669|0))|0);
 $671 = tempRet0;
 $672 = (_bitshift64Shl(($668|0),($669|0),21)|0);
 $673 = tempRet0;
 $674 = (_i64Subtract(($646|0),($647|0),($672|0),($673|0))|0);
 $675 = tempRet0;
 $676 = (_bitshift64Ashr(($670|0),($671|0),21)|0);
 $677 = tempRet0;
 $678 = (_i64Add(($654|0),($655|0),($676|0),($677|0))|0);
 $679 = tempRet0;
 $680 = (_bitshift64Shl(($676|0),($677|0),21)|0);
 $681 = tempRet0;
 $682 = (_i64Subtract(($670|0),($671|0),($680|0),($681|0))|0);
 $683 = tempRet0;
 $684 = (_bitshift64Ashr(($678|0),($679|0),21)|0);
 $685 = tempRet0;
 $686 = (_i64Add(($658|0),($659|0),($684|0),($685|0))|0);
 $687 = tempRet0;
 $688 = (_bitshift64Shl(($684|0),($685|0),21)|0);
 $689 = tempRet0;
 $690 = (_i64Subtract(($678|0),($679|0),($688|0),($689|0))|0);
 $691 = tempRet0;
 $692 = (_bitshift64Ashr(($686|0),($687|0),21)|0);
 $693 = tempRet0;
 $694 = (_i64Add(($662|0),($663|0),($692|0),($693|0))|0);
 $695 = tempRet0;
 $696 = (_bitshift64Shl(($692|0),($693|0),21)|0);
 $697 = tempRet0;
 $698 = (_i64Subtract(($686|0),($687|0),($696|0),($697|0))|0);
 $699 = tempRet0;
 $700 = (_bitshift64Ashr(($694|0),($695|0),21)|0);
 $701 = tempRet0;
 $702 = (_i64Add(($666|0),($667|0),($700|0),($701|0))|0);
 $703 = tempRet0;
 $704 = (_bitshift64Shl(($700|0),($701|0),21)|0);
 $705 = tempRet0;
 $706 = (_i64Subtract(($694|0),($695|0),($704|0),($705|0))|0);
 $707 = tempRet0;
 $708 = (_bitshift64Ashr(($702|0),($703|0),21)|0);
 $709 = tempRet0;
 $710 = (_i64Add(($610|0),($611|0),($708|0),($709|0))|0);
 $711 = tempRet0;
 $712 = (_bitshift64Shl(($708|0),($709|0),21)|0);
 $713 = tempRet0;
 $714 = (_i64Subtract(($702|0),($703|0),($712|0),($713|0))|0);
 $715 = tempRet0;
 $716 = (_bitshift64Ashr(($710|0),($711|0),21)|0);
 $717 = tempRet0;
 $718 = (_i64Add(($624|0),($625|0),($716|0),($717|0))|0);
 $719 = tempRet0;
 $720 = (_bitshift64Shl(($716|0),($717|0),21)|0);
 $721 = tempRet0;
 $722 = (_i64Subtract(($710|0),($711|0),($720|0),($721|0))|0);
 $723 = tempRet0;
 $724 = (_bitshift64Ashr(($718|0),($719|0),21)|0);
 $725 = tempRet0;
 $726 = (_i64Add(($620|0),($621|0),($724|0),($725|0))|0);
 $727 = tempRet0;
 $728 = (_bitshift64Shl(($724|0),($725|0),21)|0);
 $729 = tempRet0;
 $730 = (_i64Subtract(($718|0),($719|0),($728|0),($729|0))|0);
 $731 = tempRet0;
 $732 = (_bitshift64Ashr(($726|0),($727|0),21)|0);
 $733 = tempRet0;
 $734 = (_i64Add(($634|0),($635|0),($732|0),($733|0))|0);
 $735 = tempRet0;
 $736 = (_bitshift64Shl(($732|0),($733|0),21)|0);
 $737 = tempRet0;
 $738 = (_i64Subtract(($726|0),($727|0),($736|0),($737|0))|0);
 $739 = tempRet0;
 $740 = (_bitshift64Ashr(($734|0),($735|0),21)|0);
 $741 = tempRet0;
 $742 = (_i64Add(($630|0),($631|0),($740|0),($741|0))|0);
 $743 = tempRet0;
 $744 = (_bitshift64Shl(($740|0),($741|0),21)|0);
 $745 = tempRet0;
 $746 = (_i64Subtract(($734|0),($735|0),($744|0),($745|0))|0);
 $747 = tempRet0;
 $748 = (_bitshift64Ashr(($742|0),($743|0),21)|0);
 $749 = tempRet0;
 $750 = (_i64Add(($642|0),($643|0),($748|0),($749|0))|0);
 $751 = tempRet0;
 $752 = (_bitshift64Shl(($748|0),($749|0),21)|0);
 $753 = tempRet0;
 $754 = (_i64Subtract(($742|0),($743|0),($752|0),($753|0))|0);
 $755 = tempRet0;
 $756 = (_bitshift64Ashr(($750|0),($751|0),21)|0);
 $757 = tempRet0;
 $758 = (_bitshift64Shl(($756|0),($757|0),21)|0);
 $759 = tempRet0;
 $760 = (_i64Subtract(($750|0),($751|0),($758|0),($759|0))|0);
 $761 = tempRet0;
 $762 = (___muldi3(($756|0),($757|0),666643,0)|0);
 $763 = tempRet0;
 $764 = (_i64Add(($674|0),($675|0),($762|0),($763|0))|0);
 $765 = tempRet0;
 $766 = (___muldi3(($756|0),($757|0),470296,0)|0);
 $767 = tempRet0;
 $768 = (_i64Add(($682|0),($683|0),($766|0),($767|0))|0);
 $769 = tempRet0;
 $770 = (___muldi3(($756|0),($757|0),654183,0)|0);
 $771 = tempRet0;
 $772 = (_i64Add(($690|0),($691|0),($770|0),($771|0))|0);
 $773 = tempRet0;
 $774 = (___muldi3(($756|0),($757|0),-997805,-1)|0);
 $775 = tempRet0;
 $776 = (_i64Add(($698|0),($699|0),($774|0),($775|0))|0);
 $777 = tempRet0;
 $778 = (___muldi3(($756|0),($757|0),136657,0)|0);
 $779 = tempRet0;
 $780 = (_i64Add(($706|0),($707|0),($778|0),($779|0))|0);
 $781 = tempRet0;
 $782 = (___muldi3(($756|0),($757|0),-683901,-1)|0);
 $783 = tempRet0;
 $784 = (_i64Add(($714|0),($715|0),($782|0),($783|0))|0);
 $785 = tempRet0;
 $786 = (_bitshift64Ashr(($764|0),($765|0),21)|0);
 $787 = tempRet0;
 $788 = (_i64Add(($768|0),($769|0),($786|0),($787|0))|0);
 $789 = tempRet0;
 $790 = (_bitshift64Shl(($786|0),($787|0),21)|0);
 $791 = tempRet0;
 $792 = (_i64Subtract(($764|0),($765|0),($790|0),($791|0))|0);
 $793 = tempRet0;
 $794 = (_bitshift64Ashr(($788|0),($789|0),21)|0);
 $795 = tempRet0;
 $796 = (_i64Add(($772|0),($773|0),($794|0),($795|0))|0);
 $797 = tempRet0;
 $798 = (_bitshift64Shl(($794|0),($795|0),21)|0);
 $799 = tempRet0;
 $800 = (_i64Subtract(($788|0),($789|0),($798|0),($799|0))|0);
 $801 = tempRet0;
 $802 = (_bitshift64Ashr(($796|0),($797|0),21)|0);
 $803 = tempRet0;
 $804 = (_i64Add(($776|0),($777|0),($802|0),($803|0))|0);
 $805 = tempRet0;
 $806 = (_bitshift64Shl(($802|0),($803|0),21)|0);
 $807 = tempRet0;
 $808 = (_i64Subtract(($796|0),($797|0),($806|0),($807|0))|0);
 $809 = tempRet0;
 $810 = (_bitshift64Ashr(($804|0),($805|0),21)|0);
 $811 = tempRet0;
 $812 = (_i64Add(($780|0),($781|0),($810|0),($811|0))|0);
 $813 = tempRet0;
 $814 = (_bitshift64Shl(($810|0),($811|0),21)|0);
 $815 = tempRet0;
 $816 = (_i64Subtract(($804|0),($805|0),($814|0),($815|0))|0);
 $817 = tempRet0;
 $818 = (_bitshift64Ashr(($812|0),($813|0),21)|0);
 $819 = tempRet0;
 $820 = (_i64Add(($784|0),($785|0),($818|0),($819|0))|0);
 $821 = tempRet0;
 $822 = (_bitshift64Shl(($818|0),($819|0),21)|0);
 $823 = tempRet0;
 $824 = (_i64Subtract(($812|0),($813|0),($822|0),($823|0))|0);
 $825 = tempRet0;
 $826 = (_bitshift64Ashr(($820|0),($821|0),21)|0);
 $827 = tempRet0;
 $828 = (_i64Add(($722|0),($723|0),($826|0),($827|0))|0);
 $829 = tempRet0;
 $830 = (_bitshift64Shl(($826|0),($827|0),21)|0);
 $831 = tempRet0;
 $832 = (_i64Subtract(($820|0),($821|0),($830|0),($831|0))|0);
 $833 = tempRet0;
 $834 = (_bitshift64Ashr(($828|0),($829|0),21)|0);
 $835 = tempRet0;
 $836 = (_i64Add(($730|0),($731|0),($834|0),($835|0))|0);
 $837 = tempRet0;
 $838 = (_bitshift64Shl(($834|0),($835|0),21)|0);
 $839 = tempRet0;
 $840 = (_i64Subtract(($828|0),($829|0),($838|0),($839|0))|0);
 $841 = tempRet0;
 $842 = (_bitshift64Ashr(($836|0),($837|0),21)|0);
 $843 = tempRet0;
 $844 = (_i64Add(($738|0),($739|0),($842|0),($843|0))|0);
 $845 = tempRet0;
 $846 = (_bitshift64Shl(($842|0),($843|0),21)|0);
 $847 = tempRet0;
 $848 = (_i64Subtract(($836|0),($837|0),($846|0),($847|0))|0);
 $849 = tempRet0;
 $850 = (_bitshift64Ashr(($844|0),($845|0),21)|0);
 $851 = tempRet0;
 $852 = (_i64Add(($746|0),($747|0),($850|0),($851|0))|0);
 $853 = tempRet0;
 $854 = (_bitshift64Shl(($850|0),($851|0),21)|0);
 $855 = tempRet0;
 $856 = (_i64Subtract(($844|0),($845|0),($854|0),($855|0))|0);
 $857 = tempRet0;
 $858 = (_bitshift64Ashr(($852|0),($853|0),21)|0);
 $859 = tempRet0;
 $860 = (_i64Add(($754|0),($755|0),($858|0),($859|0))|0);
 $861 = tempRet0;
 $862 = (_bitshift64Shl(($858|0),($859|0),21)|0);
 $863 = tempRet0;
 $864 = (_i64Subtract(($852|0),($853|0),($862|0),($863|0))|0);
 $865 = tempRet0;
 $866 = (_bitshift64Ashr(($860|0),($861|0),21)|0);
 $867 = tempRet0;
 $868 = (_i64Add(($760|0),($761|0),($866|0),($867|0))|0);
 $869 = tempRet0;
 $870 = (_bitshift64Shl(($866|0),($867|0),21)|0);
 $871 = tempRet0;
 $872 = (_i64Subtract(($860|0),($861|0),($870|0),($871|0))|0);
 $873 = tempRet0;
 $874 = $792&255;
 HEAP8[$0>>0] = $874;
 $875 = (_bitshift64Lshr(($792|0),($793|0),8)|0);
 $876 = tempRet0;
 $877 = $875&255;
 HEAP8[$$idx30>>0] = $877;
 $878 = (_bitshift64Lshr(($792|0),($793|0),16)|0);
 $879 = tempRet0;
 $880 = (_bitshift64Shl(($800|0),($801|0),5)|0);
 $881 = tempRet0;
 $882 = $878 | $880;
 $879 | $881;
 $883 = $882&255;
 HEAP8[$$idx31>>0] = $883;
 $884 = (_bitshift64Lshr(($800|0),($801|0),3)|0);
 $885 = tempRet0;
 $886 = $884&255;
 $887 = ((($0)) + 3|0);
 HEAP8[$887>>0] = $886;
 $888 = (_bitshift64Lshr(($800|0),($801|0),11)|0);
 $889 = tempRet0;
 $890 = $888&255;
 $891 = ((($0)) + 4|0);
 HEAP8[$891>>0] = $890;
 $892 = (_bitshift64Lshr(($800|0),($801|0),19)|0);
 $893 = tempRet0;
 $894 = (_bitshift64Shl(($808|0),($809|0),2)|0);
 $895 = tempRet0;
 $896 = $892 | $894;
 $893 | $895;
 $897 = $896&255;
 HEAP8[$9>>0] = $897;
 $898 = (_bitshift64Lshr(($808|0),($809|0),6)|0);
 $899 = tempRet0;
 $900 = $898&255;
 HEAP8[$$idx27>>0] = $900;
 $901 = (_bitshift64Lshr(($808|0),($809|0),14)|0);
 $902 = tempRet0;
 $903 = (_bitshift64Shl(($816|0),($817|0),7)|0);
 $904 = tempRet0;
 $905 = $901 | $903;
 $902 | $904;
 $906 = $905&255;
 HEAP8[$$idx28>>0] = $906;
 $907 = (_bitshift64Lshr(($816|0),($817|0),1)|0);
 $908 = tempRet0;
 $909 = $907&255;
 $910 = ((($0)) + 8|0);
 HEAP8[$910>>0] = $909;
 $911 = (_bitshift64Lshr(($816|0),($817|0),9)|0);
 $912 = tempRet0;
 $913 = $911&255;
 $914 = ((($0)) + 9|0);
 HEAP8[$914>>0] = $913;
 $915 = (_bitshift64Lshr(($816|0),($817|0),17)|0);
 $916 = tempRet0;
 $917 = (_bitshift64Shl(($824|0),($825|0),4)|0);
 $918 = tempRet0;
 $919 = $915 | $917;
 $916 | $918;
 $920 = $919&255;
 HEAP8[$20>>0] = $920;
 $921 = (_bitshift64Lshr(($824|0),($825|0),4)|0);
 $922 = tempRet0;
 $923 = $921&255;
 $924 = ((($0)) + 11|0);
 HEAP8[$924>>0] = $923;
 $925 = (_bitshift64Lshr(($824|0),($825|0),12)|0);
 $926 = tempRet0;
 $927 = $925&255;
 $928 = ((($0)) + 12|0);
 HEAP8[$928>>0] = $927;
 $929 = (_bitshift64Lshr(($824|0),($825|0),20)|0);
 $930 = tempRet0;
 $931 = (_bitshift64Shl(($832|0),($833|0),1)|0);
 $932 = tempRet0;
 $933 = $929 | $931;
 $930 | $932;
 $934 = $933&255;
 HEAP8[$26>>0] = $934;
 $935 = (_bitshift64Lshr(($832|0),($833|0),7)|0);
 $936 = tempRet0;
 $937 = $935&255;
 HEAP8[$$idx24>>0] = $937;
 $938 = (_bitshift64Lshr(($832|0),($833|0),15)|0);
 $939 = tempRet0;
 $940 = (_bitshift64Shl(($840|0),($841|0),6)|0);
 $941 = tempRet0;
 $942 = $938 | $940;
 $939 | $941;
 $943 = $942&255;
 HEAP8[$$idx25>>0] = $943;
 $944 = (_bitshift64Lshr(($840|0),($841|0),2)|0);
 $945 = tempRet0;
 $946 = $944&255;
 $947 = ((($0)) + 16|0);
 HEAP8[$947>>0] = $946;
 $948 = (_bitshift64Lshr(($840|0),($841|0),10)|0);
 $949 = tempRet0;
 $950 = $948&255;
 $951 = ((($0)) + 17|0);
 HEAP8[$951>>0] = $950;
 $952 = (_bitshift64Lshr(($840|0),($841|0),18)|0);
 $953 = tempRet0;
 $954 = (_bitshift64Shl(($848|0),($849|0),3)|0);
 $955 = tempRet0;
 $956 = $952 | $954;
 $953 | $955;
 $957 = $956&255;
 HEAP8[$37>>0] = $957;
 $958 = (_bitshift64Lshr(($848|0),($849|0),5)|0);
 $959 = tempRet0;
 $960 = $958&255;
 HEAP8[$$idx21>>0] = $960;
 $961 = (_bitshift64Lshr(($848|0),($849|0),13)|0);
 $962 = tempRet0;
 $963 = $961&255;
 HEAP8[$$idx22>>0] = $963;
 $964 = $856&255;
 HEAP8[$43>>0] = $964;
 $965 = (_bitshift64Lshr(($856|0),($857|0),8)|0);
 $966 = tempRet0;
 $967 = $965&255;
 HEAP8[$$idx18>>0] = $967;
 $968 = (_bitshift64Lshr(($856|0),($857|0),16)|0);
 $969 = tempRet0;
 $970 = (_bitshift64Shl(($864|0),($865|0),5)|0);
 $971 = tempRet0;
 $972 = $968 | $970;
 $969 | $971;
 $973 = $972&255;
 HEAP8[$$idx19>>0] = $973;
 $974 = (_bitshift64Lshr(($864|0),($865|0),3)|0);
 $975 = tempRet0;
 $976 = $974&255;
 $977 = ((($0)) + 24|0);
 HEAP8[$977>>0] = $976;
 $978 = (_bitshift64Lshr(($864|0),($865|0),11)|0);
 $979 = tempRet0;
 $980 = $978&255;
 $981 = ((($0)) + 25|0);
 HEAP8[$981>>0] = $980;
 $982 = (_bitshift64Lshr(($864|0),($865|0),19)|0);
 $983 = tempRet0;
 $984 = (_bitshift64Shl(($872|0),($873|0),2)|0);
 $985 = tempRet0;
 $986 = $982 | $984;
 $983 | $985;
 $987 = $986&255;
 HEAP8[$52>>0] = $987;
 $988 = (_bitshift64Lshr(($872|0),($873|0),6)|0);
 $989 = tempRet0;
 $990 = $988&255;
 HEAP8[$$idx15>>0] = $990;
 $991 = (_bitshift64Lshr(($872|0),($873|0),14)|0);
 $992 = tempRet0;
 $993 = (_bitshift64Shl(($868|0),($869|0),7)|0);
 $994 = tempRet0;
 $995 = $991 | $993;
 $992 | $994;
 $996 = $995&255;
 HEAP8[$$idx16>>0] = $996;
 $997 = (_bitshift64Lshr(($868|0),($869|0),1)|0);
 $998 = tempRet0;
 $999 = $997&255;
 $1000 = ((($0)) + 29|0);
 HEAP8[$1000>>0] = $999;
 $1001 = (_bitshift64Lshr(($868|0),($869|0),9)|0);
 $1002 = tempRet0;
 $1003 = $1001&255;
 $1004 = ((($0)) + 30|0);
 HEAP8[$1004>>0] = $1003;
 $1005 = (_bitshift64Lshr(($868|0),($869|0),17)|0);
 $1006 = tempRet0;
 $1007 = $1005&255;
 HEAP8[$63>>0] = $1007;
 return;
}
function _crypto_core_hchacha20($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $$010 = 0, $$012 = 0, $$013 = 0, $$014 = 0, $$015 = 0, $$016 = 0, $$017 = 0, $$018 = 0, $$019 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $$08 = 0, $$1 = 0, $$111 = 0, $$17 = 0;
 var $$19 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$010 = 1797285236;$$05 = 1634760805;$$06 = 857760878;$$08 = 2036477234;
 } else {
  $5 = (_load32_le($3)|0);
  $6 = ((($3)) + 4|0);
  $7 = (_load32_le($6)|0);
  $8 = ((($3)) + 8|0);
  $9 = (_load32_le($8)|0);
  $10 = ((($3)) + 12|0);
  $11 = (_load32_le($10)|0);
  $$010 = $11;$$05 = $5;$$06 = $7;$$08 = $9;
 }
 $12 = (_load32_le($2)|0);
 $13 = ((($2)) + 4|0);
 $14 = (_load32_le($13)|0);
 $15 = ((($2)) + 8|0);
 $16 = (_load32_le($15)|0);
 $17 = ((($2)) + 12|0);
 $18 = (_load32_le($17)|0);
 $19 = ((($2)) + 16|0);
 $20 = (_load32_le($19)|0);
 $21 = ((($2)) + 20|0);
 $22 = (_load32_le($21)|0);
 $23 = ((($2)) + 24|0);
 $24 = (_load32_le($23)|0);
 $25 = ((($2)) + 28|0);
 $26 = (_load32_le($25)|0);
 $27 = (_load32_le($1)|0);
 $28 = ((($1)) + 4|0);
 $29 = (_load32_le($28)|0);
 $30 = ((($1)) + 8|0);
 $31 = (_load32_le($30)|0);
 $32 = ((($1)) + 12|0);
 $33 = (_load32_le($32)|0);
 $$0 = $33;$$01 = $31;$$012 = $12;$$013 = $14;$$014 = $16;$$015 = $18;$$016 = $20;$$017 = $22;$$018 = $24;$$019 = $26;$$02 = $29;$$03 = $27;$$04 = 0;$$1 = $$05;$$111 = $$010;$$17 = $$06;$$19 = $$08;
 while(1) {
  $exitcond = ($$04|0)==(10);
  if ($exitcond) {
   break;
  }
  $34 = (($$1) + ($$012))|0;
  $35 = $$03 ^ $34;
  $36 = (_rotl32($35,16)|0);
  $37 = (($$016) + ($36))|0;
  $38 = $$012 ^ $37;
  $39 = (_rotl32($38,12)|0);
  $40 = (($34) + ($39))|0;
  $41 = $36 ^ $40;
  $42 = (_rotl32($41,8)|0);
  $43 = (($37) + ($42))|0;
  $44 = $39 ^ $43;
  $45 = (_rotl32($44,7)|0);
  $46 = (($$17) + ($$013))|0;
  $47 = $$02 ^ $46;
  $48 = (_rotl32($47,16)|0);
  $49 = (($$017) + ($48))|0;
  $50 = $$013 ^ $49;
  $51 = (_rotl32($50,12)|0);
  $52 = (($46) + ($51))|0;
  $53 = $48 ^ $52;
  $54 = (_rotl32($53,8)|0);
  $55 = (($49) + ($54))|0;
  $56 = $51 ^ $55;
  $57 = (_rotl32($56,7)|0);
  $58 = (($$19) + ($$014))|0;
  $59 = $$01 ^ $58;
  $60 = (_rotl32($59,16)|0);
  $61 = (($$018) + ($60))|0;
  $62 = $$014 ^ $61;
  $63 = (_rotl32($62,12)|0);
  $64 = (($58) + ($63))|0;
  $65 = $60 ^ $64;
  $66 = (_rotl32($65,8)|0);
  $67 = (($61) + ($66))|0;
  $68 = $63 ^ $67;
  $69 = (_rotl32($68,7)|0);
  $70 = (($$111) + ($$015))|0;
  $71 = $$0 ^ $70;
  $72 = (_rotl32($71,16)|0);
  $73 = (($$019) + ($72))|0;
  $74 = $$015 ^ $73;
  $75 = (_rotl32($74,12)|0);
  $76 = (($70) + ($75))|0;
  $77 = $72 ^ $76;
  $78 = (_rotl32($77,8)|0);
  $79 = (($73) + ($78))|0;
  $80 = $75 ^ $79;
  $81 = (_rotl32($80,7)|0);
  $82 = (($40) + ($57))|0;
  $83 = $78 ^ $82;
  $84 = (_rotl32($83,16)|0);
  $85 = (($67) + ($84))|0;
  $86 = $57 ^ $85;
  $87 = (_rotl32($86,12)|0);
  $88 = (($82) + ($87))|0;
  $89 = $84 ^ $88;
  $90 = (_rotl32($89,8)|0);
  $91 = (($85) + ($90))|0;
  $92 = $87 ^ $91;
  $93 = (_rotl32($92,7)|0);
  $94 = (($52) + ($69))|0;
  $95 = $42 ^ $94;
  $96 = (_rotl32($95,16)|0);
  $97 = (($79) + ($96))|0;
  $98 = $69 ^ $97;
  $99 = (_rotl32($98,12)|0);
  $100 = (($94) + ($99))|0;
  $101 = $96 ^ $100;
  $102 = (_rotl32($101,8)|0);
  $103 = (($97) + ($102))|0;
  $104 = $99 ^ $103;
  $105 = (_rotl32($104,7)|0);
  $106 = (($64) + ($81))|0;
  $107 = $54 ^ $106;
  $108 = (_rotl32($107,16)|0);
  $109 = (($43) + ($108))|0;
  $110 = $81 ^ $109;
  $111 = (_rotl32($110,12)|0);
  $112 = (($106) + ($111))|0;
  $113 = $108 ^ $112;
  $114 = (_rotl32($113,8)|0);
  $115 = (($109) + ($114))|0;
  $116 = $111 ^ $115;
  $117 = (_rotl32($116,7)|0);
  $118 = (($76) + ($45))|0;
  $119 = $66 ^ $118;
  $120 = (_rotl32($119,16)|0);
  $121 = (($55) + ($120))|0;
  $122 = $45 ^ $121;
  $123 = (_rotl32($122,12)|0);
  $124 = (($118) + ($123))|0;
  $125 = $120 ^ $124;
  $126 = (_rotl32($125,8)|0);
  $127 = (($121) + ($126))|0;
  $128 = $123 ^ $127;
  $129 = (_rotl32($128,7)|0);
  $130 = (($$04) + 1)|0;
  $$0 = $90;$$01 = $126;$$012 = $129;$$013 = $93;$$014 = $105;$$015 = $117;$$016 = $115;$$017 = $127;$$018 = $91;$$019 = $103;$$02 = $114;$$03 = $102;$$04 = $130;$$1 = $88;$$111 = $124;$$17 = $100;$$19 = $112;
 }
 _store32_le($0,$$1);
 $131 = ((($0)) + 4|0);
 _store32_le($131,$$17);
 $132 = ((($0)) + 8|0);
 _store32_le($132,$$19);
 $133 = ((($0)) + 12|0);
 _store32_le($133,$$111);
 $134 = ((($0)) + 16|0);
 _store32_le($134,$$03);
 $135 = ((($0)) + 20|0);
 _store32_le($135,$$02);
 $136 = ((($0)) + 24|0);
 _store32_le($136,$$01);
 $137 = ((($0)) + 28|0);
 _store32_le($137,$$0);
 return 0;
}
function _load32_le($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 return ($1|0);
}
function _rotl32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $0 << $1;
 $3 = (32 - ($1))|0;
 $4 = $0 >>> $3;
 $5 = $2 | $4;
 return ($5|0);
}
function _store32_le($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 return;
}
function _crypto_core_hchacha20_outputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_core_hchacha20_inputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_hchacha20_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_core_hchacha20_constbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_hsalsa20($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $$010 = 0, $$012 = 0, $$013 = 0, $$014 = 0, $$015 = 0, $$016 = 0, $$018 = 0, $$019 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$06 = 0, $$07 = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$111 = 0, $$117 = 0;
 var $$15 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$01 = 1797285236;$$010 = 857760878;$$016 = 2036477234;$$04 = 1634760805;
 } else {
  $5 = (_load32_le_24($3)|0);
  $6 = ((($3)) + 4|0);
  $7 = (_load32_le_24($6)|0);
  $8 = ((($3)) + 8|0);
  $9 = (_load32_le_24($8)|0);
  $10 = ((($3)) + 12|0);
  $11 = (_load32_le_24($10)|0);
  $$01 = $11;$$010 = $7;$$016 = $9;$$04 = $5;
 }
 $12 = (_load32_le_24($2)|0);
 $13 = ((($2)) + 4|0);
 $14 = (_load32_le_24($13)|0);
 $15 = ((($2)) + 8|0);
 $16 = (_load32_le_24($15)|0);
 $17 = ((($2)) + 12|0);
 $18 = (_load32_le_24($17)|0);
 $19 = ((($2)) + 16|0);
 $20 = (_load32_le_24($19)|0);
 $21 = ((($2)) + 20|0);
 $22 = (_load32_le_24($21)|0);
 $23 = ((($2)) + 24|0);
 $24 = (_load32_le_24($23)|0);
 $25 = ((($2)) + 28|0);
 $26 = (_load32_le_24($25)|0);
 $27 = (_load32_le_24($1)|0);
 $28 = ((($1)) + 4|0);
 $29 = (_load32_le_24($28)|0);
 $30 = ((($1)) + 8|0);
 $31 = (_load32_le_24($30)|0);
 $32 = ((($1)) + 12|0);
 $33 = (_load32_le_24($32)|0);
 $$0 = 20;$$012 = $27;$$013 = $29;$$014 = $31;$$015 = $33;$$018 = $20;$$019 = $22;$$02 = $26;$$03 = $24;$$06 = $12;$$07 = $14;$$08 = $16;$$09 = $18;$$1 = $$01;$$111 = $$010;$$117 = $$016;$$15 = $$04;
 while(1) {
  $34 = ($$0|0)>(0);
  if (!($34)) {
   break;
  }
  $35 = (($$15) + ($$019))|0;
  $36 = (_rotl32_25($35,7)|0);
  $37 = $$09 ^ $36;
  $38 = (($37) + ($$15))|0;
  $39 = (_rotl32_25($38,9)|0);
  $40 = $$014 ^ $39;
  $41 = (($40) + ($37))|0;
  $42 = (_rotl32_25($41,13)|0);
  $43 = $$019 ^ $42;
  $44 = (($43) + ($40))|0;
  $45 = (_rotl32_25($44,18)|0);
  $46 = $$15 ^ $45;
  $47 = (($$111) + ($$06))|0;
  $48 = (_rotl32_25($47,7)|0);
  $49 = $$015 ^ $48;
  $50 = (($49) + ($$111))|0;
  $51 = (_rotl32_25($50,9)|0);
  $52 = $$03 ^ $51;
  $53 = (($52) + ($49))|0;
  $54 = (_rotl32_25($53,13)|0);
  $55 = $$06 ^ $54;
  $56 = (($55) + ($52))|0;
  $57 = (_rotl32_25($56,18)|0);
  $58 = $$111 ^ $57;
  $59 = (($$117) + ($$012))|0;
  $60 = (_rotl32_25($59,7)|0);
  $61 = $$02 ^ $60;
  $62 = (($61) + ($$117))|0;
  $63 = (_rotl32_25($62,9)|0);
  $64 = $$07 ^ $63;
  $65 = (($64) + ($61))|0;
  $66 = (_rotl32_25($65,13)|0);
  $67 = $$012 ^ $66;
  $68 = (($67) + ($64))|0;
  $69 = (_rotl32_25($68,18)|0);
  $70 = $$117 ^ $69;
  $71 = (($$1) + ($$018))|0;
  $72 = (_rotl32_25($71,7)|0);
  $73 = $$08 ^ $72;
  $74 = (($73) + ($$1))|0;
  $75 = (_rotl32_25($74,9)|0);
  $76 = $$013 ^ $75;
  $77 = (($76) + ($73))|0;
  $78 = (_rotl32_25($77,13)|0);
  $79 = $$018 ^ $78;
  $80 = (($79) + ($76))|0;
  $81 = (_rotl32_25($80,18)|0);
  $82 = $$1 ^ $81;
  $83 = (($46) + ($73))|0;
  $84 = (_rotl32_25($83,7)|0);
  $85 = $55 ^ $84;
  $86 = (($85) + ($46))|0;
  $87 = (_rotl32_25($86,9)|0);
  $88 = $64 ^ $87;
  $89 = (($88) + ($85))|0;
  $90 = (_rotl32_25($89,13)|0);
  $91 = $73 ^ $90;
  $92 = (($58) + ($37))|0;
  $93 = (_rotl32_25($92,7)|0);
  $94 = $67 ^ $93;
  $95 = (($94) + ($58))|0;
  $96 = (_rotl32_25($95,9)|0);
  $97 = $76 ^ $96;
  $98 = (($97) + ($94))|0;
  $99 = (_rotl32_25($98,13)|0);
  $100 = $37 ^ $99;
  $101 = (($70) + ($49))|0;
  $102 = (_rotl32_25($101,7)|0);
  $103 = $79 ^ $102;
  $104 = (($103) + ($70))|0;
  $105 = (_rotl32_25($104,9)|0);
  $106 = $40 ^ $105;
  $107 = (($106) + ($103))|0;
  $108 = (_rotl32_25($107,13)|0);
  $109 = $49 ^ $108;
  $110 = (($82) + ($61))|0;
  $111 = (_rotl32_25($110,7)|0);
  $112 = $43 ^ $111;
  $113 = (($112) + ($82))|0;
  $114 = (_rotl32_25($113,9)|0);
  $115 = $52 ^ $114;
  $116 = (($115) + ($112))|0;
  $117 = (_rotl32_25($116,13)|0);
  $118 = $61 ^ $117;
  $119 = (($118) + ($115))|0;
  $120 = (_rotl32_25($119,18)|0);
  $121 = $82 ^ $120;
  $122 = (($109) + ($106))|0;
  $123 = (_rotl32_25($122,18)|0);
  $124 = $70 ^ $123;
  $125 = (($100) + ($97))|0;
  $126 = (_rotl32_25($125,18)|0);
  $127 = $58 ^ $126;
  $128 = (($91) + ($88))|0;
  $129 = (_rotl32_25($128,18)|0);
  $130 = $46 ^ $129;
  $131 = (($$0) + -2)|0;
  $$0 = $131;$$012 = $94;$$013 = $97;$$014 = $106;$$015 = $109;$$018 = $103;$$019 = $112;$$02 = $118;$$03 = $115;$$06 = $85;$$07 = $88;$$08 = $91;$$09 = $100;$$1 = $121;$$111 = $127;$$117 = $124;$$15 = $130;
 }
 _store32_le_26($0,$$15);
 $132 = ((($0)) + 4|0);
 _store32_le_26($132,$$111);
 $133 = ((($0)) + 8|0);
 _store32_le_26($133,$$117);
 $134 = ((($0)) + 12|0);
 _store32_le_26($134,$$1);
 $135 = ((($0)) + 16|0);
 _store32_le_26($135,$$012);
 $136 = ((($0)) + 20|0);
 _store32_le_26($136,$$013);
 $137 = ((($0)) + 24|0);
 _store32_le_26($137,$$014);
 $138 = ((($0)) + 28|0);
 _store32_le_26($138,$$015);
 return 0;
}
function _load32_le_24($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 return ($1|0);
}
function _rotl32_25($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $0 << $1;
 $3 = (32 - ($1))|0;
 $4 = $0 >>> $3;
 $5 = $2 | $4;
 return ($5|0);
}
function _store32_le_26($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 return;
}
function _crypto_core_hsalsa20_outputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_core_hsalsa20_inputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_hsalsa20_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_core_hsalsa20_constbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_salsa20($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _crypto_core_salsa($0,$1,$2,$3,20);
 return 0;
}
function _crypto_core_salsa($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$010 = 0, $$012 = 0, $$013 = 0, $$014 = 0, $$015 = 0, $$016 = 0, $$018 = 0, $$019 = 0, $$020 = 0, $$021 = 0, $$022 = 0, $$05 = 0, $$06 = 0, $$07 = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$111 = 0, $$117 = 0;
 var $$123 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = ($3|0)==(0|0);
 if ($5) {
  $$010 = 857760878;$$016 = 2036477234;$$022 = 1797285236;$$05 = 1634760805;
 } else {
  $6 = (_load32_le_27($3)|0);
  $7 = ((($3)) + 4|0);
  $8 = (_load32_le_27($7)|0);
  $9 = ((($3)) + 8|0);
  $10 = (_load32_le_27($9)|0);
  $11 = ((($3)) + 12|0);
  $12 = (_load32_le_27($11)|0);
  $$010 = $8;$$016 = $10;$$022 = $12;$$05 = $6;
 }
 $13 = (_load32_le_27($2)|0);
 $14 = ((($2)) + 4|0);
 $15 = (_load32_le_27($14)|0);
 $16 = ((($2)) + 8|0);
 $17 = (_load32_le_27($16)|0);
 $18 = ((($2)) + 12|0);
 $19 = (_load32_le_27($18)|0);
 $20 = ((($2)) + 16|0);
 $21 = (_load32_le_27($20)|0);
 $22 = ((($2)) + 20|0);
 $23 = (_load32_le_27($22)|0);
 $24 = ((($2)) + 24|0);
 $25 = (_load32_le_27($24)|0);
 $26 = ((($2)) + 28|0);
 $27 = (_load32_le_27($26)|0);
 $28 = (_load32_le_27($1)|0);
 $29 = ((($1)) + 4|0);
 $30 = (_load32_le_27($29)|0);
 $31 = ((($1)) + 8|0);
 $32 = (_load32_le_27($31)|0);
 $33 = ((($1)) + 12|0);
 $34 = (_load32_le_27($33)|0);
 $$0 = 0;$$012 = $28;$$013 = $30;$$014 = $32;$$015 = $34;$$018 = $21;$$019 = $23;$$020 = $25;$$021 = $27;$$06 = $13;$$07 = $15;$$08 = $17;$$09 = $19;$$1 = $$05;$$111 = $$010;$$117 = $$016;$$123 = $$022;
 while(1) {
  $35 = ($$0|0)<($4|0);
  if (!($35)) {
   break;
  }
  $36 = (($$1) + ($$019))|0;
  $37 = (_rotl32_28($36,7)|0);
  $38 = $$09 ^ $37;
  $39 = (($38) + ($$1))|0;
  $40 = (_rotl32_28($39,9)|0);
  $41 = $$014 ^ $40;
  $42 = (($41) + ($38))|0;
  $43 = (_rotl32_28($42,13)|0);
  $44 = $$019 ^ $43;
  $45 = (($44) + ($41))|0;
  $46 = (_rotl32_28($45,18)|0);
  $47 = $$1 ^ $46;
  $48 = (($$111) + ($$06))|0;
  $49 = (_rotl32_28($48,7)|0);
  $50 = $$015 ^ $49;
  $51 = (($50) + ($$111))|0;
  $52 = (_rotl32_28($51,9)|0);
  $53 = $$020 ^ $52;
  $54 = (($53) + ($50))|0;
  $55 = (_rotl32_28($54,13)|0);
  $56 = $$06 ^ $55;
  $57 = (($56) + ($53))|0;
  $58 = (_rotl32_28($57,18)|0);
  $59 = $$111 ^ $58;
  $60 = (($$117) + ($$012))|0;
  $61 = (_rotl32_28($60,7)|0);
  $62 = $$021 ^ $61;
  $63 = (($62) + ($$117))|0;
  $64 = (_rotl32_28($63,9)|0);
  $65 = $$07 ^ $64;
  $66 = (($65) + ($62))|0;
  $67 = (_rotl32_28($66,13)|0);
  $68 = $$012 ^ $67;
  $69 = (($68) + ($65))|0;
  $70 = (_rotl32_28($69,18)|0);
  $71 = $$117 ^ $70;
  $72 = (($$123) + ($$018))|0;
  $73 = (_rotl32_28($72,7)|0);
  $74 = $$08 ^ $73;
  $75 = (($74) + ($$123))|0;
  $76 = (_rotl32_28($75,9)|0);
  $77 = $$013 ^ $76;
  $78 = (($77) + ($74))|0;
  $79 = (_rotl32_28($78,13)|0);
  $80 = $$018 ^ $79;
  $81 = (($80) + ($77))|0;
  $82 = (_rotl32_28($81,18)|0);
  $83 = $$123 ^ $82;
  $84 = (($47) + ($74))|0;
  $85 = (_rotl32_28($84,7)|0);
  $86 = $56 ^ $85;
  $87 = (($86) + ($47))|0;
  $88 = (_rotl32_28($87,9)|0);
  $89 = $65 ^ $88;
  $90 = (($89) + ($86))|0;
  $91 = (_rotl32_28($90,13)|0);
  $92 = $74 ^ $91;
  $93 = (($59) + ($38))|0;
  $94 = (_rotl32_28($93,7)|0);
  $95 = $68 ^ $94;
  $96 = (($95) + ($59))|0;
  $97 = (_rotl32_28($96,9)|0);
  $98 = $77 ^ $97;
  $99 = (($98) + ($95))|0;
  $100 = (_rotl32_28($99,13)|0);
  $101 = $38 ^ $100;
  $102 = (($71) + ($50))|0;
  $103 = (_rotl32_28($102,7)|0);
  $104 = $80 ^ $103;
  $105 = (($104) + ($71))|0;
  $106 = (_rotl32_28($105,9)|0);
  $107 = $41 ^ $106;
  $108 = (($107) + ($104))|0;
  $109 = (_rotl32_28($108,13)|0);
  $110 = $50 ^ $109;
  $111 = (($83) + ($62))|0;
  $112 = (_rotl32_28($111,7)|0);
  $113 = $44 ^ $112;
  $114 = (($113) + ($83))|0;
  $115 = (_rotl32_28($114,9)|0);
  $116 = $53 ^ $115;
  $117 = (($116) + ($113))|0;
  $118 = (_rotl32_28($117,13)|0);
  $119 = $62 ^ $118;
  $120 = (($119) + ($116))|0;
  $121 = (_rotl32_28($120,18)|0);
  $122 = $83 ^ $121;
  $123 = (($110) + ($107))|0;
  $124 = (_rotl32_28($123,18)|0);
  $125 = $71 ^ $124;
  $126 = (($101) + ($98))|0;
  $127 = (_rotl32_28($126,18)|0);
  $128 = $59 ^ $127;
  $129 = (($92) + ($89))|0;
  $130 = (_rotl32_28($129,18)|0);
  $131 = $47 ^ $130;
  $132 = (($$0) + 2)|0;
  $$0 = $132;$$012 = $95;$$013 = $98;$$014 = $107;$$015 = $110;$$018 = $104;$$019 = $113;$$020 = $116;$$021 = $119;$$06 = $86;$$07 = $89;$$08 = $92;$$09 = $101;$$1 = $131;$$111 = $128;$$117 = $125;$$123 = $122;
 }
 $133 = (($$1) + ($$05))|0;
 _store32_le_29($0,$133);
 $134 = ((($0)) + 4|0);
 $135 = (($$06) + ($13))|0;
 _store32_le_29($134,$135);
 $136 = ((($0)) + 8|0);
 $137 = (($$07) + ($15))|0;
 _store32_le_29($136,$137);
 $138 = ((($0)) + 12|0);
 $139 = (($$08) + ($17))|0;
 _store32_le_29($138,$139);
 $140 = ((($0)) + 16|0);
 $141 = (($$09) + ($19))|0;
 _store32_le_29($140,$141);
 $142 = ((($0)) + 20|0);
 $143 = (($$111) + ($$010))|0;
 _store32_le_29($142,$143);
 $144 = ((($0)) + 24|0);
 $145 = (($$012) + ($28))|0;
 _store32_le_29($144,$145);
 $146 = ((($0)) + 28|0);
 $147 = (($$013) + ($30))|0;
 _store32_le_29($146,$147);
 $148 = ((($0)) + 32|0);
 $149 = (($$014) + ($32))|0;
 _store32_le_29($148,$149);
 $150 = ((($0)) + 36|0);
 $151 = (($$015) + ($34))|0;
 _store32_le_29($150,$151);
 $152 = ((($0)) + 40|0);
 $153 = (($$117) + ($$016))|0;
 _store32_le_29($152,$153);
 $154 = ((($0)) + 44|0);
 $155 = (($$018) + ($21))|0;
 _store32_le_29($154,$155);
 $156 = ((($0)) + 48|0);
 $157 = (($$019) + ($23))|0;
 _store32_le_29($156,$157);
 $158 = ((($0)) + 52|0);
 $159 = (($$020) + ($25))|0;
 _store32_le_29($158,$159);
 $160 = ((($0)) + 56|0);
 $161 = (($$021) + ($27))|0;
 _store32_le_29($160,$161);
 $162 = ((($0)) + 60|0);
 $163 = (($$123) + ($$022))|0;
 _store32_le_29($162,$163);
 return;
}
function _load32_le_27($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 return ($1|0);
}
function _rotl32_28($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $0 << $1;
 $3 = (32 - ($1))|0;
 $4 = $0 >>> $3;
 $5 = $2 | $4;
 return ($5|0);
}
function _store32_le_29($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 return;
}
function _crypto_core_salsa20_outputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_core_salsa20_inputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_salsa20_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_core_salsa20_constbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_salsa2012($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _crypto_core_salsa($0,$1,$2,$3,12);
 return 0;
}
function _crypto_core_salsa2012_outputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_core_salsa2012_inputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_salsa2012_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_core_salsa2012_constbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_salsa208($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _crypto_core_salsa($0,$1,$2,$3,8);
 return 0;
}
function _crypto_core_salsa208_outputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_core_salsa208_inputbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_core_salsa208_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_core_salsa208_constbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_generichash_bytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_generichash_bytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_generichash_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_generichash_keybytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_generichash_keybytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_generichash_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_generichash_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34146|0);
}
function _crypto_generichash_statebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 384;
}
function _crypto_generichash($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = (_crypto_generichash_blake2b($0,$1,$2,$3,$4,$5,$6)|0);
 return ($7|0);
}
function _crypto_generichash_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (_crypto_generichash_blake2b_init($0,$1,$2,$3)|0);
 return ($4|0);
}
function _crypto_generichash_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_generichash_blake2b_update($0,$1,$2,$3)|0);
 return 0;
}
function _crypto_generichash_final($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_crypto_generichash_blake2b_final($0,$1,$2)|0);
 return ($3|0);
}
function _crypto_generichash_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_generichash_blake2b_bytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_generichash_blake2b_bytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_generichash_blake2b_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_generichash_blake2b_keybytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_generichash_blake2b_keybytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_generichash_blake2b_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_generichash_blake2b_saltbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_generichash_blake2b_personalbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_generichash_blake2b_statebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 384;
}
function _crypto_generichash_blake2b_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _blake2b_compress_ref($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0;
 var $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0;
 var $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0;
 var $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0;
 var $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0;
 var $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0;
 var $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0;
 var $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0;
 var $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0;
 var $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0;
 var $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0;
 var $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0;
 var $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0;
 var $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0;
 var $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0;
 var $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0;
 var $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0;
 var $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0;
 var $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0;
 var $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0;
 var $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0;
 var $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0;
 var $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0;
 var $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0;
 var $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0;
 var $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0;
 var $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0;
 var $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0;
 var $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0;
 var $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0;
 var $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0;
 var $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0;
 var $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0;
 var $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0;
 var $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0;
 var $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0;
 var $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0;
 var $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0;
 var $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0;
 var $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0;
 var $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0;
 var $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0;
 var $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0;
 var $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0;
 var $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0;
 var $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0;
 var $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0;
 var $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0;
 var $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0;
 var $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0;
 var $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0;
 var $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0;
 var $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0;
 var $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0;
 var $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0;
 var $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0;
 var $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0;
 var $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0;
 var $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0;
 var $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0;
 var $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0;
 var $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0;
 var $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0;
 var $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0;
 var $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0;
 var $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0;
 var $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0;
 var $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0;
 var $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0;
 var $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0;
 var $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0;
 var $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0;
 var $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0;
 var $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0;
 var $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0;
 var $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0;
 var $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0;
 var $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0;
 var $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0;
 var $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0;
 var $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0;
 var $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0;
 var $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0;
 var $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0;
 var $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0;
 var $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0;
 var $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0;
 var $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0;
 var $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0;
 var $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0;
 var $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0;
 var $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0;
 var $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0;
 var $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0;
 var $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0;
 var $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0;
 var $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0;
 var $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0;
 var $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0;
 var $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0;
 var $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0;
 var $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0;
 var $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0;
 var $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0;
 var $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0;
 var $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0;
 var $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0;
 var $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0;
 var $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0;
 var $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0;
 var $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0;
 var $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0;
 var $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0;
 var $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0;
 var $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0;
 var $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0;
 var $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0;
 var $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0;
 var $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0;
 var $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0;
 var $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0;
 var $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0;
 var $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0;
 var $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0;
 var $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0;
 var $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0;
 var $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0;
 var $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0;
 var $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0;
 var $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0;
 var $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0;
 var $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0;
 var $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0;
 var $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0;
 var $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0;
 var $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0;
 var $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0;
 var $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0;
 var $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0;
 var $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0;
 var $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0;
 var $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0;
 var $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0;
 var $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0;
 var $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0;
 var $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0;
 var $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0, $4336 = 0, $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0;
 var $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0, $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0;
 var $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0, $4372 = 0, $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0;
 var $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0, $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0, $4390 = 0, $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0;
 var $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0, $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0;
 var $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0, $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0;
 var $4435 = 0, $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0, $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0, $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0;
 var $4453 = 0, $4454 = 0, $4455 = 0, $4456 = 0, $4457 = 0, $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0, $4461 = 0, $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0;
 var $4471 = 0, $4472 = 0, $4473 = 0, $4474 = 0, $4475 = 0, $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0, $448 = 0, $4480 = 0, $4481 = 0, $4482 = 0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0;
 var $449 = 0, $4490 = 0, $4491 = 0, $4492 = 0, $4493 = 0, $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0, $4498 = 0, $4499 = 0, $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0;
 var $4507 = 0, $4508 = 0, $4509 = 0, $451 = 0, $4510 = 0, $4511 = 0, $4512 = 0, $4513 = 0, $4514 = 0, $4515 = 0, $4516 = 0, $4517 = 0, $4518 = 0, $4519 = 0, $452 = 0, $4520 = 0, $4521 = 0, $4522 = 0, $4523 = 0, $4524 = 0;
 var $4525 = 0, $4526 = 0, $4527 = 0, $4528 = 0, $4529 = 0, $453 = 0, $4530 = 0, $4531 = 0, $4532 = 0, $4533 = 0, $4534 = 0, $4535 = 0, $4536 = 0, $4537 = 0, $4538 = 0, $4539 = 0, $454 = 0, $4540 = 0, $4541 = 0, $4542 = 0;
 var $4543 = 0, $4544 = 0, $4545 = 0, $4546 = 0, $4547 = 0, $4548 = 0, $4549 = 0, $455 = 0, $4550 = 0, $4551 = 0, $4552 = 0, $4553 = 0, $4554 = 0, $4555 = 0, $4556 = 0, $4557 = 0, $4558 = 0, $4559 = 0, $456 = 0, $4560 = 0;
 var $4561 = 0, $4562 = 0, $4563 = 0, $4564 = 0, $4565 = 0, $4566 = 0, $4567 = 0, $4568 = 0, $4569 = 0, $457 = 0, $4570 = 0, $4571 = 0, $4572 = 0, $4573 = 0, $4574 = 0, $4575 = 0, $4576 = 0, $4577 = 0, $4578 = 0, $4579 = 0;
 var $458 = 0, $4580 = 0, $4581 = 0, $4582 = 0, $4583 = 0, $4584 = 0, $4585 = 0, $4586 = 0, $4587 = 0, $4588 = 0, $4589 = 0, $459 = 0, $4590 = 0, $4591 = 0, $4592 = 0, $4593 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4597 = 0;
 var $4598 = 0, $4599 = 0, $46 = 0, $460 = 0, $4600 = 0, $4601 = 0, $4602 = 0, $4603 = 0, $4604 = 0, $4605 = 0, $4606 = 0, $4607 = 0, $4608 = 0, $4609 = 0, $461 = 0, $4610 = 0, $4611 = 0, $4612 = 0, $4613 = 0, $4614 = 0;
 var $4615 = 0, $4616 = 0, $4617 = 0, $4618 = 0, $4619 = 0, $462 = 0, $4620 = 0, $4621 = 0, $4622 = 0, $4623 = 0, $4624 = 0, $4625 = 0, $4626 = 0, $4627 = 0, $4628 = 0, $4629 = 0, $463 = 0, $4630 = 0, $4631 = 0, $4632 = 0;
 var $4633 = 0, $4634 = 0, $4635 = 0, $4636 = 0, $4637 = 0, $4638 = 0, $4639 = 0, $464 = 0, $4640 = 0, $4641 = 0, $4642 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4646 = 0, $4647 = 0, $4648 = 0, $4649 = 0, $465 = 0, $4650 = 0;
 var $4651 = 0, $4652 = 0, $4653 = 0, $4654 = 0, $4655 = 0, $4656 = 0, $4657 = 0, $4658 = 0, $4659 = 0, $466 = 0, $4660 = 0, $4661 = 0, $4662 = 0, $4663 = 0, $4664 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4668 = 0, $4669 = 0;
 var $467 = 0, $4670 = 0, $4671 = 0, $4672 = 0, $4673 = 0, $4674 = 0, $4675 = 0, $4676 = 0, $4677 = 0, $4678 = 0, $4679 = 0, $468 = 0, $4680 = 0, $4681 = 0, $4682 = 0, $4683 = 0, $4684 = 0, $4685 = 0, $4686 = 0, $4687 = 0;
 var $4688 = 0, $4689 = 0, $469 = 0, $4690 = 0, $4691 = 0, $4692 = 0, $4693 = 0, $4694 = 0, $4695 = 0, $4696 = 0, $4697 = 0, $4698 = 0, $4699 = 0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0, $4704 = 0;
 var $4705 = 0, $4706 = 0, $4707 = 0, $4708 = 0, $4709 = 0, $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0, $4713 = 0, $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0;
 var $4723 = 0, $4724 = 0, $4725 = 0, $4726 = 0, $4727 = 0, $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0, $4731 = 0, $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0;
 var $4741 = 0, $4742 = 0, $4743 = 0, $4744 = 0, $4745 = 0, $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0, $475 = 0, $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0;
 var $476 = 0, $4760 = 0, $4761 = 0, $4762 = 0, $4763 = 0, $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0, $4768 = 0, $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0, $4774 = 0, $4775 = 0, $4776 = 0, $4777 = 0;
 var $4778 = 0, $4779 = 0, $478 = 0, $4780 = 0, $4781 = 0, $4782 = 0, $4783 = 0, $4784 = 0, $4785 = 0, $4786 = 0, $4787 = 0, $4788 = 0, $4789 = 0, $479 = 0, $4790 = 0, $4791 = 0, $4792 = 0, $4793 = 0, $4794 = 0, $4795 = 0;
 var $4796 = 0, $4797 = 0, $4798 = 0, $4799 = 0, $48 = 0, $480 = 0, $4800 = 0, $4801 = 0, $4802 = 0, $4803 = 0, $4804 = 0, $4805 = 0, $4806 = 0, $4807 = 0, $4808 = 0, $4809 = 0, $481 = 0, $4810 = 0, $4811 = 0, $4812 = 0;
 var $4813 = 0, $4814 = 0, $4815 = 0, $4816 = 0, $4817 = 0, $4818 = 0, $4819 = 0, $482 = 0, $4820 = 0, $4821 = 0, $4822 = 0, $4823 = 0, $4824 = 0, $4825 = 0, $4826 = 0, $4827 = 0, $4828 = 0, $4829 = 0, $483 = 0, $4830 = 0;
 var $4831 = 0, $4832 = 0, $4833 = 0, $4834 = 0, $4835 = 0, $4836 = 0, $4837 = 0, $4838 = 0, $4839 = 0, $484 = 0, $4840 = 0, $4841 = 0, $4842 = 0, $4843 = 0, $4844 = 0, $4845 = 0, $4846 = 0, $4847 = 0, $4848 = 0, $4849 = 0;
 var $485 = 0, $4850 = 0, $4851 = 0, $4852 = 0, $4853 = 0, $4854 = 0, $4855 = 0, $4856 = 0, $4857 = 0, $4858 = 0, $4859 = 0, $486 = 0, $4860 = 0, $4861 = 0, $4862 = 0, $4863 = 0, $4864 = 0, $4865 = 0, $4866 = 0, $4867 = 0;
 var $4868 = 0, $4869 = 0, $487 = 0, $4870 = 0, $4871 = 0, $4872 = 0, $4873 = 0, $4874 = 0, $4875 = 0, $4876 = 0, $4877 = 0, $4878 = 0, $4879 = 0, $488 = 0, $4880 = 0, $4881 = 0, $4882 = 0, $4883 = 0, $4884 = 0, $4885 = 0;
 var $4886 = 0, $4887 = 0, $4888 = 0, $4889 = 0, $489 = 0, $4890 = 0, $4891 = 0, $4892 = 0, $4893 = 0, $4894 = 0, $4895 = 0, $4896 = 0, $4897 = 0, $4898 = 0, $4899 = 0, $49 = 0, $490 = 0, $4900 = 0, $4901 = 0, $4902 = 0;
 var $4903 = 0, $4904 = 0, $4905 = 0, $4906 = 0, $4907 = 0, $4908 = 0, $4909 = 0, $491 = 0, $4910 = 0, $4911 = 0, $4912 = 0, $4913 = 0, $4914 = 0, $4915 = 0, $4916 = 0, $4917 = 0, $4918 = 0, $4919 = 0, $492 = 0, $4920 = 0;
 var $4921 = 0, $4922 = 0, $4923 = 0, $4924 = 0, $4925 = 0, $4926 = 0, $4927 = 0, $4928 = 0, $4929 = 0, $493 = 0, $4930 = 0, $4931 = 0, $4932 = 0, $4933 = 0, $4934 = 0, $4935 = 0, $4936 = 0, $4937 = 0, $4938 = 0, $4939 = 0;
 var $494 = 0, $4940 = 0, $4941 = 0, $4942 = 0, $4943 = 0, $4944 = 0, $4945 = 0, $4946 = 0, $4947 = 0, $4948 = 0, $4949 = 0, $495 = 0, $4950 = 0, $4951 = 0, $4952 = 0, $4953 = 0, $4954 = 0, $4955 = 0, $4956 = 0, $4957 = 0;
 var $4958 = 0, $4959 = 0, $496 = 0, $4960 = 0, $4961 = 0, $4962 = 0, $4963 = 0, $4964 = 0, $4965 = 0, $4966 = 0, $4967 = 0, $4968 = 0, $4969 = 0, $497 = 0, $4970 = 0, $4971 = 0, $4972 = 0, $4973 = 0, $4974 = 0, $4975 = 0;
 var $4976 = 0, $4977 = 0, $4978 = 0, $4979 = 0, $498 = 0, $4980 = 0, $4981 = 0, $4982 = 0, $4983 = 0, $4984 = 0, $4985 = 0, $4986 = 0, $4987 = 0, $4988 = 0, $4989 = 0, $499 = 0, $4990 = 0, $4991 = 0, $4992 = 0, $4993 = 0;
 var $4994 = 0, $4995 = 0, $4996 = 0, $4997 = 0, $4998 = 0, $4999 = 0, $5 = 0, $50 = 0, $500 = 0, $5000 = 0, $5001 = 0, $5002 = 0, $5003 = 0, $5004 = 0, $5005 = 0, $5006 = 0, $5007 = 0, $5008 = 0, $5009 = 0, $501 = 0;
 var $5010 = 0, $5011 = 0, $5012 = 0, $5013 = 0, $5014 = 0, $5015 = 0, $5016 = 0, $5017 = 0, $5018 = 0, $5019 = 0, $502 = 0, $5020 = 0, $5021 = 0, $5022 = 0, $5023 = 0, $5024 = 0, $5025 = 0, $5026 = 0, $5027 = 0, $5028 = 0;
 var $5029 = 0, $503 = 0, $5030 = 0, $5031 = 0, $5032 = 0, $5033 = 0, $5034 = 0, $5035 = 0, $5036 = 0, $5037 = 0, $5038 = 0, $5039 = 0, $504 = 0, $5040 = 0, $5041 = 0, $5042 = 0, $5043 = 0, $5044 = 0, $5045 = 0, $5046 = 0;
 var $5047 = 0, $5048 = 0, $5049 = 0, $505 = 0, $5050 = 0, $5051 = 0, $5052 = 0, $5053 = 0, $5054 = 0, $5055 = 0, $5056 = 0, $5057 = 0, $5058 = 0, $5059 = 0, $506 = 0, $5060 = 0, $5061 = 0, $5062 = 0, $5063 = 0, $5064 = 0;
 var $5065 = 0, $5066 = 0, $5067 = 0, $5068 = 0, $5069 = 0, $507 = 0, $5070 = 0, $5071 = 0, $5072 = 0, $5073 = 0, $5074 = 0, $5075 = 0, $5076 = 0, $5077 = 0, $5078 = 0, $5079 = 0, $508 = 0, $5080 = 0, $5081 = 0, $5082 = 0;
 var $5083 = 0, $5084 = 0, $5085 = 0, $5086 = 0, $5087 = 0, $5088 = 0, $5089 = 0, $509 = 0, $5090 = 0, $5091 = 0, $5092 = 0, $5093 = 0, $5094 = 0, $5095 = 0, $5096 = 0, $5097 = 0, $5098 = 0, $5099 = 0, $51 = 0, $510 = 0;
 var $5100 = 0, $5101 = 0, $5102 = 0, $5103 = 0, $5104 = 0, $5105 = 0, $5106 = 0, $5107 = 0, $5108 = 0, $5109 = 0, $511 = 0, $5110 = 0, $5111 = 0, $5112 = 0, $5113 = 0, $5114 = 0, $5115 = 0, $5116 = 0, $5117 = 0, $5118 = 0;
 var $5119 = 0, $512 = 0, $5120 = 0, $5121 = 0, $5122 = 0, $5123 = 0, $5124 = 0, $5125 = 0, $5126 = 0, $5127 = 0, $5128 = 0, $5129 = 0, $513 = 0, $5130 = 0, $5131 = 0, $5132 = 0, $5133 = 0, $5134 = 0, $5135 = 0, $5136 = 0;
 var $5137 = 0, $5138 = 0, $5139 = 0, $514 = 0, $5140 = 0, $5141 = 0, $5142 = 0, $5143 = 0, $5144 = 0, $5145 = 0, $5146 = 0, $5147 = 0, $5148 = 0, $5149 = 0, $515 = 0, $5150 = 0, $5151 = 0, $5152 = 0, $5153 = 0, $5154 = 0;
 var $5155 = 0, $5156 = 0, $5157 = 0, $5158 = 0, $5159 = 0, $516 = 0, $5160 = 0, $5161 = 0, $5162 = 0, $5163 = 0, $5164 = 0, $5165 = 0, $5166 = 0, $5167 = 0, $5168 = 0, $5169 = 0, $517 = 0, $5170 = 0, $5171 = 0, $5172 = 0;
 var $5173 = 0, $5174 = 0, $5175 = 0, $5176 = 0, $5177 = 0, $5178 = 0, $5179 = 0, $518 = 0, $5180 = 0, $5181 = 0, $5182 = 0, $5183 = 0, $5184 = 0, $5185 = 0, $5186 = 0, $5187 = 0, $5188 = 0, $5189 = 0, $519 = 0, $5190 = 0;
 var $5191 = 0, $5192 = 0, $5193 = 0, $5194 = 0, $5195 = 0, $5196 = 0, $5197 = 0, $5198 = 0, $5199 = 0, $52 = 0, $520 = 0, $5200 = 0, $5201 = 0, $5202 = 0, $5203 = 0, $5204 = 0, $5205 = 0, $5206 = 0, $5207 = 0, $5208 = 0;
 var $5209 = 0, $521 = 0, $5210 = 0, $5211 = 0, $5212 = 0, $5213 = 0, $5214 = 0, $5215 = 0, $5216 = 0, $5217 = 0, $5218 = 0, $5219 = 0, $522 = 0, $5220 = 0, $5221 = 0, $5222 = 0, $5223 = 0, $5224 = 0, $5225 = 0, $5226 = 0;
 var $5227 = 0, $5228 = 0, $5229 = 0, $523 = 0, $5230 = 0, $5231 = 0, $5232 = 0, $5233 = 0, $5234 = 0, $5235 = 0, $5236 = 0, $5237 = 0, $5238 = 0, $5239 = 0, $524 = 0, $5240 = 0, $5241 = 0, $5242 = 0, $5243 = 0, $5244 = 0;
 var $5245 = 0, $5246 = 0, $5247 = 0, $5248 = 0, $5249 = 0, $525 = 0, $5250 = 0, $5251 = 0, $5252 = 0, $5253 = 0, $5254 = 0, $5255 = 0, $5256 = 0, $5257 = 0, $5258 = 0, $5259 = 0, $526 = 0, $5260 = 0, $5261 = 0, $5262 = 0;
 var $5263 = 0, $5264 = 0, $5265 = 0, $5266 = 0, $5267 = 0, $5268 = 0, $5269 = 0, $527 = 0, $5270 = 0, $5271 = 0, $5272 = 0, $5273 = 0, $5274 = 0, $5275 = 0, $5276 = 0, $5277 = 0, $5278 = 0, $5279 = 0, $528 = 0, $5280 = 0;
 var $5281 = 0, $5282 = 0, $5283 = 0, $5284 = 0, $5285 = 0, $5286 = 0, $5287 = 0, $5288 = 0, $5289 = 0, $529 = 0, $5290 = 0, $5291 = 0, $5292 = 0, $5293 = 0, $5294 = 0, $5295 = 0, $5296 = 0, $5297 = 0, $5298 = 0, $5299 = 0;
 var $53 = 0, $530 = 0, $5300 = 0, $5301 = 0, $5302 = 0, $5303 = 0, $5304 = 0, $5305 = 0, $5306 = 0, $5307 = 0, $5308 = 0, $5309 = 0, $531 = 0, $5310 = 0, $5311 = 0, $5312 = 0, $5313 = 0, $5314 = 0, $5315 = 0, $5316 = 0;
 var $5317 = 0, $5318 = 0, $5319 = 0, $532 = 0, $5320 = 0, $5321 = 0, $5322 = 0, $5323 = 0, $5324 = 0, $5325 = 0, $5326 = 0, $5327 = 0, $5328 = 0, $5329 = 0, $533 = 0, $5330 = 0, $5331 = 0, $5332 = 0, $5333 = 0, $5334 = 0;
 var $5335 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $exitcond = 0, $exitcond1 = 0, $exitcond2 = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 256|0;
 $2 = sp_a + 128|0;
 $3 = sp_a;
 $$0 = 0;
 while(1) {
  $exitcond2 = ($$0|0)==(16);
  if ($exitcond2) {
   $$1 = 0;
   break;
  }
  $4 = $$0 << 3;
  $5 = (($1) + ($4)|0);
  $6 = (_load64_le($5)|0);
  $7 = tempRet0;
  $8 = (($2) + ($$0<<3)|0);
  $9 = $8;
  $10 = $9;
  HEAP32[$10>>2] = $6;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $7;
  $13 = (($$0) + 1)|0;
  $$0 = $13;
 }
 while(1) {
  $exitcond1 = ($$1|0)==(8);
  if ($exitcond1) {
   break;
  }
  $14 = (($0) + ($$1<<3)|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($3) + ($$1<<3)|0);
  $22 = $21;
  $23 = $22;
  HEAP32[$23>>2] = $17;
  $24 = (($22) + 4)|0;
  $25 = $24;
  HEAP32[$25>>2] = $20;
  $26 = (($$1) + 1)|0;
  $$1 = $26;
 }
 $27 = ((($3)) + 64|0);
 $28 = ((($3)) + 72|0);
 $29 = ((($3)) + 80|0);
 $30 = ((($3)) + 88|0);
 $31 = $30;
 $32 = $31;
 HEAP32[$32>>2] = 1595750129;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = -1521486534;
 $35 = ((($0)) + 64|0);
 $36 = $35;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = $38 ^ -1377402159;
 $43 = $41 ^ 1359893119;
 $44 = ((($3)) + 96|0);
 $45 = ((($0)) + 72|0);
 $46 = $45;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = $48 ^ 725511199;
 $53 = $51 ^ -1694144372;
 $54 = ((($3)) + 104|0);
 $55 = ((($0)) + 80|0);
 $56 = $55;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = $58 ^ -79577749;
 $63 = $61 ^ 528734635;
 $64 = ((($3)) + 112|0);
 $65 = ((($0)) + 88|0);
 $66 = $65;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = $68 ^ 327033209;
 $73 = $71 ^ 1541459225;
 $74 = ((($3)) + 120|0);
 $75 = $74;
 $76 = $75;
 HEAP32[$76>>2] = $72;
 $77 = (($75) + 4)|0;
 $78 = $77;
 HEAP32[$78>>2] = $73;
 $79 = $3;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($3)) + 32|0);
 $86 = $85;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = (_i64Add(($81|0),($84|0),($88|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $2;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($94) + 4)|0;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (_i64Add(($92|0),($93|0),($96|0),($99|0))|0);
 $101 = tempRet0;
 $102 = $42 ^ $100;
 $103 = $43 ^ $101;
 $104 = (_rotr64($102,$103,32)|0);
 $105 = tempRet0;
 $106 = (_i64Add(($104|0),($105|0),-205731576,1779033703)|0);
 $107 = tempRet0;
 $108 = $88 ^ $106;
 $109 = $91 ^ $107;
 $110 = (_rotr64($108,$109,24)|0);
 $111 = tempRet0;
 $112 = (_i64Add(($100|0),($101|0),($110|0),($111|0))|0);
 $113 = tempRet0;
 $114 = ((($2)) + 8|0);
 $115 = $114;
 $116 = $115;
 $117 = HEAP32[$116>>2]|0;
 $118 = (($115) + 4)|0;
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = (_i64Add(($112|0),($113|0),($117|0),($120|0))|0);
 $122 = tempRet0;
 $123 = $3;
 $124 = $123;
 HEAP32[$124>>2] = $121;
 $125 = (($123) + 4)|0;
 $126 = $125;
 HEAP32[$126>>2] = $122;
 $127 = $104 ^ $121;
 $128 = $105 ^ $122;
 $129 = (_rotr64($127,$128,16)|0);
 $130 = tempRet0;
 $131 = $44;
 $132 = $131;
 HEAP32[$132>>2] = $129;
 $133 = (($131) + 4)|0;
 $134 = $133;
 HEAP32[$134>>2] = $130;
 $135 = (_i64Add(($106|0),($107|0),($129|0),($130|0))|0);
 $136 = tempRet0;
 $137 = $27;
 $138 = $137;
 HEAP32[$138>>2] = $135;
 $139 = (($137) + 4)|0;
 $140 = $139;
 HEAP32[$140>>2] = $136;
 $141 = $110 ^ $135;
 $142 = $111 ^ $136;
 $143 = (_rotr64($141,$142,63)|0);
 $144 = tempRet0;
 $145 = $85;
 $146 = $145;
 HEAP32[$146>>2] = $143;
 $147 = (($145) + 4)|0;
 $148 = $147;
 HEAP32[$148>>2] = $144;
 $149 = ((($3)) + 8|0);
 $150 = $149;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = (($150) + 4)|0;
 $154 = $153;
 $155 = HEAP32[$154>>2]|0;
 $156 = ((($3)) + 40|0);
 $157 = $156;
 $158 = $157;
 $159 = HEAP32[$158>>2]|0;
 $160 = (($157) + 4)|0;
 $161 = $160;
 $162 = HEAP32[$161>>2]|0;
 $163 = (_i64Add(($152|0),($155|0),($159|0),($162|0))|0);
 $164 = tempRet0;
 $165 = ((($2)) + 16|0);
 $166 = $165;
 $167 = $166;
 $168 = HEAP32[$167>>2]|0;
 $169 = (($166) + 4)|0;
 $170 = $169;
 $171 = HEAP32[$170>>2]|0;
 $172 = (_i64Add(($163|0),($164|0),($168|0),($171|0))|0);
 $173 = tempRet0;
 $174 = $52 ^ $172;
 $175 = $53 ^ $173;
 $176 = (_rotr64($174,$175,32)|0);
 $177 = tempRet0;
 $178 = (_i64Add(($176|0),($177|0),-2067093701,-1150833019)|0);
 $179 = tempRet0;
 $180 = $159 ^ $178;
 $181 = $162 ^ $179;
 $182 = (_rotr64($180,$181,24)|0);
 $183 = tempRet0;
 $184 = (_i64Add(($172|0),($173|0),($182|0),($183|0))|0);
 $185 = tempRet0;
 $186 = ((($2)) + 24|0);
 $187 = $186;
 $188 = $187;
 $189 = HEAP32[$188>>2]|0;
 $190 = (($187) + 4)|0;
 $191 = $190;
 $192 = HEAP32[$191>>2]|0;
 $193 = (_i64Add(($184|0),($185|0),($189|0),($192|0))|0);
 $194 = tempRet0;
 $195 = $176 ^ $193;
 $196 = $177 ^ $194;
 $197 = (_rotr64($195,$196,16)|0);
 $198 = tempRet0;
 $199 = $54;
 $200 = $199;
 HEAP32[$200>>2] = $197;
 $201 = (($199) + 4)|0;
 $202 = $201;
 HEAP32[$202>>2] = $198;
 $203 = (_i64Add(($178|0),($179|0),($197|0),($198|0))|0);
 $204 = tempRet0;
 $205 = $28;
 $206 = $205;
 HEAP32[$206>>2] = $203;
 $207 = (($205) + 4)|0;
 $208 = $207;
 HEAP32[$208>>2] = $204;
 $209 = $182 ^ $203;
 $210 = $183 ^ $204;
 $211 = (_rotr64($209,$210,63)|0);
 $212 = tempRet0;
 $213 = ((($3)) + 16|0);
 $214 = $213;
 $215 = $214;
 $216 = HEAP32[$215>>2]|0;
 $217 = (($214) + 4)|0;
 $218 = $217;
 $219 = HEAP32[$218>>2]|0;
 $220 = ((($3)) + 48|0);
 $221 = $220;
 $222 = $221;
 $223 = HEAP32[$222>>2]|0;
 $224 = (($221) + 4)|0;
 $225 = $224;
 $226 = HEAP32[$225>>2]|0;
 $227 = (_i64Add(($216|0),($219|0),($223|0),($226|0))|0);
 $228 = tempRet0;
 $229 = ((($2)) + 32|0);
 $230 = $229;
 $231 = $230;
 $232 = HEAP32[$231>>2]|0;
 $233 = (($230) + 4)|0;
 $234 = $233;
 $235 = HEAP32[$234>>2]|0;
 $236 = (_i64Add(($227|0),($228|0),($232|0),($235|0))|0);
 $237 = tempRet0;
 $238 = $62 ^ $236;
 $239 = $63 ^ $237;
 $240 = (_rotr64($238,$239,32)|0);
 $241 = tempRet0;
 $242 = (_i64Add(($240|0),($241|0),-23791573,1013904242)|0);
 $243 = tempRet0;
 $244 = $223 ^ $242;
 $245 = $226 ^ $243;
 $246 = (_rotr64($244,$245,24)|0);
 $247 = tempRet0;
 $248 = (_i64Add(($236|0),($237|0),($246|0),($247|0))|0);
 $249 = tempRet0;
 $250 = ((($2)) + 40|0);
 $251 = $250;
 $252 = $251;
 $253 = HEAP32[$252>>2]|0;
 $254 = (($251) + 4)|0;
 $255 = $254;
 $256 = HEAP32[$255>>2]|0;
 $257 = (_i64Add(($248|0),($249|0),($253|0),($256|0))|0);
 $258 = tempRet0;
 $259 = $240 ^ $257;
 $260 = $241 ^ $258;
 $261 = (_rotr64($259,$260,16)|0);
 $262 = tempRet0;
 $263 = $64;
 $264 = $263;
 HEAP32[$264>>2] = $261;
 $265 = (($263) + 4)|0;
 $266 = $265;
 HEAP32[$266>>2] = $262;
 $267 = (_i64Add(($242|0),($243|0),($261|0),($262|0))|0);
 $268 = tempRet0;
 $269 = $246 ^ $267;
 $270 = $247 ^ $268;
 $271 = (_rotr64($269,$270,63)|0);
 $272 = tempRet0;
 $273 = ((($3)) + 24|0);
 $274 = $273;
 $275 = $274;
 $276 = HEAP32[$275>>2]|0;
 $277 = (($274) + 4)|0;
 $278 = $277;
 $279 = HEAP32[$278>>2]|0;
 $280 = ((($3)) + 56|0);
 $281 = $280;
 $282 = $281;
 $283 = HEAP32[$282>>2]|0;
 $284 = (($281) + 4)|0;
 $285 = $284;
 $286 = HEAP32[$285>>2]|0;
 $287 = (_i64Add(($276|0),($279|0),($283|0),($286|0))|0);
 $288 = tempRet0;
 $289 = ((($2)) + 48|0);
 $290 = $289;
 $291 = $290;
 $292 = HEAP32[$291>>2]|0;
 $293 = (($290) + 4)|0;
 $294 = $293;
 $295 = HEAP32[$294>>2]|0;
 $296 = (_i64Add(($287|0),($288|0),($292|0),($295|0))|0);
 $297 = tempRet0;
 $298 = $74;
 $299 = $298;
 $300 = HEAP32[$299>>2]|0;
 $301 = (($298) + 4)|0;
 $302 = $301;
 $303 = HEAP32[$302>>2]|0;
 $304 = $300 ^ $296;
 $305 = $303 ^ $297;
 $306 = (_rotr64($304,$305,32)|0);
 $307 = tempRet0;
 $308 = $30;
 $309 = $308;
 $310 = HEAP32[$309>>2]|0;
 $311 = (($308) + 4)|0;
 $312 = $311;
 $313 = HEAP32[$312>>2]|0;
 $314 = (_i64Add(($310|0),($313|0),($306|0),($307|0))|0);
 $315 = tempRet0;
 $316 = $283 ^ $314;
 $317 = $286 ^ $315;
 $318 = (_rotr64($316,$317,24)|0);
 $319 = tempRet0;
 $320 = (_i64Add(($296|0),($297|0),($318|0),($319|0))|0);
 $321 = tempRet0;
 $322 = ((($2)) + 56|0);
 $323 = $322;
 $324 = $323;
 $325 = HEAP32[$324>>2]|0;
 $326 = (($323) + 4)|0;
 $327 = $326;
 $328 = HEAP32[$327>>2]|0;
 $329 = (_i64Add(($320|0),($321|0),($325|0),($328|0))|0);
 $330 = tempRet0;
 $331 = $306 ^ $329;
 $332 = $307 ^ $330;
 $333 = (_rotr64($331,$332,16)|0);
 $334 = tempRet0;
 $335 = (_i64Add(($314|0),($315|0),($333|0),($334|0))|0);
 $336 = tempRet0;
 $337 = $318 ^ $335;
 $338 = $319 ^ $336;
 $339 = (_rotr64($337,$338,63)|0);
 $340 = tempRet0;
 $341 = $3;
 $342 = $341;
 $343 = HEAP32[$342>>2]|0;
 $344 = (($341) + 4)|0;
 $345 = $344;
 $346 = HEAP32[$345>>2]|0;
 $347 = (_i64Add(($343|0),($346|0),($211|0),($212|0))|0);
 $348 = tempRet0;
 $349 = ((($2)) + 64|0);
 $350 = $349;
 $351 = $350;
 $352 = HEAP32[$351>>2]|0;
 $353 = (($350) + 4)|0;
 $354 = $353;
 $355 = HEAP32[$354>>2]|0;
 $356 = (_i64Add(($347|0),($348|0),($352|0),($355|0))|0);
 $357 = tempRet0;
 $358 = $333 ^ $356;
 $359 = $334 ^ $357;
 $360 = (_rotr64($358,$359,32)|0);
 $361 = tempRet0;
 $362 = (_i64Add(($267|0),($268|0),($360|0),($361|0))|0);
 $363 = tempRet0;
 $364 = $211 ^ $362;
 $365 = $212 ^ $363;
 $366 = (_rotr64($364,$365,24)|0);
 $367 = tempRet0;
 $368 = (_i64Add(($356|0),($357|0),($366|0),($367|0))|0);
 $369 = tempRet0;
 $370 = ((($2)) + 72|0);
 $371 = $370;
 $372 = $371;
 $373 = HEAP32[$372>>2]|0;
 $374 = (($371) + 4)|0;
 $375 = $374;
 $376 = HEAP32[$375>>2]|0;
 $377 = (_i64Add(($368|0),($369|0),($373|0),($376|0))|0);
 $378 = tempRet0;
 $379 = $360 ^ $377;
 $380 = $361 ^ $378;
 $381 = (_rotr64($379,$380,16)|0);
 $382 = tempRet0;
 $383 = $74;
 $384 = $383;
 HEAP32[$384>>2] = $381;
 $385 = (($383) + 4)|0;
 $386 = $385;
 HEAP32[$386>>2] = $382;
 $387 = (_i64Add(($362|0),($363|0),($381|0),($382|0))|0);
 $388 = tempRet0;
 $389 = $29;
 $390 = $389;
 HEAP32[$390>>2] = $387;
 $391 = (($389) + 4)|0;
 $392 = $391;
 HEAP32[$392>>2] = $388;
 $393 = $366 ^ $387;
 $394 = $367 ^ $388;
 $395 = (_rotr64($393,$394,63)|0);
 $396 = tempRet0;
 $397 = $156;
 $398 = $397;
 HEAP32[$398>>2] = $395;
 $399 = (($397) + 4)|0;
 $400 = $399;
 HEAP32[$400>>2] = $396;
 $401 = (_i64Add(($193|0),($194|0),($271|0),($272|0))|0);
 $402 = tempRet0;
 $403 = ((($2)) + 80|0);
 $404 = $403;
 $405 = $404;
 $406 = HEAP32[$405>>2]|0;
 $407 = (($404) + 4)|0;
 $408 = $407;
 $409 = HEAP32[$408>>2]|0;
 $410 = (_i64Add(($401|0),($402|0),($406|0),($409|0))|0);
 $411 = tempRet0;
 $412 = $44;
 $413 = $412;
 $414 = HEAP32[$413>>2]|0;
 $415 = (($412) + 4)|0;
 $416 = $415;
 $417 = HEAP32[$416>>2]|0;
 $418 = $414 ^ $410;
 $419 = $417 ^ $411;
 $420 = (_rotr64($418,$419,32)|0);
 $421 = tempRet0;
 $422 = (_i64Add(($335|0),($336|0),($420|0),($421|0))|0);
 $423 = tempRet0;
 $424 = $271 ^ $422;
 $425 = $272 ^ $423;
 $426 = (_rotr64($424,$425,24)|0);
 $427 = tempRet0;
 $428 = (_i64Add(($410|0),($411|0),($426|0),($427|0))|0);
 $429 = tempRet0;
 $430 = ((($2)) + 88|0);
 $431 = $430;
 $432 = $431;
 $433 = HEAP32[$432>>2]|0;
 $434 = (($431) + 4)|0;
 $435 = $434;
 $436 = HEAP32[$435>>2]|0;
 $437 = (_i64Add(($428|0),($429|0),($433|0),($436|0))|0);
 $438 = tempRet0;
 $439 = $420 ^ $437;
 $440 = $421 ^ $438;
 $441 = (_rotr64($439,$440,16)|0);
 $442 = tempRet0;
 $443 = (_i64Add(($422|0),($423|0),($441|0),($442|0))|0);
 $444 = tempRet0;
 $445 = $30;
 $446 = $445;
 HEAP32[$446>>2] = $443;
 $447 = (($445) + 4)|0;
 $448 = $447;
 HEAP32[$448>>2] = $444;
 $449 = $426 ^ $443;
 $450 = $427 ^ $444;
 $451 = (_rotr64($449,$450,63)|0);
 $452 = tempRet0;
 $453 = $220;
 $454 = $453;
 HEAP32[$454>>2] = $451;
 $455 = (($453) + 4)|0;
 $456 = $455;
 HEAP32[$456>>2] = $452;
 $457 = (_i64Add(($257|0),($258|0),($339|0),($340|0))|0);
 $458 = tempRet0;
 $459 = ((($2)) + 96|0);
 $460 = $459;
 $461 = $460;
 $462 = HEAP32[$461>>2]|0;
 $463 = (($460) + 4)|0;
 $464 = $463;
 $465 = HEAP32[$464>>2]|0;
 $466 = (_i64Add(($457|0),($458|0),($462|0),($465|0))|0);
 $467 = tempRet0;
 $468 = $54;
 $469 = $468;
 $470 = HEAP32[$469>>2]|0;
 $471 = (($468) + 4)|0;
 $472 = $471;
 $473 = HEAP32[$472>>2]|0;
 $474 = $470 ^ $466;
 $475 = $473 ^ $467;
 $476 = (_rotr64($474,$475,32)|0);
 $477 = tempRet0;
 $478 = $27;
 $479 = $478;
 $480 = HEAP32[$479>>2]|0;
 $481 = (($478) + 4)|0;
 $482 = $481;
 $483 = HEAP32[$482>>2]|0;
 $484 = (_i64Add(($480|0),($483|0),($476|0),($477|0))|0);
 $485 = tempRet0;
 $486 = $339 ^ $484;
 $487 = $340 ^ $485;
 $488 = (_rotr64($486,$487,24)|0);
 $489 = tempRet0;
 $490 = (_i64Add(($466|0),($467|0),($488|0),($489|0))|0);
 $491 = tempRet0;
 $492 = ((($2)) + 104|0);
 $493 = $492;
 $494 = $493;
 $495 = HEAP32[$494>>2]|0;
 $496 = (($493) + 4)|0;
 $497 = $496;
 $498 = HEAP32[$497>>2]|0;
 $499 = (_i64Add(($490|0),($491|0),($495|0),($498|0))|0);
 $500 = tempRet0;
 $501 = $476 ^ $499;
 $502 = $477 ^ $500;
 $503 = (_rotr64($501,$502,16)|0);
 $504 = tempRet0;
 $505 = (_i64Add(($484|0),($485|0),($503|0),($504|0))|0);
 $506 = tempRet0;
 $507 = $488 ^ $505;
 $508 = $489 ^ $506;
 $509 = (_rotr64($507,$508,63)|0);
 $510 = tempRet0;
 $511 = $280;
 $512 = $511;
 HEAP32[$512>>2] = $509;
 $513 = (($511) + 4)|0;
 $514 = $513;
 HEAP32[$514>>2] = $510;
 $515 = $85;
 $516 = $515;
 $517 = HEAP32[$516>>2]|0;
 $518 = (($515) + 4)|0;
 $519 = $518;
 $520 = HEAP32[$519>>2]|0;
 $521 = (_i64Add(($329|0),($330|0),($517|0),($520|0))|0);
 $522 = tempRet0;
 $523 = ((($2)) + 112|0);
 $524 = $523;
 $525 = $524;
 $526 = HEAP32[$525>>2]|0;
 $527 = (($524) + 4)|0;
 $528 = $527;
 $529 = HEAP32[$528>>2]|0;
 $530 = (_i64Add(($521|0),($522|0),($526|0),($529|0))|0);
 $531 = tempRet0;
 $532 = $64;
 $533 = $532;
 $534 = HEAP32[$533>>2]|0;
 $535 = (($532) + 4)|0;
 $536 = $535;
 $537 = HEAP32[$536>>2]|0;
 $538 = $534 ^ $530;
 $539 = $537 ^ $531;
 $540 = (_rotr64($538,$539,32)|0);
 $541 = tempRet0;
 $542 = $28;
 $543 = $542;
 $544 = HEAP32[$543>>2]|0;
 $545 = (($542) + 4)|0;
 $546 = $545;
 $547 = HEAP32[$546>>2]|0;
 $548 = (_i64Add(($544|0),($547|0),($540|0),($541|0))|0);
 $549 = tempRet0;
 $550 = $517 ^ $548;
 $551 = $520 ^ $549;
 $552 = (_rotr64($550,$551,24)|0);
 $553 = tempRet0;
 $554 = (_i64Add(($530|0),($531|0),($552|0),($553|0))|0);
 $555 = tempRet0;
 $556 = ((($2)) + 120|0);
 $557 = $556;
 $558 = $557;
 $559 = HEAP32[$558>>2]|0;
 $560 = (($557) + 4)|0;
 $561 = $560;
 $562 = HEAP32[$561>>2]|0;
 $563 = (_i64Add(($554|0),($555|0),($559|0),($562|0))|0);
 $564 = tempRet0;
 $565 = $540 ^ $563;
 $566 = $541 ^ $564;
 $567 = (_rotr64($565,$566,16)|0);
 $568 = tempRet0;
 $569 = (_i64Add(($548|0),($549|0),($567|0),($568|0))|0);
 $570 = tempRet0;
 $571 = $552 ^ $569;
 $572 = $553 ^ $570;
 $573 = (_rotr64($571,$572,63)|0);
 $574 = tempRet0;
 $575 = (_i64Add(($377|0),($378|0),($573|0),($574|0))|0);
 $576 = tempRet0;
 $577 = (_i64Add(($575|0),($576|0),($526|0),($529|0))|0);
 $578 = tempRet0;
 $579 = $441 ^ $577;
 $580 = $442 ^ $578;
 $581 = (_rotr64($579,$580,32)|0);
 $582 = tempRet0;
 $583 = (_i64Add(($505|0),($506|0),($581|0),($582|0))|0);
 $584 = tempRet0;
 $585 = $573 ^ $583;
 $586 = $574 ^ $584;
 $587 = (_rotr64($585,$586,24)|0);
 $588 = tempRet0;
 $589 = (_i64Add(($577|0),($578|0),($587|0),($588|0))|0);
 $590 = tempRet0;
 $591 = (_i64Add(($589|0),($590|0),($406|0),($409|0))|0);
 $592 = tempRet0;
 $593 = $581 ^ $591;
 $594 = $582 ^ $592;
 $595 = (_rotr64($593,$594,16)|0);
 $596 = tempRet0;
 $597 = $44;
 $598 = $597;
 HEAP32[$598>>2] = $595;
 $599 = (($597) + 4)|0;
 $600 = $599;
 HEAP32[$600>>2] = $596;
 $601 = (_i64Add(($583|0),($584|0),($595|0),($596|0))|0);
 $602 = tempRet0;
 $603 = $27;
 $604 = $603;
 HEAP32[$604>>2] = $601;
 $605 = (($603) + 4)|0;
 $606 = $605;
 HEAP32[$606>>2] = $602;
 $607 = $587 ^ $601;
 $608 = $588 ^ $602;
 $609 = (_rotr64($607,$608,63)|0);
 $610 = tempRet0;
 $611 = $85;
 $612 = $611;
 HEAP32[$612>>2] = $609;
 $613 = (($611) + 4)|0;
 $614 = $613;
 HEAP32[$614>>2] = $610;
 $615 = $156;
 $616 = $615;
 $617 = HEAP32[$616>>2]|0;
 $618 = (($615) + 4)|0;
 $619 = $618;
 $620 = HEAP32[$619>>2]|0;
 $621 = (_i64Add(($437|0),($438|0),($617|0),($620|0))|0);
 $622 = tempRet0;
 $623 = $229;
 $624 = $623;
 $625 = HEAP32[$624>>2]|0;
 $626 = (($623) + 4)|0;
 $627 = $626;
 $628 = HEAP32[$627>>2]|0;
 $629 = (_i64Add(($621|0),($622|0),($625|0),($628|0))|0);
 $630 = tempRet0;
 $631 = $503 ^ $629;
 $632 = $504 ^ $630;
 $633 = (_rotr64($631,$632,32)|0);
 $634 = tempRet0;
 $635 = (_i64Add(($569|0),($570|0),($633|0),($634|0))|0);
 $636 = tempRet0;
 $637 = $617 ^ $635;
 $638 = $620 ^ $636;
 $639 = (_rotr64($637,$638,24)|0);
 $640 = tempRet0;
 $641 = (_i64Add(($629|0),($630|0),($639|0),($640|0))|0);
 $642 = tempRet0;
 $643 = $349;
 $644 = $643;
 $645 = HEAP32[$644>>2]|0;
 $646 = (($643) + 4)|0;
 $647 = $646;
 $648 = HEAP32[$647>>2]|0;
 $649 = (_i64Add(($641|0),($642|0),($645|0),($648|0))|0);
 $650 = tempRet0;
 $651 = $633 ^ $649;
 $652 = $634 ^ $650;
 $653 = (_rotr64($651,$652,16)|0);
 $654 = tempRet0;
 $655 = $54;
 $656 = $655;
 HEAP32[$656>>2] = $653;
 $657 = (($655) + 4)|0;
 $658 = $657;
 HEAP32[$658>>2] = $654;
 $659 = (_i64Add(($635|0),($636|0),($653|0),($654|0))|0);
 $660 = tempRet0;
 $661 = $28;
 $662 = $661;
 HEAP32[$662>>2] = $659;
 $663 = (($661) + 4)|0;
 $664 = $663;
 HEAP32[$664>>2] = $660;
 $665 = $639 ^ $659;
 $666 = $640 ^ $660;
 $667 = (_rotr64($665,$666,63)|0);
 $668 = tempRet0;
 $669 = $220;
 $670 = $669;
 $671 = HEAP32[$670>>2]|0;
 $672 = (($669) + 4)|0;
 $673 = $672;
 $674 = HEAP32[$673>>2]|0;
 $675 = (_i64Add(($499|0),($500|0),($671|0),($674|0))|0);
 $676 = tempRet0;
 $677 = $370;
 $678 = $677;
 $679 = HEAP32[$678>>2]|0;
 $680 = (($677) + 4)|0;
 $681 = $680;
 $682 = HEAP32[$681>>2]|0;
 $683 = (_i64Add(($675|0),($676|0),($679|0),($682|0))|0);
 $684 = tempRet0;
 $685 = $567 ^ $683;
 $686 = $568 ^ $684;
 $687 = (_rotr64($685,$686,32)|0);
 $688 = tempRet0;
 $689 = $29;
 $690 = $689;
 $691 = HEAP32[$690>>2]|0;
 $692 = (($689) + 4)|0;
 $693 = $692;
 $694 = HEAP32[$693>>2]|0;
 $695 = (_i64Add(($691|0),($694|0),($687|0),($688|0))|0);
 $696 = tempRet0;
 $697 = $671 ^ $695;
 $698 = $674 ^ $696;
 $699 = (_rotr64($697,$698,24)|0);
 $700 = tempRet0;
 $701 = (_i64Add(($683|0),($684|0),($699|0),($700|0))|0);
 $702 = tempRet0;
 $703 = (_i64Add(($701|0),($702|0),($559|0),($562|0))|0);
 $704 = tempRet0;
 $705 = $687 ^ $703;
 $706 = $688 ^ $704;
 $707 = (_rotr64($705,$706,16)|0);
 $708 = tempRet0;
 $709 = $64;
 $710 = $709;
 HEAP32[$710>>2] = $707;
 $711 = (($709) + 4)|0;
 $712 = $711;
 HEAP32[$712>>2] = $708;
 $713 = (_i64Add(($695|0),($696|0),($707|0),($708|0))|0);
 $714 = tempRet0;
 $715 = $699 ^ $713;
 $716 = $700 ^ $714;
 $717 = (_rotr64($715,$716,63)|0);
 $718 = tempRet0;
 $719 = $280;
 $720 = $719;
 $721 = HEAP32[$720>>2]|0;
 $722 = (($719) + 4)|0;
 $723 = $722;
 $724 = HEAP32[$723>>2]|0;
 $725 = (_i64Add(($563|0),($564|0),($721|0),($724|0))|0);
 $726 = tempRet0;
 $727 = $492;
 $728 = $727;
 $729 = HEAP32[$728>>2]|0;
 $730 = (($727) + 4)|0;
 $731 = $730;
 $732 = HEAP32[$731>>2]|0;
 $733 = (_i64Add(($725|0),($726|0),($729|0),($732|0))|0);
 $734 = tempRet0;
 $735 = $74;
 $736 = $735;
 $737 = HEAP32[$736>>2]|0;
 $738 = (($735) + 4)|0;
 $739 = $738;
 $740 = HEAP32[$739>>2]|0;
 $741 = $737 ^ $733;
 $742 = $740 ^ $734;
 $743 = (_rotr64($741,$742,32)|0);
 $744 = tempRet0;
 $745 = $30;
 $746 = $745;
 $747 = HEAP32[$746>>2]|0;
 $748 = (($745) + 4)|0;
 $749 = $748;
 $750 = HEAP32[$749>>2]|0;
 $751 = (_i64Add(($747|0),($750|0),($743|0),($744|0))|0);
 $752 = tempRet0;
 $753 = $721 ^ $751;
 $754 = $724 ^ $752;
 $755 = (_rotr64($753,$754,24)|0);
 $756 = tempRet0;
 $757 = (_i64Add(($733|0),($734|0),($755|0),($756|0))|0);
 $758 = tempRet0;
 $759 = $289;
 $760 = $759;
 $761 = HEAP32[$760>>2]|0;
 $762 = (($759) + 4)|0;
 $763 = $762;
 $764 = HEAP32[$763>>2]|0;
 $765 = (_i64Add(($757|0),($758|0),($761|0),($764|0))|0);
 $766 = tempRet0;
 $767 = $743 ^ $765;
 $768 = $744 ^ $766;
 $769 = (_rotr64($767,$768,16)|0);
 $770 = tempRet0;
 $771 = (_i64Add(($751|0),($752|0),($769|0),($770|0))|0);
 $772 = tempRet0;
 $773 = $755 ^ $771;
 $774 = $756 ^ $772;
 $775 = (_rotr64($773,$774,63)|0);
 $776 = tempRet0;
 $777 = (_i64Add(($591|0),($592|0),($667|0),($668|0))|0);
 $778 = tempRet0;
 $779 = $114;
 $780 = $779;
 $781 = HEAP32[$780>>2]|0;
 $782 = (($779) + 4)|0;
 $783 = $782;
 $784 = HEAP32[$783>>2]|0;
 $785 = (_i64Add(($777|0),($778|0),($781|0),($784|0))|0);
 $786 = tempRet0;
 $787 = $769 ^ $785;
 $788 = $770 ^ $786;
 $789 = (_rotr64($787,$788,32)|0);
 $790 = tempRet0;
 $791 = (_i64Add(($713|0),($714|0),($789|0),($790|0))|0);
 $792 = tempRet0;
 $793 = $667 ^ $791;
 $794 = $668 ^ $792;
 $795 = (_rotr64($793,$794,24)|0);
 $796 = tempRet0;
 $797 = (_i64Add(($785|0),($786|0),($795|0),($796|0))|0);
 $798 = tempRet0;
 $799 = $459;
 $800 = $799;
 $801 = HEAP32[$800>>2]|0;
 $802 = (($799) + 4)|0;
 $803 = $802;
 $804 = HEAP32[$803>>2]|0;
 $805 = (_i64Add(($797|0),($798|0),($801|0),($804|0))|0);
 $806 = tempRet0;
 $807 = $789 ^ $805;
 $808 = $790 ^ $806;
 $809 = (_rotr64($807,$808,16)|0);
 $810 = tempRet0;
 $811 = $74;
 $812 = $811;
 HEAP32[$812>>2] = $809;
 $813 = (($811) + 4)|0;
 $814 = $813;
 HEAP32[$814>>2] = $810;
 $815 = (_i64Add(($791|0),($792|0),($809|0),($810|0))|0);
 $816 = tempRet0;
 $817 = $29;
 $818 = $817;
 HEAP32[$818>>2] = $815;
 $819 = (($817) + 4)|0;
 $820 = $819;
 HEAP32[$820>>2] = $816;
 $821 = $795 ^ $815;
 $822 = $796 ^ $816;
 $823 = (_rotr64($821,$822,63)|0);
 $824 = tempRet0;
 $825 = $156;
 $826 = $825;
 HEAP32[$826>>2] = $823;
 $827 = (($825) + 4)|0;
 $828 = $827;
 HEAP32[$828>>2] = $824;
 $829 = (_i64Add(($649|0),($650|0),($717|0),($718|0))|0);
 $830 = tempRet0;
 $831 = $2;
 $832 = $831;
 $833 = HEAP32[$832>>2]|0;
 $834 = (($831) + 4)|0;
 $835 = $834;
 $836 = HEAP32[$835>>2]|0;
 $837 = (_i64Add(($829|0),($830|0),($833|0),($836|0))|0);
 $838 = tempRet0;
 $839 = $44;
 $840 = $839;
 $841 = HEAP32[$840>>2]|0;
 $842 = (($839) + 4)|0;
 $843 = $842;
 $844 = HEAP32[$843>>2]|0;
 $845 = $841 ^ $837;
 $846 = $844 ^ $838;
 $847 = (_rotr64($845,$846,32)|0);
 $848 = tempRet0;
 $849 = (_i64Add(($771|0),($772|0),($847|0),($848|0))|0);
 $850 = tempRet0;
 $851 = $717 ^ $849;
 $852 = $718 ^ $850;
 $853 = (_rotr64($851,$852,24)|0);
 $854 = tempRet0;
 $855 = (_i64Add(($837|0),($838|0),($853|0),($854|0))|0);
 $856 = tempRet0;
 $857 = $165;
 $858 = $857;
 $859 = HEAP32[$858>>2]|0;
 $860 = (($857) + 4)|0;
 $861 = $860;
 $862 = HEAP32[$861>>2]|0;
 $863 = (_i64Add(($855|0),($856|0),($859|0),($862|0))|0);
 $864 = tempRet0;
 $865 = $847 ^ $863;
 $866 = $848 ^ $864;
 $867 = (_rotr64($865,$866,16)|0);
 $868 = tempRet0;
 $869 = (_i64Add(($849|0),($850|0),($867|0),($868|0))|0);
 $870 = tempRet0;
 $871 = $30;
 $872 = $871;
 HEAP32[$872>>2] = $869;
 $873 = (($871) + 4)|0;
 $874 = $873;
 HEAP32[$874>>2] = $870;
 $875 = $853 ^ $869;
 $876 = $854 ^ $870;
 $877 = (_rotr64($875,$876,63)|0);
 $878 = tempRet0;
 $879 = $220;
 $880 = $879;
 HEAP32[$880>>2] = $877;
 $881 = (($879) + 4)|0;
 $882 = $881;
 HEAP32[$882>>2] = $878;
 $883 = (_i64Add(($703|0),($704|0),($775|0),($776|0))|0);
 $884 = tempRet0;
 $885 = $430;
 $886 = $885;
 $887 = HEAP32[$886>>2]|0;
 $888 = (($885) + 4)|0;
 $889 = $888;
 $890 = HEAP32[$889>>2]|0;
 $891 = (_i64Add(($883|0),($884|0),($887|0),($890|0))|0);
 $892 = tempRet0;
 $893 = $54;
 $894 = $893;
 $895 = HEAP32[$894>>2]|0;
 $896 = (($893) + 4)|0;
 $897 = $896;
 $898 = HEAP32[$897>>2]|0;
 $899 = $895 ^ $891;
 $900 = $898 ^ $892;
 $901 = (_rotr64($899,$900,32)|0);
 $902 = tempRet0;
 $903 = $27;
 $904 = $903;
 $905 = HEAP32[$904>>2]|0;
 $906 = (($903) + 4)|0;
 $907 = $906;
 $908 = HEAP32[$907>>2]|0;
 $909 = (_i64Add(($905|0),($908|0),($901|0),($902|0))|0);
 $910 = tempRet0;
 $911 = $775 ^ $909;
 $912 = $776 ^ $910;
 $913 = (_rotr64($911,$912,24)|0);
 $914 = tempRet0;
 $915 = (_i64Add(($891|0),($892|0),($913|0),($914|0))|0);
 $916 = tempRet0;
 $917 = $322;
 $918 = $917;
 $919 = HEAP32[$918>>2]|0;
 $920 = (($917) + 4)|0;
 $921 = $920;
 $922 = HEAP32[$921>>2]|0;
 $923 = (_i64Add(($915|0),($916|0),($919|0),($922|0))|0);
 $924 = tempRet0;
 $925 = $901 ^ $923;
 $926 = $902 ^ $924;
 $927 = (_rotr64($925,$926,16)|0);
 $928 = tempRet0;
 $929 = (_i64Add(($909|0),($910|0),($927|0),($928|0))|0);
 $930 = tempRet0;
 $931 = $913 ^ $929;
 $932 = $914 ^ $930;
 $933 = (_rotr64($931,$932,63)|0);
 $934 = tempRet0;
 $935 = $280;
 $936 = $935;
 HEAP32[$936>>2] = $933;
 $937 = (($935) + 4)|0;
 $938 = $937;
 HEAP32[$938>>2] = $934;
 $939 = $85;
 $940 = $939;
 $941 = HEAP32[$940>>2]|0;
 $942 = (($939) + 4)|0;
 $943 = $942;
 $944 = HEAP32[$943>>2]|0;
 $945 = (_i64Add(($765|0),($766|0),($941|0),($944|0))|0);
 $946 = tempRet0;
 $947 = $250;
 $948 = $947;
 $949 = HEAP32[$948>>2]|0;
 $950 = (($947) + 4)|0;
 $951 = $950;
 $952 = HEAP32[$951>>2]|0;
 $953 = (_i64Add(($945|0),($946|0),($949|0),($952|0))|0);
 $954 = tempRet0;
 $955 = $64;
 $956 = $955;
 $957 = HEAP32[$956>>2]|0;
 $958 = (($955) + 4)|0;
 $959 = $958;
 $960 = HEAP32[$959>>2]|0;
 $961 = $957 ^ $953;
 $962 = $960 ^ $954;
 $963 = (_rotr64($961,$962,32)|0);
 $964 = tempRet0;
 $965 = $28;
 $966 = $965;
 $967 = HEAP32[$966>>2]|0;
 $968 = (($965) + 4)|0;
 $969 = $968;
 $970 = HEAP32[$969>>2]|0;
 $971 = (_i64Add(($967|0),($970|0),($963|0),($964|0))|0);
 $972 = tempRet0;
 $973 = $941 ^ $971;
 $974 = $944 ^ $972;
 $975 = (_rotr64($973,$974,24)|0);
 $976 = tempRet0;
 $977 = (_i64Add(($953|0),($954|0),($975|0),($976|0))|0);
 $978 = tempRet0;
 $979 = $186;
 $980 = $979;
 $981 = HEAP32[$980>>2]|0;
 $982 = (($979) + 4)|0;
 $983 = $982;
 $984 = HEAP32[$983>>2]|0;
 $985 = (_i64Add(($977|0),($978|0),($981|0),($984|0))|0);
 $986 = tempRet0;
 $987 = $963 ^ $985;
 $988 = $964 ^ $986;
 $989 = (_rotr64($987,$988,16)|0);
 $990 = tempRet0;
 $991 = (_i64Add(($971|0),($972|0),($989|0),($990|0))|0);
 $992 = tempRet0;
 $993 = $975 ^ $991;
 $994 = $976 ^ $992;
 $995 = (_rotr64($993,$994,63)|0);
 $996 = tempRet0;
 $997 = (_i64Add(($805|0),($806|0),($995|0),($996|0))|0);
 $998 = tempRet0;
 $999 = (_i64Add(($997|0),($998|0),($887|0),($890|0))|0);
 $1000 = tempRet0;
 $1001 = $867 ^ $999;
 $1002 = $868 ^ $1000;
 $1003 = (_rotr64($1001,$1002,32)|0);
 $1004 = tempRet0;
 $1005 = (_i64Add(($929|0),($930|0),($1003|0),($1004|0))|0);
 $1006 = tempRet0;
 $1007 = $995 ^ $1005;
 $1008 = $996 ^ $1006;
 $1009 = (_rotr64($1007,$1008,24)|0);
 $1010 = tempRet0;
 $1011 = (_i64Add(($999|0),($1000|0),($1009|0),($1010|0))|0);
 $1012 = tempRet0;
 $1013 = $349;
 $1014 = $1013;
 $1015 = HEAP32[$1014>>2]|0;
 $1016 = (($1013) + 4)|0;
 $1017 = $1016;
 $1018 = HEAP32[$1017>>2]|0;
 $1019 = (_i64Add(($1011|0),($1012|0),($1015|0),($1018|0))|0);
 $1020 = tempRet0;
 $1021 = $1003 ^ $1019;
 $1022 = $1004 ^ $1020;
 $1023 = (_rotr64($1021,$1022,16)|0);
 $1024 = tempRet0;
 $1025 = $44;
 $1026 = $1025;
 HEAP32[$1026>>2] = $1023;
 $1027 = (($1025) + 4)|0;
 $1028 = $1027;
 HEAP32[$1028>>2] = $1024;
 $1029 = (_i64Add(($1005|0),($1006|0),($1023|0),($1024|0))|0);
 $1030 = tempRet0;
 $1031 = $27;
 $1032 = $1031;
 HEAP32[$1032>>2] = $1029;
 $1033 = (($1031) + 4)|0;
 $1034 = $1033;
 HEAP32[$1034>>2] = $1030;
 $1035 = $1009 ^ $1029;
 $1036 = $1010 ^ $1030;
 $1037 = (_rotr64($1035,$1036,63)|0);
 $1038 = tempRet0;
 $1039 = $85;
 $1040 = $1039;
 HEAP32[$1040>>2] = $1037;
 $1041 = (($1039) + 4)|0;
 $1042 = $1041;
 HEAP32[$1042>>2] = $1038;
 $1043 = $156;
 $1044 = $1043;
 $1045 = HEAP32[$1044>>2]|0;
 $1046 = (($1043) + 4)|0;
 $1047 = $1046;
 $1048 = HEAP32[$1047>>2]|0;
 $1049 = (_i64Add(($863|0),($864|0),($1045|0),($1048|0))|0);
 $1050 = tempRet0;
 $1051 = $459;
 $1052 = $1051;
 $1053 = HEAP32[$1052>>2]|0;
 $1054 = (($1051) + 4)|0;
 $1055 = $1054;
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = (_i64Add(($1049|0),($1050|0),($1053|0),($1056|0))|0);
 $1058 = tempRet0;
 $1059 = $927 ^ $1057;
 $1060 = $928 ^ $1058;
 $1061 = (_rotr64($1059,$1060,32)|0);
 $1062 = tempRet0;
 $1063 = (_i64Add(($991|0),($992|0),($1061|0),($1062|0))|0);
 $1064 = tempRet0;
 $1065 = $1045 ^ $1063;
 $1066 = $1048 ^ $1064;
 $1067 = (_rotr64($1065,$1066,24)|0);
 $1068 = tempRet0;
 $1069 = (_i64Add(($1057|0),($1058|0),($1067|0),($1068|0))|0);
 $1070 = tempRet0;
 $1071 = $2;
 $1072 = $1071;
 $1073 = HEAP32[$1072>>2]|0;
 $1074 = (($1071) + 4)|0;
 $1075 = $1074;
 $1076 = HEAP32[$1075>>2]|0;
 $1077 = (_i64Add(($1069|0),($1070|0),($1073|0),($1076|0))|0);
 $1078 = tempRet0;
 $1079 = $1061 ^ $1077;
 $1080 = $1062 ^ $1078;
 $1081 = (_rotr64($1079,$1080,16)|0);
 $1082 = tempRet0;
 $1083 = $54;
 $1084 = $1083;
 HEAP32[$1084>>2] = $1081;
 $1085 = (($1083) + 4)|0;
 $1086 = $1085;
 HEAP32[$1086>>2] = $1082;
 $1087 = (_i64Add(($1063|0),($1064|0),($1081|0),($1082|0))|0);
 $1088 = tempRet0;
 $1089 = $28;
 $1090 = $1089;
 HEAP32[$1090>>2] = $1087;
 $1091 = (($1089) + 4)|0;
 $1092 = $1091;
 HEAP32[$1092>>2] = $1088;
 $1093 = $1067 ^ $1087;
 $1094 = $1068 ^ $1088;
 $1095 = (_rotr64($1093,$1094,63)|0);
 $1096 = tempRet0;
 $1097 = $220;
 $1098 = $1097;
 $1099 = HEAP32[$1098>>2]|0;
 $1100 = (($1097) + 4)|0;
 $1101 = $1100;
 $1102 = HEAP32[$1101>>2]|0;
 $1103 = (_i64Add(($923|0),($924|0),($1099|0),($1102|0))|0);
 $1104 = tempRet0;
 $1105 = (_i64Add(($1103|0),($1104|0),($949|0),($952|0))|0);
 $1106 = tempRet0;
 $1107 = $989 ^ $1105;
 $1108 = $990 ^ $1106;
 $1109 = (_rotr64($1107,$1108,32)|0);
 $1110 = tempRet0;
 $1111 = $29;
 $1112 = $1111;
 $1113 = HEAP32[$1112>>2]|0;
 $1114 = (($1111) + 4)|0;
 $1115 = $1114;
 $1116 = HEAP32[$1115>>2]|0;
 $1117 = (_i64Add(($1113|0),($1116|0),($1109|0),($1110|0))|0);
 $1118 = tempRet0;
 $1119 = $1099 ^ $1117;
 $1120 = $1102 ^ $1118;
 $1121 = (_rotr64($1119,$1120,24)|0);
 $1122 = tempRet0;
 $1123 = (_i64Add(($1105|0),($1106|0),($1121|0),($1122|0))|0);
 $1124 = tempRet0;
 $1125 = $165;
 $1126 = $1125;
 $1127 = HEAP32[$1126>>2]|0;
 $1128 = (($1125) + 4)|0;
 $1129 = $1128;
 $1130 = HEAP32[$1129>>2]|0;
 $1131 = (_i64Add(($1123|0),($1124|0),($1127|0),($1130|0))|0);
 $1132 = tempRet0;
 $1133 = $1109 ^ $1131;
 $1134 = $1110 ^ $1132;
 $1135 = (_rotr64($1133,$1134,16)|0);
 $1136 = tempRet0;
 $1137 = $64;
 $1138 = $1137;
 HEAP32[$1138>>2] = $1135;
 $1139 = (($1137) + 4)|0;
 $1140 = $1139;
 HEAP32[$1140>>2] = $1136;
 $1141 = (_i64Add(($1117|0),($1118|0),($1135|0),($1136|0))|0);
 $1142 = tempRet0;
 $1143 = $1121 ^ $1141;
 $1144 = $1122 ^ $1142;
 $1145 = (_rotr64($1143,$1144,63)|0);
 $1146 = tempRet0;
 $1147 = $280;
 $1148 = $1147;
 $1149 = HEAP32[$1148>>2]|0;
 $1150 = (($1147) + 4)|0;
 $1151 = $1150;
 $1152 = HEAP32[$1151>>2]|0;
 $1153 = (_i64Add(($985|0),($986|0),($1149|0),($1152|0))|0);
 $1154 = tempRet0;
 $1155 = $556;
 $1156 = $1155;
 $1157 = HEAP32[$1156>>2]|0;
 $1158 = (($1155) + 4)|0;
 $1159 = $1158;
 $1160 = HEAP32[$1159>>2]|0;
 $1161 = (_i64Add(($1153|0),($1154|0),($1157|0),($1160|0))|0);
 $1162 = tempRet0;
 $1163 = $74;
 $1164 = $1163;
 $1165 = HEAP32[$1164>>2]|0;
 $1166 = (($1163) + 4)|0;
 $1167 = $1166;
 $1168 = HEAP32[$1167>>2]|0;
 $1169 = $1165 ^ $1161;
 $1170 = $1168 ^ $1162;
 $1171 = (_rotr64($1169,$1170,32)|0);
 $1172 = tempRet0;
 $1173 = $30;
 $1174 = $1173;
 $1175 = HEAP32[$1174>>2]|0;
 $1176 = (($1173) + 4)|0;
 $1177 = $1176;
 $1178 = HEAP32[$1177>>2]|0;
 $1179 = (_i64Add(($1175|0),($1178|0),($1171|0),($1172|0))|0);
 $1180 = tempRet0;
 $1181 = $1149 ^ $1179;
 $1182 = $1152 ^ $1180;
 $1183 = (_rotr64($1181,$1182,24)|0);
 $1184 = tempRet0;
 $1185 = (_i64Add(($1161|0),($1162|0),($1183|0),($1184|0))|0);
 $1186 = tempRet0;
 $1187 = $492;
 $1188 = $1187;
 $1189 = HEAP32[$1188>>2]|0;
 $1190 = (($1187) + 4)|0;
 $1191 = $1190;
 $1192 = HEAP32[$1191>>2]|0;
 $1193 = (_i64Add(($1185|0),($1186|0),($1189|0),($1192|0))|0);
 $1194 = tempRet0;
 $1195 = $1171 ^ $1193;
 $1196 = $1172 ^ $1194;
 $1197 = (_rotr64($1195,$1196,16)|0);
 $1198 = tempRet0;
 $1199 = (_i64Add(($1179|0),($1180|0),($1197|0),($1198|0))|0);
 $1200 = tempRet0;
 $1201 = $1183 ^ $1199;
 $1202 = $1184 ^ $1200;
 $1203 = (_rotr64($1201,$1202,63)|0);
 $1204 = tempRet0;
 $1205 = (_i64Add(($1019|0),($1020|0),($1095|0),($1096|0))|0);
 $1206 = tempRet0;
 $1207 = $403;
 $1208 = $1207;
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = (($1207) + 4)|0;
 $1211 = $1210;
 $1212 = HEAP32[$1211>>2]|0;
 $1213 = (_i64Add(($1205|0),($1206|0),($1209|0),($1212|0))|0);
 $1214 = tempRet0;
 $1215 = $1197 ^ $1213;
 $1216 = $1198 ^ $1214;
 $1217 = (_rotr64($1215,$1216,32)|0);
 $1218 = tempRet0;
 $1219 = (_i64Add(($1141|0),($1142|0),($1217|0),($1218|0))|0);
 $1220 = tempRet0;
 $1221 = $1095 ^ $1219;
 $1222 = $1096 ^ $1220;
 $1223 = (_rotr64($1221,$1222,24)|0);
 $1224 = tempRet0;
 $1225 = (_i64Add(($1213|0),($1214|0),($1223|0),($1224|0))|0);
 $1226 = tempRet0;
 $1227 = $523;
 $1228 = $1227;
 $1229 = HEAP32[$1228>>2]|0;
 $1230 = (($1227) + 4)|0;
 $1231 = $1230;
 $1232 = HEAP32[$1231>>2]|0;
 $1233 = (_i64Add(($1225|0),($1226|0),($1229|0),($1232|0))|0);
 $1234 = tempRet0;
 $1235 = $1217 ^ $1233;
 $1236 = $1218 ^ $1234;
 $1237 = (_rotr64($1235,$1236,16)|0);
 $1238 = tempRet0;
 $1239 = $74;
 $1240 = $1239;
 HEAP32[$1240>>2] = $1237;
 $1241 = (($1239) + 4)|0;
 $1242 = $1241;
 HEAP32[$1242>>2] = $1238;
 $1243 = (_i64Add(($1219|0),($1220|0),($1237|0),($1238|0))|0);
 $1244 = tempRet0;
 $1245 = $29;
 $1246 = $1245;
 HEAP32[$1246>>2] = $1243;
 $1247 = (($1245) + 4)|0;
 $1248 = $1247;
 HEAP32[$1248>>2] = $1244;
 $1249 = $1223 ^ $1243;
 $1250 = $1224 ^ $1244;
 $1251 = (_rotr64($1249,$1250,63)|0);
 $1252 = tempRet0;
 $1253 = $156;
 $1254 = $1253;
 HEAP32[$1254>>2] = $1251;
 $1255 = (($1253) + 4)|0;
 $1256 = $1255;
 HEAP32[$1256>>2] = $1252;
 $1257 = (_i64Add(($1077|0),($1078|0),($1145|0),($1146|0))|0);
 $1258 = tempRet0;
 $1259 = $186;
 $1260 = $1259;
 $1261 = HEAP32[$1260>>2]|0;
 $1262 = (($1259) + 4)|0;
 $1263 = $1262;
 $1264 = HEAP32[$1263>>2]|0;
 $1265 = (_i64Add(($1257|0),($1258|0),($1261|0),($1264|0))|0);
 $1266 = tempRet0;
 $1267 = $44;
 $1268 = $1267;
 $1269 = HEAP32[$1268>>2]|0;
 $1270 = (($1267) + 4)|0;
 $1271 = $1270;
 $1272 = HEAP32[$1271>>2]|0;
 $1273 = $1269 ^ $1265;
 $1274 = $1272 ^ $1266;
 $1275 = (_rotr64($1273,$1274,32)|0);
 $1276 = tempRet0;
 $1277 = (_i64Add(($1199|0),($1200|0),($1275|0),($1276|0))|0);
 $1278 = tempRet0;
 $1279 = $1145 ^ $1277;
 $1280 = $1146 ^ $1278;
 $1281 = (_rotr64($1279,$1280,24)|0);
 $1282 = tempRet0;
 $1283 = (_i64Add(($1265|0),($1266|0),($1281|0),($1282|0))|0);
 $1284 = tempRet0;
 $1285 = $289;
 $1286 = $1285;
 $1287 = HEAP32[$1286>>2]|0;
 $1288 = (($1285) + 4)|0;
 $1289 = $1288;
 $1290 = HEAP32[$1289>>2]|0;
 $1291 = (_i64Add(($1283|0),($1284|0),($1287|0),($1290|0))|0);
 $1292 = tempRet0;
 $1293 = $1275 ^ $1291;
 $1294 = $1276 ^ $1292;
 $1295 = (_rotr64($1293,$1294,16)|0);
 $1296 = tempRet0;
 $1297 = (_i64Add(($1277|0),($1278|0),($1295|0),($1296|0))|0);
 $1298 = tempRet0;
 $1299 = $30;
 $1300 = $1299;
 HEAP32[$1300>>2] = $1297;
 $1301 = (($1299) + 4)|0;
 $1302 = $1301;
 HEAP32[$1302>>2] = $1298;
 $1303 = $1281 ^ $1297;
 $1304 = $1282 ^ $1298;
 $1305 = (_rotr64($1303,$1304,63)|0);
 $1306 = tempRet0;
 $1307 = $220;
 $1308 = $1307;
 HEAP32[$1308>>2] = $1305;
 $1309 = (($1307) + 4)|0;
 $1310 = $1309;
 HEAP32[$1310>>2] = $1306;
 $1311 = (_i64Add(($1131|0),($1132|0),($1203|0),($1204|0))|0);
 $1312 = tempRet0;
 $1313 = $322;
 $1314 = $1313;
 $1315 = HEAP32[$1314>>2]|0;
 $1316 = (($1313) + 4)|0;
 $1317 = $1316;
 $1318 = HEAP32[$1317>>2]|0;
 $1319 = (_i64Add(($1311|0),($1312|0),($1315|0),($1318|0))|0);
 $1320 = tempRet0;
 $1321 = $54;
 $1322 = $1321;
 $1323 = HEAP32[$1322>>2]|0;
 $1324 = (($1321) + 4)|0;
 $1325 = $1324;
 $1326 = HEAP32[$1325>>2]|0;
 $1327 = $1323 ^ $1319;
 $1328 = $1326 ^ $1320;
 $1329 = (_rotr64($1327,$1328,32)|0);
 $1330 = tempRet0;
 $1331 = $27;
 $1332 = $1331;
 $1333 = HEAP32[$1332>>2]|0;
 $1334 = (($1331) + 4)|0;
 $1335 = $1334;
 $1336 = HEAP32[$1335>>2]|0;
 $1337 = (_i64Add(($1333|0),($1336|0),($1329|0),($1330|0))|0);
 $1338 = tempRet0;
 $1339 = $1203 ^ $1337;
 $1340 = $1204 ^ $1338;
 $1341 = (_rotr64($1339,$1340,24)|0);
 $1342 = tempRet0;
 $1343 = (_i64Add(($1319|0),($1320|0),($1341|0),($1342|0))|0);
 $1344 = tempRet0;
 $1345 = $114;
 $1346 = $1345;
 $1347 = HEAP32[$1346>>2]|0;
 $1348 = (($1345) + 4)|0;
 $1349 = $1348;
 $1350 = HEAP32[$1349>>2]|0;
 $1351 = (_i64Add(($1343|0),($1344|0),($1347|0),($1350|0))|0);
 $1352 = tempRet0;
 $1353 = $1329 ^ $1351;
 $1354 = $1330 ^ $1352;
 $1355 = (_rotr64($1353,$1354,16)|0);
 $1356 = tempRet0;
 $1357 = (_i64Add(($1337|0),($1338|0),($1355|0),($1356|0))|0);
 $1358 = tempRet0;
 $1359 = $1341 ^ $1357;
 $1360 = $1342 ^ $1358;
 $1361 = (_rotr64($1359,$1360,63)|0);
 $1362 = tempRet0;
 $1363 = $280;
 $1364 = $1363;
 HEAP32[$1364>>2] = $1361;
 $1365 = (($1363) + 4)|0;
 $1366 = $1365;
 HEAP32[$1366>>2] = $1362;
 $1367 = $85;
 $1368 = $1367;
 $1369 = HEAP32[$1368>>2]|0;
 $1370 = (($1367) + 4)|0;
 $1371 = $1370;
 $1372 = HEAP32[$1371>>2]|0;
 $1373 = (_i64Add(($1193|0),($1194|0),($1369|0),($1372|0))|0);
 $1374 = tempRet0;
 $1375 = $370;
 $1376 = $1375;
 $1377 = HEAP32[$1376>>2]|0;
 $1378 = (($1375) + 4)|0;
 $1379 = $1378;
 $1380 = HEAP32[$1379>>2]|0;
 $1381 = (_i64Add(($1373|0),($1374|0),($1377|0),($1380|0))|0);
 $1382 = tempRet0;
 $1383 = $64;
 $1384 = $1383;
 $1385 = HEAP32[$1384>>2]|0;
 $1386 = (($1383) + 4)|0;
 $1387 = $1386;
 $1388 = HEAP32[$1387>>2]|0;
 $1389 = $1385 ^ $1381;
 $1390 = $1388 ^ $1382;
 $1391 = (_rotr64($1389,$1390,32)|0);
 $1392 = tempRet0;
 $1393 = $28;
 $1394 = $1393;
 $1395 = HEAP32[$1394>>2]|0;
 $1396 = (($1393) + 4)|0;
 $1397 = $1396;
 $1398 = HEAP32[$1397>>2]|0;
 $1399 = (_i64Add(($1395|0),($1398|0),($1391|0),($1392|0))|0);
 $1400 = tempRet0;
 $1401 = $1369 ^ $1399;
 $1402 = $1372 ^ $1400;
 $1403 = (_rotr64($1401,$1402,24)|0);
 $1404 = tempRet0;
 $1405 = (_i64Add(($1381|0),($1382|0),($1403|0),($1404|0))|0);
 $1406 = tempRet0;
 $1407 = $229;
 $1408 = $1407;
 $1409 = HEAP32[$1408>>2]|0;
 $1410 = (($1407) + 4)|0;
 $1411 = $1410;
 $1412 = HEAP32[$1411>>2]|0;
 $1413 = (_i64Add(($1405|0),($1406|0),($1409|0),($1412|0))|0);
 $1414 = tempRet0;
 $1415 = $1391 ^ $1413;
 $1416 = $1392 ^ $1414;
 $1417 = (_rotr64($1415,$1416,16)|0);
 $1418 = tempRet0;
 $1419 = (_i64Add(($1399|0),($1400|0),($1417|0),($1418|0))|0);
 $1420 = tempRet0;
 $1421 = $1403 ^ $1419;
 $1422 = $1404 ^ $1420;
 $1423 = (_rotr64($1421,$1422,63)|0);
 $1424 = tempRet0;
 $1425 = (_i64Add(($1233|0),($1234|0),($1423|0),($1424|0))|0);
 $1426 = tempRet0;
 $1427 = (_i64Add(($1425|0),($1426|0),($1315|0),($1318|0))|0);
 $1428 = tempRet0;
 $1429 = $1295 ^ $1427;
 $1430 = $1296 ^ $1428;
 $1431 = (_rotr64($1429,$1430,32)|0);
 $1432 = tempRet0;
 $1433 = (_i64Add(($1357|0),($1358|0),($1431|0),($1432|0))|0);
 $1434 = tempRet0;
 $1435 = $1423 ^ $1433;
 $1436 = $1424 ^ $1434;
 $1437 = (_rotr64($1435,$1436,24)|0);
 $1438 = tempRet0;
 $1439 = (_i64Add(($1427|0),($1428|0),($1437|0),($1438|0))|0);
 $1440 = tempRet0;
 $1441 = (_i64Add(($1439|0),($1440|0),($1377|0),($1380|0))|0);
 $1442 = tempRet0;
 $1443 = $1431 ^ $1441;
 $1444 = $1432 ^ $1442;
 $1445 = (_rotr64($1443,$1444,16)|0);
 $1446 = tempRet0;
 $1447 = $44;
 $1448 = $1447;
 HEAP32[$1448>>2] = $1445;
 $1449 = (($1447) + 4)|0;
 $1450 = $1449;
 HEAP32[$1450>>2] = $1446;
 $1451 = (_i64Add(($1433|0),($1434|0),($1445|0),($1446|0))|0);
 $1452 = tempRet0;
 $1453 = $27;
 $1454 = $1453;
 HEAP32[$1454>>2] = $1451;
 $1455 = (($1453) + 4)|0;
 $1456 = $1455;
 HEAP32[$1456>>2] = $1452;
 $1457 = $1437 ^ $1451;
 $1458 = $1438 ^ $1452;
 $1459 = (_rotr64($1457,$1458,63)|0);
 $1460 = tempRet0;
 $1461 = $85;
 $1462 = $1461;
 HEAP32[$1462>>2] = $1459;
 $1463 = (($1461) + 4)|0;
 $1464 = $1463;
 HEAP32[$1464>>2] = $1460;
 $1465 = $156;
 $1466 = $1465;
 $1467 = HEAP32[$1466>>2]|0;
 $1468 = (($1465) + 4)|0;
 $1469 = $1468;
 $1470 = HEAP32[$1469>>2]|0;
 $1471 = (_i64Add(($1291|0),($1292|0),($1467|0),($1470|0))|0);
 $1472 = tempRet0;
 $1473 = $186;
 $1474 = $1473;
 $1475 = HEAP32[$1474>>2]|0;
 $1476 = (($1473) + 4)|0;
 $1477 = $1476;
 $1478 = HEAP32[$1477>>2]|0;
 $1479 = (_i64Add(($1471|0),($1472|0),($1475|0),($1478|0))|0);
 $1480 = tempRet0;
 $1481 = $1355 ^ $1479;
 $1482 = $1356 ^ $1480;
 $1483 = (_rotr64($1481,$1482,32)|0);
 $1484 = tempRet0;
 $1485 = (_i64Add(($1419|0),($1420|0),($1483|0),($1484|0))|0);
 $1486 = tempRet0;
 $1487 = $1467 ^ $1485;
 $1488 = $1470 ^ $1486;
 $1489 = (_rotr64($1487,$1488,24)|0);
 $1490 = tempRet0;
 $1491 = (_i64Add(($1479|0),($1480|0),($1489|0),($1490|0))|0);
 $1492 = tempRet0;
 $1493 = (_i64Add(($1491|0),($1492|0),($1347|0),($1350|0))|0);
 $1494 = tempRet0;
 $1495 = $1483 ^ $1493;
 $1496 = $1484 ^ $1494;
 $1497 = (_rotr64($1495,$1496,16)|0);
 $1498 = tempRet0;
 $1499 = $54;
 $1500 = $1499;
 HEAP32[$1500>>2] = $1497;
 $1501 = (($1499) + 4)|0;
 $1502 = $1501;
 HEAP32[$1502>>2] = $1498;
 $1503 = (_i64Add(($1485|0),($1486|0),($1497|0),($1498|0))|0);
 $1504 = tempRet0;
 $1505 = $28;
 $1506 = $1505;
 HEAP32[$1506>>2] = $1503;
 $1507 = (($1505) + 4)|0;
 $1508 = $1507;
 HEAP32[$1508>>2] = $1504;
 $1509 = $1489 ^ $1503;
 $1510 = $1490 ^ $1504;
 $1511 = (_rotr64($1509,$1510,63)|0);
 $1512 = tempRet0;
 $1513 = $220;
 $1514 = $1513;
 $1515 = HEAP32[$1514>>2]|0;
 $1516 = (($1513) + 4)|0;
 $1517 = $1516;
 $1518 = HEAP32[$1517>>2]|0;
 $1519 = (_i64Add(($1351|0),($1352|0),($1515|0),($1518|0))|0);
 $1520 = tempRet0;
 $1521 = $492;
 $1522 = $1521;
 $1523 = HEAP32[$1522>>2]|0;
 $1524 = (($1521) + 4)|0;
 $1525 = $1524;
 $1526 = HEAP32[$1525>>2]|0;
 $1527 = (_i64Add(($1519|0),($1520|0),($1523|0),($1526|0))|0);
 $1528 = tempRet0;
 $1529 = $1417 ^ $1527;
 $1530 = $1418 ^ $1528;
 $1531 = (_rotr64($1529,$1530,32)|0);
 $1532 = tempRet0;
 $1533 = $29;
 $1534 = $1533;
 $1535 = HEAP32[$1534>>2]|0;
 $1536 = (($1533) + 4)|0;
 $1537 = $1536;
 $1538 = HEAP32[$1537>>2]|0;
 $1539 = (_i64Add(($1535|0),($1538|0),($1531|0),($1532|0))|0);
 $1540 = tempRet0;
 $1541 = $1515 ^ $1539;
 $1542 = $1518 ^ $1540;
 $1543 = (_rotr64($1541,$1542,24)|0);
 $1544 = tempRet0;
 $1545 = (_i64Add(($1527|0),($1528|0),($1543|0),($1544|0))|0);
 $1546 = tempRet0;
 $1547 = $459;
 $1548 = $1547;
 $1549 = HEAP32[$1548>>2]|0;
 $1550 = (($1547) + 4)|0;
 $1551 = $1550;
 $1552 = HEAP32[$1551>>2]|0;
 $1553 = (_i64Add(($1545|0),($1546|0),($1549|0),($1552|0))|0);
 $1554 = tempRet0;
 $1555 = $1531 ^ $1553;
 $1556 = $1532 ^ $1554;
 $1557 = (_rotr64($1555,$1556,16)|0);
 $1558 = tempRet0;
 $1559 = $64;
 $1560 = $1559;
 HEAP32[$1560>>2] = $1557;
 $1561 = (($1559) + 4)|0;
 $1562 = $1561;
 HEAP32[$1562>>2] = $1558;
 $1563 = (_i64Add(($1539|0),($1540|0),($1557|0),($1558|0))|0);
 $1564 = tempRet0;
 $1565 = $1543 ^ $1563;
 $1566 = $1544 ^ $1564;
 $1567 = (_rotr64($1565,$1566,63)|0);
 $1568 = tempRet0;
 $1569 = $280;
 $1570 = $1569;
 $1571 = HEAP32[$1570>>2]|0;
 $1572 = (($1569) + 4)|0;
 $1573 = $1572;
 $1574 = HEAP32[$1573>>2]|0;
 $1575 = (_i64Add(($1413|0),($1414|0),($1571|0),($1574|0))|0);
 $1576 = tempRet0;
 $1577 = $430;
 $1578 = $1577;
 $1579 = HEAP32[$1578>>2]|0;
 $1580 = (($1577) + 4)|0;
 $1581 = $1580;
 $1582 = HEAP32[$1581>>2]|0;
 $1583 = (_i64Add(($1575|0),($1576|0),($1579|0),($1582|0))|0);
 $1584 = tempRet0;
 $1585 = $74;
 $1586 = $1585;
 $1587 = HEAP32[$1586>>2]|0;
 $1588 = (($1585) + 4)|0;
 $1589 = $1588;
 $1590 = HEAP32[$1589>>2]|0;
 $1591 = $1587 ^ $1583;
 $1592 = $1590 ^ $1584;
 $1593 = (_rotr64($1591,$1592,32)|0);
 $1594 = tempRet0;
 $1595 = $30;
 $1596 = $1595;
 $1597 = HEAP32[$1596>>2]|0;
 $1598 = (($1595) + 4)|0;
 $1599 = $1598;
 $1600 = HEAP32[$1599>>2]|0;
 $1601 = (_i64Add(($1597|0),($1600|0),($1593|0),($1594|0))|0);
 $1602 = tempRet0;
 $1603 = $1571 ^ $1601;
 $1604 = $1574 ^ $1602;
 $1605 = (_rotr64($1603,$1604,24)|0);
 $1606 = tempRet0;
 $1607 = (_i64Add(($1583|0),($1584|0),($1605|0),($1606|0))|0);
 $1608 = tempRet0;
 $1609 = $523;
 $1610 = $1609;
 $1611 = HEAP32[$1610>>2]|0;
 $1612 = (($1609) + 4)|0;
 $1613 = $1612;
 $1614 = HEAP32[$1613>>2]|0;
 $1615 = (_i64Add(($1607|0),($1608|0),($1611|0),($1614|0))|0);
 $1616 = tempRet0;
 $1617 = $1593 ^ $1615;
 $1618 = $1594 ^ $1616;
 $1619 = (_rotr64($1617,$1618,16)|0);
 $1620 = tempRet0;
 $1621 = (_i64Add(($1601|0),($1602|0),($1619|0),($1620|0))|0);
 $1622 = tempRet0;
 $1623 = $1605 ^ $1621;
 $1624 = $1606 ^ $1622;
 $1625 = (_rotr64($1623,$1624,63)|0);
 $1626 = tempRet0;
 $1627 = (_i64Add(($1441|0),($1442|0),($1511|0),($1512|0))|0);
 $1628 = tempRet0;
 $1629 = $165;
 $1630 = $1629;
 $1631 = HEAP32[$1630>>2]|0;
 $1632 = (($1629) + 4)|0;
 $1633 = $1632;
 $1634 = HEAP32[$1633>>2]|0;
 $1635 = (_i64Add(($1627|0),($1628|0),($1631|0),($1634|0))|0);
 $1636 = tempRet0;
 $1637 = $1619 ^ $1635;
 $1638 = $1620 ^ $1636;
 $1639 = (_rotr64($1637,$1638,32)|0);
 $1640 = tempRet0;
 $1641 = (_i64Add(($1563|0),($1564|0),($1639|0),($1640|0))|0);
 $1642 = tempRet0;
 $1643 = $1511 ^ $1641;
 $1644 = $1512 ^ $1642;
 $1645 = (_rotr64($1643,$1644,24)|0);
 $1646 = tempRet0;
 $1647 = (_i64Add(($1635|0),($1636|0),($1645|0),($1646|0))|0);
 $1648 = tempRet0;
 $1649 = $289;
 $1650 = $1649;
 $1651 = HEAP32[$1650>>2]|0;
 $1652 = (($1649) + 4)|0;
 $1653 = $1652;
 $1654 = HEAP32[$1653>>2]|0;
 $1655 = (_i64Add(($1647|0),($1648|0),($1651|0),($1654|0))|0);
 $1656 = tempRet0;
 $1657 = $1639 ^ $1655;
 $1658 = $1640 ^ $1656;
 $1659 = (_rotr64($1657,$1658,16)|0);
 $1660 = tempRet0;
 $1661 = $74;
 $1662 = $1661;
 HEAP32[$1662>>2] = $1659;
 $1663 = (($1661) + 4)|0;
 $1664 = $1663;
 HEAP32[$1664>>2] = $1660;
 $1665 = (_i64Add(($1641|0),($1642|0),($1659|0),($1660|0))|0);
 $1666 = tempRet0;
 $1667 = $29;
 $1668 = $1667;
 HEAP32[$1668>>2] = $1665;
 $1669 = (($1667) + 4)|0;
 $1670 = $1669;
 HEAP32[$1670>>2] = $1666;
 $1671 = $1645 ^ $1665;
 $1672 = $1646 ^ $1666;
 $1673 = (_rotr64($1671,$1672,63)|0);
 $1674 = tempRet0;
 $1675 = $156;
 $1676 = $1675;
 HEAP32[$1676>>2] = $1673;
 $1677 = (($1675) + 4)|0;
 $1678 = $1677;
 HEAP32[$1678>>2] = $1674;
 $1679 = (_i64Add(($1493|0),($1494|0),($1567|0),($1568|0))|0);
 $1680 = tempRet0;
 $1681 = $250;
 $1682 = $1681;
 $1683 = HEAP32[$1682>>2]|0;
 $1684 = (($1681) + 4)|0;
 $1685 = $1684;
 $1686 = HEAP32[$1685>>2]|0;
 $1687 = (_i64Add(($1679|0),($1680|0),($1683|0),($1686|0))|0);
 $1688 = tempRet0;
 $1689 = $44;
 $1690 = $1689;
 $1691 = HEAP32[$1690>>2]|0;
 $1692 = (($1689) + 4)|0;
 $1693 = $1692;
 $1694 = HEAP32[$1693>>2]|0;
 $1695 = $1691 ^ $1687;
 $1696 = $1694 ^ $1688;
 $1697 = (_rotr64($1695,$1696,32)|0);
 $1698 = tempRet0;
 $1699 = (_i64Add(($1621|0),($1622|0),($1697|0),($1698|0))|0);
 $1700 = tempRet0;
 $1701 = $1567 ^ $1699;
 $1702 = $1568 ^ $1700;
 $1703 = (_rotr64($1701,$1702,24)|0);
 $1704 = tempRet0;
 $1705 = (_i64Add(($1687|0),($1688|0),($1703|0),($1704|0))|0);
 $1706 = tempRet0;
 $1707 = $403;
 $1708 = $1707;
 $1709 = HEAP32[$1708>>2]|0;
 $1710 = (($1707) + 4)|0;
 $1711 = $1710;
 $1712 = HEAP32[$1711>>2]|0;
 $1713 = (_i64Add(($1705|0),($1706|0),($1709|0),($1712|0))|0);
 $1714 = tempRet0;
 $1715 = $1697 ^ $1713;
 $1716 = $1698 ^ $1714;
 $1717 = (_rotr64($1715,$1716,16)|0);
 $1718 = tempRet0;
 $1719 = (_i64Add(($1699|0),($1700|0),($1717|0),($1718|0))|0);
 $1720 = tempRet0;
 $1721 = $30;
 $1722 = $1721;
 HEAP32[$1722>>2] = $1719;
 $1723 = (($1721) + 4)|0;
 $1724 = $1723;
 HEAP32[$1724>>2] = $1720;
 $1725 = $1703 ^ $1719;
 $1726 = $1704 ^ $1720;
 $1727 = (_rotr64($1725,$1726,63)|0);
 $1728 = tempRet0;
 $1729 = $220;
 $1730 = $1729;
 HEAP32[$1730>>2] = $1727;
 $1731 = (($1729) + 4)|0;
 $1732 = $1731;
 HEAP32[$1732>>2] = $1728;
 $1733 = (_i64Add(($1553|0),($1554|0),($1625|0),($1626|0))|0);
 $1734 = tempRet0;
 $1735 = $229;
 $1736 = $1735;
 $1737 = HEAP32[$1736>>2]|0;
 $1738 = (($1735) + 4)|0;
 $1739 = $1738;
 $1740 = HEAP32[$1739>>2]|0;
 $1741 = (_i64Add(($1733|0),($1734|0),($1737|0),($1740|0))|0);
 $1742 = tempRet0;
 $1743 = $54;
 $1744 = $1743;
 $1745 = HEAP32[$1744>>2]|0;
 $1746 = (($1743) + 4)|0;
 $1747 = $1746;
 $1748 = HEAP32[$1747>>2]|0;
 $1749 = $1745 ^ $1741;
 $1750 = $1748 ^ $1742;
 $1751 = (_rotr64($1749,$1750,32)|0);
 $1752 = tempRet0;
 $1753 = $27;
 $1754 = $1753;
 $1755 = HEAP32[$1754>>2]|0;
 $1756 = (($1753) + 4)|0;
 $1757 = $1756;
 $1758 = HEAP32[$1757>>2]|0;
 $1759 = (_i64Add(($1755|0),($1758|0),($1751|0),($1752|0))|0);
 $1760 = tempRet0;
 $1761 = $1625 ^ $1759;
 $1762 = $1626 ^ $1760;
 $1763 = (_rotr64($1761,$1762,24)|0);
 $1764 = tempRet0;
 $1765 = (_i64Add(($1741|0),($1742|0),($1763|0),($1764|0))|0);
 $1766 = tempRet0;
 $1767 = $2;
 $1768 = $1767;
 $1769 = HEAP32[$1768>>2]|0;
 $1770 = (($1767) + 4)|0;
 $1771 = $1770;
 $1772 = HEAP32[$1771>>2]|0;
 $1773 = (_i64Add(($1765|0),($1766|0),($1769|0),($1772|0))|0);
 $1774 = tempRet0;
 $1775 = $1751 ^ $1773;
 $1776 = $1752 ^ $1774;
 $1777 = (_rotr64($1775,$1776,16)|0);
 $1778 = tempRet0;
 $1779 = (_i64Add(($1759|0),($1760|0),($1777|0),($1778|0))|0);
 $1780 = tempRet0;
 $1781 = $1763 ^ $1779;
 $1782 = $1764 ^ $1780;
 $1783 = (_rotr64($1781,$1782,63)|0);
 $1784 = tempRet0;
 $1785 = $280;
 $1786 = $1785;
 HEAP32[$1786>>2] = $1783;
 $1787 = (($1785) + 4)|0;
 $1788 = $1787;
 HEAP32[$1788>>2] = $1784;
 $1789 = $85;
 $1790 = $1789;
 $1791 = HEAP32[$1790>>2]|0;
 $1792 = (($1789) + 4)|0;
 $1793 = $1792;
 $1794 = HEAP32[$1793>>2]|0;
 $1795 = (_i64Add(($1615|0),($1616|0),($1791|0),($1794|0))|0);
 $1796 = tempRet0;
 $1797 = $556;
 $1798 = $1797;
 $1799 = HEAP32[$1798>>2]|0;
 $1800 = (($1797) + 4)|0;
 $1801 = $1800;
 $1802 = HEAP32[$1801>>2]|0;
 $1803 = (_i64Add(($1795|0),($1796|0),($1799|0),($1802|0))|0);
 $1804 = tempRet0;
 $1805 = $64;
 $1806 = $1805;
 $1807 = HEAP32[$1806>>2]|0;
 $1808 = (($1805) + 4)|0;
 $1809 = $1808;
 $1810 = HEAP32[$1809>>2]|0;
 $1811 = $1807 ^ $1803;
 $1812 = $1810 ^ $1804;
 $1813 = (_rotr64($1811,$1812,32)|0);
 $1814 = tempRet0;
 $1815 = $28;
 $1816 = $1815;
 $1817 = HEAP32[$1816>>2]|0;
 $1818 = (($1815) + 4)|0;
 $1819 = $1818;
 $1820 = HEAP32[$1819>>2]|0;
 $1821 = (_i64Add(($1817|0),($1820|0),($1813|0),($1814|0))|0);
 $1822 = tempRet0;
 $1823 = $1791 ^ $1821;
 $1824 = $1794 ^ $1822;
 $1825 = (_rotr64($1823,$1824,24)|0);
 $1826 = tempRet0;
 $1827 = (_i64Add(($1803|0),($1804|0),($1825|0),($1826|0))|0);
 $1828 = tempRet0;
 $1829 = $349;
 $1830 = $1829;
 $1831 = HEAP32[$1830>>2]|0;
 $1832 = (($1829) + 4)|0;
 $1833 = $1832;
 $1834 = HEAP32[$1833>>2]|0;
 $1835 = (_i64Add(($1827|0),($1828|0),($1831|0),($1834|0))|0);
 $1836 = tempRet0;
 $1837 = $1813 ^ $1835;
 $1838 = $1814 ^ $1836;
 $1839 = (_rotr64($1837,$1838,16)|0);
 $1840 = tempRet0;
 $1841 = (_i64Add(($1821|0),($1822|0),($1839|0),($1840|0))|0);
 $1842 = tempRet0;
 $1843 = $1825 ^ $1841;
 $1844 = $1826 ^ $1842;
 $1845 = (_rotr64($1843,$1844,63)|0);
 $1846 = tempRet0;
 $1847 = (_i64Add(($1655|0),($1656|0),($1845|0),($1846|0))|0);
 $1848 = tempRet0;
 $1849 = $370;
 $1850 = $1849;
 $1851 = HEAP32[$1850>>2]|0;
 $1852 = (($1849) + 4)|0;
 $1853 = $1852;
 $1854 = HEAP32[$1853>>2]|0;
 $1855 = (_i64Add(($1847|0),($1848|0),($1851|0),($1854|0))|0);
 $1856 = tempRet0;
 $1857 = $1717 ^ $1855;
 $1858 = $1718 ^ $1856;
 $1859 = (_rotr64($1857,$1858,32)|0);
 $1860 = tempRet0;
 $1861 = (_i64Add(($1779|0),($1780|0),($1859|0),($1860|0))|0);
 $1862 = tempRet0;
 $1863 = $1845 ^ $1861;
 $1864 = $1846 ^ $1862;
 $1865 = (_rotr64($1863,$1864,24)|0);
 $1866 = tempRet0;
 $1867 = (_i64Add(($1855|0),($1856|0),($1865|0),($1866|0))|0);
 $1868 = tempRet0;
 $1869 = (_i64Add(($1867|0),($1868|0),($1769|0),($1772|0))|0);
 $1870 = tempRet0;
 $1871 = $1859 ^ $1869;
 $1872 = $1860 ^ $1870;
 $1873 = (_rotr64($1871,$1872,16)|0);
 $1874 = tempRet0;
 $1875 = $44;
 $1876 = $1875;
 HEAP32[$1876>>2] = $1873;
 $1877 = (($1875) + 4)|0;
 $1878 = $1877;
 HEAP32[$1878>>2] = $1874;
 $1879 = (_i64Add(($1861|0),($1862|0),($1873|0),($1874|0))|0);
 $1880 = tempRet0;
 $1881 = $27;
 $1882 = $1881;
 HEAP32[$1882>>2] = $1879;
 $1883 = (($1881) + 4)|0;
 $1884 = $1883;
 HEAP32[$1884>>2] = $1880;
 $1885 = $1865 ^ $1879;
 $1886 = $1866 ^ $1880;
 $1887 = (_rotr64($1885,$1886,63)|0);
 $1888 = tempRet0;
 $1889 = $85;
 $1890 = $1889;
 HEAP32[$1890>>2] = $1887;
 $1891 = (($1889) + 4)|0;
 $1892 = $1891;
 HEAP32[$1892>>2] = $1888;
 $1893 = $156;
 $1894 = $1893;
 $1895 = HEAP32[$1894>>2]|0;
 $1896 = (($1893) + 4)|0;
 $1897 = $1896;
 $1898 = HEAP32[$1897>>2]|0;
 $1899 = (_i64Add(($1713|0),($1714|0),($1895|0),($1898|0))|0);
 $1900 = tempRet0;
 $1901 = $250;
 $1902 = $1901;
 $1903 = HEAP32[$1902>>2]|0;
 $1904 = (($1901) + 4)|0;
 $1905 = $1904;
 $1906 = HEAP32[$1905>>2]|0;
 $1907 = (_i64Add(($1899|0),($1900|0),($1903|0),($1906|0))|0);
 $1908 = tempRet0;
 $1909 = $1777 ^ $1907;
 $1910 = $1778 ^ $1908;
 $1911 = (_rotr64($1909,$1910,32)|0);
 $1912 = tempRet0;
 $1913 = (_i64Add(($1841|0),($1842|0),($1911|0),($1912|0))|0);
 $1914 = tempRet0;
 $1915 = $1895 ^ $1913;
 $1916 = $1898 ^ $1914;
 $1917 = (_rotr64($1915,$1916,24)|0);
 $1918 = tempRet0;
 $1919 = (_i64Add(($1907|0),($1908|0),($1917|0),($1918|0))|0);
 $1920 = tempRet0;
 $1921 = $322;
 $1922 = $1921;
 $1923 = HEAP32[$1922>>2]|0;
 $1924 = (($1921) + 4)|0;
 $1925 = $1924;
 $1926 = HEAP32[$1925>>2]|0;
 $1927 = (_i64Add(($1919|0),($1920|0),($1923|0),($1926|0))|0);
 $1928 = tempRet0;
 $1929 = $1911 ^ $1927;
 $1930 = $1912 ^ $1928;
 $1931 = (_rotr64($1929,$1930,16)|0);
 $1932 = tempRet0;
 $1933 = $54;
 $1934 = $1933;
 HEAP32[$1934>>2] = $1931;
 $1935 = (($1933) + 4)|0;
 $1936 = $1935;
 HEAP32[$1936>>2] = $1932;
 $1937 = (_i64Add(($1913|0),($1914|0),($1931|0),($1932|0))|0);
 $1938 = tempRet0;
 $1939 = $28;
 $1940 = $1939;
 HEAP32[$1940>>2] = $1937;
 $1941 = (($1939) + 4)|0;
 $1942 = $1941;
 HEAP32[$1942>>2] = $1938;
 $1943 = $1917 ^ $1937;
 $1944 = $1918 ^ $1938;
 $1945 = (_rotr64($1943,$1944,63)|0);
 $1946 = tempRet0;
 $1947 = $220;
 $1948 = $1947;
 $1949 = HEAP32[$1948>>2]|0;
 $1950 = (($1947) + 4)|0;
 $1951 = $1950;
 $1952 = HEAP32[$1951>>2]|0;
 $1953 = (_i64Add(($1773|0),($1774|0),($1949|0),($1952|0))|0);
 $1954 = tempRet0;
 $1955 = $165;
 $1956 = $1955;
 $1957 = HEAP32[$1956>>2]|0;
 $1958 = (($1955) + 4)|0;
 $1959 = $1958;
 $1960 = HEAP32[$1959>>2]|0;
 $1961 = (_i64Add(($1953|0),($1954|0),($1957|0),($1960|0))|0);
 $1962 = tempRet0;
 $1963 = $1839 ^ $1961;
 $1964 = $1840 ^ $1962;
 $1965 = (_rotr64($1963,$1964,32)|0);
 $1966 = tempRet0;
 $1967 = $29;
 $1968 = $1967;
 $1969 = HEAP32[$1968>>2]|0;
 $1970 = (($1967) + 4)|0;
 $1971 = $1970;
 $1972 = HEAP32[$1971>>2]|0;
 $1973 = (_i64Add(($1969|0),($1972|0),($1965|0),($1966|0))|0);
 $1974 = tempRet0;
 $1975 = $1949 ^ $1973;
 $1976 = $1952 ^ $1974;
 $1977 = (_rotr64($1975,$1976,24)|0);
 $1978 = tempRet0;
 $1979 = (_i64Add(($1961|0),($1962|0),($1977|0),($1978|0))|0);
 $1980 = tempRet0;
 $1981 = $229;
 $1982 = $1981;
 $1983 = HEAP32[$1982>>2]|0;
 $1984 = (($1981) + 4)|0;
 $1985 = $1984;
 $1986 = HEAP32[$1985>>2]|0;
 $1987 = (_i64Add(($1979|0),($1980|0),($1983|0),($1986|0))|0);
 $1988 = tempRet0;
 $1989 = $1965 ^ $1987;
 $1990 = $1966 ^ $1988;
 $1991 = (_rotr64($1989,$1990,16)|0);
 $1992 = tempRet0;
 $1993 = $64;
 $1994 = $1993;
 HEAP32[$1994>>2] = $1991;
 $1995 = (($1993) + 4)|0;
 $1996 = $1995;
 HEAP32[$1996>>2] = $1992;
 $1997 = (_i64Add(($1973|0),($1974|0),($1991|0),($1992|0))|0);
 $1998 = tempRet0;
 $1999 = $1977 ^ $1997;
 $2000 = $1978 ^ $1998;
 $2001 = (_rotr64($1999,$2000,63)|0);
 $2002 = tempRet0;
 $2003 = $280;
 $2004 = $2003;
 $2005 = HEAP32[$2004>>2]|0;
 $2006 = (($2003) + 4)|0;
 $2007 = $2006;
 $2008 = HEAP32[$2007>>2]|0;
 $2009 = (_i64Add(($1835|0),($1836|0),($2005|0),($2008|0))|0);
 $2010 = tempRet0;
 $2011 = $403;
 $2012 = $2011;
 $2013 = HEAP32[$2012>>2]|0;
 $2014 = (($2011) + 4)|0;
 $2015 = $2014;
 $2016 = HEAP32[$2015>>2]|0;
 $2017 = (_i64Add(($2009|0),($2010|0),($2013|0),($2016|0))|0);
 $2018 = tempRet0;
 $2019 = $74;
 $2020 = $2019;
 $2021 = HEAP32[$2020>>2]|0;
 $2022 = (($2019) + 4)|0;
 $2023 = $2022;
 $2024 = HEAP32[$2023>>2]|0;
 $2025 = $2021 ^ $2017;
 $2026 = $2024 ^ $2018;
 $2027 = (_rotr64($2025,$2026,32)|0);
 $2028 = tempRet0;
 $2029 = $30;
 $2030 = $2029;
 $2031 = HEAP32[$2030>>2]|0;
 $2032 = (($2029) + 4)|0;
 $2033 = $2032;
 $2034 = HEAP32[$2033>>2]|0;
 $2035 = (_i64Add(($2031|0),($2034|0),($2027|0),($2028|0))|0);
 $2036 = tempRet0;
 $2037 = $2005 ^ $2035;
 $2038 = $2008 ^ $2036;
 $2039 = (_rotr64($2037,$2038,24)|0);
 $2040 = tempRet0;
 $2041 = (_i64Add(($2017|0),($2018|0),($2039|0),($2040|0))|0);
 $2042 = tempRet0;
 $2043 = $556;
 $2044 = $2043;
 $2045 = HEAP32[$2044>>2]|0;
 $2046 = (($2043) + 4)|0;
 $2047 = $2046;
 $2048 = HEAP32[$2047>>2]|0;
 $2049 = (_i64Add(($2041|0),($2042|0),($2045|0),($2048|0))|0);
 $2050 = tempRet0;
 $2051 = $2027 ^ $2049;
 $2052 = $2028 ^ $2050;
 $2053 = (_rotr64($2051,$2052,16)|0);
 $2054 = tempRet0;
 $2055 = (_i64Add(($2035|0),($2036|0),($2053|0),($2054|0))|0);
 $2056 = tempRet0;
 $2057 = $2039 ^ $2055;
 $2058 = $2040 ^ $2056;
 $2059 = (_rotr64($2057,$2058,63)|0);
 $2060 = tempRet0;
 $2061 = (_i64Add(($1869|0),($1870|0),($1945|0),($1946|0))|0);
 $2062 = tempRet0;
 $2063 = $523;
 $2064 = $2063;
 $2065 = HEAP32[$2064>>2]|0;
 $2066 = (($2063) + 4)|0;
 $2067 = $2066;
 $2068 = HEAP32[$2067>>2]|0;
 $2069 = (_i64Add(($2061|0),($2062|0),($2065|0),($2068|0))|0);
 $2070 = tempRet0;
 $2071 = $2053 ^ $2069;
 $2072 = $2054 ^ $2070;
 $2073 = (_rotr64($2071,$2072,32)|0);
 $2074 = tempRet0;
 $2075 = (_i64Add(($1997|0),($1998|0),($2073|0),($2074|0))|0);
 $2076 = tempRet0;
 $2077 = $1945 ^ $2075;
 $2078 = $1946 ^ $2076;
 $2079 = (_rotr64($2077,$2078,24)|0);
 $2080 = tempRet0;
 $2081 = (_i64Add(($2069|0),($2070|0),($2079|0),($2080|0))|0);
 $2082 = tempRet0;
 $2083 = $114;
 $2084 = $2083;
 $2085 = HEAP32[$2084>>2]|0;
 $2086 = (($2083) + 4)|0;
 $2087 = $2086;
 $2088 = HEAP32[$2087>>2]|0;
 $2089 = (_i64Add(($2081|0),($2082|0),($2085|0),($2088|0))|0);
 $2090 = tempRet0;
 $2091 = $2073 ^ $2089;
 $2092 = $2074 ^ $2090;
 $2093 = (_rotr64($2091,$2092,16)|0);
 $2094 = tempRet0;
 $2095 = $74;
 $2096 = $2095;
 HEAP32[$2096>>2] = $2093;
 $2097 = (($2095) + 4)|0;
 $2098 = $2097;
 HEAP32[$2098>>2] = $2094;
 $2099 = (_i64Add(($2075|0),($2076|0),($2093|0),($2094|0))|0);
 $2100 = tempRet0;
 $2101 = $29;
 $2102 = $2101;
 HEAP32[$2102>>2] = $2099;
 $2103 = (($2101) + 4)|0;
 $2104 = $2103;
 HEAP32[$2104>>2] = $2100;
 $2105 = $2079 ^ $2099;
 $2106 = $2080 ^ $2100;
 $2107 = (_rotr64($2105,$2106,63)|0);
 $2108 = tempRet0;
 $2109 = $156;
 $2110 = $2109;
 HEAP32[$2110>>2] = $2107;
 $2111 = (($2109) + 4)|0;
 $2112 = $2111;
 HEAP32[$2112>>2] = $2108;
 $2113 = (_i64Add(($1927|0),($1928|0),($2001|0),($2002|0))|0);
 $2114 = tempRet0;
 $2115 = $430;
 $2116 = $2115;
 $2117 = HEAP32[$2116>>2]|0;
 $2118 = (($2115) + 4)|0;
 $2119 = $2118;
 $2120 = HEAP32[$2119>>2]|0;
 $2121 = (_i64Add(($2113|0),($2114|0),($2117|0),($2120|0))|0);
 $2122 = tempRet0;
 $2123 = $44;
 $2124 = $2123;
 $2125 = HEAP32[$2124>>2]|0;
 $2126 = (($2123) + 4)|0;
 $2127 = $2126;
 $2128 = HEAP32[$2127>>2]|0;
 $2129 = $2125 ^ $2121;
 $2130 = $2128 ^ $2122;
 $2131 = (_rotr64($2129,$2130,32)|0);
 $2132 = tempRet0;
 $2133 = (_i64Add(($2055|0),($2056|0),($2131|0),($2132|0))|0);
 $2134 = tempRet0;
 $2135 = $2001 ^ $2133;
 $2136 = $2002 ^ $2134;
 $2137 = (_rotr64($2135,$2136,24)|0);
 $2138 = tempRet0;
 $2139 = (_i64Add(($2121|0),($2122|0),($2137|0),($2138|0))|0);
 $2140 = tempRet0;
 $2141 = $459;
 $2142 = $2141;
 $2143 = HEAP32[$2142>>2]|0;
 $2144 = (($2141) + 4)|0;
 $2145 = $2144;
 $2146 = HEAP32[$2145>>2]|0;
 $2147 = (_i64Add(($2139|0),($2140|0),($2143|0),($2146|0))|0);
 $2148 = tempRet0;
 $2149 = $2131 ^ $2147;
 $2150 = $2132 ^ $2148;
 $2151 = (_rotr64($2149,$2150,16)|0);
 $2152 = tempRet0;
 $2153 = (_i64Add(($2133|0),($2134|0),($2151|0),($2152|0))|0);
 $2154 = tempRet0;
 $2155 = $30;
 $2156 = $2155;
 HEAP32[$2156>>2] = $2153;
 $2157 = (($2155) + 4)|0;
 $2158 = $2157;
 HEAP32[$2158>>2] = $2154;
 $2159 = $2137 ^ $2153;
 $2160 = $2138 ^ $2154;
 $2161 = (_rotr64($2159,$2160,63)|0);
 $2162 = tempRet0;
 $2163 = $220;
 $2164 = $2163;
 HEAP32[$2164>>2] = $2161;
 $2165 = (($2163) + 4)|0;
 $2166 = $2165;
 HEAP32[$2166>>2] = $2162;
 $2167 = (_i64Add(($1987|0),($1988|0),($2059|0),($2060|0))|0);
 $2168 = tempRet0;
 $2169 = $289;
 $2170 = $2169;
 $2171 = HEAP32[$2170>>2]|0;
 $2172 = (($2169) + 4)|0;
 $2173 = $2172;
 $2174 = HEAP32[$2173>>2]|0;
 $2175 = (_i64Add(($2167|0),($2168|0),($2171|0),($2174|0))|0);
 $2176 = tempRet0;
 $2177 = $54;
 $2178 = $2177;
 $2179 = HEAP32[$2178>>2]|0;
 $2180 = (($2177) + 4)|0;
 $2181 = $2180;
 $2182 = HEAP32[$2181>>2]|0;
 $2183 = $2179 ^ $2175;
 $2184 = $2182 ^ $2176;
 $2185 = (_rotr64($2183,$2184,32)|0);
 $2186 = tempRet0;
 $2187 = $27;
 $2188 = $2187;
 $2189 = HEAP32[$2188>>2]|0;
 $2190 = (($2187) + 4)|0;
 $2191 = $2190;
 $2192 = HEAP32[$2191>>2]|0;
 $2193 = (_i64Add(($2189|0),($2192|0),($2185|0),($2186|0))|0);
 $2194 = tempRet0;
 $2195 = $2059 ^ $2193;
 $2196 = $2060 ^ $2194;
 $2197 = (_rotr64($2195,$2196,24)|0);
 $2198 = tempRet0;
 $2199 = (_i64Add(($2175|0),($2176|0),($2197|0),($2198|0))|0);
 $2200 = tempRet0;
 $2201 = $349;
 $2202 = $2201;
 $2203 = HEAP32[$2202>>2]|0;
 $2204 = (($2201) + 4)|0;
 $2205 = $2204;
 $2206 = HEAP32[$2205>>2]|0;
 $2207 = (_i64Add(($2199|0),($2200|0),($2203|0),($2206|0))|0);
 $2208 = tempRet0;
 $2209 = $2185 ^ $2207;
 $2210 = $2186 ^ $2208;
 $2211 = (_rotr64($2209,$2210,16)|0);
 $2212 = tempRet0;
 $2213 = (_i64Add(($2193|0),($2194|0),($2211|0),($2212|0))|0);
 $2214 = tempRet0;
 $2215 = $2197 ^ $2213;
 $2216 = $2198 ^ $2214;
 $2217 = (_rotr64($2215,$2216,63)|0);
 $2218 = tempRet0;
 $2219 = $280;
 $2220 = $2219;
 HEAP32[$2220>>2] = $2217;
 $2221 = (($2219) + 4)|0;
 $2222 = $2221;
 HEAP32[$2222>>2] = $2218;
 $2223 = $85;
 $2224 = $2223;
 $2225 = HEAP32[$2224>>2]|0;
 $2226 = (($2223) + 4)|0;
 $2227 = $2226;
 $2228 = HEAP32[$2227>>2]|0;
 $2229 = (_i64Add(($2049|0),($2050|0),($2225|0),($2228|0))|0);
 $2230 = tempRet0;
 $2231 = $186;
 $2232 = $2231;
 $2233 = HEAP32[$2232>>2]|0;
 $2234 = (($2231) + 4)|0;
 $2235 = $2234;
 $2236 = HEAP32[$2235>>2]|0;
 $2237 = (_i64Add(($2229|0),($2230|0),($2233|0),($2236|0))|0);
 $2238 = tempRet0;
 $2239 = $64;
 $2240 = $2239;
 $2241 = HEAP32[$2240>>2]|0;
 $2242 = (($2239) + 4)|0;
 $2243 = $2242;
 $2244 = HEAP32[$2243>>2]|0;
 $2245 = $2241 ^ $2237;
 $2246 = $2244 ^ $2238;
 $2247 = (_rotr64($2245,$2246,32)|0);
 $2248 = tempRet0;
 $2249 = $28;
 $2250 = $2249;
 $2251 = HEAP32[$2250>>2]|0;
 $2252 = (($2249) + 4)|0;
 $2253 = $2252;
 $2254 = HEAP32[$2253>>2]|0;
 $2255 = (_i64Add(($2251|0),($2254|0),($2247|0),($2248|0))|0);
 $2256 = tempRet0;
 $2257 = $2225 ^ $2255;
 $2258 = $2228 ^ $2256;
 $2259 = (_rotr64($2257,$2258,24)|0);
 $2260 = tempRet0;
 $2261 = (_i64Add(($2237|0),($2238|0),($2259|0),($2260|0))|0);
 $2262 = tempRet0;
 $2263 = $492;
 $2264 = $2263;
 $2265 = HEAP32[$2264>>2]|0;
 $2266 = (($2263) + 4)|0;
 $2267 = $2266;
 $2268 = HEAP32[$2267>>2]|0;
 $2269 = (_i64Add(($2261|0),($2262|0),($2265|0),($2268|0))|0);
 $2270 = tempRet0;
 $2271 = $2247 ^ $2269;
 $2272 = $2248 ^ $2270;
 $2273 = (_rotr64($2271,$2272,16)|0);
 $2274 = tempRet0;
 $2275 = (_i64Add(($2255|0),($2256|0),($2273|0),($2274|0))|0);
 $2276 = tempRet0;
 $2277 = $2259 ^ $2275;
 $2278 = $2260 ^ $2276;
 $2279 = (_rotr64($2277,$2278,63)|0);
 $2280 = tempRet0;
 $2281 = (_i64Add(($2089|0),($2090|0),($2279|0),($2280|0))|0);
 $2282 = tempRet0;
 $2283 = $165;
 $2284 = $2283;
 $2285 = HEAP32[$2284>>2]|0;
 $2286 = (($2283) + 4)|0;
 $2287 = $2286;
 $2288 = HEAP32[$2287>>2]|0;
 $2289 = (_i64Add(($2281|0),($2282|0),($2285|0),($2288|0))|0);
 $2290 = tempRet0;
 $2291 = $2151 ^ $2289;
 $2292 = $2152 ^ $2290;
 $2293 = (_rotr64($2291,$2292,32)|0);
 $2294 = tempRet0;
 $2295 = (_i64Add(($2213|0),($2214|0),($2293|0),($2294|0))|0);
 $2296 = tempRet0;
 $2297 = $2279 ^ $2295;
 $2298 = $2280 ^ $2296;
 $2299 = (_rotr64($2297,$2298,24)|0);
 $2300 = tempRet0;
 $2301 = (_i64Add(($2289|0),($2290|0),($2299|0),($2300|0))|0);
 $2302 = tempRet0;
 $2303 = (_i64Add(($2301|0),($2302|0),($2143|0),($2146|0))|0);
 $2304 = tempRet0;
 $2305 = $2293 ^ $2303;
 $2306 = $2294 ^ $2304;
 $2307 = (_rotr64($2305,$2306,16)|0);
 $2308 = tempRet0;
 $2309 = $44;
 $2310 = $2309;
 HEAP32[$2310>>2] = $2307;
 $2311 = (($2309) + 4)|0;
 $2312 = $2311;
 HEAP32[$2312>>2] = $2308;
 $2313 = (_i64Add(($2295|0),($2296|0),($2307|0),($2308|0))|0);
 $2314 = tempRet0;
 $2315 = $27;
 $2316 = $2315;
 HEAP32[$2316>>2] = $2313;
 $2317 = (($2315) + 4)|0;
 $2318 = $2317;
 HEAP32[$2318>>2] = $2314;
 $2319 = $2299 ^ $2313;
 $2320 = $2300 ^ $2314;
 $2321 = (_rotr64($2319,$2320,63)|0);
 $2322 = tempRet0;
 $2323 = $85;
 $2324 = $2323;
 HEAP32[$2324>>2] = $2321;
 $2325 = (($2323) + 4)|0;
 $2326 = $2325;
 HEAP32[$2326>>2] = $2322;
 $2327 = $156;
 $2328 = $2327;
 $2329 = HEAP32[$2328>>2]|0;
 $2330 = (($2327) + 4)|0;
 $2331 = $2330;
 $2332 = HEAP32[$2331>>2]|0;
 $2333 = (_i64Add(($2147|0),($2148|0),($2329|0),($2332|0))|0);
 $2334 = tempRet0;
 $2335 = (_i64Add(($2333|0),($2334|0),($2171|0),($2174|0))|0);
 $2336 = tempRet0;
 $2337 = $2211 ^ $2335;
 $2338 = $2212 ^ $2336;
 $2339 = (_rotr64($2337,$2338,32)|0);
 $2340 = tempRet0;
 $2341 = (_i64Add(($2275|0),($2276|0),($2339|0),($2340|0))|0);
 $2342 = tempRet0;
 $2343 = $2329 ^ $2341;
 $2344 = $2332 ^ $2342;
 $2345 = (_rotr64($2343,$2344,24)|0);
 $2346 = tempRet0;
 $2347 = (_i64Add(($2335|0),($2336|0),($2345|0),($2346|0))|0);
 $2348 = tempRet0;
 $2349 = $403;
 $2350 = $2349;
 $2351 = HEAP32[$2350>>2]|0;
 $2352 = (($2349) + 4)|0;
 $2353 = $2352;
 $2354 = HEAP32[$2353>>2]|0;
 $2355 = (_i64Add(($2347|0),($2348|0),($2351|0),($2354|0))|0);
 $2356 = tempRet0;
 $2357 = $2339 ^ $2355;
 $2358 = $2340 ^ $2356;
 $2359 = (_rotr64($2357,$2358,16)|0);
 $2360 = tempRet0;
 $2361 = $54;
 $2362 = $2361;
 HEAP32[$2362>>2] = $2359;
 $2363 = (($2361) + 4)|0;
 $2364 = $2363;
 HEAP32[$2364>>2] = $2360;
 $2365 = (_i64Add(($2341|0),($2342|0),($2359|0),($2360|0))|0);
 $2366 = tempRet0;
 $2367 = $28;
 $2368 = $2367;
 HEAP32[$2368>>2] = $2365;
 $2369 = (($2367) + 4)|0;
 $2370 = $2369;
 HEAP32[$2370>>2] = $2366;
 $2371 = $2345 ^ $2365;
 $2372 = $2346 ^ $2366;
 $2373 = (_rotr64($2371,$2372,63)|0);
 $2374 = tempRet0;
 $2375 = $220;
 $2376 = $2375;
 $2377 = HEAP32[$2376>>2]|0;
 $2378 = (($2375) + 4)|0;
 $2379 = $2378;
 $2380 = HEAP32[$2379>>2]|0;
 $2381 = (_i64Add(($2207|0),($2208|0),($2377|0),($2380|0))|0);
 $2382 = tempRet0;
 $2383 = $2;
 $2384 = $2383;
 $2385 = HEAP32[$2384>>2]|0;
 $2386 = (($2383) + 4)|0;
 $2387 = $2386;
 $2388 = HEAP32[$2387>>2]|0;
 $2389 = (_i64Add(($2381|0),($2382|0),($2385|0),($2388|0))|0);
 $2390 = tempRet0;
 $2391 = $2273 ^ $2389;
 $2392 = $2274 ^ $2390;
 $2393 = (_rotr64($2391,$2392,32)|0);
 $2394 = tempRet0;
 $2395 = $29;
 $2396 = $2395;
 $2397 = HEAP32[$2396>>2]|0;
 $2398 = (($2395) + 4)|0;
 $2399 = $2398;
 $2400 = HEAP32[$2399>>2]|0;
 $2401 = (_i64Add(($2397|0),($2400|0),($2393|0),($2394|0))|0);
 $2402 = tempRet0;
 $2403 = $2377 ^ $2401;
 $2404 = $2380 ^ $2402;
 $2405 = (_rotr64($2403,$2404,24)|0);
 $2406 = tempRet0;
 $2407 = (_i64Add(($2389|0),($2390|0),($2405|0),($2406|0))|0);
 $2408 = tempRet0;
 $2409 = $430;
 $2410 = $2409;
 $2411 = HEAP32[$2410>>2]|0;
 $2412 = (($2409) + 4)|0;
 $2413 = $2412;
 $2414 = HEAP32[$2413>>2]|0;
 $2415 = (_i64Add(($2407|0),($2408|0),($2411|0),($2414|0))|0);
 $2416 = tempRet0;
 $2417 = $2393 ^ $2415;
 $2418 = $2394 ^ $2416;
 $2419 = (_rotr64($2417,$2418,16)|0);
 $2420 = tempRet0;
 $2421 = $64;
 $2422 = $2421;
 HEAP32[$2422>>2] = $2419;
 $2423 = (($2421) + 4)|0;
 $2424 = $2423;
 HEAP32[$2424>>2] = $2420;
 $2425 = (_i64Add(($2401|0),($2402|0),($2419|0),($2420|0))|0);
 $2426 = tempRet0;
 $2427 = $2405 ^ $2425;
 $2428 = $2406 ^ $2426;
 $2429 = (_rotr64($2427,$2428,63)|0);
 $2430 = tempRet0;
 $2431 = $280;
 $2432 = $2431;
 $2433 = HEAP32[$2432>>2]|0;
 $2434 = (($2431) + 4)|0;
 $2435 = $2434;
 $2436 = HEAP32[$2435>>2]|0;
 $2437 = (_i64Add(($2269|0),($2270|0),($2433|0),($2436|0))|0);
 $2438 = tempRet0;
 $2439 = $349;
 $2440 = $2439;
 $2441 = HEAP32[$2440>>2]|0;
 $2442 = (($2439) + 4)|0;
 $2443 = $2442;
 $2444 = HEAP32[$2443>>2]|0;
 $2445 = (_i64Add(($2437|0),($2438|0),($2441|0),($2444|0))|0);
 $2446 = tempRet0;
 $2447 = $74;
 $2448 = $2447;
 $2449 = HEAP32[$2448>>2]|0;
 $2450 = (($2447) + 4)|0;
 $2451 = $2450;
 $2452 = HEAP32[$2451>>2]|0;
 $2453 = $2449 ^ $2445;
 $2454 = $2452 ^ $2446;
 $2455 = (_rotr64($2453,$2454,32)|0);
 $2456 = tempRet0;
 $2457 = $30;
 $2458 = $2457;
 $2459 = HEAP32[$2458>>2]|0;
 $2460 = (($2457) + 4)|0;
 $2461 = $2460;
 $2462 = HEAP32[$2461>>2]|0;
 $2463 = (_i64Add(($2459|0),($2462|0),($2455|0),($2456|0))|0);
 $2464 = tempRet0;
 $2465 = $2433 ^ $2463;
 $2466 = $2436 ^ $2464;
 $2467 = (_rotr64($2465,$2466,24)|0);
 $2468 = tempRet0;
 $2469 = (_i64Add(($2445|0),($2446|0),($2467|0),($2468|0))|0);
 $2470 = tempRet0;
 $2471 = $186;
 $2472 = $2471;
 $2473 = HEAP32[$2472>>2]|0;
 $2474 = (($2471) + 4)|0;
 $2475 = $2474;
 $2476 = HEAP32[$2475>>2]|0;
 $2477 = (_i64Add(($2469|0),($2470|0),($2473|0),($2476|0))|0);
 $2478 = tempRet0;
 $2479 = $2455 ^ $2477;
 $2480 = $2456 ^ $2478;
 $2481 = (_rotr64($2479,$2480,16)|0);
 $2482 = tempRet0;
 $2483 = (_i64Add(($2463|0),($2464|0),($2481|0),($2482|0))|0);
 $2484 = tempRet0;
 $2485 = $2467 ^ $2483;
 $2486 = $2468 ^ $2484;
 $2487 = (_rotr64($2485,$2486,63)|0);
 $2488 = tempRet0;
 $2489 = (_i64Add(($2303|0),($2304|0),($2373|0),($2374|0))|0);
 $2490 = tempRet0;
 $2491 = $229;
 $2492 = $2491;
 $2493 = HEAP32[$2492>>2]|0;
 $2494 = (($2491) + 4)|0;
 $2495 = $2494;
 $2496 = HEAP32[$2495>>2]|0;
 $2497 = (_i64Add(($2489|0),($2490|0),($2493|0),($2496|0))|0);
 $2498 = tempRet0;
 $2499 = $2481 ^ $2497;
 $2500 = $2482 ^ $2498;
 $2501 = (_rotr64($2499,$2500,32)|0);
 $2502 = tempRet0;
 $2503 = (_i64Add(($2425|0),($2426|0),($2501|0),($2502|0))|0);
 $2504 = tempRet0;
 $2505 = $2373 ^ $2503;
 $2506 = $2374 ^ $2504;
 $2507 = (_rotr64($2505,$2506,24)|0);
 $2508 = tempRet0;
 $2509 = (_i64Add(($2497|0),($2498|0),($2507|0),($2508|0))|0);
 $2510 = tempRet0;
 $2511 = $492;
 $2512 = $2511;
 $2513 = HEAP32[$2512>>2]|0;
 $2514 = (($2511) + 4)|0;
 $2515 = $2514;
 $2516 = HEAP32[$2515>>2]|0;
 $2517 = (_i64Add(($2509|0),($2510|0),($2513|0),($2516|0))|0);
 $2518 = tempRet0;
 $2519 = $2501 ^ $2517;
 $2520 = $2502 ^ $2518;
 $2521 = (_rotr64($2519,$2520,16)|0);
 $2522 = tempRet0;
 $2523 = $74;
 $2524 = $2523;
 HEAP32[$2524>>2] = $2521;
 $2525 = (($2523) + 4)|0;
 $2526 = $2525;
 HEAP32[$2526>>2] = $2522;
 $2527 = (_i64Add(($2503|0),($2504|0),($2521|0),($2522|0))|0);
 $2528 = tempRet0;
 $2529 = $29;
 $2530 = $2529;
 HEAP32[$2530>>2] = $2527;
 $2531 = (($2529) + 4)|0;
 $2532 = $2531;
 HEAP32[$2532>>2] = $2528;
 $2533 = $2507 ^ $2527;
 $2534 = $2508 ^ $2528;
 $2535 = (_rotr64($2533,$2534,63)|0);
 $2536 = tempRet0;
 $2537 = $156;
 $2538 = $2537;
 HEAP32[$2538>>2] = $2535;
 $2539 = (($2537) + 4)|0;
 $2540 = $2539;
 HEAP32[$2540>>2] = $2536;
 $2541 = (_i64Add(($2355|0),($2356|0),($2429|0),($2430|0))|0);
 $2542 = tempRet0;
 $2543 = $322;
 $2544 = $2543;
 $2545 = HEAP32[$2544>>2]|0;
 $2546 = (($2543) + 4)|0;
 $2547 = $2546;
 $2548 = HEAP32[$2547>>2]|0;
 $2549 = (_i64Add(($2541|0),($2542|0),($2545|0),($2548|0))|0);
 $2550 = tempRet0;
 $2551 = $44;
 $2552 = $2551;
 $2553 = HEAP32[$2552>>2]|0;
 $2554 = (($2551) + 4)|0;
 $2555 = $2554;
 $2556 = HEAP32[$2555>>2]|0;
 $2557 = $2553 ^ $2549;
 $2558 = $2556 ^ $2550;
 $2559 = (_rotr64($2557,$2558,32)|0);
 $2560 = tempRet0;
 $2561 = (_i64Add(($2483|0),($2484|0),($2559|0),($2560|0))|0);
 $2562 = tempRet0;
 $2563 = $2429 ^ $2561;
 $2564 = $2430 ^ $2562;
 $2565 = (_rotr64($2563,$2564,24)|0);
 $2566 = tempRet0;
 $2567 = (_i64Add(($2549|0),($2550|0),($2565|0),($2566|0))|0);
 $2568 = tempRet0;
 $2569 = $250;
 $2570 = $2569;
 $2571 = HEAP32[$2570>>2]|0;
 $2572 = (($2569) + 4)|0;
 $2573 = $2572;
 $2574 = HEAP32[$2573>>2]|0;
 $2575 = (_i64Add(($2567|0),($2568|0),($2571|0),($2574|0))|0);
 $2576 = tempRet0;
 $2577 = $2559 ^ $2575;
 $2578 = $2560 ^ $2576;
 $2579 = (_rotr64($2577,$2578,16)|0);
 $2580 = tempRet0;
 $2581 = (_i64Add(($2561|0),($2562|0),($2579|0),($2580|0))|0);
 $2582 = tempRet0;
 $2583 = $30;
 $2584 = $2583;
 HEAP32[$2584>>2] = $2581;
 $2585 = (($2583) + 4)|0;
 $2586 = $2585;
 HEAP32[$2586>>2] = $2582;
 $2587 = $2565 ^ $2581;
 $2588 = $2566 ^ $2582;
 $2589 = (_rotr64($2587,$2588,63)|0);
 $2590 = tempRet0;
 $2591 = $220;
 $2592 = $2591;
 HEAP32[$2592>>2] = $2589;
 $2593 = (($2591) + 4)|0;
 $2594 = $2593;
 HEAP32[$2594>>2] = $2590;
 $2595 = (_i64Add(($2415|0),($2416|0),($2487|0),($2488|0))|0);
 $2596 = tempRet0;
 $2597 = $556;
 $2598 = $2597;
 $2599 = HEAP32[$2598>>2]|0;
 $2600 = (($2597) + 4)|0;
 $2601 = $2600;
 $2602 = HEAP32[$2601>>2]|0;
 $2603 = (_i64Add(($2595|0),($2596|0),($2599|0),($2602|0))|0);
 $2604 = tempRet0;
 $2605 = $54;
 $2606 = $2605;
 $2607 = HEAP32[$2606>>2]|0;
 $2608 = (($2605) + 4)|0;
 $2609 = $2608;
 $2610 = HEAP32[$2609>>2]|0;
 $2611 = $2607 ^ $2603;
 $2612 = $2610 ^ $2604;
 $2613 = (_rotr64($2611,$2612,32)|0);
 $2614 = tempRet0;
 $2615 = $27;
 $2616 = $2615;
 $2617 = HEAP32[$2616>>2]|0;
 $2618 = (($2615) + 4)|0;
 $2619 = $2618;
 $2620 = HEAP32[$2619>>2]|0;
 $2621 = (_i64Add(($2617|0),($2620|0),($2613|0),($2614|0))|0);
 $2622 = tempRet0;
 $2623 = $2487 ^ $2621;
 $2624 = $2488 ^ $2622;
 $2625 = (_rotr64($2623,$2624,24)|0);
 $2626 = tempRet0;
 $2627 = (_i64Add(($2603|0),($2604|0),($2625|0),($2626|0))|0);
 $2628 = tempRet0;
 $2629 = $523;
 $2630 = $2629;
 $2631 = HEAP32[$2630>>2]|0;
 $2632 = (($2629) + 4)|0;
 $2633 = $2632;
 $2634 = HEAP32[$2633>>2]|0;
 $2635 = (_i64Add(($2627|0),($2628|0),($2631|0),($2634|0))|0);
 $2636 = tempRet0;
 $2637 = $2613 ^ $2635;
 $2638 = $2614 ^ $2636;
 $2639 = (_rotr64($2637,$2638,16)|0);
 $2640 = tempRet0;
 $2641 = (_i64Add(($2621|0),($2622|0),($2639|0),($2640|0))|0);
 $2642 = tempRet0;
 $2643 = $2625 ^ $2641;
 $2644 = $2626 ^ $2642;
 $2645 = (_rotr64($2643,$2644,63)|0);
 $2646 = tempRet0;
 $2647 = $280;
 $2648 = $2647;
 HEAP32[$2648>>2] = $2645;
 $2649 = (($2647) + 4)|0;
 $2650 = $2649;
 HEAP32[$2650>>2] = $2646;
 $2651 = $85;
 $2652 = $2651;
 $2653 = HEAP32[$2652>>2]|0;
 $2654 = (($2651) + 4)|0;
 $2655 = $2654;
 $2656 = HEAP32[$2655>>2]|0;
 $2657 = (_i64Add(($2477|0),($2478|0),($2653|0),($2656|0))|0);
 $2658 = tempRet0;
 $2659 = $114;
 $2660 = $2659;
 $2661 = HEAP32[$2660>>2]|0;
 $2662 = (($2659) + 4)|0;
 $2663 = $2662;
 $2664 = HEAP32[$2663>>2]|0;
 $2665 = (_i64Add(($2657|0),($2658|0),($2661|0),($2664|0))|0);
 $2666 = tempRet0;
 $2667 = $64;
 $2668 = $2667;
 $2669 = HEAP32[$2668>>2]|0;
 $2670 = (($2667) + 4)|0;
 $2671 = $2670;
 $2672 = HEAP32[$2671>>2]|0;
 $2673 = $2669 ^ $2665;
 $2674 = $2672 ^ $2666;
 $2675 = (_rotr64($2673,$2674,32)|0);
 $2676 = tempRet0;
 $2677 = $28;
 $2678 = $2677;
 $2679 = HEAP32[$2678>>2]|0;
 $2680 = (($2677) + 4)|0;
 $2681 = $2680;
 $2682 = HEAP32[$2681>>2]|0;
 $2683 = (_i64Add(($2679|0),($2682|0),($2675|0),($2676|0))|0);
 $2684 = tempRet0;
 $2685 = $2653 ^ $2683;
 $2686 = $2656 ^ $2684;
 $2687 = (_rotr64($2685,$2686,24)|0);
 $2688 = tempRet0;
 $2689 = (_i64Add(($2665|0),($2666|0),($2687|0),($2688|0))|0);
 $2690 = tempRet0;
 $2691 = $370;
 $2692 = $2691;
 $2693 = HEAP32[$2692>>2]|0;
 $2694 = (($2691) + 4)|0;
 $2695 = $2694;
 $2696 = HEAP32[$2695>>2]|0;
 $2697 = (_i64Add(($2689|0),($2690|0),($2693|0),($2696|0))|0);
 $2698 = tempRet0;
 $2699 = $2675 ^ $2697;
 $2700 = $2676 ^ $2698;
 $2701 = (_rotr64($2699,$2700,16)|0);
 $2702 = tempRet0;
 $2703 = (_i64Add(($2683|0),($2684|0),($2701|0),($2702|0))|0);
 $2704 = tempRet0;
 $2705 = $2687 ^ $2703;
 $2706 = $2688 ^ $2704;
 $2707 = (_rotr64($2705,$2706,63)|0);
 $2708 = tempRet0;
 $2709 = (_i64Add(($2517|0),($2518|0),($2707|0),($2708|0))|0);
 $2710 = tempRet0;
 $2711 = $459;
 $2712 = $2711;
 $2713 = HEAP32[$2712>>2]|0;
 $2714 = (($2711) + 4)|0;
 $2715 = $2714;
 $2716 = HEAP32[$2715>>2]|0;
 $2717 = (_i64Add(($2709|0),($2710|0),($2713|0),($2716|0))|0);
 $2718 = tempRet0;
 $2719 = $2579 ^ $2717;
 $2720 = $2580 ^ $2718;
 $2721 = (_rotr64($2719,$2720,32)|0);
 $2722 = tempRet0;
 $2723 = (_i64Add(($2641|0),($2642|0),($2721|0),($2722|0))|0);
 $2724 = tempRet0;
 $2725 = $2707 ^ $2723;
 $2726 = $2708 ^ $2724;
 $2727 = (_rotr64($2725,$2726,24)|0);
 $2728 = tempRet0;
 $2729 = (_i64Add(($2717|0),($2718|0),($2727|0),($2728|0))|0);
 $2730 = tempRet0;
 $2731 = (_i64Add(($2729|0),($2730|0),($2571|0),($2574|0))|0);
 $2732 = tempRet0;
 $2733 = $2721 ^ $2731;
 $2734 = $2722 ^ $2732;
 $2735 = (_rotr64($2733,$2734,16)|0);
 $2736 = tempRet0;
 $2737 = $44;
 $2738 = $2737;
 HEAP32[$2738>>2] = $2735;
 $2739 = (($2737) + 4)|0;
 $2740 = $2739;
 HEAP32[$2740>>2] = $2736;
 $2741 = (_i64Add(($2723|0),($2724|0),($2735|0),($2736|0))|0);
 $2742 = tempRet0;
 $2743 = $27;
 $2744 = $2743;
 HEAP32[$2744>>2] = $2741;
 $2745 = (($2743) + 4)|0;
 $2746 = $2745;
 HEAP32[$2746>>2] = $2742;
 $2747 = $2727 ^ $2741;
 $2748 = $2728 ^ $2742;
 $2749 = (_rotr64($2747,$2748,63)|0);
 $2750 = tempRet0;
 $2751 = $85;
 $2752 = $2751;
 HEAP32[$2752>>2] = $2749;
 $2753 = (($2751) + 4)|0;
 $2754 = $2753;
 HEAP32[$2754>>2] = $2750;
 $2755 = $156;
 $2756 = $2755;
 $2757 = HEAP32[$2756>>2]|0;
 $2758 = (($2755) + 4)|0;
 $2759 = $2758;
 $2760 = HEAP32[$2759>>2]|0;
 $2761 = (_i64Add(($2575|0),($2576|0),($2757|0),($2760|0))|0);
 $2762 = tempRet0;
 $2763 = (_i64Add(($2761|0),($2762|0),($2661|0),($2664|0))|0);
 $2764 = tempRet0;
 $2765 = $2639 ^ $2763;
 $2766 = $2640 ^ $2764;
 $2767 = (_rotr64($2765,$2766,32)|0);
 $2768 = tempRet0;
 $2769 = (_i64Add(($2703|0),($2704|0),($2767|0),($2768|0))|0);
 $2770 = tempRet0;
 $2771 = $2757 ^ $2769;
 $2772 = $2760 ^ $2770;
 $2773 = (_rotr64($2771,$2772,24)|0);
 $2774 = tempRet0;
 $2775 = (_i64Add(($2763|0),($2764|0),($2773|0),($2774|0))|0);
 $2776 = tempRet0;
 $2777 = (_i64Add(($2775|0),($2776|0),($2599|0),($2602|0))|0);
 $2778 = tempRet0;
 $2779 = $2767 ^ $2777;
 $2780 = $2768 ^ $2778;
 $2781 = (_rotr64($2779,$2780,16)|0);
 $2782 = tempRet0;
 $2783 = $54;
 $2784 = $2783;
 HEAP32[$2784>>2] = $2781;
 $2785 = (($2783) + 4)|0;
 $2786 = $2785;
 HEAP32[$2786>>2] = $2782;
 $2787 = (_i64Add(($2769|0),($2770|0),($2781|0),($2782|0))|0);
 $2788 = tempRet0;
 $2789 = $28;
 $2790 = $2789;
 HEAP32[$2790>>2] = $2787;
 $2791 = (($2789) + 4)|0;
 $2792 = $2791;
 HEAP32[$2792>>2] = $2788;
 $2793 = $2773 ^ $2787;
 $2794 = $2774 ^ $2788;
 $2795 = (_rotr64($2793,$2794,63)|0);
 $2796 = tempRet0;
 $2797 = $220;
 $2798 = $2797;
 $2799 = HEAP32[$2798>>2]|0;
 $2800 = (($2797) + 4)|0;
 $2801 = $2800;
 $2802 = HEAP32[$2801>>2]|0;
 $2803 = (_i64Add(($2635|0),($2636|0),($2799|0),($2802|0))|0);
 $2804 = tempRet0;
 $2805 = (_i64Add(($2803|0),($2804|0),($2631|0),($2634|0))|0);
 $2806 = tempRet0;
 $2807 = $2701 ^ $2805;
 $2808 = $2702 ^ $2806;
 $2809 = (_rotr64($2807,$2808,32)|0);
 $2810 = tempRet0;
 $2811 = $29;
 $2812 = $2811;
 $2813 = HEAP32[$2812>>2]|0;
 $2814 = (($2811) + 4)|0;
 $2815 = $2814;
 $2816 = HEAP32[$2815>>2]|0;
 $2817 = (_i64Add(($2813|0),($2816|0),($2809|0),($2810|0))|0);
 $2818 = tempRet0;
 $2819 = $2799 ^ $2817;
 $2820 = $2802 ^ $2818;
 $2821 = (_rotr64($2819,$2820,24)|0);
 $2822 = tempRet0;
 $2823 = (_i64Add(($2805|0),($2806|0),($2821|0),($2822|0))|0);
 $2824 = tempRet0;
 $2825 = $492;
 $2826 = $2825;
 $2827 = HEAP32[$2826>>2]|0;
 $2828 = (($2825) + 4)|0;
 $2829 = $2828;
 $2830 = HEAP32[$2829>>2]|0;
 $2831 = (_i64Add(($2823|0),($2824|0),($2827|0),($2830|0))|0);
 $2832 = tempRet0;
 $2833 = $2809 ^ $2831;
 $2834 = $2810 ^ $2832;
 $2835 = (_rotr64($2833,$2834,16)|0);
 $2836 = tempRet0;
 $2837 = $64;
 $2838 = $2837;
 HEAP32[$2838>>2] = $2835;
 $2839 = (($2837) + 4)|0;
 $2840 = $2839;
 HEAP32[$2840>>2] = $2836;
 $2841 = (_i64Add(($2817|0),($2818|0),($2835|0),($2836|0))|0);
 $2842 = tempRet0;
 $2843 = $2821 ^ $2841;
 $2844 = $2822 ^ $2842;
 $2845 = (_rotr64($2843,$2844,63)|0);
 $2846 = tempRet0;
 $2847 = (_i64Add(($2697|0),($2698|0),($2645|0),($2646|0))|0);
 $2848 = tempRet0;
 $2849 = $229;
 $2850 = $2849;
 $2851 = HEAP32[$2850>>2]|0;
 $2852 = (($2849) + 4)|0;
 $2853 = $2852;
 $2854 = HEAP32[$2853>>2]|0;
 $2855 = (_i64Add(($2847|0),($2848|0),($2851|0),($2854|0))|0);
 $2856 = tempRet0;
 $2857 = $74;
 $2858 = $2857;
 $2859 = HEAP32[$2858>>2]|0;
 $2860 = (($2857) + 4)|0;
 $2861 = $2860;
 $2862 = HEAP32[$2861>>2]|0;
 $2863 = $2859 ^ $2855;
 $2864 = $2862 ^ $2856;
 $2865 = (_rotr64($2863,$2864,32)|0);
 $2866 = tempRet0;
 $2867 = $30;
 $2868 = $2867;
 $2869 = HEAP32[$2868>>2]|0;
 $2870 = (($2867) + 4)|0;
 $2871 = $2870;
 $2872 = HEAP32[$2871>>2]|0;
 $2873 = (_i64Add(($2869|0),($2872|0),($2865|0),($2866|0))|0);
 $2874 = tempRet0;
 $2875 = $280;
 $2876 = $2875;
 $2877 = HEAP32[$2876>>2]|0;
 $2878 = (($2875) + 4)|0;
 $2879 = $2878;
 $2880 = HEAP32[$2879>>2]|0;
 $2881 = $2877 ^ $2873;
 $2882 = $2880 ^ $2874;
 $2883 = (_rotr64($2881,$2882,24)|0);
 $2884 = tempRet0;
 $2885 = (_i64Add(($2855|0),($2856|0),($2883|0),($2884|0))|0);
 $2886 = tempRet0;
 $2887 = $403;
 $2888 = $2887;
 $2889 = HEAP32[$2888>>2]|0;
 $2890 = (($2887) + 4)|0;
 $2891 = $2890;
 $2892 = HEAP32[$2891>>2]|0;
 $2893 = (_i64Add(($2885|0),($2886|0),($2889|0),($2892|0))|0);
 $2894 = tempRet0;
 $2895 = $2865 ^ $2893;
 $2896 = $2866 ^ $2894;
 $2897 = (_rotr64($2895,$2896,16)|0);
 $2898 = tempRet0;
 $2899 = (_i64Add(($2873|0),($2874|0),($2897|0),($2898|0))|0);
 $2900 = tempRet0;
 $2901 = $2883 ^ $2899;
 $2902 = $2884 ^ $2900;
 $2903 = (_rotr64($2901,$2902,63)|0);
 $2904 = tempRet0;
 $2905 = (_i64Add(($2731|0),($2732|0),($2795|0),($2796|0))|0);
 $2906 = tempRet0;
 $2907 = $2;
 $2908 = $2907;
 $2909 = HEAP32[$2908>>2]|0;
 $2910 = (($2907) + 4)|0;
 $2911 = $2910;
 $2912 = HEAP32[$2911>>2]|0;
 $2913 = (_i64Add(($2905|0),($2906|0),($2909|0),($2912|0))|0);
 $2914 = tempRet0;
 $2915 = $2897 ^ $2913;
 $2916 = $2898 ^ $2914;
 $2917 = (_rotr64($2915,$2916,32)|0);
 $2918 = tempRet0;
 $2919 = (_i64Add(($2841|0),($2842|0),($2917|0),($2918|0))|0);
 $2920 = tempRet0;
 $2921 = $2795 ^ $2919;
 $2922 = $2796 ^ $2920;
 $2923 = (_rotr64($2921,$2922,24)|0);
 $2924 = tempRet0;
 $2925 = (_i64Add(($2913|0),($2914|0),($2923|0),($2924|0))|0);
 $2926 = tempRet0;
 $2927 = $322;
 $2928 = $2927;
 $2929 = HEAP32[$2928>>2]|0;
 $2930 = (($2927) + 4)|0;
 $2931 = $2930;
 $2932 = HEAP32[$2931>>2]|0;
 $2933 = (_i64Add(($2925|0),($2926|0),($2929|0),($2932|0))|0);
 $2934 = tempRet0;
 $2935 = $2917 ^ $2933;
 $2936 = $2918 ^ $2934;
 $2937 = (_rotr64($2935,$2936,16)|0);
 $2938 = tempRet0;
 $2939 = $74;
 $2940 = $2939;
 HEAP32[$2940>>2] = $2937;
 $2941 = (($2939) + 4)|0;
 $2942 = $2941;
 HEAP32[$2942>>2] = $2938;
 $2943 = (_i64Add(($2919|0),($2920|0),($2937|0),($2938|0))|0);
 $2944 = tempRet0;
 $2945 = $29;
 $2946 = $2945;
 HEAP32[$2946>>2] = $2943;
 $2947 = (($2945) + 4)|0;
 $2948 = $2947;
 HEAP32[$2948>>2] = $2944;
 $2949 = $2923 ^ $2943;
 $2950 = $2924 ^ $2944;
 $2951 = (_rotr64($2949,$2950,63)|0);
 $2952 = tempRet0;
 $2953 = $156;
 $2954 = $2953;
 HEAP32[$2954>>2] = $2951;
 $2955 = (($2953) + 4)|0;
 $2956 = $2955;
 HEAP32[$2956>>2] = $2952;
 $2957 = (_i64Add(($2777|0),($2778|0),($2845|0),($2846|0))|0);
 $2958 = tempRet0;
 $2959 = $289;
 $2960 = $2959;
 $2961 = HEAP32[$2960>>2]|0;
 $2962 = (($2959) + 4)|0;
 $2963 = $2962;
 $2964 = HEAP32[$2963>>2]|0;
 $2965 = (_i64Add(($2957|0),($2958|0),($2961|0),($2964|0))|0);
 $2966 = tempRet0;
 $2967 = $44;
 $2968 = $2967;
 $2969 = HEAP32[$2968>>2]|0;
 $2970 = (($2967) + 4)|0;
 $2971 = $2970;
 $2972 = HEAP32[$2971>>2]|0;
 $2973 = $2969 ^ $2965;
 $2974 = $2972 ^ $2966;
 $2975 = (_rotr64($2973,$2974,32)|0);
 $2976 = tempRet0;
 $2977 = (_i64Add(($2899|0),($2900|0),($2975|0),($2976|0))|0);
 $2978 = tempRet0;
 $2979 = $2845 ^ $2977;
 $2980 = $2846 ^ $2978;
 $2981 = (_rotr64($2979,$2980,24)|0);
 $2982 = tempRet0;
 $2983 = (_i64Add(($2965|0),($2966|0),($2981|0),($2982|0))|0);
 $2984 = tempRet0;
 $2985 = $186;
 $2986 = $2985;
 $2987 = HEAP32[$2986>>2]|0;
 $2988 = (($2985) + 4)|0;
 $2989 = $2988;
 $2990 = HEAP32[$2989>>2]|0;
 $2991 = (_i64Add(($2983|0),($2984|0),($2987|0),($2990|0))|0);
 $2992 = tempRet0;
 $2993 = $2975 ^ $2991;
 $2994 = $2976 ^ $2992;
 $2995 = (_rotr64($2993,$2994,16)|0);
 $2996 = tempRet0;
 $2997 = (_i64Add(($2977|0),($2978|0),($2995|0),($2996|0))|0);
 $2998 = tempRet0;
 $2999 = $30;
 $3000 = $2999;
 HEAP32[$3000>>2] = $2997;
 $3001 = (($2999) + 4)|0;
 $3002 = $3001;
 HEAP32[$3002>>2] = $2998;
 $3003 = $2981 ^ $2997;
 $3004 = $2982 ^ $2998;
 $3005 = (_rotr64($3003,$3004,63)|0);
 $3006 = tempRet0;
 $3007 = $220;
 $3008 = $3007;
 HEAP32[$3008>>2] = $3005;
 $3009 = (($3007) + 4)|0;
 $3010 = $3009;
 HEAP32[$3010>>2] = $3006;
 $3011 = (_i64Add(($2831|0),($2832|0),($2903|0),($2904|0))|0);
 $3012 = tempRet0;
 $3013 = $370;
 $3014 = $3013;
 $3015 = HEAP32[$3014>>2]|0;
 $3016 = (($3013) + 4)|0;
 $3017 = $3016;
 $3018 = HEAP32[$3017>>2]|0;
 $3019 = (_i64Add(($3011|0),($3012|0),($3015|0),($3018|0))|0);
 $3020 = tempRet0;
 $3021 = $54;
 $3022 = $3021;
 $3023 = HEAP32[$3022>>2]|0;
 $3024 = (($3021) + 4)|0;
 $3025 = $3024;
 $3026 = HEAP32[$3025>>2]|0;
 $3027 = $3023 ^ $3019;
 $3028 = $3026 ^ $3020;
 $3029 = (_rotr64($3027,$3028,32)|0);
 $3030 = tempRet0;
 $3031 = $27;
 $3032 = $3031;
 $3033 = HEAP32[$3032>>2]|0;
 $3034 = (($3031) + 4)|0;
 $3035 = $3034;
 $3036 = HEAP32[$3035>>2]|0;
 $3037 = (_i64Add(($3033|0),($3036|0),($3029|0),($3030|0))|0);
 $3038 = tempRet0;
 $3039 = $2903 ^ $3037;
 $3040 = $2904 ^ $3038;
 $3041 = (_rotr64($3039,$3040,24)|0);
 $3042 = tempRet0;
 $3043 = (_i64Add(($3019|0),($3020|0),($3041|0),($3042|0))|0);
 $3044 = tempRet0;
 $3045 = $165;
 $3046 = $3045;
 $3047 = HEAP32[$3046>>2]|0;
 $3048 = (($3045) + 4)|0;
 $3049 = $3048;
 $3050 = HEAP32[$3049>>2]|0;
 $3051 = (_i64Add(($3043|0),($3044|0),($3047|0),($3050|0))|0);
 $3052 = tempRet0;
 $3053 = $3029 ^ $3051;
 $3054 = $3030 ^ $3052;
 $3055 = (_rotr64($3053,$3054,16)|0);
 $3056 = tempRet0;
 $3057 = (_i64Add(($3037|0),($3038|0),($3055|0),($3056|0))|0);
 $3058 = tempRet0;
 $3059 = $3041 ^ $3057;
 $3060 = $3042 ^ $3058;
 $3061 = (_rotr64($3059,$3060,63)|0);
 $3062 = tempRet0;
 $3063 = $280;
 $3064 = $3063;
 HEAP32[$3064>>2] = $3061;
 $3065 = (($3063) + 4)|0;
 $3066 = $3065;
 HEAP32[$3066>>2] = $3062;
 $3067 = $85;
 $3068 = $3067;
 $3069 = HEAP32[$3068>>2]|0;
 $3070 = (($3067) + 4)|0;
 $3071 = $3070;
 $3072 = HEAP32[$3071>>2]|0;
 $3073 = (_i64Add(($2893|0),($2894|0),($3069|0),($3072|0))|0);
 $3074 = tempRet0;
 $3075 = $349;
 $3076 = $3075;
 $3077 = HEAP32[$3076>>2]|0;
 $3078 = (($3075) + 4)|0;
 $3079 = $3078;
 $3080 = HEAP32[$3079>>2]|0;
 $3081 = (_i64Add(($3073|0),($3074|0),($3077|0),($3080|0))|0);
 $3082 = tempRet0;
 $3083 = $64;
 $3084 = $3083;
 $3085 = HEAP32[$3084>>2]|0;
 $3086 = (($3083) + 4)|0;
 $3087 = $3086;
 $3088 = HEAP32[$3087>>2]|0;
 $3089 = $3085 ^ $3081;
 $3090 = $3088 ^ $3082;
 $3091 = (_rotr64($3089,$3090,32)|0);
 $3092 = tempRet0;
 $3093 = $28;
 $3094 = $3093;
 $3095 = HEAP32[$3094>>2]|0;
 $3096 = (($3093) + 4)|0;
 $3097 = $3096;
 $3098 = HEAP32[$3097>>2]|0;
 $3099 = (_i64Add(($3095|0),($3098|0),($3091|0),($3092|0))|0);
 $3100 = tempRet0;
 $3101 = $3069 ^ $3099;
 $3102 = $3072 ^ $3100;
 $3103 = (_rotr64($3101,$3102,24)|0);
 $3104 = tempRet0;
 $3105 = (_i64Add(($3081|0),($3082|0),($3103|0),($3104|0))|0);
 $3106 = tempRet0;
 $3107 = $430;
 $3108 = $3107;
 $3109 = HEAP32[$3108>>2]|0;
 $3110 = (($3107) + 4)|0;
 $3111 = $3110;
 $3112 = HEAP32[$3111>>2]|0;
 $3113 = (_i64Add(($3105|0),($3106|0),($3109|0),($3112|0))|0);
 $3114 = tempRet0;
 $3115 = $3091 ^ $3113;
 $3116 = $3092 ^ $3114;
 $3117 = (_rotr64($3115,$3116,16)|0);
 $3118 = tempRet0;
 $3119 = (_i64Add(($3099|0),($3100|0),($3117|0),($3118|0))|0);
 $3120 = tempRet0;
 $3121 = $3103 ^ $3119;
 $3122 = $3104 ^ $3120;
 $3123 = (_rotr64($3121,$3122,63)|0);
 $3124 = tempRet0;
 $3125 = (_i64Add(($2933|0),($2934|0),($3123|0),($3124|0))|0);
 $3126 = tempRet0;
 $3127 = $492;
 $3128 = $3127;
 $3129 = HEAP32[$3128>>2]|0;
 $3130 = (($3127) + 4)|0;
 $3131 = $3130;
 $3132 = HEAP32[$3131>>2]|0;
 $3133 = (_i64Add(($3125|0),($3126|0),($3129|0),($3132|0))|0);
 $3134 = tempRet0;
 $3135 = $2995 ^ $3133;
 $3136 = $2996 ^ $3134;
 $3137 = (_rotr64($3135,$3136,32)|0);
 $3138 = tempRet0;
 $3139 = (_i64Add(($3057|0),($3058|0),($3137|0),($3138|0))|0);
 $3140 = tempRet0;
 $3141 = $3123 ^ $3139;
 $3142 = $3124 ^ $3140;
 $3143 = (_rotr64($3141,$3142,24)|0);
 $3144 = tempRet0;
 $3145 = (_i64Add(($3133|0),($3134|0),($3143|0),($3144|0))|0);
 $3146 = tempRet0;
 $3147 = (_i64Add(($3145|0),($3146|0),($3109|0),($3112|0))|0);
 $3148 = tempRet0;
 $3149 = $3137 ^ $3147;
 $3150 = $3138 ^ $3148;
 $3151 = (_rotr64($3149,$3150,16)|0);
 $3152 = tempRet0;
 $3153 = $44;
 $3154 = $3153;
 HEAP32[$3154>>2] = $3151;
 $3155 = (($3153) + 4)|0;
 $3156 = $3155;
 HEAP32[$3156>>2] = $3152;
 $3157 = (_i64Add(($3139|0),($3140|0),($3151|0),($3152|0))|0);
 $3158 = tempRet0;
 $3159 = $27;
 $3160 = $3159;
 HEAP32[$3160>>2] = $3157;
 $3161 = (($3159) + 4)|0;
 $3162 = $3161;
 HEAP32[$3162>>2] = $3158;
 $3163 = $3143 ^ $3157;
 $3164 = $3144 ^ $3158;
 $3165 = (_rotr64($3163,$3164,63)|0);
 $3166 = tempRet0;
 $3167 = $85;
 $3168 = $3167;
 HEAP32[$3168>>2] = $3165;
 $3169 = (($3167) + 4)|0;
 $3170 = $3169;
 HEAP32[$3170>>2] = $3166;
 $3171 = $156;
 $3172 = $3171;
 $3173 = HEAP32[$3172>>2]|0;
 $3174 = (($3171) + 4)|0;
 $3175 = $3174;
 $3176 = HEAP32[$3175>>2]|0;
 $3177 = (_i64Add(($2991|0),($2992|0),($3173|0),($3176|0))|0);
 $3178 = tempRet0;
 $3179 = $322;
 $3180 = $3179;
 $3181 = HEAP32[$3180>>2]|0;
 $3182 = (($3179) + 4)|0;
 $3183 = $3182;
 $3184 = HEAP32[$3183>>2]|0;
 $3185 = (_i64Add(($3177|0),($3178|0),($3181|0),($3184|0))|0);
 $3186 = tempRet0;
 $3187 = $3055 ^ $3185;
 $3188 = $3056 ^ $3186;
 $3189 = (_rotr64($3187,$3188,32)|0);
 $3190 = tempRet0;
 $3191 = (_i64Add(($3119|0),($3120|0),($3189|0),($3190|0))|0);
 $3192 = tempRet0;
 $3193 = $3173 ^ $3191;
 $3194 = $3176 ^ $3192;
 $3195 = (_rotr64($3193,$3194,24)|0);
 $3196 = tempRet0;
 $3197 = (_i64Add(($3185|0),($3186|0),($3195|0),($3196|0))|0);
 $3198 = tempRet0;
 $3199 = $523;
 $3200 = $3199;
 $3201 = HEAP32[$3200>>2]|0;
 $3202 = (($3199) + 4)|0;
 $3203 = $3202;
 $3204 = HEAP32[$3203>>2]|0;
 $3205 = (_i64Add(($3197|0),($3198|0),($3201|0),($3204|0))|0);
 $3206 = tempRet0;
 $3207 = $3189 ^ $3205;
 $3208 = $3190 ^ $3206;
 $3209 = (_rotr64($3207,$3208,16)|0);
 $3210 = tempRet0;
 $3211 = $54;
 $3212 = $3211;
 HEAP32[$3212>>2] = $3209;
 $3213 = (($3211) + 4)|0;
 $3214 = $3213;
 HEAP32[$3214>>2] = $3210;
 $3215 = (_i64Add(($3191|0),($3192|0),($3209|0),($3210|0))|0);
 $3216 = tempRet0;
 $3217 = $28;
 $3218 = $3217;
 HEAP32[$3218>>2] = $3215;
 $3219 = (($3217) + 4)|0;
 $3220 = $3219;
 HEAP32[$3220>>2] = $3216;
 $3221 = $3195 ^ $3215;
 $3222 = $3196 ^ $3216;
 $3223 = (_rotr64($3221,$3222,63)|0);
 $3224 = tempRet0;
 $3225 = $220;
 $3226 = $3225;
 $3227 = HEAP32[$3226>>2]|0;
 $3228 = (($3225) + 4)|0;
 $3229 = $3228;
 $3230 = HEAP32[$3229>>2]|0;
 $3231 = (_i64Add(($3051|0),($3052|0),($3227|0),($3230|0))|0);
 $3232 = tempRet0;
 $3233 = $459;
 $3234 = $3233;
 $3235 = HEAP32[$3234>>2]|0;
 $3236 = (($3233) + 4)|0;
 $3237 = $3236;
 $3238 = HEAP32[$3237>>2]|0;
 $3239 = (_i64Add(($3231|0),($3232|0),($3235|0),($3238|0))|0);
 $3240 = tempRet0;
 $3241 = $3117 ^ $3239;
 $3242 = $3118 ^ $3240;
 $3243 = (_rotr64($3241,$3242,32)|0);
 $3244 = tempRet0;
 $3245 = $29;
 $3246 = $3245;
 $3247 = HEAP32[$3246>>2]|0;
 $3248 = (($3245) + 4)|0;
 $3249 = $3248;
 $3250 = HEAP32[$3249>>2]|0;
 $3251 = (_i64Add(($3247|0),($3250|0),($3243|0),($3244|0))|0);
 $3252 = tempRet0;
 $3253 = $3227 ^ $3251;
 $3254 = $3230 ^ $3252;
 $3255 = (_rotr64($3253,$3254,24)|0);
 $3256 = tempRet0;
 $3257 = (_i64Add(($3239|0),($3240|0),($3255|0),($3256|0))|0);
 $3258 = tempRet0;
 $3259 = $114;
 $3260 = $3259;
 $3261 = HEAP32[$3260>>2]|0;
 $3262 = (($3259) + 4)|0;
 $3263 = $3262;
 $3264 = HEAP32[$3263>>2]|0;
 $3265 = (_i64Add(($3257|0),($3258|0),($3261|0),($3264|0))|0);
 $3266 = tempRet0;
 $3267 = $3243 ^ $3265;
 $3268 = $3244 ^ $3266;
 $3269 = (_rotr64($3267,$3268,16)|0);
 $3270 = tempRet0;
 $3271 = $64;
 $3272 = $3271;
 HEAP32[$3272>>2] = $3269;
 $3273 = (($3271) + 4)|0;
 $3274 = $3273;
 HEAP32[$3274>>2] = $3270;
 $3275 = (_i64Add(($3251|0),($3252|0),($3269|0),($3270|0))|0);
 $3276 = tempRet0;
 $3277 = $3255 ^ $3275;
 $3278 = $3256 ^ $3276;
 $3279 = (_rotr64($3277,$3278,63)|0);
 $3280 = tempRet0;
 $3281 = $280;
 $3282 = $3281;
 $3283 = HEAP32[$3282>>2]|0;
 $3284 = (($3281) + 4)|0;
 $3285 = $3284;
 $3286 = HEAP32[$3285>>2]|0;
 $3287 = (_i64Add(($3113|0),($3114|0),($3283|0),($3286|0))|0);
 $3288 = tempRet0;
 $3289 = $186;
 $3290 = $3289;
 $3291 = HEAP32[$3290>>2]|0;
 $3292 = (($3289) + 4)|0;
 $3293 = $3292;
 $3294 = HEAP32[$3293>>2]|0;
 $3295 = (_i64Add(($3287|0),($3288|0),($3291|0),($3294|0))|0);
 $3296 = tempRet0;
 $3297 = $74;
 $3298 = $3297;
 $3299 = HEAP32[$3298>>2]|0;
 $3300 = (($3297) + 4)|0;
 $3301 = $3300;
 $3302 = HEAP32[$3301>>2]|0;
 $3303 = $3299 ^ $3295;
 $3304 = $3302 ^ $3296;
 $3305 = (_rotr64($3303,$3304,32)|0);
 $3306 = tempRet0;
 $3307 = $30;
 $3308 = $3307;
 $3309 = HEAP32[$3308>>2]|0;
 $3310 = (($3307) + 4)|0;
 $3311 = $3310;
 $3312 = HEAP32[$3311>>2]|0;
 $3313 = (_i64Add(($3309|0),($3312|0),($3305|0),($3306|0))|0);
 $3314 = tempRet0;
 $3315 = $3283 ^ $3313;
 $3316 = $3286 ^ $3314;
 $3317 = (_rotr64($3315,$3316,24)|0);
 $3318 = tempRet0;
 $3319 = (_i64Add(($3295|0),($3296|0),($3317|0),($3318|0))|0);
 $3320 = tempRet0;
 $3321 = $370;
 $3322 = $3321;
 $3323 = HEAP32[$3322>>2]|0;
 $3324 = (($3321) + 4)|0;
 $3325 = $3324;
 $3326 = HEAP32[$3325>>2]|0;
 $3327 = (_i64Add(($3319|0),($3320|0),($3323|0),($3326|0))|0);
 $3328 = tempRet0;
 $3329 = $3305 ^ $3327;
 $3330 = $3306 ^ $3328;
 $3331 = (_rotr64($3329,$3330,16)|0);
 $3332 = tempRet0;
 $3333 = (_i64Add(($3313|0),($3314|0),($3331|0),($3332|0))|0);
 $3334 = tempRet0;
 $3335 = $3317 ^ $3333;
 $3336 = $3318 ^ $3334;
 $3337 = (_rotr64($3335,$3336,63)|0);
 $3338 = tempRet0;
 $3339 = (_i64Add(($3147|0),($3148|0),($3223|0),($3224|0))|0);
 $3340 = tempRet0;
 $3341 = $250;
 $3342 = $3341;
 $3343 = HEAP32[$3342>>2]|0;
 $3344 = (($3341) + 4)|0;
 $3345 = $3344;
 $3346 = HEAP32[$3345>>2]|0;
 $3347 = (_i64Add(($3339|0),($3340|0),($3343|0),($3346|0))|0);
 $3348 = tempRet0;
 $3349 = $3331 ^ $3347;
 $3350 = $3332 ^ $3348;
 $3351 = (_rotr64($3349,$3350,32)|0);
 $3352 = tempRet0;
 $3353 = (_i64Add(($3275|0),($3276|0),($3351|0),($3352|0))|0);
 $3354 = tempRet0;
 $3355 = $3223 ^ $3353;
 $3356 = $3224 ^ $3354;
 $3357 = (_rotr64($3355,$3356,24)|0);
 $3358 = tempRet0;
 $3359 = (_i64Add(($3347|0),($3348|0),($3357|0),($3358|0))|0);
 $3360 = tempRet0;
 $3361 = $2;
 $3362 = $3361;
 $3363 = HEAP32[$3362>>2]|0;
 $3364 = (($3361) + 4)|0;
 $3365 = $3364;
 $3366 = HEAP32[$3365>>2]|0;
 $3367 = (_i64Add(($3359|0),($3360|0),($3363|0),($3366|0))|0);
 $3368 = tempRet0;
 $3369 = $3351 ^ $3367;
 $3370 = $3352 ^ $3368;
 $3371 = (_rotr64($3369,$3370,16)|0);
 $3372 = tempRet0;
 $3373 = $74;
 $3374 = $3373;
 HEAP32[$3374>>2] = $3371;
 $3375 = (($3373) + 4)|0;
 $3376 = $3375;
 HEAP32[$3376>>2] = $3372;
 $3377 = (_i64Add(($3353|0),($3354|0),($3371|0),($3372|0))|0);
 $3378 = tempRet0;
 $3379 = $29;
 $3380 = $3379;
 HEAP32[$3380>>2] = $3377;
 $3381 = (($3379) + 4)|0;
 $3382 = $3381;
 HEAP32[$3382>>2] = $3378;
 $3383 = $3357 ^ $3377;
 $3384 = $3358 ^ $3378;
 $3385 = (_rotr64($3383,$3384,63)|0);
 $3386 = tempRet0;
 $3387 = $156;
 $3388 = $3387;
 HEAP32[$3388>>2] = $3385;
 $3389 = (($3387) + 4)|0;
 $3390 = $3389;
 HEAP32[$3390>>2] = $3386;
 $3391 = (_i64Add(($3205|0),($3206|0),($3279|0),($3280|0))|0);
 $3392 = tempRet0;
 $3393 = $556;
 $3394 = $3393;
 $3395 = HEAP32[$3394>>2]|0;
 $3396 = (($3393) + 4)|0;
 $3397 = $3396;
 $3398 = HEAP32[$3397>>2]|0;
 $3399 = (_i64Add(($3391|0),($3392|0),($3395|0),($3398|0))|0);
 $3400 = tempRet0;
 $3401 = $44;
 $3402 = $3401;
 $3403 = HEAP32[$3402>>2]|0;
 $3404 = (($3401) + 4)|0;
 $3405 = $3404;
 $3406 = HEAP32[$3405>>2]|0;
 $3407 = $3403 ^ $3399;
 $3408 = $3406 ^ $3400;
 $3409 = (_rotr64($3407,$3408,32)|0);
 $3410 = tempRet0;
 $3411 = (_i64Add(($3333|0),($3334|0),($3409|0),($3410|0))|0);
 $3412 = tempRet0;
 $3413 = $3279 ^ $3411;
 $3414 = $3280 ^ $3412;
 $3415 = (_rotr64($3413,$3414,24)|0);
 $3416 = tempRet0;
 $3417 = (_i64Add(($3399|0),($3400|0),($3415|0),($3416|0))|0);
 $3418 = tempRet0;
 $3419 = $229;
 $3420 = $3419;
 $3421 = HEAP32[$3420>>2]|0;
 $3422 = (($3419) + 4)|0;
 $3423 = $3422;
 $3424 = HEAP32[$3423>>2]|0;
 $3425 = (_i64Add(($3417|0),($3418|0),($3421|0),($3424|0))|0);
 $3426 = tempRet0;
 $3427 = $3409 ^ $3425;
 $3428 = $3410 ^ $3426;
 $3429 = (_rotr64($3427,$3428,16)|0);
 $3430 = tempRet0;
 $3431 = (_i64Add(($3411|0),($3412|0),($3429|0),($3430|0))|0);
 $3432 = tempRet0;
 $3433 = $30;
 $3434 = $3433;
 HEAP32[$3434>>2] = $3431;
 $3435 = (($3433) + 4)|0;
 $3436 = $3435;
 HEAP32[$3436>>2] = $3432;
 $3437 = $3415 ^ $3431;
 $3438 = $3416 ^ $3432;
 $3439 = (_rotr64($3437,$3438,63)|0);
 $3440 = tempRet0;
 $3441 = $220;
 $3442 = $3441;
 HEAP32[$3442>>2] = $3439;
 $3443 = (($3441) + 4)|0;
 $3444 = $3443;
 HEAP32[$3444>>2] = $3440;
 $3445 = (_i64Add(($3265|0),($3266|0),($3337|0),($3338|0))|0);
 $3446 = tempRet0;
 $3447 = $349;
 $3448 = $3447;
 $3449 = HEAP32[$3448>>2]|0;
 $3450 = (($3447) + 4)|0;
 $3451 = $3450;
 $3452 = HEAP32[$3451>>2]|0;
 $3453 = (_i64Add(($3445|0),($3446|0),($3449|0),($3452|0))|0);
 $3454 = tempRet0;
 $3455 = $54;
 $3456 = $3455;
 $3457 = HEAP32[$3456>>2]|0;
 $3458 = (($3455) + 4)|0;
 $3459 = $3458;
 $3460 = HEAP32[$3459>>2]|0;
 $3461 = $3457 ^ $3453;
 $3462 = $3460 ^ $3454;
 $3463 = (_rotr64($3461,$3462,32)|0);
 $3464 = tempRet0;
 $3465 = $27;
 $3466 = $3465;
 $3467 = HEAP32[$3466>>2]|0;
 $3468 = (($3465) + 4)|0;
 $3469 = $3468;
 $3470 = HEAP32[$3469>>2]|0;
 $3471 = (_i64Add(($3467|0),($3470|0),($3463|0),($3464|0))|0);
 $3472 = tempRet0;
 $3473 = $3337 ^ $3471;
 $3474 = $3338 ^ $3472;
 $3475 = (_rotr64($3473,$3474,24)|0);
 $3476 = tempRet0;
 $3477 = (_i64Add(($3453|0),($3454|0),($3475|0),($3476|0))|0);
 $3478 = tempRet0;
 $3479 = $289;
 $3480 = $3479;
 $3481 = HEAP32[$3480>>2]|0;
 $3482 = (($3479) + 4)|0;
 $3483 = $3482;
 $3484 = HEAP32[$3483>>2]|0;
 $3485 = (_i64Add(($3477|0),($3478|0),($3481|0),($3484|0))|0);
 $3486 = tempRet0;
 $3487 = $3463 ^ $3485;
 $3488 = $3464 ^ $3486;
 $3489 = (_rotr64($3487,$3488,16)|0);
 $3490 = tempRet0;
 $3491 = (_i64Add(($3471|0),($3472|0),($3489|0),($3490|0))|0);
 $3492 = tempRet0;
 $3493 = $3475 ^ $3491;
 $3494 = $3476 ^ $3492;
 $3495 = (_rotr64($3493,$3494,63)|0);
 $3496 = tempRet0;
 $3497 = $280;
 $3498 = $3497;
 HEAP32[$3498>>2] = $3495;
 $3499 = (($3497) + 4)|0;
 $3500 = $3499;
 HEAP32[$3500>>2] = $3496;
 $3501 = $85;
 $3502 = $3501;
 $3503 = HEAP32[$3502>>2]|0;
 $3504 = (($3501) + 4)|0;
 $3505 = $3504;
 $3506 = HEAP32[$3505>>2]|0;
 $3507 = (_i64Add(($3327|0),($3328|0),($3503|0),($3506|0))|0);
 $3508 = tempRet0;
 $3509 = $165;
 $3510 = $3509;
 $3511 = HEAP32[$3510>>2]|0;
 $3512 = (($3509) + 4)|0;
 $3513 = $3512;
 $3514 = HEAP32[$3513>>2]|0;
 $3515 = (_i64Add(($3507|0),($3508|0),($3511|0),($3514|0))|0);
 $3516 = tempRet0;
 $3517 = $64;
 $3518 = $3517;
 $3519 = HEAP32[$3518>>2]|0;
 $3520 = (($3517) + 4)|0;
 $3521 = $3520;
 $3522 = HEAP32[$3521>>2]|0;
 $3523 = $3519 ^ $3515;
 $3524 = $3522 ^ $3516;
 $3525 = (_rotr64($3523,$3524,32)|0);
 $3526 = tempRet0;
 $3527 = $28;
 $3528 = $3527;
 $3529 = HEAP32[$3528>>2]|0;
 $3530 = (($3527) + 4)|0;
 $3531 = $3530;
 $3532 = HEAP32[$3531>>2]|0;
 $3533 = (_i64Add(($3529|0),($3532|0),($3525|0),($3526|0))|0);
 $3534 = tempRet0;
 $3535 = $3503 ^ $3533;
 $3536 = $3506 ^ $3534;
 $3537 = (_rotr64($3535,$3536,24)|0);
 $3538 = tempRet0;
 $3539 = (_i64Add(($3515|0),($3516|0),($3537|0),($3538|0))|0);
 $3540 = tempRet0;
 $3541 = $403;
 $3542 = $3541;
 $3543 = HEAP32[$3542>>2]|0;
 $3544 = (($3541) + 4)|0;
 $3545 = $3544;
 $3546 = HEAP32[$3545>>2]|0;
 $3547 = (_i64Add(($3539|0),($3540|0),($3543|0),($3546|0))|0);
 $3548 = tempRet0;
 $3549 = $3525 ^ $3547;
 $3550 = $3526 ^ $3548;
 $3551 = (_rotr64($3549,$3550,16)|0);
 $3552 = tempRet0;
 $3553 = (_i64Add(($3533|0),($3534|0),($3551|0),($3552|0))|0);
 $3554 = tempRet0;
 $3555 = $3537 ^ $3553;
 $3556 = $3538 ^ $3554;
 $3557 = (_rotr64($3555,$3556,63)|0);
 $3558 = tempRet0;
 $3559 = (_i64Add(($3367|0),($3368|0),($3557|0),($3558|0))|0);
 $3560 = tempRet0;
 $3561 = (_i64Add(($3559|0),($3560|0),($3481|0),($3484|0))|0);
 $3562 = tempRet0;
 $3563 = $3429 ^ $3561;
 $3564 = $3430 ^ $3562;
 $3565 = (_rotr64($3563,$3564,32)|0);
 $3566 = tempRet0;
 $3567 = (_i64Add(($3491|0),($3492|0),($3565|0),($3566|0))|0);
 $3568 = tempRet0;
 $3569 = $3557 ^ $3567;
 $3570 = $3558 ^ $3568;
 $3571 = (_rotr64($3569,$3570,24)|0);
 $3572 = tempRet0;
 $3573 = (_i64Add(($3561|0),($3562|0),($3571|0),($3572|0))|0);
 $3574 = tempRet0;
 $3575 = (_i64Add(($3573|0),($3574|0),($3395|0),($3398|0))|0);
 $3576 = tempRet0;
 $3577 = $3565 ^ $3575;
 $3578 = $3566 ^ $3576;
 $3579 = (_rotr64($3577,$3578,16)|0);
 $3580 = tempRet0;
 $3581 = $44;
 $3582 = $3581;
 HEAP32[$3582>>2] = $3579;
 $3583 = (($3581) + 4)|0;
 $3584 = $3583;
 HEAP32[$3584>>2] = $3580;
 $3585 = (_i64Add(($3567|0),($3568|0),($3579|0),($3580|0))|0);
 $3586 = tempRet0;
 $3587 = $27;
 $3588 = $3587;
 HEAP32[$3588>>2] = $3585;
 $3589 = (($3587) + 4)|0;
 $3590 = $3589;
 HEAP32[$3590>>2] = $3586;
 $3591 = $3571 ^ $3585;
 $3592 = $3572 ^ $3586;
 $3593 = (_rotr64($3591,$3592,63)|0);
 $3594 = tempRet0;
 $3595 = $85;
 $3596 = $3595;
 HEAP32[$3596>>2] = $3593;
 $3597 = (($3595) + 4)|0;
 $3598 = $3597;
 HEAP32[$3598>>2] = $3594;
 $3599 = $156;
 $3600 = $3599;
 $3601 = HEAP32[$3600>>2]|0;
 $3602 = (($3599) + 4)|0;
 $3603 = $3602;
 $3604 = HEAP32[$3603>>2]|0;
 $3605 = (_i64Add(($3425|0),($3426|0),($3601|0),($3604|0))|0);
 $3606 = tempRet0;
 $3607 = $523;
 $3608 = $3607;
 $3609 = HEAP32[$3608>>2]|0;
 $3610 = (($3607) + 4)|0;
 $3611 = $3610;
 $3612 = HEAP32[$3611>>2]|0;
 $3613 = (_i64Add(($3605|0),($3606|0),($3609|0),($3612|0))|0);
 $3614 = tempRet0;
 $3615 = $3489 ^ $3613;
 $3616 = $3490 ^ $3614;
 $3617 = (_rotr64($3615,$3616,32)|0);
 $3618 = tempRet0;
 $3619 = (_i64Add(($3553|0),($3554|0),($3617|0),($3618|0))|0);
 $3620 = tempRet0;
 $3621 = $3601 ^ $3619;
 $3622 = $3604 ^ $3620;
 $3623 = (_rotr64($3621,$3622,24)|0);
 $3624 = tempRet0;
 $3625 = (_i64Add(($3613|0),($3614|0),($3623|0),($3624|0))|0);
 $3626 = tempRet0;
 $3627 = $370;
 $3628 = $3627;
 $3629 = HEAP32[$3628>>2]|0;
 $3630 = (($3627) + 4)|0;
 $3631 = $3630;
 $3632 = HEAP32[$3631>>2]|0;
 $3633 = (_i64Add(($3625|0),($3626|0),($3629|0),($3632|0))|0);
 $3634 = tempRet0;
 $3635 = $3617 ^ $3633;
 $3636 = $3618 ^ $3634;
 $3637 = (_rotr64($3635,$3636,16)|0);
 $3638 = tempRet0;
 $3639 = $54;
 $3640 = $3639;
 HEAP32[$3640>>2] = $3637;
 $3641 = (($3639) + 4)|0;
 $3642 = $3641;
 HEAP32[$3642>>2] = $3638;
 $3643 = (_i64Add(($3619|0),($3620|0),($3637|0),($3638|0))|0);
 $3644 = tempRet0;
 $3645 = $28;
 $3646 = $3645;
 HEAP32[$3646>>2] = $3643;
 $3647 = (($3645) + 4)|0;
 $3648 = $3647;
 HEAP32[$3648>>2] = $3644;
 $3649 = $3623 ^ $3643;
 $3650 = $3624 ^ $3644;
 $3651 = (_rotr64($3649,$3650,63)|0);
 $3652 = tempRet0;
 $3653 = $220;
 $3654 = $3653;
 $3655 = HEAP32[$3654>>2]|0;
 $3656 = (($3653) + 4)|0;
 $3657 = $3656;
 $3658 = HEAP32[$3657>>2]|0;
 $3659 = (_i64Add(($3485|0),($3486|0),($3655|0),($3658|0))|0);
 $3660 = tempRet0;
 $3661 = $430;
 $3662 = $3661;
 $3663 = HEAP32[$3662>>2]|0;
 $3664 = (($3661) + 4)|0;
 $3665 = $3664;
 $3666 = HEAP32[$3665>>2]|0;
 $3667 = (_i64Add(($3659|0),($3660|0),($3663|0),($3666|0))|0);
 $3668 = tempRet0;
 $3669 = $3551 ^ $3667;
 $3670 = $3552 ^ $3668;
 $3671 = (_rotr64($3669,$3670,32)|0);
 $3672 = tempRet0;
 $3673 = $29;
 $3674 = $3673;
 $3675 = HEAP32[$3674>>2]|0;
 $3676 = (($3673) + 4)|0;
 $3677 = $3676;
 $3678 = HEAP32[$3677>>2]|0;
 $3679 = (_i64Add(($3675|0),($3678|0),($3671|0),($3672|0))|0);
 $3680 = tempRet0;
 $3681 = $3655 ^ $3679;
 $3682 = $3658 ^ $3680;
 $3683 = (_rotr64($3681,$3682,24)|0);
 $3684 = tempRet0;
 $3685 = (_i64Add(($3667|0),($3668|0),($3683|0),($3684|0))|0);
 $3686 = tempRet0;
 $3687 = $186;
 $3688 = $3687;
 $3689 = HEAP32[$3688>>2]|0;
 $3690 = (($3687) + 4)|0;
 $3691 = $3690;
 $3692 = HEAP32[$3691>>2]|0;
 $3693 = (_i64Add(($3685|0),($3686|0),($3689|0),($3692|0))|0);
 $3694 = tempRet0;
 $3695 = $3671 ^ $3693;
 $3696 = $3672 ^ $3694;
 $3697 = (_rotr64($3695,$3696,16)|0);
 $3698 = tempRet0;
 $3699 = $64;
 $3700 = $3699;
 HEAP32[$3700>>2] = $3697;
 $3701 = (($3699) + 4)|0;
 $3702 = $3701;
 HEAP32[$3702>>2] = $3698;
 $3703 = (_i64Add(($3679|0),($3680|0),($3697|0),($3698|0))|0);
 $3704 = tempRet0;
 $3705 = $3683 ^ $3703;
 $3706 = $3684 ^ $3704;
 $3707 = (_rotr64($3705,$3706,63)|0);
 $3708 = tempRet0;
 $3709 = $280;
 $3710 = $3709;
 $3711 = HEAP32[$3710>>2]|0;
 $3712 = (($3709) + 4)|0;
 $3713 = $3712;
 $3714 = HEAP32[$3713>>2]|0;
 $3715 = (_i64Add(($3547|0),($3548|0),($3711|0),($3714|0))|0);
 $3716 = tempRet0;
 $3717 = $2;
 $3718 = $3717;
 $3719 = HEAP32[$3718>>2]|0;
 $3720 = (($3717) + 4)|0;
 $3721 = $3720;
 $3722 = HEAP32[$3721>>2]|0;
 $3723 = (_i64Add(($3715|0),($3716|0),($3719|0),($3722|0))|0);
 $3724 = tempRet0;
 $3725 = $74;
 $3726 = $3725;
 $3727 = HEAP32[$3726>>2]|0;
 $3728 = (($3725) + 4)|0;
 $3729 = $3728;
 $3730 = HEAP32[$3729>>2]|0;
 $3731 = $3727 ^ $3723;
 $3732 = $3730 ^ $3724;
 $3733 = (_rotr64($3731,$3732,32)|0);
 $3734 = tempRet0;
 $3735 = $30;
 $3736 = $3735;
 $3737 = HEAP32[$3736>>2]|0;
 $3738 = (($3735) + 4)|0;
 $3739 = $3738;
 $3740 = HEAP32[$3739>>2]|0;
 $3741 = (_i64Add(($3737|0),($3740|0),($3733|0),($3734|0))|0);
 $3742 = tempRet0;
 $3743 = $3711 ^ $3741;
 $3744 = $3714 ^ $3742;
 $3745 = (_rotr64($3743,$3744,24)|0);
 $3746 = tempRet0;
 $3747 = (_i64Add(($3723|0),($3724|0),($3745|0),($3746|0))|0);
 $3748 = tempRet0;
 $3749 = $349;
 $3750 = $3749;
 $3751 = HEAP32[$3750>>2]|0;
 $3752 = (($3749) + 4)|0;
 $3753 = $3752;
 $3754 = HEAP32[$3753>>2]|0;
 $3755 = (_i64Add(($3747|0),($3748|0),($3751|0),($3754|0))|0);
 $3756 = tempRet0;
 $3757 = $3733 ^ $3755;
 $3758 = $3734 ^ $3756;
 $3759 = (_rotr64($3757,$3758,16)|0);
 $3760 = tempRet0;
 $3761 = (_i64Add(($3741|0),($3742|0),($3759|0),($3760|0))|0);
 $3762 = tempRet0;
 $3763 = $3745 ^ $3761;
 $3764 = $3746 ^ $3762;
 $3765 = (_rotr64($3763,$3764,63)|0);
 $3766 = tempRet0;
 $3767 = (_i64Add(($3575|0),($3576|0),($3651|0),($3652|0))|0);
 $3768 = tempRet0;
 $3769 = $459;
 $3770 = $3769;
 $3771 = HEAP32[$3770>>2]|0;
 $3772 = (($3769) + 4)|0;
 $3773 = $3772;
 $3774 = HEAP32[$3773>>2]|0;
 $3775 = (_i64Add(($3767|0),($3768|0),($3771|0),($3774|0))|0);
 $3776 = tempRet0;
 $3777 = $3759 ^ $3775;
 $3778 = $3760 ^ $3776;
 $3779 = (_rotr64($3777,$3778,32)|0);
 $3780 = tempRet0;
 $3781 = (_i64Add(($3703|0),($3704|0),($3779|0),($3780|0))|0);
 $3782 = tempRet0;
 $3783 = $3651 ^ $3781;
 $3784 = $3652 ^ $3782;
 $3785 = (_rotr64($3783,$3784,24)|0);
 $3786 = tempRet0;
 $3787 = (_i64Add(($3775|0),($3776|0),($3785|0),($3786|0))|0);
 $3788 = tempRet0;
 $3789 = $165;
 $3790 = $3789;
 $3791 = HEAP32[$3790>>2]|0;
 $3792 = (($3789) + 4)|0;
 $3793 = $3792;
 $3794 = HEAP32[$3793>>2]|0;
 $3795 = (_i64Add(($3787|0),($3788|0),($3791|0),($3794|0))|0);
 $3796 = tempRet0;
 $3797 = $3779 ^ $3795;
 $3798 = $3780 ^ $3796;
 $3799 = (_rotr64($3797,$3798,16)|0);
 $3800 = tempRet0;
 $3801 = $74;
 $3802 = $3801;
 HEAP32[$3802>>2] = $3799;
 $3803 = (($3801) + 4)|0;
 $3804 = $3803;
 HEAP32[$3804>>2] = $3800;
 $3805 = (_i64Add(($3781|0),($3782|0),($3799|0),($3800|0))|0);
 $3806 = tempRet0;
 $3807 = $29;
 $3808 = $3807;
 HEAP32[$3808>>2] = $3805;
 $3809 = (($3807) + 4)|0;
 $3810 = $3809;
 HEAP32[$3810>>2] = $3806;
 $3811 = $3785 ^ $3805;
 $3812 = $3786 ^ $3806;
 $3813 = (_rotr64($3811,$3812,63)|0);
 $3814 = tempRet0;
 $3815 = $156;
 $3816 = $3815;
 HEAP32[$3816>>2] = $3813;
 $3817 = (($3815) + 4)|0;
 $3818 = $3817;
 HEAP32[$3818>>2] = $3814;
 $3819 = (_i64Add(($3633|0),($3634|0),($3707|0),($3708|0))|0);
 $3820 = tempRet0;
 $3821 = $492;
 $3822 = $3821;
 $3823 = HEAP32[$3822>>2]|0;
 $3824 = (($3821) + 4)|0;
 $3825 = $3824;
 $3826 = HEAP32[$3825>>2]|0;
 $3827 = (_i64Add(($3819|0),($3820|0),($3823|0),($3826|0))|0);
 $3828 = tempRet0;
 $3829 = $44;
 $3830 = $3829;
 $3831 = HEAP32[$3830>>2]|0;
 $3832 = (($3829) + 4)|0;
 $3833 = $3832;
 $3834 = HEAP32[$3833>>2]|0;
 $3835 = $3831 ^ $3827;
 $3836 = $3834 ^ $3828;
 $3837 = (_rotr64($3835,$3836,32)|0);
 $3838 = tempRet0;
 $3839 = (_i64Add(($3761|0),($3762|0),($3837|0),($3838|0))|0);
 $3840 = tempRet0;
 $3841 = $3707 ^ $3839;
 $3842 = $3708 ^ $3840;
 $3843 = (_rotr64($3841,$3842,24)|0);
 $3844 = tempRet0;
 $3845 = (_i64Add(($3827|0),($3828|0),($3843|0),($3844|0))|0);
 $3846 = tempRet0;
 $3847 = $322;
 $3848 = $3847;
 $3849 = HEAP32[$3848>>2]|0;
 $3850 = (($3847) + 4)|0;
 $3851 = $3850;
 $3852 = HEAP32[$3851>>2]|0;
 $3853 = (_i64Add(($3845|0),($3846|0),($3849|0),($3852|0))|0);
 $3854 = tempRet0;
 $3855 = $3837 ^ $3853;
 $3856 = $3838 ^ $3854;
 $3857 = (_rotr64($3855,$3856,16)|0);
 $3858 = tempRet0;
 $3859 = (_i64Add(($3839|0),($3840|0),($3857|0),($3858|0))|0);
 $3860 = tempRet0;
 $3861 = $30;
 $3862 = $3861;
 HEAP32[$3862>>2] = $3859;
 $3863 = (($3861) + 4)|0;
 $3864 = $3863;
 HEAP32[$3864>>2] = $3860;
 $3865 = $3843 ^ $3859;
 $3866 = $3844 ^ $3860;
 $3867 = (_rotr64($3865,$3866,63)|0);
 $3868 = tempRet0;
 $3869 = $220;
 $3870 = $3869;
 HEAP32[$3870>>2] = $3867;
 $3871 = (($3869) + 4)|0;
 $3872 = $3871;
 HEAP32[$3872>>2] = $3868;
 $3873 = (_i64Add(($3693|0),($3694|0),($3765|0),($3766|0))|0);
 $3874 = tempRet0;
 $3875 = $114;
 $3876 = $3875;
 $3877 = HEAP32[$3876>>2]|0;
 $3878 = (($3875) + 4)|0;
 $3879 = $3878;
 $3880 = HEAP32[$3879>>2]|0;
 $3881 = (_i64Add(($3873|0),($3874|0),($3877|0),($3880|0))|0);
 $3882 = tempRet0;
 $3883 = $54;
 $3884 = $3883;
 $3885 = HEAP32[$3884>>2]|0;
 $3886 = (($3883) + 4)|0;
 $3887 = $3886;
 $3888 = HEAP32[$3887>>2]|0;
 $3889 = $3885 ^ $3881;
 $3890 = $3888 ^ $3882;
 $3891 = (_rotr64($3889,$3890,32)|0);
 $3892 = tempRet0;
 $3893 = $27;
 $3894 = $3893;
 $3895 = HEAP32[$3894>>2]|0;
 $3896 = (($3893) + 4)|0;
 $3897 = $3896;
 $3898 = HEAP32[$3897>>2]|0;
 $3899 = (_i64Add(($3895|0),($3898|0),($3891|0),($3892|0))|0);
 $3900 = tempRet0;
 $3901 = $3765 ^ $3899;
 $3902 = $3766 ^ $3900;
 $3903 = (_rotr64($3901,$3902,24)|0);
 $3904 = tempRet0;
 $3905 = (_i64Add(($3881|0),($3882|0),($3903|0),($3904|0))|0);
 $3906 = tempRet0;
 $3907 = $229;
 $3908 = $3907;
 $3909 = HEAP32[$3908>>2]|0;
 $3910 = (($3907) + 4)|0;
 $3911 = $3910;
 $3912 = HEAP32[$3911>>2]|0;
 $3913 = (_i64Add(($3905|0),($3906|0),($3909|0),($3912|0))|0);
 $3914 = tempRet0;
 $3915 = $3891 ^ $3913;
 $3916 = $3892 ^ $3914;
 $3917 = (_rotr64($3915,$3916,16)|0);
 $3918 = tempRet0;
 $3919 = (_i64Add(($3899|0),($3900|0),($3917|0),($3918|0))|0);
 $3920 = tempRet0;
 $3921 = $3903 ^ $3919;
 $3922 = $3904 ^ $3920;
 $3923 = (_rotr64($3921,$3922,63)|0);
 $3924 = tempRet0;
 $3925 = $280;
 $3926 = $3925;
 HEAP32[$3926>>2] = $3923;
 $3927 = (($3925) + 4)|0;
 $3928 = $3927;
 HEAP32[$3928>>2] = $3924;
 $3929 = $85;
 $3930 = $3929;
 $3931 = HEAP32[$3930>>2]|0;
 $3932 = (($3929) + 4)|0;
 $3933 = $3932;
 $3934 = HEAP32[$3933>>2]|0;
 $3935 = (_i64Add(($3755|0),($3756|0),($3931|0),($3934|0))|0);
 $3936 = tempRet0;
 $3937 = $403;
 $3938 = $3937;
 $3939 = HEAP32[$3938>>2]|0;
 $3940 = (($3937) + 4)|0;
 $3941 = $3940;
 $3942 = HEAP32[$3941>>2]|0;
 $3943 = (_i64Add(($3935|0),($3936|0),($3939|0),($3942|0))|0);
 $3944 = tempRet0;
 $3945 = $64;
 $3946 = $3945;
 $3947 = HEAP32[$3946>>2]|0;
 $3948 = (($3945) + 4)|0;
 $3949 = $3948;
 $3950 = HEAP32[$3949>>2]|0;
 $3951 = $3947 ^ $3943;
 $3952 = $3950 ^ $3944;
 $3953 = (_rotr64($3951,$3952,32)|0);
 $3954 = tempRet0;
 $3955 = $28;
 $3956 = $3955;
 $3957 = HEAP32[$3956>>2]|0;
 $3958 = (($3955) + 4)|0;
 $3959 = $3958;
 $3960 = HEAP32[$3959>>2]|0;
 $3961 = (_i64Add(($3957|0),($3960|0),($3953|0),($3954|0))|0);
 $3962 = tempRet0;
 $3963 = $3931 ^ $3961;
 $3964 = $3934 ^ $3962;
 $3965 = (_rotr64($3963,$3964,24)|0);
 $3966 = tempRet0;
 $3967 = (_i64Add(($3943|0),($3944|0),($3965|0),($3966|0))|0);
 $3968 = tempRet0;
 $3969 = $250;
 $3970 = $3969;
 $3971 = HEAP32[$3970>>2]|0;
 $3972 = (($3969) + 4)|0;
 $3973 = $3972;
 $3974 = HEAP32[$3973>>2]|0;
 $3975 = (_i64Add(($3967|0),($3968|0),($3971|0),($3974|0))|0);
 $3976 = tempRet0;
 $3977 = $3953 ^ $3975;
 $3978 = $3954 ^ $3976;
 $3979 = (_rotr64($3977,$3978,16)|0);
 $3980 = tempRet0;
 $3981 = (_i64Add(($3961|0),($3962|0),($3979|0),($3980|0))|0);
 $3982 = tempRet0;
 $3983 = $3965 ^ $3981;
 $3984 = $3966 ^ $3982;
 $3985 = (_rotr64($3983,$3984,63)|0);
 $3986 = tempRet0;
 $3987 = (_i64Add(($3795|0),($3796|0),($3985|0),($3986|0))|0);
 $3988 = tempRet0;
 $3989 = (_i64Add(($3987|0),($3988|0),($3939|0),($3942|0))|0);
 $3990 = tempRet0;
 $3991 = $3857 ^ $3989;
 $3992 = $3858 ^ $3990;
 $3993 = (_rotr64($3991,$3992,32)|0);
 $3994 = tempRet0;
 $3995 = (_i64Add(($3919|0),($3920|0),($3993|0),($3994|0))|0);
 $3996 = tempRet0;
 $3997 = $3985 ^ $3995;
 $3998 = $3986 ^ $3996;
 $3999 = (_rotr64($3997,$3998,24)|0);
 $4000 = tempRet0;
 $4001 = (_i64Add(($3989|0),($3990|0),($3999|0),($4000|0))|0);
 $4002 = tempRet0;
 $4003 = $165;
 $4004 = $4003;
 $4005 = HEAP32[$4004>>2]|0;
 $4006 = (($4003) + 4)|0;
 $4007 = $4006;
 $4008 = HEAP32[$4007>>2]|0;
 $4009 = (_i64Add(($4001|0),($4002|0),($4005|0),($4008|0))|0);
 $4010 = tempRet0;
 $4011 = $3993 ^ $4009;
 $4012 = $3994 ^ $4010;
 $4013 = (_rotr64($4011,$4012,16)|0);
 $4014 = tempRet0;
 $4015 = $44;
 $4016 = $4015;
 HEAP32[$4016>>2] = $4013;
 $4017 = (($4015) + 4)|0;
 $4018 = $4017;
 HEAP32[$4018>>2] = $4014;
 $4019 = (_i64Add(($3995|0),($3996|0),($4013|0),($4014|0))|0);
 $4020 = tempRet0;
 $4021 = $27;
 $4022 = $4021;
 HEAP32[$4022>>2] = $4019;
 $4023 = (($4021) + 4)|0;
 $4024 = $4023;
 HEAP32[$4024>>2] = $4020;
 $4025 = $3999 ^ $4019;
 $4026 = $4000 ^ $4020;
 $4027 = (_rotr64($4025,$4026,63)|0);
 $4028 = tempRet0;
 $4029 = $85;
 $4030 = $4029;
 HEAP32[$4030>>2] = $4027;
 $4031 = (($4029) + 4)|0;
 $4032 = $4031;
 HEAP32[$4032>>2] = $4028;
 $4033 = $156;
 $4034 = $4033;
 $4035 = HEAP32[$4034>>2]|0;
 $4036 = (($4033) + 4)|0;
 $4037 = $4036;
 $4038 = HEAP32[$4037>>2]|0;
 $4039 = (_i64Add(($3853|0),($3854|0),($4035|0),($4038|0))|0);
 $4040 = tempRet0;
 $4041 = $349;
 $4042 = $4041;
 $4043 = HEAP32[$4042>>2]|0;
 $4044 = (($4041) + 4)|0;
 $4045 = $4044;
 $4046 = HEAP32[$4045>>2]|0;
 $4047 = (_i64Add(($4039|0),($4040|0),($4043|0),($4046|0))|0);
 $4048 = tempRet0;
 $4049 = $3917 ^ $4047;
 $4050 = $3918 ^ $4048;
 $4051 = (_rotr64($4049,$4050,32)|0);
 $4052 = tempRet0;
 $4053 = (_i64Add(($3981|0),($3982|0),($4051|0),($4052|0))|0);
 $4054 = tempRet0;
 $4055 = $4035 ^ $4053;
 $4056 = $4038 ^ $4054;
 $4057 = (_rotr64($4055,$4056,24)|0);
 $4058 = tempRet0;
 $4059 = (_i64Add(($4047|0),($4048|0),($4057|0),($4058|0))|0);
 $4060 = tempRet0;
 $4061 = (_i64Add(($4059|0),($4060|0),($3909|0),($3912|0))|0);
 $4062 = tempRet0;
 $4063 = $4051 ^ $4061;
 $4064 = $4052 ^ $4062;
 $4065 = (_rotr64($4063,$4064,16)|0);
 $4066 = tempRet0;
 $4067 = $54;
 $4068 = $4067;
 HEAP32[$4068>>2] = $4065;
 $4069 = (($4067) + 4)|0;
 $4070 = $4069;
 HEAP32[$4070>>2] = $4066;
 $4071 = (_i64Add(($4053|0),($4054|0),($4065|0),($4066|0))|0);
 $4072 = tempRet0;
 $4073 = $28;
 $4074 = $4073;
 HEAP32[$4074>>2] = $4071;
 $4075 = (($4073) + 4)|0;
 $4076 = $4075;
 HEAP32[$4076>>2] = $4072;
 $4077 = $4057 ^ $4071;
 $4078 = $4058 ^ $4072;
 $4079 = (_rotr64($4077,$4078,63)|0);
 $4080 = tempRet0;
 $4081 = $220;
 $4082 = $4081;
 $4083 = HEAP32[$4082>>2]|0;
 $4084 = (($4081) + 4)|0;
 $4085 = $4084;
 $4086 = HEAP32[$4085>>2]|0;
 $4087 = (_i64Add(($3913|0),($3914|0),($4083|0),($4086|0))|0);
 $4088 = tempRet0;
 $4089 = $322;
 $4090 = $4089;
 $4091 = HEAP32[$4090>>2]|0;
 $4092 = (($4089) + 4)|0;
 $4093 = $4092;
 $4094 = HEAP32[$4093>>2]|0;
 $4095 = (_i64Add(($4087|0),($4088|0),($4091|0),($4094|0))|0);
 $4096 = tempRet0;
 $4097 = $3979 ^ $4095;
 $4098 = $3980 ^ $4096;
 $4099 = (_rotr64($4097,$4098,32)|0);
 $4100 = tempRet0;
 $4101 = $29;
 $4102 = $4101;
 $4103 = HEAP32[$4102>>2]|0;
 $4104 = (($4101) + 4)|0;
 $4105 = $4104;
 $4106 = HEAP32[$4105>>2]|0;
 $4107 = (_i64Add(($4103|0),($4106|0),($4099|0),($4100|0))|0);
 $4108 = tempRet0;
 $4109 = $4083 ^ $4107;
 $4110 = $4086 ^ $4108;
 $4111 = (_rotr64($4109,$4110,24)|0);
 $4112 = tempRet0;
 $4113 = (_i64Add(($4095|0),($4096|0),($4111|0),($4112|0))|0);
 $4114 = tempRet0;
 $4115 = $289;
 $4116 = $4115;
 $4117 = HEAP32[$4116>>2]|0;
 $4118 = (($4115) + 4)|0;
 $4119 = $4118;
 $4120 = HEAP32[$4119>>2]|0;
 $4121 = (_i64Add(($4113|0),($4114|0),($4117|0),($4120|0))|0);
 $4122 = tempRet0;
 $4123 = $4099 ^ $4121;
 $4124 = $4100 ^ $4122;
 $4125 = (_rotr64($4123,$4124,16)|0);
 $4126 = tempRet0;
 $4127 = $64;
 $4128 = $4127;
 HEAP32[$4128>>2] = $4125;
 $4129 = (($4127) + 4)|0;
 $4130 = $4129;
 HEAP32[$4130>>2] = $4126;
 $4131 = (_i64Add(($4107|0),($4108|0),($4125|0),($4126|0))|0);
 $4132 = tempRet0;
 $4133 = $4111 ^ $4131;
 $4134 = $4112 ^ $4132;
 $4135 = (_rotr64($4133,$4134,63)|0);
 $4136 = tempRet0;
 $4137 = $280;
 $4138 = $4137;
 $4139 = HEAP32[$4138>>2]|0;
 $4140 = (($4137) + 4)|0;
 $4141 = $4140;
 $4142 = HEAP32[$4141>>2]|0;
 $4143 = (_i64Add(($3975|0),($3976|0),($4139|0),($4142|0))|0);
 $4144 = tempRet0;
 $4145 = $114;
 $4146 = $4145;
 $4147 = HEAP32[$4146>>2]|0;
 $4148 = (($4145) + 4)|0;
 $4149 = $4148;
 $4150 = HEAP32[$4149>>2]|0;
 $4151 = (_i64Add(($4143|0),($4144|0),($4147|0),($4150|0))|0);
 $4152 = tempRet0;
 $4153 = $74;
 $4154 = $4153;
 $4155 = HEAP32[$4154>>2]|0;
 $4156 = (($4153) + 4)|0;
 $4157 = $4156;
 $4158 = HEAP32[$4157>>2]|0;
 $4159 = $4155 ^ $4151;
 $4160 = $4158 ^ $4152;
 $4161 = (_rotr64($4159,$4160,32)|0);
 $4162 = tempRet0;
 $4163 = $30;
 $4164 = $4163;
 $4165 = HEAP32[$4164>>2]|0;
 $4166 = (($4163) + 4)|0;
 $4167 = $4166;
 $4168 = HEAP32[$4167>>2]|0;
 $4169 = (_i64Add(($4165|0),($4168|0),($4161|0),($4162|0))|0);
 $4170 = tempRet0;
 $4171 = $4139 ^ $4169;
 $4172 = $4142 ^ $4170;
 $4173 = (_rotr64($4171,$4172,24)|0);
 $4174 = tempRet0;
 $4175 = (_i64Add(($4151|0),($4152|0),($4173|0),($4174|0))|0);
 $4176 = tempRet0;
 $4177 = $250;
 $4178 = $4177;
 $4179 = HEAP32[$4178>>2]|0;
 $4180 = (($4177) + 4)|0;
 $4181 = $4180;
 $4182 = HEAP32[$4181>>2]|0;
 $4183 = (_i64Add(($4175|0),($4176|0),($4179|0),($4182|0))|0);
 $4184 = tempRet0;
 $4185 = $4161 ^ $4183;
 $4186 = $4162 ^ $4184;
 $4187 = (_rotr64($4185,$4186,16)|0);
 $4188 = tempRet0;
 $4189 = (_i64Add(($4169|0),($4170|0),($4187|0),($4188|0))|0);
 $4190 = tempRet0;
 $4191 = $4173 ^ $4189;
 $4192 = $4174 ^ $4190;
 $4193 = (_rotr64($4191,$4192,63)|0);
 $4194 = tempRet0;
 $4195 = (_i64Add(($4009|0),($4010|0),($4079|0),($4080|0))|0);
 $4196 = tempRet0;
 $4197 = $556;
 $4198 = $4197;
 $4199 = HEAP32[$4198>>2]|0;
 $4200 = (($4197) + 4)|0;
 $4201 = $4200;
 $4202 = HEAP32[$4201>>2]|0;
 $4203 = (_i64Add(($4195|0),($4196|0),($4199|0),($4202|0))|0);
 $4204 = tempRet0;
 $4205 = $4187 ^ $4203;
 $4206 = $4188 ^ $4204;
 $4207 = (_rotr64($4205,$4206,32)|0);
 $4208 = tempRet0;
 $4209 = (_i64Add(($4131|0),($4132|0),($4207|0),($4208|0))|0);
 $4210 = tempRet0;
 $4211 = $4079 ^ $4209;
 $4212 = $4080 ^ $4210;
 $4213 = (_rotr64($4211,$4212,24)|0);
 $4214 = tempRet0;
 $4215 = (_i64Add(($4203|0),($4204|0),($4213|0),($4214|0))|0);
 $4216 = tempRet0;
 $4217 = $430;
 $4218 = $4217;
 $4219 = HEAP32[$4218>>2]|0;
 $4220 = (($4217) + 4)|0;
 $4221 = $4220;
 $4222 = HEAP32[$4221>>2]|0;
 $4223 = (_i64Add(($4215|0),($4216|0),($4219|0),($4222|0))|0);
 $4224 = tempRet0;
 $4225 = $4207 ^ $4223;
 $4226 = $4208 ^ $4224;
 $4227 = (_rotr64($4225,$4226,16)|0);
 $4228 = tempRet0;
 $4229 = $74;
 $4230 = $4229;
 HEAP32[$4230>>2] = $4227;
 $4231 = (($4229) + 4)|0;
 $4232 = $4231;
 HEAP32[$4232>>2] = $4228;
 $4233 = (_i64Add(($4209|0),($4210|0),($4227|0),($4228|0))|0);
 $4234 = tempRet0;
 $4235 = $29;
 $4236 = $4235;
 HEAP32[$4236>>2] = $4233;
 $4237 = (($4235) + 4)|0;
 $4238 = $4237;
 HEAP32[$4238>>2] = $4234;
 $4239 = $4213 ^ $4233;
 $4240 = $4214 ^ $4234;
 $4241 = (_rotr64($4239,$4240,63)|0);
 $4242 = tempRet0;
 $4243 = $156;
 $4244 = $4243;
 HEAP32[$4244>>2] = $4241;
 $4245 = (($4243) + 4)|0;
 $4246 = $4245;
 HEAP32[$4246>>2] = $4242;
 $4247 = (_i64Add(($4061|0),($4062|0),($4135|0),($4136|0))|0);
 $4248 = tempRet0;
 $4249 = $370;
 $4250 = $4249;
 $4251 = HEAP32[$4250>>2]|0;
 $4252 = (($4249) + 4)|0;
 $4253 = $4252;
 $4254 = HEAP32[$4253>>2]|0;
 $4255 = (_i64Add(($4247|0),($4248|0),($4251|0),($4254|0))|0);
 $4256 = tempRet0;
 $4257 = $44;
 $4258 = $4257;
 $4259 = HEAP32[$4258>>2]|0;
 $4260 = (($4257) + 4)|0;
 $4261 = $4260;
 $4262 = HEAP32[$4261>>2]|0;
 $4263 = $4259 ^ $4255;
 $4264 = $4262 ^ $4256;
 $4265 = (_rotr64($4263,$4264,32)|0);
 $4266 = tempRet0;
 $4267 = (_i64Add(($4189|0),($4190|0),($4265|0),($4266|0))|0);
 $4268 = tempRet0;
 $4269 = $4135 ^ $4267;
 $4270 = $4136 ^ $4268;
 $4271 = (_rotr64($4269,$4270,24)|0);
 $4272 = tempRet0;
 $4273 = (_i64Add(($4255|0),($4256|0),($4271|0),($4272|0))|0);
 $4274 = tempRet0;
 $4275 = $523;
 $4276 = $4275;
 $4277 = HEAP32[$4276>>2]|0;
 $4278 = (($4275) + 4)|0;
 $4279 = $4278;
 $4280 = HEAP32[$4279>>2]|0;
 $4281 = (_i64Add(($4273|0),($4274|0),($4277|0),($4280|0))|0);
 $4282 = tempRet0;
 $4283 = $4265 ^ $4281;
 $4284 = $4266 ^ $4282;
 $4285 = (_rotr64($4283,$4284,16)|0);
 $4286 = tempRet0;
 $4287 = (_i64Add(($4267|0),($4268|0),($4285|0),($4286|0))|0);
 $4288 = tempRet0;
 $4289 = $30;
 $4290 = $4289;
 HEAP32[$4290>>2] = $4287;
 $4291 = (($4289) + 4)|0;
 $4292 = $4291;
 HEAP32[$4292>>2] = $4288;
 $4293 = $4271 ^ $4287;
 $4294 = $4272 ^ $4288;
 $4295 = (_rotr64($4293,$4294,63)|0);
 $4296 = tempRet0;
 $4297 = $220;
 $4298 = $4297;
 HEAP32[$4298>>2] = $4295;
 $4299 = (($4297) + 4)|0;
 $4300 = $4299;
 HEAP32[$4300>>2] = $4296;
 $4301 = (_i64Add(($4121|0),($4122|0),($4193|0),($4194|0))|0);
 $4302 = tempRet0;
 $4303 = $186;
 $4304 = $4303;
 $4305 = HEAP32[$4304>>2]|0;
 $4306 = (($4303) + 4)|0;
 $4307 = $4306;
 $4308 = HEAP32[$4307>>2]|0;
 $4309 = (_i64Add(($4301|0),($4302|0),($4305|0),($4308|0))|0);
 $4310 = tempRet0;
 $4311 = $54;
 $4312 = $4311;
 $4313 = HEAP32[$4312>>2]|0;
 $4314 = (($4311) + 4)|0;
 $4315 = $4314;
 $4316 = HEAP32[$4315>>2]|0;
 $4317 = $4313 ^ $4309;
 $4318 = $4316 ^ $4310;
 $4319 = (_rotr64($4317,$4318,32)|0);
 $4320 = tempRet0;
 $4321 = $27;
 $4322 = $4321;
 $4323 = HEAP32[$4322>>2]|0;
 $4324 = (($4321) + 4)|0;
 $4325 = $4324;
 $4326 = HEAP32[$4325>>2]|0;
 $4327 = (_i64Add(($4323|0),($4326|0),($4319|0),($4320|0))|0);
 $4328 = tempRet0;
 $4329 = $4193 ^ $4327;
 $4330 = $4194 ^ $4328;
 $4331 = (_rotr64($4329,$4330,24)|0);
 $4332 = tempRet0;
 $4333 = (_i64Add(($4309|0),($4310|0),($4331|0),($4332|0))|0);
 $4334 = tempRet0;
 $4335 = $459;
 $4336 = $4335;
 $4337 = HEAP32[$4336>>2]|0;
 $4338 = (($4335) + 4)|0;
 $4339 = $4338;
 $4340 = HEAP32[$4339>>2]|0;
 $4341 = (_i64Add(($4333|0),($4334|0),($4337|0),($4340|0))|0);
 $4342 = tempRet0;
 $4343 = $4319 ^ $4341;
 $4344 = $4320 ^ $4342;
 $4345 = (_rotr64($4343,$4344,16)|0);
 $4346 = tempRet0;
 $4347 = (_i64Add(($4327|0),($4328|0),($4345|0),($4346|0))|0);
 $4348 = tempRet0;
 $4349 = $4331 ^ $4347;
 $4350 = $4332 ^ $4348;
 $4351 = (_rotr64($4349,$4350,63)|0);
 $4352 = tempRet0;
 $4353 = $280;
 $4354 = $4353;
 HEAP32[$4354>>2] = $4351;
 $4355 = (($4353) + 4)|0;
 $4356 = $4355;
 HEAP32[$4356>>2] = $4352;
 $4357 = $85;
 $4358 = $4357;
 $4359 = HEAP32[$4358>>2]|0;
 $4360 = (($4357) + 4)|0;
 $4361 = $4360;
 $4362 = HEAP32[$4361>>2]|0;
 $4363 = (_i64Add(($4183|0),($4184|0),($4359|0),($4362|0))|0);
 $4364 = tempRet0;
 $4365 = $492;
 $4366 = $4365;
 $4367 = HEAP32[$4366>>2]|0;
 $4368 = (($4365) + 4)|0;
 $4369 = $4368;
 $4370 = HEAP32[$4369>>2]|0;
 $4371 = (_i64Add(($4363|0),($4364|0),($4367|0),($4370|0))|0);
 $4372 = tempRet0;
 $4373 = $64;
 $4374 = $4373;
 $4375 = HEAP32[$4374>>2]|0;
 $4376 = (($4373) + 4)|0;
 $4377 = $4376;
 $4378 = HEAP32[$4377>>2]|0;
 $4379 = $4375 ^ $4371;
 $4380 = $4378 ^ $4372;
 $4381 = (_rotr64($4379,$4380,32)|0);
 $4382 = tempRet0;
 $4383 = $28;
 $4384 = $4383;
 $4385 = HEAP32[$4384>>2]|0;
 $4386 = (($4383) + 4)|0;
 $4387 = $4386;
 $4388 = HEAP32[$4387>>2]|0;
 $4389 = (_i64Add(($4385|0),($4388|0),($4381|0),($4382|0))|0);
 $4390 = tempRet0;
 $4391 = $4359 ^ $4389;
 $4392 = $4362 ^ $4390;
 $4393 = (_rotr64($4391,$4392,24)|0);
 $4394 = tempRet0;
 $4395 = (_i64Add(($4371|0),($4372|0),($4393|0),($4394|0))|0);
 $4396 = tempRet0;
 $4397 = $2;
 $4398 = $4397;
 $4399 = HEAP32[$4398>>2]|0;
 $4400 = (($4397) + 4)|0;
 $4401 = $4400;
 $4402 = HEAP32[$4401>>2]|0;
 $4403 = (_i64Add(($4395|0),($4396|0),($4399|0),($4402|0))|0);
 $4404 = tempRet0;
 $4405 = $4381 ^ $4403;
 $4406 = $4382 ^ $4404;
 $4407 = (_rotr64($4405,$4406,16)|0);
 $4408 = tempRet0;
 $4409 = (_i64Add(($4389|0),($4390|0),($4407|0),($4408|0))|0);
 $4410 = tempRet0;
 $4411 = $4393 ^ $4409;
 $4412 = $4394 ^ $4410;
 $4413 = (_rotr64($4411,$4412,63)|0);
 $4414 = tempRet0;
 $4415 = (_i64Add(($4223|0),($4224|0),($4413|0),($4414|0))|0);
 $4416 = tempRet0;
 $4417 = (_i64Add(($4415|0),($4416|0),($4399|0),($4402|0))|0);
 $4418 = tempRet0;
 $4419 = $4285 ^ $4417;
 $4420 = $4286 ^ $4418;
 $4421 = (_rotr64($4419,$4420,32)|0);
 $4422 = tempRet0;
 $4423 = (_i64Add(($4347|0),($4348|0),($4421|0),($4422|0))|0);
 $4424 = tempRet0;
 $4425 = $4413 ^ $4423;
 $4426 = $4414 ^ $4424;
 $4427 = (_rotr64($4425,$4426,24)|0);
 $4428 = tempRet0;
 $4429 = (_i64Add(($4417|0),($4418|0),($4427|0),($4428|0))|0);
 $4430 = tempRet0;
 $4431 = $114;
 $4432 = $4431;
 $4433 = HEAP32[$4432>>2]|0;
 $4434 = (($4431) + 4)|0;
 $4435 = $4434;
 $4436 = HEAP32[$4435>>2]|0;
 $4437 = (_i64Add(($4429|0),($4430|0),($4433|0),($4436|0))|0);
 $4438 = tempRet0;
 $4439 = $4421 ^ $4437;
 $4440 = $4422 ^ $4438;
 $4441 = (_rotr64($4439,$4440,16)|0);
 $4442 = tempRet0;
 $4443 = $44;
 $4444 = $4443;
 HEAP32[$4444>>2] = $4441;
 $4445 = (($4443) + 4)|0;
 $4446 = $4445;
 HEAP32[$4446>>2] = $4442;
 $4447 = (_i64Add(($4423|0),($4424|0),($4441|0),($4442|0))|0);
 $4448 = tempRet0;
 $4449 = $27;
 $4450 = $4449;
 HEAP32[$4450>>2] = $4447;
 $4451 = (($4449) + 4)|0;
 $4452 = $4451;
 HEAP32[$4452>>2] = $4448;
 $4453 = $4427 ^ $4447;
 $4454 = $4428 ^ $4448;
 $4455 = (_rotr64($4453,$4454,63)|0);
 $4456 = tempRet0;
 $4457 = $85;
 $4458 = $4457;
 HEAP32[$4458>>2] = $4455;
 $4459 = (($4457) + 4)|0;
 $4460 = $4459;
 HEAP32[$4460>>2] = $4456;
 $4461 = $156;
 $4462 = $4461;
 $4463 = HEAP32[$4462>>2]|0;
 $4464 = (($4461) + 4)|0;
 $4465 = $4464;
 $4466 = HEAP32[$4465>>2]|0;
 $4467 = (_i64Add(($4281|0),($4282|0),($4463|0),($4466|0))|0);
 $4468 = tempRet0;
 $4469 = $165;
 $4470 = $4469;
 $4471 = HEAP32[$4470>>2]|0;
 $4472 = (($4469) + 4)|0;
 $4473 = $4472;
 $4474 = HEAP32[$4473>>2]|0;
 $4475 = (_i64Add(($4467|0),($4468|0),($4471|0),($4474|0))|0);
 $4476 = tempRet0;
 $4477 = $4345 ^ $4475;
 $4478 = $4346 ^ $4476;
 $4479 = (_rotr64($4477,$4478,32)|0);
 $4480 = tempRet0;
 $4481 = (_i64Add(($4409|0),($4410|0),($4479|0),($4480|0))|0);
 $4482 = tempRet0;
 $4483 = $4463 ^ $4481;
 $4484 = $4466 ^ $4482;
 $4485 = (_rotr64($4483,$4484,24)|0);
 $4486 = tempRet0;
 $4487 = (_i64Add(($4475|0),($4476|0),($4485|0),($4486|0))|0);
 $4488 = tempRet0;
 $4489 = (_i64Add(($4487|0),($4488|0),($4305|0),($4308|0))|0);
 $4490 = tempRet0;
 $4491 = $4479 ^ $4489;
 $4492 = $4480 ^ $4490;
 $4493 = (_rotr64($4491,$4492,16)|0);
 $4494 = tempRet0;
 $4495 = $54;
 $4496 = $4495;
 HEAP32[$4496>>2] = $4493;
 $4497 = (($4495) + 4)|0;
 $4498 = $4497;
 HEAP32[$4498>>2] = $4494;
 $4499 = (_i64Add(($4481|0),($4482|0),($4493|0),($4494|0))|0);
 $4500 = tempRet0;
 $4501 = $28;
 $4502 = $4501;
 HEAP32[$4502>>2] = $4499;
 $4503 = (($4501) + 4)|0;
 $4504 = $4503;
 HEAP32[$4504>>2] = $4500;
 $4505 = $4485 ^ $4499;
 $4506 = $4486 ^ $4500;
 $4507 = (_rotr64($4505,$4506,63)|0);
 $4508 = tempRet0;
 $4509 = $220;
 $4510 = $4509;
 $4511 = HEAP32[$4510>>2]|0;
 $4512 = (($4509) + 4)|0;
 $4513 = $4512;
 $4514 = HEAP32[$4513>>2]|0;
 $4515 = (_i64Add(($4341|0),($4342|0),($4511|0),($4514|0))|0);
 $4516 = tempRet0;
 $4517 = $229;
 $4518 = $4517;
 $4519 = HEAP32[$4518>>2]|0;
 $4520 = (($4517) + 4)|0;
 $4521 = $4520;
 $4522 = HEAP32[$4521>>2]|0;
 $4523 = (_i64Add(($4515|0),($4516|0),($4519|0),($4522|0))|0);
 $4524 = tempRet0;
 $4525 = $4407 ^ $4523;
 $4526 = $4408 ^ $4524;
 $4527 = (_rotr64($4525,$4526,32)|0);
 $4528 = tempRet0;
 $4529 = $29;
 $4530 = $4529;
 $4531 = HEAP32[$4530>>2]|0;
 $4532 = (($4529) + 4)|0;
 $4533 = $4532;
 $4534 = HEAP32[$4533>>2]|0;
 $4535 = (_i64Add(($4531|0),($4534|0),($4527|0),($4528|0))|0);
 $4536 = tempRet0;
 $4537 = $4511 ^ $4535;
 $4538 = $4514 ^ $4536;
 $4539 = (_rotr64($4537,$4538,24)|0);
 $4540 = tempRet0;
 $4541 = (_i64Add(($4523|0),($4524|0),($4539|0),($4540|0))|0);
 $4542 = tempRet0;
 $4543 = $250;
 $4544 = $4543;
 $4545 = HEAP32[$4544>>2]|0;
 $4546 = (($4543) + 4)|0;
 $4547 = $4546;
 $4548 = HEAP32[$4547>>2]|0;
 $4549 = (_i64Add(($4541|0),($4542|0),($4545|0),($4548|0))|0);
 $4550 = tempRet0;
 $4551 = $4527 ^ $4549;
 $4552 = $4528 ^ $4550;
 $4553 = (_rotr64($4551,$4552,16)|0);
 $4554 = tempRet0;
 $4555 = $64;
 $4556 = $4555;
 HEAP32[$4556>>2] = $4553;
 $4557 = (($4555) + 4)|0;
 $4558 = $4557;
 HEAP32[$4558>>2] = $4554;
 $4559 = (_i64Add(($4535|0),($4536|0),($4553|0),($4554|0))|0);
 $4560 = tempRet0;
 $4561 = $4539 ^ $4559;
 $4562 = $4540 ^ $4560;
 $4563 = (_rotr64($4561,$4562,63)|0);
 $4564 = tempRet0;
 $4565 = $280;
 $4566 = $4565;
 $4567 = HEAP32[$4566>>2]|0;
 $4568 = (($4565) + 4)|0;
 $4569 = $4568;
 $4570 = HEAP32[$4569>>2]|0;
 $4571 = (_i64Add(($4403|0),($4404|0),($4567|0),($4570|0))|0);
 $4572 = tempRet0;
 $4573 = $289;
 $4574 = $4573;
 $4575 = HEAP32[$4574>>2]|0;
 $4576 = (($4573) + 4)|0;
 $4577 = $4576;
 $4578 = HEAP32[$4577>>2]|0;
 $4579 = (_i64Add(($4571|0),($4572|0),($4575|0),($4578|0))|0);
 $4580 = tempRet0;
 $4581 = $74;
 $4582 = $4581;
 $4583 = HEAP32[$4582>>2]|0;
 $4584 = (($4581) + 4)|0;
 $4585 = $4584;
 $4586 = HEAP32[$4585>>2]|0;
 $4587 = $4583 ^ $4579;
 $4588 = $4586 ^ $4580;
 $4589 = (_rotr64($4587,$4588,32)|0);
 $4590 = tempRet0;
 $4591 = $30;
 $4592 = $4591;
 $4593 = HEAP32[$4592>>2]|0;
 $4594 = (($4591) + 4)|0;
 $4595 = $4594;
 $4596 = HEAP32[$4595>>2]|0;
 $4597 = (_i64Add(($4593|0),($4596|0),($4589|0),($4590|0))|0);
 $4598 = tempRet0;
 $4599 = $4567 ^ $4597;
 $4600 = $4570 ^ $4598;
 $4601 = (_rotr64($4599,$4600,24)|0);
 $4602 = tempRet0;
 $4603 = (_i64Add(($4579|0),($4580|0),($4601|0),($4602|0))|0);
 $4604 = tempRet0;
 $4605 = $322;
 $4606 = $4605;
 $4607 = HEAP32[$4606>>2]|0;
 $4608 = (($4605) + 4)|0;
 $4609 = $4608;
 $4610 = HEAP32[$4609>>2]|0;
 $4611 = (_i64Add(($4603|0),($4604|0),($4607|0),($4610|0))|0);
 $4612 = tempRet0;
 $4613 = $4589 ^ $4611;
 $4614 = $4590 ^ $4612;
 $4615 = (_rotr64($4613,$4614,16)|0);
 $4616 = tempRet0;
 $4617 = (_i64Add(($4597|0),($4598|0),($4615|0),($4616|0))|0);
 $4618 = tempRet0;
 $4619 = $4601 ^ $4617;
 $4620 = $4602 ^ $4618;
 $4621 = (_rotr64($4619,$4620,63)|0);
 $4622 = tempRet0;
 $4623 = (_i64Add(($4437|0),($4438|0),($4507|0),($4508|0))|0);
 $4624 = tempRet0;
 $4625 = $349;
 $4626 = $4625;
 $4627 = HEAP32[$4626>>2]|0;
 $4628 = (($4625) + 4)|0;
 $4629 = $4628;
 $4630 = HEAP32[$4629>>2]|0;
 $4631 = (_i64Add(($4623|0),($4624|0),($4627|0),($4630|0))|0);
 $4632 = tempRet0;
 $4633 = $4615 ^ $4631;
 $4634 = $4616 ^ $4632;
 $4635 = (_rotr64($4633,$4634,32)|0);
 $4636 = tempRet0;
 $4637 = (_i64Add(($4559|0),($4560|0),($4635|0),($4636|0))|0);
 $4638 = tempRet0;
 $4639 = $4507 ^ $4637;
 $4640 = $4508 ^ $4638;
 $4641 = (_rotr64($4639,$4640,24)|0);
 $4642 = tempRet0;
 $4643 = (_i64Add(($4631|0),($4632|0),($4641|0),($4642|0))|0);
 $4644 = tempRet0;
 $4645 = $370;
 $4646 = $4645;
 $4647 = HEAP32[$4646>>2]|0;
 $4648 = (($4645) + 4)|0;
 $4649 = $4648;
 $4650 = HEAP32[$4649>>2]|0;
 $4651 = (_i64Add(($4643|0),($4644|0),($4647|0),($4650|0))|0);
 $4652 = tempRet0;
 $4653 = $4635 ^ $4651;
 $4654 = $4636 ^ $4652;
 $4655 = (_rotr64($4653,$4654,16)|0);
 $4656 = tempRet0;
 $4657 = $74;
 $4658 = $4657;
 HEAP32[$4658>>2] = $4655;
 $4659 = (($4657) + 4)|0;
 $4660 = $4659;
 HEAP32[$4660>>2] = $4656;
 $4661 = (_i64Add(($4637|0),($4638|0),($4655|0),($4656|0))|0);
 $4662 = tempRet0;
 $4663 = $29;
 $4664 = $4663;
 HEAP32[$4664>>2] = $4661;
 $4665 = (($4663) + 4)|0;
 $4666 = $4665;
 HEAP32[$4666>>2] = $4662;
 $4667 = $4641 ^ $4661;
 $4668 = $4642 ^ $4662;
 $4669 = (_rotr64($4667,$4668,63)|0);
 $4670 = tempRet0;
 $4671 = $156;
 $4672 = $4671;
 HEAP32[$4672>>2] = $4669;
 $4673 = (($4671) + 4)|0;
 $4674 = $4673;
 HEAP32[$4674>>2] = $4670;
 $4675 = (_i64Add(($4489|0),($4490|0),($4563|0),($4564|0))|0);
 $4676 = tempRet0;
 $4677 = $403;
 $4678 = $4677;
 $4679 = HEAP32[$4678>>2]|0;
 $4680 = (($4677) + 4)|0;
 $4681 = $4680;
 $4682 = HEAP32[$4681>>2]|0;
 $4683 = (_i64Add(($4675|0),($4676|0),($4679|0),($4682|0))|0);
 $4684 = tempRet0;
 $4685 = $44;
 $4686 = $4685;
 $4687 = HEAP32[$4686>>2]|0;
 $4688 = (($4685) + 4)|0;
 $4689 = $4688;
 $4690 = HEAP32[$4689>>2]|0;
 $4691 = $4687 ^ $4683;
 $4692 = $4690 ^ $4684;
 $4693 = (_rotr64($4691,$4692,32)|0);
 $4694 = tempRet0;
 $4695 = (_i64Add(($4617|0),($4618|0),($4693|0),($4694|0))|0);
 $4696 = tempRet0;
 $4697 = $4563 ^ $4695;
 $4698 = $4564 ^ $4696;
 $4699 = (_rotr64($4697,$4698,24)|0);
 $4700 = tempRet0;
 $4701 = (_i64Add(($4683|0),($4684|0),($4699|0),($4700|0))|0);
 $4702 = tempRet0;
 $4703 = $430;
 $4704 = $4703;
 $4705 = HEAP32[$4704>>2]|0;
 $4706 = (($4703) + 4)|0;
 $4707 = $4706;
 $4708 = HEAP32[$4707>>2]|0;
 $4709 = (_i64Add(($4701|0),($4702|0),($4705|0),($4708|0))|0);
 $4710 = tempRet0;
 $4711 = $4693 ^ $4709;
 $4712 = $4694 ^ $4710;
 $4713 = (_rotr64($4711,$4712,16)|0);
 $4714 = tempRet0;
 $4715 = (_i64Add(($4695|0),($4696|0),($4713|0),($4714|0))|0);
 $4716 = tempRet0;
 $4717 = $30;
 $4718 = $4717;
 HEAP32[$4718>>2] = $4715;
 $4719 = (($4717) + 4)|0;
 $4720 = $4719;
 HEAP32[$4720>>2] = $4716;
 $4721 = $4699 ^ $4715;
 $4722 = $4700 ^ $4716;
 $4723 = (_rotr64($4721,$4722,63)|0);
 $4724 = tempRet0;
 $4725 = $220;
 $4726 = $4725;
 HEAP32[$4726>>2] = $4723;
 $4727 = (($4725) + 4)|0;
 $4728 = $4727;
 HEAP32[$4728>>2] = $4724;
 $4729 = (_i64Add(($4549|0),($4550|0),($4621|0),($4622|0))|0);
 $4730 = tempRet0;
 $4731 = $459;
 $4732 = $4731;
 $4733 = HEAP32[$4732>>2]|0;
 $4734 = (($4731) + 4)|0;
 $4735 = $4734;
 $4736 = HEAP32[$4735>>2]|0;
 $4737 = (_i64Add(($4729|0),($4730|0),($4733|0),($4736|0))|0);
 $4738 = tempRet0;
 $4739 = $54;
 $4740 = $4739;
 $4741 = HEAP32[$4740>>2]|0;
 $4742 = (($4739) + 4)|0;
 $4743 = $4742;
 $4744 = HEAP32[$4743>>2]|0;
 $4745 = $4741 ^ $4737;
 $4746 = $4744 ^ $4738;
 $4747 = (_rotr64($4745,$4746,32)|0);
 $4748 = tempRet0;
 $4749 = $27;
 $4750 = $4749;
 $4751 = HEAP32[$4750>>2]|0;
 $4752 = (($4749) + 4)|0;
 $4753 = $4752;
 $4754 = HEAP32[$4753>>2]|0;
 $4755 = (_i64Add(($4751|0),($4754|0),($4747|0),($4748|0))|0);
 $4756 = tempRet0;
 $4757 = $4621 ^ $4755;
 $4758 = $4622 ^ $4756;
 $4759 = (_rotr64($4757,$4758,24)|0);
 $4760 = tempRet0;
 $4761 = (_i64Add(($4737|0),($4738|0),($4759|0),($4760|0))|0);
 $4762 = tempRet0;
 $4763 = $492;
 $4764 = $4763;
 $4765 = HEAP32[$4764>>2]|0;
 $4766 = (($4763) + 4)|0;
 $4767 = $4766;
 $4768 = HEAP32[$4767>>2]|0;
 $4769 = (_i64Add(($4761|0),($4762|0),($4765|0),($4768|0))|0);
 $4770 = tempRet0;
 $4771 = $4747 ^ $4769;
 $4772 = $4748 ^ $4770;
 $4773 = (_rotr64($4771,$4772,16)|0);
 $4774 = tempRet0;
 $4775 = (_i64Add(($4755|0),($4756|0),($4773|0),($4774|0))|0);
 $4776 = tempRet0;
 $4777 = $4759 ^ $4775;
 $4778 = $4760 ^ $4776;
 $4779 = (_rotr64($4777,$4778,63)|0);
 $4780 = tempRet0;
 $4781 = $280;
 $4782 = $4781;
 HEAP32[$4782>>2] = $4779;
 $4783 = (($4781) + 4)|0;
 $4784 = $4783;
 HEAP32[$4784>>2] = $4780;
 $4785 = $85;
 $4786 = $4785;
 $4787 = HEAP32[$4786>>2]|0;
 $4788 = (($4785) + 4)|0;
 $4789 = $4788;
 $4790 = HEAP32[$4789>>2]|0;
 $4791 = (_i64Add(($4611|0),($4612|0),($4787|0),($4790|0))|0);
 $4792 = tempRet0;
 $4793 = $523;
 $4794 = $4793;
 $4795 = HEAP32[$4794>>2]|0;
 $4796 = (($4793) + 4)|0;
 $4797 = $4796;
 $4798 = HEAP32[$4797>>2]|0;
 $4799 = (_i64Add(($4791|0),($4792|0),($4795|0),($4798|0))|0);
 $4800 = tempRet0;
 $4801 = $64;
 $4802 = $4801;
 $4803 = HEAP32[$4802>>2]|0;
 $4804 = (($4801) + 4)|0;
 $4805 = $4804;
 $4806 = HEAP32[$4805>>2]|0;
 $4807 = $4803 ^ $4799;
 $4808 = $4806 ^ $4800;
 $4809 = (_rotr64($4807,$4808,32)|0);
 $4810 = tempRet0;
 $4811 = $28;
 $4812 = $4811;
 $4813 = HEAP32[$4812>>2]|0;
 $4814 = (($4811) + 4)|0;
 $4815 = $4814;
 $4816 = HEAP32[$4815>>2]|0;
 $4817 = (_i64Add(($4813|0),($4816|0),($4809|0),($4810|0))|0);
 $4818 = tempRet0;
 $4819 = $4787 ^ $4817;
 $4820 = $4790 ^ $4818;
 $4821 = (_rotr64($4819,$4820,24)|0);
 $4822 = tempRet0;
 $4823 = (_i64Add(($4799|0),($4800|0),($4821|0),($4822|0))|0);
 $4824 = tempRet0;
 $4825 = $556;
 $4826 = $4825;
 $4827 = HEAP32[$4826>>2]|0;
 $4828 = (($4825) + 4)|0;
 $4829 = $4828;
 $4830 = HEAP32[$4829>>2]|0;
 $4831 = (_i64Add(($4823|0),($4824|0),($4827|0),($4830|0))|0);
 $4832 = tempRet0;
 $4833 = $4809 ^ $4831;
 $4834 = $4810 ^ $4832;
 $4835 = (_rotr64($4833,$4834,16)|0);
 $4836 = tempRet0;
 $4837 = (_i64Add(($4817|0),($4818|0),($4835|0),($4836|0))|0);
 $4838 = tempRet0;
 $4839 = $4821 ^ $4837;
 $4840 = $4822 ^ $4838;
 $4841 = (_rotr64($4839,$4840,63)|0);
 $4842 = tempRet0;
 $4843 = (_i64Add(($4651|0),($4652|0),($4841|0),($4842|0))|0);
 $4844 = tempRet0;
 $4845 = (_i64Add(($4843|0),($4844|0),($4795|0),($4798|0))|0);
 $4846 = tempRet0;
 $4847 = $4713 ^ $4845;
 $4848 = $4714 ^ $4846;
 $4849 = (_rotr64($4847,$4848,32)|0);
 $4850 = tempRet0;
 $4851 = (_i64Add(($4775|0),($4776|0),($4849|0),($4850|0))|0);
 $4852 = tempRet0;
 $4853 = $4841 ^ $4851;
 $4854 = $4842 ^ $4852;
 $4855 = (_rotr64($4853,$4854,24)|0);
 $4856 = tempRet0;
 $4857 = (_i64Add(($4845|0),($4846|0),($4855|0),($4856|0))|0);
 $4858 = tempRet0;
 $4859 = (_i64Add(($4857|0),($4858|0),($4679|0),($4682|0))|0);
 $4860 = tempRet0;
 $4861 = $4849 ^ $4859;
 $4862 = $4850 ^ $4860;
 $4863 = (_rotr64($4861,$4862,16)|0);
 $4864 = tempRet0;
 $4865 = $44;
 $4866 = $4865;
 HEAP32[$4866>>2] = $4863;
 $4867 = (($4865) + 4)|0;
 $4868 = $4867;
 HEAP32[$4868>>2] = $4864;
 $4869 = (_i64Add(($4851|0),($4852|0),($4863|0),($4864|0))|0);
 $4870 = tempRet0;
 $4871 = $27;
 $4872 = $4871;
 HEAP32[$4872>>2] = $4869;
 $4873 = (($4871) + 4)|0;
 $4874 = $4873;
 HEAP32[$4874>>2] = $4870;
 $4875 = $4855 ^ $4869;
 $4876 = $4856 ^ $4870;
 $4877 = (_rotr64($4875,$4876,63)|0);
 $4878 = tempRet0;
 $4879 = $85;
 $4880 = $4879;
 HEAP32[$4880>>2] = $4877;
 $4881 = (($4879) + 4)|0;
 $4882 = $4881;
 HEAP32[$4882>>2] = $4878;
 $4883 = $156;
 $4884 = $4883;
 $4885 = HEAP32[$4884>>2]|0;
 $4886 = (($4883) + 4)|0;
 $4887 = $4886;
 $4888 = HEAP32[$4887>>2]|0;
 $4889 = (_i64Add(($4709|0),($4710|0),($4885|0),($4888|0))|0);
 $4890 = tempRet0;
 $4891 = $229;
 $4892 = $4891;
 $4893 = HEAP32[$4892>>2]|0;
 $4894 = (($4891) + 4)|0;
 $4895 = $4894;
 $4896 = HEAP32[$4895>>2]|0;
 $4897 = (_i64Add(($4889|0),($4890|0),($4893|0),($4896|0))|0);
 $4898 = tempRet0;
 $4899 = $4773 ^ $4897;
 $4900 = $4774 ^ $4898;
 $4901 = (_rotr64($4899,$4900,32)|0);
 $4902 = tempRet0;
 $4903 = (_i64Add(($4837|0),($4838|0),($4901|0),($4902|0))|0);
 $4904 = tempRet0;
 $4905 = $4885 ^ $4903;
 $4906 = $4888 ^ $4904;
 $4907 = (_rotr64($4905,$4906,24)|0);
 $4908 = tempRet0;
 $4909 = (_i64Add(($4897|0),($4898|0),($4907|0),($4908|0))|0);
 $4910 = tempRet0;
 $4911 = $349;
 $4912 = $4911;
 $4913 = HEAP32[$4912>>2]|0;
 $4914 = (($4911) + 4)|0;
 $4915 = $4914;
 $4916 = HEAP32[$4915>>2]|0;
 $4917 = (_i64Add(($4909|0),($4910|0),($4913|0),($4916|0))|0);
 $4918 = tempRet0;
 $4919 = $4901 ^ $4917;
 $4920 = $4902 ^ $4918;
 $4921 = (_rotr64($4919,$4920,16)|0);
 $4922 = tempRet0;
 $4923 = $54;
 $4924 = $4923;
 HEAP32[$4924>>2] = $4921;
 $4925 = (($4923) + 4)|0;
 $4926 = $4925;
 HEAP32[$4926>>2] = $4922;
 $4927 = (_i64Add(($4903|0),($4904|0),($4921|0),($4922|0))|0);
 $4928 = tempRet0;
 $4929 = $28;
 $4930 = $4929;
 HEAP32[$4930>>2] = $4927;
 $4931 = (($4929) + 4)|0;
 $4932 = $4931;
 HEAP32[$4932>>2] = $4928;
 $4933 = $4907 ^ $4927;
 $4934 = $4908 ^ $4928;
 $4935 = (_rotr64($4933,$4934,63)|0);
 $4936 = tempRet0;
 $4937 = $220;
 $4938 = $4937;
 $4939 = HEAP32[$4938>>2]|0;
 $4940 = (($4937) + 4)|0;
 $4941 = $4940;
 $4942 = HEAP32[$4941>>2]|0;
 $4943 = (_i64Add(($4769|0),($4770|0),($4939|0),($4942|0))|0);
 $4944 = tempRet0;
 $4945 = $370;
 $4946 = $4945;
 $4947 = HEAP32[$4946>>2]|0;
 $4948 = (($4945) + 4)|0;
 $4949 = $4948;
 $4950 = HEAP32[$4949>>2]|0;
 $4951 = (_i64Add(($4943|0),($4944|0),($4947|0),($4950|0))|0);
 $4952 = tempRet0;
 $4953 = $4835 ^ $4951;
 $4954 = $4836 ^ $4952;
 $4955 = (_rotr64($4953,$4954,32)|0);
 $4956 = tempRet0;
 $4957 = $29;
 $4958 = $4957;
 $4959 = HEAP32[$4958>>2]|0;
 $4960 = (($4957) + 4)|0;
 $4961 = $4960;
 $4962 = HEAP32[$4961>>2]|0;
 $4963 = (_i64Add(($4959|0),($4962|0),($4955|0),($4956|0))|0);
 $4964 = tempRet0;
 $4965 = $4939 ^ $4963;
 $4966 = $4942 ^ $4964;
 $4967 = (_rotr64($4965,$4966,24)|0);
 $4968 = tempRet0;
 $4969 = (_i64Add(($4951|0),($4952|0),($4967|0),($4968|0))|0);
 $4970 = tempRet0;
 $4971 = (_i64Add(($4969|0),($4970|0),($4827|0),($4830|0))|0);
 $4972 = tempRet0;
 $4973 = $4955 ^ $4971;
 $4974 = $4956 ^ $4972;
 $4975 = (_rotr64($4973,$4974,16)|0);
 $4976 = tempRet0;
 $4977 = $64;
 $4978 = $4977;
 HEAP32[$4978>>2] = $4975;
 $4979 = (($4977) + 4)|0;
 $4980 = $4979;
 HEAP32[$4980>>2] = $4976;
 $4981 = (_i64Add(($4963|0),($4964|0),($4975|0),($4976|0))|0);
 $4982 = tempRet0;
 $4983 = $4967 ^ $4981;
 $4984 = $4968 ^ $4982;
 $4985 = (_rotr64($4983,$4984,63)|0);
 $4986 = tempRet0;
 $4987 = $280;
 $4988 = $4987;
 $4989 = HEAP32[$4988>>2]|0;
 $4990 = (($4987) + 4)|0;
 $4991 = $4990;
 $4992 = HEAP32[$4991>>2]|0;
 $4993 = (_i64Add(($4831|0),($4832|0),($4989|0),($4992|0))|0);
 $4994 = tempRet0;
 $4995 = $492;
 $4996 = $4995;
 $4997 = HEAP32[$4996>>2]|0;
 $4998 = (($4995) + 4)|0;
 $4999 = $4998;
 $5000 = HEAP32[$4999>>2]|0;
 $5001 = (_i64Add(($4993|0),($4994|0),($4997|0),($5000|0))|0);
 $5002 = tempRet0;
 $5003 = $74;
 $5004 = $5003;
 $5005 = HEAP32[$5004>>2]|0;
 $5006 = (($5003) + 4)|0;
 $5007 = $5006;
 $5008 = HEAP32[$5007>>2]|0;
 $5009 = $5005 ^ $5001;
 $5010 = $5008 ^ $5002;
 $5011 = (_rotr64($5009,$5010,32)|0);
 $5012 = tempRet0;
 $5013 = $30;
 $5014 = $5013;
 $5015 = HEAP32[$5014>>2]|0;
 $5016 = (($5013) + 4)|0;
 $5017 = $5016;
 $5018 = HEAP32[$5017>>2]|0;
 $5019 = (_i64Add(($5015|0),($5018|0),($5011|0),($5012|0))|0);
 $5020 = tempRet0;
 $5021 = $4989 ^ $5019;
 $5022 = $4992 ^ $5020;
 $5023 = (_rotr64($5021,$5022,24)|0);
 $5024 = tempRet0;
 $5025 = (_i64Add(($5001|0),($5002|0),($5023|0),($5024|0))|0);
 $5026 = tempRet0;
 $5027 = $289;
 $5028 = $5027;
 $5029 = HEAP32[$5028>>2]|0;
 $5030 = (($5027) + 4)|0;
 $5031 = $5030;
 $5032 = HEAP32[$5031>>2]|0;
 $5033 = (_i64Add(($5025|0),($5026|0),($5029|0),($5032|0))|0);
 $5034 = tempRet0;
 $5035 = $5011 ^ $5033;
 $5036 = $5012 ^ $5034;
 $5037 = (_rotr64($5035,$5036,16)|0);
 $5038 = tempRet0;
 $5039 = (_i64Add(($5019|0),($5020|0),($5037|0),($5038|0))|0);
 $5040 = tempRet0;
 $5041 = $5023 ^ $5039;
 $5042 = $5024 ^ $5040;
 $5043 = (_rotr64($5041,$5042,63)|0);
 $5044 = tempRet0;
 $5045 = (_i64Add(($4859|0),($4860|0),($4935|0),($4936|0))|0);
 $5046 = tempRet0;
 $5047 = $114;
 $5048 = $5047;
 $5049 = HEAP32[$5048>>2]|0;
 $5050 = (($5047) + 4)|0;
 $5051 = $5050;
 $5052 = HEAP32[$5051>>2]|0;
 $5053 = (_i64Add(($5045|0),($5046|0),($5049|0),($5052|0))|0);
 $5054 = tempRet0;
 $5055 = $5037 ^ $5053;
 $5056 = $5038 ^ $5054;
 $5057 = (_rotr64($5055,$5056,32)|0);
 $5058 = tempRet0;
 $5059 = (_i64Add(($4981|0),($4982|0),($5057|0),($5058|0))|0);
 $5060 = tempRet0;
 $5061 = $4935 ^ $5059;
 $5062 = $4936 ^ $5060;
 $5063 = (_rotr64($5061,$5062,24)|0);
 $5064 = tempRet0;
 $5065 = (_i64Add(($5053|0),($5054|0),($5063|0),($5064|0))|0);
 $5066 = tempRet0;
 $5067 = $459;
 $5068 = $5067;
 $5069 = HEAP32[$5068>>2]|0;
 $5070 = (($5067) + 4)|0;
 $5071 = $5070;
 $5072 = HEAP32[$5071>>2]|0;
 $5073 = (_i64Add(($5065|0),($5066|0),($5069|0),($5072|0))|0);
 $5074 = tempRet0;
 $5075 = $3;
 $5076 = $5075;
 HEAP32[$5076>>2] = $5073;
 $5077 = (($5075) + 4)|0;
 $5078 = $5077;
 HEAP32[$5078>>2] = $5074;
 $5079 = $5057 ^ $5073;
 $5080 = $5058 ^ $5074;
 $5081 = (_rotr64($5079,$5080,16)|0);
 $5082 = tempRet0;
 $5083 = $74;
 $5084 = $5083;
 HEAP32[$5084>>2] = $5081;
 $5085 = (($5083) + 4)|0;
 $5086 = $5085;
 HEAP32[$5086>>2] = $5082;
 $5087 = (_i64Add(($5059|0),($5060|0),($5081|0),($5082|0))|0);
 $5088 = tempRet0;
 $5089 = $29;
 $5090 = $5089;
 HEAP32[$5090>>2] = $5087;
 $5091 = (($5089) + 4)|0;
 $5092 = $5091;
 HEAP32[$5092>>2] = $5088;
 $5093 = $5063 ^ $5087;
 $5094 = $5064 ^ $5088;
 $5095 = (_rotr64($5093,$5094,63)|0);
 $5096 = tempRet0;
 $5097 = $156;
 $5098 = $5097;
 HEAP32[$5098>>2] = $5095;
 $5099 = (($5097) + 4)|0;
 $5100 = $5099;
 HEAP32[$5100>>2] = $5096;
 $5101 = (_i64Add(($4917|0),($4918|0),($4985|0),($4986|0))|0);
 $5102 = tempRet0;
 $5103 = $2;
 $5104 = $5103;
 $5105 = HEAP32[$5104>>2]|0;
 $5106 = (($5103) + 4)|0;
 $5107 = $5106;
 $5108 = HEAP32[$5107>>2]|0;
 $5109 = (_i64Add(($5101|0),($5102|0),($5105|0),($5108|0))|0);
 $5110 = tempRet0;
 $5111 = $44;
 $5112 = $5111;
 $5113 = HEAP32[$5112>>2]|0;
 $5114 = (($5111) + 4)|0;
 $5115 = $5114;
 $5116 = HEAP32[$5115>>2]|0;
 $5117 = $5113 ^ $5109;
 $5118 = $5116 ^ $5110;
 $5119 = (_rotr64($5117,$5118,32)|0);
 $5120 = tempRet0;
 $5121 = (_i64Add(($5039|0),($5040|0),($5119|0),($5120|0))|0);
 $5122 = tempRet0;
 $5123 = $4985 ^ $5121;
 $5124 = $4986 ^ $5122;
 $5125 = (_rotr64($5123,$5124,24)|0);
 $5126 = tempRet0;
 $5127 = (_i64Add(($5109|0),($5110|0),($5125|0),($5126|0))|0);
 $5128 = tempRet0;
 $5129 = $165;
 $5130 = $5129;
 $5131 = HEAP32[$5130>>2]|0;
 $5132 = (($5129) + 4)|0;
 $5133 = $5132;
 $5134 = HEAP32[$5133>>2]|0;
 $5135 = (_i64Add(($5127|0),($5128|0),($5131|0),($5134|0))|0);
 $5136 = tempRet0;
 $5137 = $149;
 $5138 = $5137;
 HEAP32[$5138>>2] = $5135;
 $5139 = (($5137) + 4)|0;
 $5140 = $5139;
 HEAP32[$5140>>2] = $5136;
 $5141 = $5119 ^ $5135;
 $5142 = $5120 ^ $5136;
 $5143 = (_rotr64($5141,$5142,16)|0);
 $5144 = tempRet0;
 $5145 = $44;
 $5146 = $5145;
 HEAP32[$5146>>2] = $5143;
 $5147 = (($5145) + 4)|0;
 $5148 = $5147;
 HEAP32[$5148>>2] = $5144;
 $5149 = (_i64Add(($5121|0),($5122|0),($5143|0),($5144|0))|0);
 $5150 = tempRet0;
 $5151 = $30;
 $5152 = $5151;
 HEAP32[$5152>>2] = $5149;
 $5153 = (($5151) + 4)|0;
 $5154 = $5153;
 HEAP32[$5154>>2] = $5150;
 $5155 = $5125 ^ $5149;
 $5156 = $5126 ^ $5150;
 $5157 = (_rotr64($5155,$5156,63)|0);
 $5158 = tempRet0;
 $5159 = $220;
 $5160 = $5159;
 HEAP32[$5160>>2] = $5157;
 $5161 = (($5159) + 4)|0;
 $5162 = $5161;
 HEAP32[$5162>>2] = $5158;
 $5163 = (_i64Add(($4971|0),($4972|0),($5043|0),($5044|0))|0);
 $5164 = tempRet0;
 $5165 = $430;
 $5166 = $5165;
 $5167 = HEAP32[$5166>>2]|0;
 $5168 = (($5165) + 4)|0;
 $5169 = $5168;
 $5170 = HEAP32[$5169>>2]|0;
 $5171 = (_i64Add(($5163|0),($5164|0),($5167|0),($5170|0))|0);
 $5172 = tempRet0;
 $5173 = $54;
 $5174 = $5173;
 $5175 = HEAP32[$5174>>2]|0;
 $5176 = (($5173) + 4)|0;
 $5177 = $5176;
 $5178 = HEAP32[$5177>>2]|0;
 $5179 = $5175 ^ $5171;
 $5180 = $5178 ^ $5172;
 $5181 = (_rotr64($5179,$5180,32)|0);
 $5182 = tempRet0;
 $5183 = $27;
 $5184 = $5183;
 $5185 = HEAP32[$5184>>2]|0;
 $5186 = (($5183) + 4)|0;
 $5187 = $5186;
 $5188 = HEAP32[$5187>>2]|0;
 $5189 = (_i64Add(($5185|0),($5188|0),($5181|0),($5182|0))|0);
 $5190 = tempRet0;
 $5191 = $5043 ^ $5189;
 $5192 = $5044 ^ $5190;
 $5193 = (_rotr64($5191,$5192,24)|0);
 $5194 = tempRet0;
 $5195 = (_i64Add(($5171|0),($5172|0),($5193|0),($5194|0))|0);
 $5196 = tempRet0;
 $5197 = $322;
 $5198 = $5197;
 $5199 = HEAP32[$5198>>2]|0;
 $5200 = (($5197) + 4)|0;
 $5201 = $5200;
 $5202 = HEAP32[$5201>>2]|0;
 $5203 = (_i64Add(($5195|0),($5196|0),($5199|0),($5202|0))|0);
 $5204 = tempRet0;
 $5205 = $213;
 $5206 = $5205;
 HEAP32[$5206>>2] = $5203;
 $5207 = (($5205) + 4)|0;
 $5208 = $5207;
 HEAP32[$5208>>2] = $5204;
 $5209 = $5181 ^ $5203;
 $5210 = $5182 ^ $5204;
 $5211 = (_rotr64($5209,$5210,16)|0);
 $5212 = tempRet0;
 $5213 = $54;
 $5214 = $5213;
 HEAP32[$5214>>2] = $5211;
 $5215 = (($5213) + 4)|0;
 $5216 = $5215;
 HEAP32[$5216>>2] = $5212;
 $5217 = (_i64Add(($5189|0),($5190|0),($5211|0),($5212|0))|0);
 $5218 = tempRet0;
 $5219 = $27;
 $5220 = $5219;
 HEAP32[$5220>>2] = $5217;
 $5221 = (($5219) + 4)|0;
 $5222 = $5221;
 HEAP32[$5222>>2] = $5218;
 $5223 = $5193 ^ $5217;
 $5224 = $5194 ^ $5218;
 $5225 = (_rotr64($5223,$5224,63)|0);
 $5226 = tempRet0;
 $5227 = $280;
 $5228 = $5227;
 HEAP32[$5228>>2] = $5225;
 $5229 = (($5227) + 4)|0;
 $5230 = $5229;
 HEAP32[$5230>>2] = $5226;
 $5231 = $85;
 $5232 = $5231;
 $5233 = HEAP32[$5232>>2]|0;
 $5234 = (($5231) + 4)|0;
 $5235 = $5234;
 $5236 = HEAP32[$5235>>2]|0;
 $5237 = (_i64Add(($5033|0),($5034|0),($5233|0),($5236|0))|0);
 $5238 = tempRet0;
 $5239 = $250;
 $5240 = $5239;
 $5241 = HEAP32[$5240>>2]|0;
 $5242 = (($5239) + 4)|0;
 $5243 = $5242;
 $5244 = HEAP32[$5243>>2]|0;
 $5245 = (_i64Add(($5237|0),($5238|0),($5241|0),($5244|0))|0);
 $5246 = tempRet0;
 $5247 = $64;
 $5248 = $5247;
 $5249 = HEAP32[$5248>>2]|0;
 $5250 = (($5247) + 4)|0;
 $5251 = $5250;
 $5252 = HEAP32[$5251>>2]|0;
 $5253 = $5249 ^ $5245;
 $5254 = $5252 ^ $5246;
 $5255 = (_rotr64($5253,$5254,32)|0);
 $5256 = tempRet0;
 $5257 = $28;
 $5258 = $5257;
 $5259 = HEAP32[$5258>>2]|0;
 $5260 = (($5257) + 4)|0;
 $5261 = $5260;
 $5262 = HEAP32[$5261>>2]|0;
 $5263 = (_i64Add(($5259|0),($5262|0),($5255|0),($5256|0))|0);
 $5264 = tempRet0;
 $5265 = $5233 ^ $5263;
 $5266 = $5236 ^ $5264;
 $5267 = (_rotr64($5265,$5266,24)|0);
 $5268 = tempRet0;
 $5269 = (_i64Add(($5245|0),($5246|0),($5267|0),($5268|0))|0);
 $5270 = tempRet0;
 $5271 = $186;
 $5272 = $5271;
 $5273 = HEAP32[$5272>>2]|0;
 $5274 = (($5271) + 4)|0;
 $5275 = $5274;
 $5276 = HEAP32[$5275>>2]|0;
 $5277 = (_i64Add(($5269|0),($5270|0),($5273|0),($5276|0))|0);
 $5278 = tempRet0;
 $5279 = $273;
 $5280 = $5279;
 HEAP32[$5280>>2] = $5277;
 $5281 = (($5279) + 4)|0;
 $5282 = $5281;
 HEAP32[$5282>>2] = $5278;
 $5283 = $5255 ^ $5277;
 $5284 = $5256 ^ $5278;
 $5285 = (_rotr64($5283,$5284,16)|0);
 $5286 = tempRet0;
 $5287 = $64;
 $5288 = $5287;
 HEAP32[$5288>>2] = $5285;
 $5289 = (($5287) + 4)|0;
 $5290 = $5289;
 HEAP32[$5290>>2] = $5286;
 $5291 = (_i64Add(($5263|0),($5264|0),($5285|0),($5286|0))|0);
 $5292 = tempRet0;
 $5293 = $28;
 $5294 = $5293;
 HEAP32[$5294>>2] = $5291;
 $5295 = (($5293) + 4)|0;
 $5296 = $5295;
 HEAP32[$5296>>2] = $5292;
 $5297 = $5267 ^ $5291;
 $5298 = $5268 ^ $5292;
 $5299 = (_rotr64($5297,$5298,63)|0);
 $5300 = tempRet0;
 $5301 = $85;
 $5302 = $5301;
 HEAP32[$5302>>2] = $5299;
 $5303 = (($5301) + 4)|0;
 $5304 = $5303;
 HEAP32[$5304>>2] = $5300;
 $$2 = 0;
 while(1) {
  $exitcond = ($$2|0)==(8);
  if ($exitcond) {
   break;
  }
  $5305 = (($0) + ($$2<<3)|0);
  $5306 = $5305;
  $5307 = $5306;
  $5308 = HEAP32[$5307>>2]|0;
  $5309 = (($5306) + 4)|0;
  $5310 = $5309;
  $5311 = HEAP32[$5310>>2]|0;
  $5312 = (($3) + ($$2<<3)|0);
  $5313 = $5312;
  $5314 = $5313;
  $5315 = HEAP32[$5314>>2]|0;
  $5316 = (($5313) + 4)|0;
  $5317 = $5316;
  $5318 = HEAP32[$5317>>2]|0;
  $5319 = $5308 ^ $5315;
  $5320 = $5311 ^ $5318;
  $5321 = (($$2) + 8)|0;
  $5322 = (($3) + ($5321<<3)|0);
  $5323 = $5322;
  $5324 = $5323;
  $5325 = HEAP32[$5324>>2]|0;
  $5326 = (($5323) + 4)|0;
  $5327 = $5326;
  $5328 = HEAP32[$5327>>2]|0;
  $5329 = $5319 ^ $5325;
  $5330 = $5320 ^ $5328;
  $5331 = $5305;
  $5332 = $5331;
  HEAP32[$5332>>2] = $5329;
  $5333 = (($5331) + 4)|0;
  $5334 = $5333;
  HEAP32[$5334>>2] = $5330;
  $5335 = (($$2) + 1)|0;
  $$2 = $5335;
 }
 STACKTOP = sp;return;
}
function _load64_le($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 tempRet0 = ($6);
 return ($3|0);
}
function _rotr64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_bitshift64Lshr(($0|0),($1|0),($2|0))|0);
 $4 = tempRet0;
 $5 = (64 - ($2))|0;
 $6 = (_bitshift64Shl(($0|0),($1|0),($5|0))|0);
 $7 = tempRet0;
 $8 = $3 | $6;
 $9 = $4 | $7;
 tempRet0 = ($9);
 return ($8|0);
}
function _crypto_generichash_blake2b__init_param($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _blake2b_init0($0);
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(8);
  if ($exitcond) {
   break;
  }
  $2 = $$0 << 3;
  $3 = (($1) + ($2)|0);
  $4 = (_load64_le_37($3)|0);
  $5 = tempRet0;
  $6 = (($0) + ($$0<<3)|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = $9 ^ $4;
  $14 = $12 ^ $5;
  $15 = $6;
  $16 = $15;
  HEAP32[$16>>2] = $13;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $14;
  $19 = (($$0) + 1)|0;
  $$0 = $19;
 }
 return;
}
function _blake2b_init0($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(8);
  if ($exitcond) {
   break;
  }
  $1 = (400 + ($$0<<3)|0);
  $2 = $1;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($0) + ($$0<<3)|0);
  $9 = $8;
  $10 = $9;
  HEAP32[$10>>2] = $4;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $7;
  $13 = (($$0) + 1)|0;
  $$0 = $13;
 }
 $14 = ((($0)) + 64|0);
 _memset(($14|0),0,293)|0;
 return;
}
function _load64_le_37($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 tempRet0 = ($6);
 return ($3|0);
}
function _crypto_generichash_blake2b__init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $2 = sp_a;
 $3 = (($1) + -1)<<24>>24;
 $4 = ($3&255)>(63);
 if ($4) {
  _sodium_misuse();
  // unreachable;
 } else {
  HEAP8[$2>>0] = $1;
  $5 = ((($2)) + 1|0);
  HEAP8[$5>>0] = 0;
  $6 = ((($2)) + 2|0);
  HEAP8[$6>>0] = 1;
  $7 = ((($2)) + 3|0);
  HEAP8[$7>>0] = 1;
  $8 = ((($2)) + 4|0);
  _store32_le_39($8);
  $9 = ((($2)) + 8|0);
  _store64_le_40($9);
  $10 = ((($2)) + 16|0);
  dest=$10; stop=dest+48|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  _crypto_generichash_blake2b__init_param($0,$2);
  STACKTOP = sp;return;
 }
}
function _store32_le_39($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=0&255;HEAP8[$0+1>>0]=(0>>8)&255;HEAP8[$0+2>>0]=(0>>16)&255;HEAP8[$0+3>>0]=0>>24;
 return;
}
function _store64_le_40($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP8[$4>>0]=0&255;HEAP8[$4+1>>0]=(0>>8)&255;HEAP8[$4+2>>0]=(0>>16)&255;HEAP8[$4+3>>0]=0>>24;
 return;
}
function _crypto_generichash_blake2b__init_salt_personal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp_a;
 $5 = (($1) + -1)<<24>>24;
 $6 = ($5&255)>(63);
 if ($6) {
  _sodium_misuse();
  // unreachable;
 }
 HEAP8[$4>>0] = $1;
 $7 = ((($4)) + 1|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($4)) + 2|0);
 HEAP8[$8>>0] = 1;
 $9 = ((($4)) + 3|0);
 HEAP8[$9>>0] = 1;
 $10 = ((($4)) + 4|0);
 _store32_le_39($10);
 $11 = ((($4)) + 8|0);
 _store64_le_40($11);
 $12 = ((($4)) + 16|0);
 $13 = ($2|0)==(0|0);
 dest=$12; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 if ($13) {
  $14 = ((($4)) + 32|0);
  dest=$14; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 } else {
  _blake2b_param_set_salt($4,$2);
 }
 $15 = ($3|0)==(0|0);
 if ($15) {
  $16 = ((($4)) + 48|0);
  dest=$16; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $$pre$phiZ2D = $4;
  _crypto_generichash_blake2b__init_param($0,$$pre$phiZ2D);
  STACKTOP = sp;return;
 } else {
  _blake2b_param_set_personal($4,$3);
  $$pre$phiZ2D = $4;
  _crypto_generichash_blake2b__init_param($0,$$pre$phiZ2D);
  STACKTOP = sp;return;
 }
}
function _blake2b_param_set_salt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 dest=$2; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 return;
}
function _blake2b_param_set_personal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 dest=$2; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 return;
}
function _crypto_generichash_blake2b__init_key($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 192|0;
 $4 = sp_a + 128|0;
 $5 = sp_a;
 $6 = (($1) + -1)<<24>>24;
 $7 = ($6&255)>(63);
 if ($7) {
  _sodium_misuse();
  // unreachable;
 }
 $8 = ($2|0)==(0|0);
 $9 = (($3) + -1)<<24>>24;
 $10 = ($9&255)>(63);
 $11 = $10 | $8;
 if ($11) {
  _sodium_misuse();
  // unreachable;
 } else {
  HEAP8[$4>>0] = $1;
  $12 = ((($4)) + 1|0);
  HEAP8[$12>>0] = $3;
  $13 = ((($4)) + 2|0);
  HEAP8[$13>>0] = 1;
  $14 = ((($4)) + 3|0);
  HEAP8[$14>>0] = 1;
  $15 = ((($4)) + 4|0);
  _store32_le_39($15);
  $16 = ((($4)) + 8|0);
  _store64_le_40($16);
  $17 = ((($4)) + 16|0);
  dest=$17; stop=dest+48|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  _crypto_generichash_blake2b__init_param($0,$4);
  $18 = $3&255;
  $19 = (128 - ($18))|0;
  $20 = (($5) + ($18)|0);
  _memset(($20|0),0,($19|0))|0;
  _memcpy(($5|0),($2|0),($18|0))|0;
  _crypto_generichash_blake2b__update($0,$5,128,0);
  _sodium_memzero($5,128);
  STACKTOP = sp;return;
 }
}
function _crypto_generichash_blake2b__update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$01 = 0, $$12 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 352|0);
 $5 = ((($0)) + 96|0);
 $6 = ((($0)) + 224|0);
 $$01 = $1;$10 = $3;$8 = $2;
 while(1) {
  $7 = ($8|0)==(0);
  $9 = ($10|0)==(0);
  $11 = $7 & $9;
  if ($11) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = (256 - ($12))|0;
  $14 = ($10>>>0)>(0);
  $15 = ($8>>>0)>($13>>>0);
  $16 = ($10|0)==(0);
  $17 = $16 & $15;
  $18 = $14 | $17;
  $19 = (((($0)) + 96|0) + ($12)|0);
  if ($18) {
   _memcpy(($19|0),($$01|0),($13|0))|0;
   $20 = HEAP32[$4>>2]|0;
   $21 = (($20) + ($13))|0;
   HEAP32[$4>>2] = $21;
   _blake2b_increment_counter($0,128,0);
   _blake2b_compress_ref($0,$5);
   dest=$5; src=$6; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $22 = HEAP32[$4>>2]|0;
   $23 = (($22) + -128)|0;
   HEAP32[$4>>2] = $23;
   $24 = (_i64Subtract(($8|0),($10|0),($13|0),0)|0);
   $25 = tempRet0;
   $$pn = $13;$29 = $24;$30 = $25;
  } else {
   _memcpy(($19|0),($$01|0),($8|0))|0;
   $26 = HEAP32[$4>>2]|0;
   $27 = (_i64Add(($26|0),0,($8|0),($10|0))|0);
   $28 = tempRet0;
   HEAP32[$4>>2] = $27;
   $$pn = $8;$29 = 0;$30 = 0;
  }
  $$12 = (($$01) + ($$pn)|0);
  $$01 = $$12;$10 = $30;$8 = $29;
 }
 return;
}
function _blake2b_increment_counter($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 64|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (_i64Add(($6|0),($9|0),($1|0),($2|0))|0);
 $11 = tempRet0;
 $12 = $3;
 $13 = $12;
 HEAP32[$13>>2] = $10;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = ($11>>>0)<($2>>>0);
 $17 = ($10>>>0)<($1>>>0);
 $18 = ($11|0)==($2|0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 $21 = $20&1;
 $22 = ((($0)) + 72|0);
 $23 = $22;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (_i64Add(($25|0),($28|0),($21|0),0)|0);
 $30 = tempRet0;
 $31 = $22;
 $32 = $31;
 HEAP32[$32>>2] = $29;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 return;
}
function _crypto_generichash_blake2b__init_key_salt_personal($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 192|0;
 $6 = sp_a + 128|0;
 $7 = sp_a;
 $8 = (($1) + -1)<<24>>24;
 $9 = ($8&255)>(63);
 if ($9) {
  _sodium_misuse();
  // unreachable;
 }
 $10 = ($2|0)==(0|0);
 $11 = (($3) + -1)<<24>>24;
 $12 = ($11&255)>(63);
 $13 = $12 | $10;
 if ($13) {
  _sodium_misuse();
  // unreachable;
 }
 HEAP8[$6>>0] = $1;
 $14 = ((($6)) + 1|0);
 HEAP8[$14>>0] = $3;
 $15 = ((($6)) + 2|0);
 HEAP8[$15>>0] = 1;
 $16 = ((($6)) + 3|0);
 HEAP8[$16>>0] = 1;
 $17 = ((($6)) + 4|0);
 _store32_le_39($17);
 $18 = ((($6)) + 8|0);
 _store64_le_40($18);
 $19 = ((($6)) + 16|0);
 $20 = ($4|0)==(0|0);
 dest=$19; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 if ($20) {
  $21 = ((($6)) + 32|0);
  dest=$21; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 } else {
  _blake2b_param_set_salt($6,$4);
 }
 $22 = ($5|0)==(0|0);
 if ($22) {
  $23 = ((($6)) + 48|0);
  dest=$23; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $$pre$phiZ2D = $6;
 } else {
  _blake2b_param_set_personal($6,$5);
  $$pre$phiZ2D = $6;
 }
 _crypto_generichash_blake2b__init_param($0,$$pre$phiZ2D);
 $24 = $3&255;
 $25 = ($3<<24>>24)<(0);
 $26 = (128 - ($24))|0;
 $27 = $25 ? 0 : $26;
 $28 = (($7) + ($24)|0);
 _memset(($28|0),0,($27|0))|0;
 _memcpy(($7|0),($2|0),($24|0))|0;
 _crypto_generichash_blake2b__update($0,$7,128,0);
 _sodium_memzero($7,128);
 STACKTOP = sp;return;
}
function _crypto_generichash_blake2b__final($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$idx = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (($2) + -1)<<24>>24;
 $4 = ($3&255)>(63);
 if ($4) {
  _sodium_misuse();
  // unreachable;
 }
 $$idx = ((($0)) + 80|0);
 $5 = $$idx;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_blake2b_is_lastblock($7,$10)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = -1;
  return ($$0|0);
 }
 $13 = ((($0)) + 352|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)>(128);
 do {
  if ($15) {
   _blake2b_increment_counter($0,128,0);
   $16 = ((($0)) + 96|0);
   _blake2b_compress_ref($0,$16);
   $17 = HEAP32[$13>>2]|0;
   $18 = (($17) + -128)|0;
   HEAP32[$13>>2] = $18;
   $19 = ($18>>>0)<(129);
   if ($19) {
    $20 = ((($0)) + 224|0);
    _memcpy(($16|0),($20|0),($18|0))|0;
    $$pre = HEAP32[$13>>2]|0;
    $$pre$phiZ2D = $16;$21 = $$pre;
    break;
   } else {
    ___assert_fail((33730|0),(33762|0),370,(33807|0));
    // unreachable;
   }
  } else {
   $$pre1 = ((($0)) + 96|0);
   $$pre$phiZ2D = $$pre1;$21 = $14;
  }
 } while(0);
 _blake2b_increment_counter($0,$21,0);
 _blake2b_set_lastblock($0);
 $22 = HEAP32[$13>>2]|0;
 $23 = (((($0)) + 96|0) + ($22)|0);
 $24 = (256 - ($22))|0;
 _memset(($23|0),0,($24|0))|0;
 _blake2b_compress_ref($0,$$pre$phiZ2D);
 $25 = $2&255;
 _memcpy(($1|0),($0|0),($25|0))|0;
 _sodium_memzero($0,64);
 _sodium_memzero($$pre$phiZ2D,256);
 $$0 = 0;
 return ($$0|0);
}
function _blake2b_is_lastblock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = ($0|0)!=(0);
 $3 = ($1|0)!=(0);
 $4 = $2 | $3;
 $5 = $4&1;
 return ($5|0);
}
function _blake2b_set_lastblock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 356|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  _blake2b_set_lastnode($0);
 }
 $4 = ((($0)) + 80|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = -1;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 return;
}
function _blake2b_set_lastnode($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 88|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = -1;
 return;
}
function _crypto_generichash_blake2b__blake2b($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 384|0;
 $7 = sp_a;
 $8 = ($1|0)!=(0|0);
 $9 = ($4|0)==(0);
 $10 = ($5|0)==(0);
 $11 = $9 & $10;
 $or$cond = $8 | $11;
 if (!($or$cond)) {
  _sodium_misuse();
  // unreachable;
 }
 $12 = ($0|0)==(0|0);
 if ($12) {
  _sodium_misuse();
  // unreachable;
 }
 $13 = (($3) + -1)<<24>>24;
 $14 = ($13&255)>(63);
 if ($14) {
  _sodium_misuse();
  // unreachable;
 }
 $15 = ($2|0)==(0|0);
 if ($15) {
  $16 = ($6<<24>>24)==(0);
  if ($16) {
   label = 14;
  } else {
   _sodium_misuse();
   // unreachable;
  }
 } else {
  $17 = ($6&255)>(64);
  if ($17) {
   _sodium_misuse();
   // unreachable;
  }
  $18 = ($6<<24>>24)==(0);
  if ($18) {
   label = 14;
  } else {
   _crypto_generichash_blake2b__init_key($7,$3,$2,$6);
   $$pre$phiZ2D = $7;
  }
 }
 if ((label|0) == 14) {
  _crypto_generichash_blake2b__init($7,$3);
  $$pre$phiZ2D = $7;
 }
 _crypto_generichash_blake2b__update($$pre$phiZ2D,$1,$4,$5);
 (_crypto_generichash_blake2b__final($$pre$phiZ2D,$0,$3)|0);
 STACKTOP = sp;return;
}
function _crypto_generichash_blake2b__blake2b_salt_personal($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 384|0;
 $9 = sp_a;
 $10 = ($1|0)!=(0|0);
 $11 = ($4|0)==(0);
 $12 = ($5|0)==(0);
 $13 = $11 & $12;
 $or$cond = $10 | $13;
 if (!($or$cond)) {
  _sodium_misuse();
  // unreachable;
 }
 $14 = ($0|0)==(0|0);
 if ($14) {
  _sodium_misuse();
  // unreachable;
 }
 $15 = (($3) + -1)<<24>>24;
 $16 = ($15&255)>(63);
 if ($16) {
  _sodium_misuse();
  // unreachable;
 }
 $17 = ($2|0)==(0|0);
 if ($17) {
  $18 = ($6<<24>>24)==(0);
  if (!($18)) {
   _sodium_misuse();
   // unreachable;
  }
 } else {
  $19 = ($6&255)>(64);
  if ($19) {
   _sodium_misuse();
   // unreachable;
  }
  $20 = ($6<<24>>24)==(0);
  if (!($20)) {
   _crypto_generichash_blake2b__init_key_salt_personal($9,$3,$2,$6,$7,$8);
   $$pre$phiZ2D = $9;
   _crypto_generichash_blake2b__update($$pre$phiZ2D,$1,$4,$5);
   (_crypto_generichash_blake2b__final($$pre$phiZ2D,$0,$3)|0);
   STACKTOP = sp;return;
  }
 }
 _crypto_generichash_blake2b__init_salt_personal($9,$3,$7,$8);
 $$pre$phiZ2D = $9;
 _crypto_generichash_blake2b__update($$pre$phiZ2D,$1,$4,$5);
 (_crypto_generichash_blake2b__final($$pre$phiZ2D,$0,$3)|0);
 STACKTOP = sp;return;
}
function _crypto_generichash_blake2b($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $11 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = (($1) + -1)|0;
 $8 = ($7>>>0)>(63);
 $9 = ($6>>>0)>(64);
 $or$cond1 = $8 | $9;
 if ($or$cond1) {
  $$0 = -1;
  return ($$0|0);
 }
 $10 = $1&255;
 $11 = $6&255;
 _crypto_generichash_blake2b__blake2b($0,$2,$5,$10,$3,$4,$11);
 $$0 = 0;
 return ($$0|0);
}
function _crypto_generichash_blake2b_salt_personal($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $9 = 0, $or$cond1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $9 = (($1) + -1)|0;
 $10 = ($9>>>0)>(63);
 $11 = ($6>>>0)>(64);
 $or$cond1 = $10 | $11;
 if ($or$cond1) {
  $$0 = -1;
  return ($$0|0);
 }
 $12 = $1&255;
 $13 = $6&255;
 _crypto_generichash_blake2b__blake2b_salt_personal($0,$2,$5,$12,$3,$4,$13,$7,$8);
 $$0 = 0;
 return ($$0|0);
}
function _crypto_generichash_blake2b_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond1 = 0, $or$cond2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (($3) + -1)|0;
 $5 = ($4>>>0)>(63);
 $6 = ($2>>>0)>(64);
 $or$cond1 = $5 | $6;
 if ($or$cond1) {
  $$0 = -1;
  return ($$0|0);
 }
 $7 = ($1|0)==(0|0);
 $8 = ($2|0)==(0);
 $or$cond2 = $7 | $8;
 $9 = $3&255;
 if ($or$cond2) {
  _crypto_generichash_blake2b__init($0,$9);
  $$0 = 0;
  return ($$0|0);
 } else {
  $10 = $2&255;
  _crypto_generichash_blake2b__init_key($0,$9,$1,$10);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _crypto_generichash_blake2b_init_salt_personal($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond1 = 0, $or$cond2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (($3) + -1)|0;
 $7 = ($6>>>0)>(63);
 $8 = ($2>>>0)>(64);
 $or$cond1 = $7 | $8;
 if ($or$cond1) {
  $$0 = -1;
  return ($$0|0);
 }
 $9 = ($1|0)==(0|0);
 $10 = ($2|0)==(0);
 $or$cond2 = $9 | $10;
 $11 = $3&255;
 if ($or$cond2) {
  _crypto_generichash_blake2b__init_salt_personal($0,$11,$4,$5);
  $$0 = 0;
  return ($$0|0);
 } else {
  $12 = $2&255;
  _crypto_generichash_blake2b__init_key_salt_personal($0,$11,$1,$12,$4,$5);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _crypto_generichash_blake2b_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _crypto_generichash_blake2b__update($0,$1,$2,$3);
 return 0;
}
function _crypto_generichash_blake2b_final($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)<(256);
 if ($3) {
  $4 = $2&255;
  $5 = (_crypto_generichash_blake2b__final($0,$1,$4)|0);
  return ($5|0);
 } else {
  ___assert_fail((33841|0),(33861|0),102,(33914|0));
  // unreachable;
 }
 return (0)|0;
}
function _crypto_hash_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_hash($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_hash_sha512($0,$1,$2,$3)|0);
 return 0;
}
function _crypto_hash_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (33947|0);
}
function _crypto_hash_sha256_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_hash_sha256_statebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 104;
}
function _crypto_hash_sha256_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 ;HEAP32[$0>>2]=HEAP32[32904>>2]|0;HEAP32[$0+4>>2]=HEAP32[32904+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[32904+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[32904+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[32904+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[32904+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[32904+24>>2]|0;HEAP32[$0+28>>2]=HEAP32[32904+28>>2]|0;
 return 0;
}
function _crypto_hash_sha256_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 288|0;
 $4 = sp_a;
 $5 = ($2|0)==(0);
 $6 = ($3|0)==(0);
 $7 = $5 & $6;
 if ($7) {
  STACKTOP = sp;return 0;
 }
 $8 = ((($0)) + 32|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_bitshift64Lshr(($11|0),($14|0),3)|0);
 $16 = tempRet0;
 $17 = $15 & 63;
 $18 = (_bitshift64Shl(($2|0),($3|0),3)|0);
 $19 = tempRet0;
 $20 = (_i64Add(($11|0),($14|0),($18|0),($19|0))|0);
 $21 = tempRet0;
 $22 = $8;
 $23 = $22;
 HEAP32[$23>>2] = $20;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = (_i64Subtract(64,0,($17|0),0)|0);
 $27 = tempRet0;
 $28 = ($27>>>0)>($3>>>0);
 $29 = ($26>>>0)>($2>>>0);
 $30 = ($27|0)==($3|0);
 $31 = $30 & $29;
 $32 = $28 | $31;
 if ($32) {
  $34 = 0;$36 = 0;
  while(1) {
   $33 = ($34>>>0)<($3>>>0);
   $35 = ($36>>>0)<($2>>>0);
   $37 = ($34|0)==($3|0);
   $38 = $37 & $35;
   $39 = $33 | $38;
   if (!($39)) {
    break;
   }
   $40 = (($1) + ($36)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = (_i64Add(($17|0),0,($36|0),($34|0))|0);
   $43 = tempRet0;
   $44 = (((($0)) + 40|0) + ($42)|0);
   HEAP8[$44>>0] = $41;
   $45 = (_i64Add(($36|0),($34|0),1,0)|0);
   $46 = tempRet0;
   $34 = $46;$36 = $45;
  }
  STACKTOP = sp;return 0;
 } else {
  $48 = 0;$50 = 0;
 }
 while(1) {
  $47 = ($48>>>0)<($27>>>0);
  $49 = ($50>>>0)<($26>>>0);
  $51 = ($48|0)==($27|0);
  $52 = $51 & $49;
  $53 = $47 | $52;
  if (!($53)) {
   break;
  }
  $54 = (($1) + ($50)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = (_i64Add(($17|0),0,($50|0),($48|0))|0);
  $57 = tempRet0;
  $58 = (((($0)) + 40|0) + ($56)|0);
  HEAP8[$58>>0] = $55;
  $59 = (_i64Add(($50|0),($48|0),1,0)|0);
  $60 = tempRet0;
  $48 = $60;$50 = $59;
 }
 $61 = ((($0)) + 40|0);
 $62 = ((($4)) + 256|0);
 _SHA256_Transform($0,$61,$4,$62);
 $63 = (($1) + ($26)|0);
 $64 = $15 | -64;
 $65 = (_i64Add(($64|0),-1,($2|0),($3|0))|0);
 $66 = tempRet0;
 $$02 = $63;$68 = $66;$70 = $65;
 while(1) {
  $67 = ($68>>>0)>(0);
  $69 = ($70>>>0)>(63);
  $71 = ($68|0)==(0);
  $72 = $71 & $69;
  $73 = $67 | $72;
  if (!($73)) {
   break;
  }
  _SHA256_Transform($0,$$02,$4,$62);
  $74 = ((($$02)) + 64|0);
  $75 = (_i64Add(($70|0),($68|0),-64,-1)|0);
  $76 = tempRet0;
  $$02 = $74;$68 = $76;$70 = $75;
 }
 $77 = $70 & 63;
 $79 = 0;$81 = 0;
 while(1) {
  $78 = ($79>>>0)<(0);
  $80 = ($81>>>0)<($77>>>0);
  $82 = ($79|0)==(0);
  $83 = $82 & $80;
  $84 = $78 | $83;
  if (!($84)) {
   break;
  }
  $85 = (($$02) + ($81)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = (((($0)) + 40|0) + ($81)|0);
  HEAP8[$87>>0] = $86;
  $88 = (_i64Add(($81|0),($79|0),1,0)|0);
  $89 = tempRet0;
  $79 = $89;$81 = $88;
 }
 _sodium_memzero($4,288);
 STACKTOP = sp;return 0;
}
function _SHA256_Transform($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _be32dec_vect($2,$1);
 ;HEAP32[$3>>2]=HEAP32[$0>>2]|0;HEAP32[$3+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$3+20>>2]=HEAP32[$0+20>>2]|0;HEAP32[$3+24>>2]=HEAP32[$0+24>>2]|0;HEAP32[$3+28>>2]=HEAP32[$0+28>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = ((($3)) + 20|0);
 $6 = ((($3)) + 24|0);
 $7 = ((($3)) + 28|0);
 $8 = ((($3)) + 12|0);
 $9 = ((($3)) + 4|0);
 $10 = ((($3)) + 8|0);
 $$0 = 0;
 while(1) {
  $11 = HEAP32[$4>>2]|0;
  $12 = (_rotr32($11,6)|0);
  $13 = (_rotr32($11,11)|0);
  $14 = $12 ^ $13;
  $15 = (_rotr32($11,25)|0);
  $16 = $14 ^ $15;
  $17 = HEAP32[$5>>2]|0;
  $18 = HEAP32[$6>>2]|0;
  $19 = $17 ^ $18;
  $20 = $11 & $19;
  $21 = $20 ^ $18;
  $22 = (($16) + ($21))|0;
  $23 = (($2) + ($$0<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + ($24))|0;
  $26 = (32936 + ($$0<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + ($27))|0;
  $29 = HEAP32[$7>>2]|0;
  $30 = (($29) + ($28))|0;
  $31 = HEAP32[$8>>2]|0;
  $32 = (($31) + ($30))|0;
  HEAP32[$8>>2] = $32;
  $33 = HEAP32[$3>>2]|0;
  $34 = (_rotr32($33,2)|0);
  $35 = (_rotr32($33,13)|0);
  $36 = $34 ^ $35;
  $37 = (_rotr32($33,22)|0);
  $38 = $36 ^ $37;
  $39 = HEAP32[$9>>2]|0;
  $40 = HEAP32[$10>>2]|0;
  $41 = $39 | $40;
  $42 = $33 & $41;
  $43 = $39 & $40;
  $44 = $42 | $43;
  $45 = (($38) + ($44))|0;
  $46 = (($30) + ($45))|0;
  HEAP32[$7>>2] = $46;
  $47 = (_rotr32($32,6)|0);
  $48 = (_rotr32($32,11)|0);
  $49 = $47 ^ $48;
  $50 = (_rotr32($32,25)|0);
  $51 = $49 ^ $50;
  $52 = $11 ^ $17;
  $53 = $32 & $52;
  $54 = $53 ^ $17;
  $55 = (($51) + ($54))|0;
  $56 = $$0 | 1;
  $57 = (($2) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($55) + ($58))|0;
  $60 = (32936 + ($56<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($59) + ($61))|0;
  $63 = (($18) + ($62))|0;
  $64 = (($40) + ($63))|0;
  HEAP32[$10>>2] = $64;
  $65 = (_rotr32($46,2)|0);
  $66 = (_rotr32($46,13)|0);
  $67 = $65 ^ $66;
  $68 = (_rotr32($46,22)|0);
  $69 = $67 ^ $68;
  $70 = $33 | $39;
  $71 = $46 & $70;
  $72 = $33 & $39;
  $73 = $71 | $72;
  $74 = (($69) + ($73))|0;
  $75 = (($63) + ($74))|0;
  HEAP32[$6>>2] = $75;
  $76 = (_rotr32($64,6)|0);
  $77 = (_rotr32($64,11)|0);
  $78 = $76 ^ $77;
  $79 = (_rotr32($64,25)|0);
  $80 = $78 ^ $79;
  $81 = $32 ^ $11;
  $82 = $64 & $81;
  $83 = $82 ^ $11;
  $84 = (($80) + ($83))|0;
  $85 = $$0 | 2;
  $86 = (($2) + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($84) + ($87))|0;
  $89 = (32936 + ($85<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($88) + ($90))|0;
  $92 = (($17) + ($91))|0;
  $93 = (($39) + ($92))|0;
  HEAP32[$9>>2] = $93;
  $94 = (_rotr32($75,2)|0);
  $95 = (_rotr32($75,13)|0);
  $96 = $94 ^ $95;
  $97 = (_rotr32($75,22)|0);
  $98 = $96 ^ $97;
  $99 = $46 | $33;
  $100 = $75 & $99;
  $101 = $46 & $33;
  $102 = $100 | $101;
  $103 = (($98) + ($102))|0;
  $104 = (($92) + ($103))|0;
  HEAP32[$5>>2] = $104;
  $105 = (_rotr32($93,6)|0);
  $106 = (_rotr32($93,11)|0);
  $107 = $105 ^ $106;
  $108 = (_rotr32($93,25)|0);
  $109 = $107 ^ $108;
  $110 = $64 ^ $32;
  $111 = $93 & $110;
  $112 = $111 ^ $32;
  $113 = (($109) + ($112))|0;
  $114 = $$0 | 3;
  $115 = (($2) + ($114<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($113) + ($116))|0;
  $118 = (32936 + ($114<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($117) + ($119))|0;
  $121 = HEAP32[$4>>2]|0;
  $122 = (($121) + ($120))|0;
  $123 = (($33) + ($122))|0;
  HEAP32[$3>>2] = $123;
  $124 = (_rotr32($104,2)|0);
  $125 = (_rotr32($104,13)|0);
  $126 = $124 ^ $125;
  $127 = (_rotr32($104,22)|0);
  $128 = $126 ^ $127;
  $129 = $75 | $46;
  $130 = $104 & $129;
  $131 = $75 & $46;
  $132 = $130 | $131;
  $133 = (($128) + ($132))|0;
  $134 = (($122) + ($133))|0;
  HEAP32[$4>>2] = $134;
  $135 = (_rotr32($123,6)|0);
  $136 = (_rotr32($123,11)|0);
  $137 = $135 ^ $136;
  $138 = (_rotr32($123,25)|0);
  $139 = $137 ^ $138;
  $140 = $93 ^ $64;
  $141 = $123 & $140;
  $142 = $141 ^ $64;
  $143 = (($139) + ($142))|0;
  $144 = $$0 | 4;
  $145 = (($2) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($143) + ($146))|0;
  $148 = (32936 + ($144<<2)|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) + ($149))|0;
  $151 = HEAP32[$8>>2]|0;
  $152 = (($151) + ($150))|0;
  $153 = HEAP32[$7>>2]|0;
  $154 = (($153) + ($152))|0;
  HEAP32[$7>>2] = $154;
  $155 = (_rotr32($134,2)|0);
  $156 = (_rotr32($134,13)|0);
  $157 = $155 ^ $156;
  $158 = (_rotr32($134,22)|0);
  $159 = $157 ^ $158;
  $160 = $104 | $75;
  $161 = $134 & $160;
  $162 = $104 & $75;
  $163 = $161 | $162;
  $164 = (($159) + ($163))|0;
  $165 = (($152) + ($164))|0;
  HEAP32[$8>>2] = $165;
  $166 = (_rotr32($154,6)|0);
  $167 = (_rotr32($154,11)|0);
  $168 = $166 ^ $167;
  $169 = (_rotr32($154,25)|0);
  $170 = $168 ^ $169;
  $171 = $123 ^ $93;
  $172 = $154 & $171;
  $173 = $172 ^ $93;
  $174 = (($170) + ($173))|0;
  $175 = $$0 | 5;
  $176 = (($2) + ($175<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($174) + ($177))|0;
  $179 = (32936 + ($175<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($178) + ($180))|0;
  $182 = HEAP32[$10>>2]|0;
  $183 = (($182) + ($181))|0;
  $184 = HEAP32[$6>>2]|0;
  $185 = (($184) + ($183))|0;
  HEAP32[$6>>2] = $185;
  $186 = (_rotr32($165,2)|0);
  $187 = (_rotr32($165,13)|0);
  $188 = $186 ^ $187;
  $189 = (_rotr32($165,22)|0);
  $190 = $188 ^ $189;
  $191 = $134 | $104;
  $192 = $165 & $191;
  $193 = $134 & $104;
  $194 = $192 | $193;
  $195 = (($190) + ($194))|0;
  $196 = (($183) + ($195))|0;
  HEAP32[$10>>2] = $196;
  $197 = (_rotr32($185,6)|0);
  $198 = (_rotr32($185,11)|0);
  $199 = $197 ^ $198;
  $200 = (_rotr32($185,25)|0);
  $201 = $199 ^ $200;
  $202 = $154 ^ $123;
  $203 = $185 & $202;
  $204 = $203 ^ $123;
  $205 = (($201) + ($204))|0;
  $206 = $$0 | 6;
  $207 = (($2) + ($206<<2)|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = (($205) + ($208))|0;
  $210 = (32936 + ($206<<2)|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($209) + ($211))|0;
  $213 = HEAP32[$9>>2]|0;
  $214 = (($213) + ($212))|0;
  $215 = HEAP32[$5>>2]|0;
  $216 = (($215) + ($214))|0;
  HEAP32[$5>>2] = $216;
  $217 = (_rotr32($196,2)|0);
  $218 = (_rotr32($196,13)|0);
  $219 = $217 ^ $218;
  $220 = (_rotr32($196,22)|0);
  $221 = $219 ^ $220;
  $222 = $165 | $134;
  $223 = $196 & $222;
  $224 = $165 & $134;
  $225 = $223 | $224;
  $226 = (($221) + ($225))|0;
  $227 = (($214) + ($226))|0;
  HEAP32[$9>>2] = $227;
  $228 = (_rotr32($216,6)|0);
  $229 = (_rotr32($216,11)|0);
  $230 = $228 ^ $229;
  $231 = (_rotr32($216,25)|0);
  $232 = $230 ^ $231;
  $233 = $185 ^ $154;
  $234 = $216 & $233;
  $235 = $234 ^ $154;
  $236 = (($232) + ($235))|0;
  $237 = $$0 | 7;
  $238 = (($2) + ($237<<2)|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = (($236) + ($239))|0;
  $241 = (32936 + ($237<<2)|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = (($240) + ($242))|0;
  $244 = HEAP32[$3>>2]|0;
  $245 = (($244) + ($243))|0;
  $246 = HEAP32[$4>>2]|0;
  $247 = (($246) + ($245))|0;
  HEAP32[$4>>2] = $247;
  $248 = (_rotr32($227,2)|0);
  $249 = (_rotr32($227,13)|0);
  $250 = $248 ^ $249;
  $251 = (_rotr32($227,22)|0);
  $252 = $250 ^ $251;
  $253 = $196 | $165;
  $254 = $227 & $253;
  $255 = $196 & $165;
  $256 = $254 | $255;
  $257 = (($252) + ($256))|0;
  $258 = (($245) + ($257))|0;
  HEAP32[$3>>2] = $258;
  $259 = (_rotr32($247,6)|0);
  $260 = (_rotr32($247,11)|0);
  $261 = $259 ^ $260;
  $262 = (_rotr32($247,25)|0);
  $263 = $261 ^ $262;
  $264 = $216 ^ $185;
  $265 = $247 & $264;
  $266 = $265 ^ $185;
  $267 = (($263) + ($266))|0;
  $268 = $$0 | 8;
  $269 = (($2) + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = (($267) + ($270))|0;
  $272 = (32936 + ($268<<2)|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (($271) + ($273))|0;
  $275 = HEAP32[$7>>2]|0;
  $276 = (($275) + ($274))|0;
  $277 = HEAP32[$8>>2]|0;
  $278 = (($277) + ($276))|0;
  HEAP32[$8>>2] = $278;
  $279 = (_rotr32($258,2)|0);
  $280 = (_rotr32($258,13)|0);
  $281 = $279 ^ $280;
  $282 = (_rotr32($258,22)|0);
  $283 = $281 ^ $282;
  $284 = $227 | $196;
  $285 = $258 & $284;
  $286 = $227 & $196;
  $287 = $285 | $286;
  $288 = (($283) + ($287))|0;
  $289 = (($276) + ($288))|0;
  HEAP32[$7>>2] = $289;
  $290 = (_rotr32($278,6)|0);
  $291 = (_rotr32($278,11)|0);
  $292 = $290 ^ $291;
  $293 = (_rotr32($278,25)|0);
  $294 = $292 ^ $293;
  $295 = $247 ^ $216;
  $296 = $278 & $295;
  $297 = $296 ^ $216;
  $298 = (($294) + ($297))|0;
  $299 = $$0 | 9;
  $300 = (($2) + ($299<<2)|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = (($298) + ($301))|0;
  $303 = (32936 + ($299<<2)|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = (($302) + ($304))|0;
  $306 = HEAP32[$6>>2]|0;
  $307 = (($306) + ($305))|0;
  $308 = HEAP32[$10>>2]|0;
  $309 = (($308) + ($307))|0;
  HEAP32[$10>>2] = $309;
  $310 = (_rotr32($289,2)|0);
  $311 = (_rotr32($289,13)|0);
  $312 = $310 ^ $311;
  $313 = (_rotr32($289,22)|0);
  $314 = $312 ^ $313;
  $315 = $258 | $227;
  $316 = $289 & $315;
  $317 = $258 & $227;
  $318 = $316 | $317;
  $319 = (($314) + ($318))|0;
  $320 = (($307) + ($319))|0;
  HEAP32[$6>>2] = $320;
  $321 = (_rotr32($309,6)|0);
  $322 = (_rotr32($309,11)|0);
  $323 = $321 ^ $322;
  $324 = (_rotr32($309,25)|0);
  $325 = $323 ^ $324;
  $326 = $278 ^ $247;
  $327 = $309 & $326;
  $328 = $327 ^ $247;
  $329 = (($325) + ($328))|0;
  $330 = $$0 | 10;
  $331 = (($2) + ($330<<2)|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = (($329) + ($332))|0;
  $334 = (32936 + ($330<<2)|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = (($333) + ($335))|0;
  $337 = HEAP32[$5>>2]|0;
  $338 = (($337) + ($336))|0;
  $339 = HEAP32[$9>>2]|0;
  $340 = (($339) + ($338))|0;
  HEAP32[$9>>2] = $340;
  $341 = (_rotr32($320,2)|0);
  $342 = (_rotr32($320,13)|0);
  $343 = $341 ^ $342;
  $344 = (_rotr32($320,22)|0);
  $345 = $343 ^ $344;
  $346 = $289 | $258;
  $347 = $320 & $346;
  $348 = $289 & $258;
  $349 = $347 | $348;
  $350 = (($345) + ($349))|0;
  $351 = (($338) + ($350))|0;
  HEAP32[$5>>2] = $351;
  $352 = (_rotr32($340,6)|0);
  $353 = (_rotr32($340,11)|0);
  $354 = $352 ^ $353;
  $355 = (_rotr32($340,25)|0);
  $356 = $354 ^ $355;
  $357 = $309 ^ $278;
  $358 = $340 & $357;
  $359 = $358 ^ $278;
  $360 = (($356) + ($359))|0;
  $361 = $$0 | 11;
  $362 = (($2) + ($361<<2)|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = (($360) + ($363))|0;
  $365 = (32936 + ($361<<2)|0);
  $366 = HEAP32[$365>>2]|0;
  $367 = (($364) + ($366))|0;
  $368 = HEAP32[$4>>2]|0;
  $369 = (($368) + ($367))|0;
  $370 = HEAP32[$3>>2]|0;
  $371 = (($370) + ($369))|0;
  HEAP32[$3>>2] = $371;
  $372 = (_rotr32($351,2)|0);
  $373 = (_rotr32($351,13)|0);
  $374 = $372 ^ $373;
  $375 = (_rotr32($351,22)|0);
  $376 = $374 ^ $375;
  $377 = $320 | $289;
  $378 = $351 & $377;
  $379 = $320 & $289;
  $380 = $378 | $379;
  $381 = (($376) + ($380))|0;
  $382 = (($369) + ($381))|0;
  HEAP32[$4>>2] = $382;
  $383 = (_rotr32($371,6)|0);
  $384 = (_rotr32($371,11)|0);
  $385 = $383 ^ $384;
  $386 = (_rotr32($371,25)|0);
  $387 = $385 ^ $386;
  $388 = $340 ^ $309;
  $389 = $371 & $388;
  $390 = $389 ^ $309;
  $391 = (($387) + ($390))|0;
  $392 = $$0 | 12;
  $393 = (($2) + ($392<<2)|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = (($391) + ($394))|0;
  $396 = (32936 + ($392<<2)|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = (($395) + ($397))|0;
  $399 = HEAP32[$8>>2]|0;
  $400 = (($399) + ($398))|0;
  $401 = HEAP32[$7>>2]|0;
  $402 = (($401) + ($400))|0;
  HEAP32[$7>>2] = $402;
  $403 = (_rotr32($382,2)|0);
  $404 = (_rotr32($382,13)|0);
  $405 = $403 ^ $404;
  $406 = (_rotr32($382,22)|0);
  $407 = $405 ^ $406;
  $408 = $351 | $320;
  $409 = $382 & $408;
  $410 = $351 & $320;
  $411 = $409 | $410;
  $412 = (($407) + ($411))|0;
  $413 = (($400) + ($412))|0;
  HEAP32[$8>>2] = $413;
  $414 = (_rotr32($402,6)|0);
  $415 = (_rotr32($402,11)|0);
  $416 = $414 ^ $415;
  $417 = (_rotr32($402,25)|0);
  $418 = $416 ^ $417;
  $419 = $371 ^ $340;
  $420 = $402 & $419;
  $421 = $420 ^ $340;
  $422 = (($418) + ($421))|0;
  $423 = $$0 | 13;
  $424 = (($2) + ($423<<2)|0);
  $425 = HEAP32[$424>>2]|0;
  $426 = (($422) + ($425))|0;
  $427 = (32936 + ($423<<2)|0);
  $428 = HEAP32[$427>>2]|0;
  $429 = (($426) + ($428))|0;
  $430 = HEAP32[$10>>2]|0;
  $431 = (($430) + ($429))|0;
  $432 = HEAP32[$6>>2]|0;
  $433 = (($432) + ($431))|0;
  HEAP32[$6>>2] = $433;
  $434 = (_rotr32($413,2)|0);
  $435 = (_rotr32($413,13)|0);
  $436 = $434 ^ $435;
  $437 = (_rotr32($413,22)|0);
  $438 = $436 ^ $437;
  $439 = $382 | $351;
  $440 = $413 & $439;
  $441 = $382 & $351;
  $442 = $440 | $441;
  $443 = (($438) + ($442))|0;
  $444 = (($431) + ($443))|0;
  HEAP32[$10>>2] = $444;
  $445 = (_rotr32($433,6)|0);
  $446 = (_rotr32($433,11)|0);
  $447 = $445 ^ $446;
  $448 = (_rotr32($433,25)|0);
  $449 = $447 ^ $448;
  $450 = $402 ^ $371;
  $451 = $433 & $450;
  $452 = $451 ^ $371;
  $453 = (($449) + ($452))|0;
  $454 = $$0 | 14;
  $455 = (($2) + ($454<<2)|0);
  $456 = HEAP32[$455>>2]|0;
  $457 = (($453) + ($456))|0;
  $458 = (32936 + ($454<<2)|0);
  $459 = HEAP32[$458>>2]|0;
  $460 = (($457) + ($459))|0;
  $461 = HEAP32[$9>>2]|0;
  $462 = (($461) + ($460))|0;
  $463 = HEAP32[$5>>2]|0;
  $464 = (($463) + ($462))|0;
  HEAP32[$5>>2] = $464;
  $465 = (_rotr32($444,2)|0);
  $466 = (_rotr32($444,13)|0);
  $467 = $465 ^ $466;
  $468 = (_rotr32($444,22)|0);
  $469 = $467 ^ $468;
  $470 = $413 | $382;
  $471 = $444 & $470;
  $472 = $413 & $382;
  $473 = $471 | $472;
  $474 = (($469) + ($473))|0;
  $475 = (($462) + ($474))|0;
  HEAP32[$9>>2] = $475;
  $476 = (_rotr32($464,6)|0);
  $477 = (_rotr32($464,11)|0);
  $478 = $476 ^ $477;
  $479 = (_rotr32($464,25)|0);
  $480 = $478 ^ $479;
  $481 = $433 ^ $402;
  $482 = $464 & $481;
  $483 = $482 ^ $402;
  $484 = (($480) + ($483))|0;
  $485 = $$0 | 15;
  $486 = (($2) + ($485<<2)|0);
  $487 = HEAP32[$486>>2]|0;
  $488 = (($484) + ($487))|0;
  $489 = (32936 + ($485<<2)|0);
  $490 = HEAP32[$489>>2]|0;
  $491 = (($488) + ($490))|0;
  $492 = HEAP32[$3>>2]|0;
  $493 = (($492) + ($491))|0;
  $494 = HEAP32[$4>>2]|0;
  $495 = (($494) + ($493))|0;
  HEAP32[$4>>2] = $495;
  $496 = (_rotr32($475,2)|0);
  $497 = (_rotr32($475,13)|0);
  $498 = $496 ^ $497;
  $499 = (_rotr32($475,22)|0);
  $500 = $498 ^ $499;
  $501 = $444 | $413;
  $502 = $475 & $501;
  $503 = $444 & $413;
  $504 = $502 | $503;
  $505 = (($500) + ($504))|0;
  $506 = (($493) + ($505))|0;
  HEAP32[$3>>2] = $506;
  $507 = ($$0|0)==(48);
  if ($507) {
   $$1 = 0;
   break;
  }
  $508 = HEAP32[$455>>2]|0;
  $509 = (_rotr32($508,17)|0);
  $510 = (_rotr32($508,19)|0);
  $511 = $509 ^ $510;
  $512 = $508 >>> 10;
  $513 = $511 ^ $512;
  $514 = HEAP32[$300>>2]|0;
  $515 = (($513) + ($514))|0;
  $516 = HEAP32[$57>>2]|0;
  $517 = (_rotr32($516,7)|0);
  $518 = (_rotr32($516,18)|0);
  $519 = $517 ^ $518;
  $520 = $516 >>> 3;
  $521 = $519 ^ $520;
  $522 = (($515) + ($521))|0;
  $523 = HEAP32[$23>>2]|0;
  $524 = (($522) + ($523))|0;
  $525 = (($$0) + 16)|0;
  $526 = (($2) + ($525<<2)|0);
  HEAP32[$526>>2] = $524;
  $527 = HEAP32[$486>>2]|0;
  $528 = (_rotr32($527,17)|0);
  $529 = (_rotr32($527,19)|0);
  $530 = $528 ^ $529;
  $531 = $527 >>> 10;
  $532 = $530 ^ $531;
  $533 = (($56) + 9)|0;
  $534 = (($2) + ($533<<2)|0);
  $535 = HEAP32[$534>>2]|0;
  $536 = (($532) + ($535))|0;
  $537 = (($56) + 1)|0;
  $538 = (($2) + ($537<<2)|0);
  $539 = HEAP32[$538>>2]|0;
  $540 = (_rotr32($539,7)|0);
  $541 = (_rotr32($539,18)|0);
  $542 = $540 ^ $541;
  $543 = $539 >>> 3;
  $544 = $542 ^ $543;
  $545 = (($536) + ($544))|0;
  $546 = (($545) + ($516))|0;
  $547 = (($56) + 16)|0;
  $548 = (($2) + ($547<<2)|0);
  HEAP32[$548>>2] = $546;
  $549 = (_rotr32($524,17)|0);
  $550 = (_rotr32($524,19)|0);
  $551 = $549 ^ $550;
  $552 = $524 >>> 10;
  $553 = $551 ^ $552;
  $554 = HEAP32[$362>>2]|0;
  $555 = (($553) + ($554))|0;
  $556 = HEAP32[$115>>2]|0;
  $557 = (_rotr32($556,7)|0);
  $558 = (_rotr32($556,18)|0);
  $559 = $557 ^ $558;
  $560 = $556 >>> 3;
  $561 = $559 ^ $560;
  $562 = (($555) + ($561))|0;
  $563 = (($562) + ($539))|0;
  $564 = (($85) + 16)|0;
  $565 = (($2) + ($564<<2)|0);
  HEAP32[$565>>2] = $563;
  $566 = (_rotr32($546,17)|0);
  $567 = (_rotr32($546,19)|0);
  $568 = $566 ^ $567;
  $569 = $546 >>> 10;
  $570 = $568 ^ $569;
  $571 = (($114) + 9)|0;
  $572 = (($2) + ($571<<2)|0);
  $573 = HEAP32[$572>>2]|0;
  $574 = (($570) + ($573))|0;
  $575 = (($114) + 1)|0;
  $576 = (($2) + ($575<<2)|0);
  $577 = HEAP32[$576>>2]|0;
  $578 = (_rotr32($577,7)|0);
  $579 = (_rotr32($577,18)|0);
  $580 = $578 ^ $579;
  $581 = $577 >>> 3;
  $582 = $580 ^ $581;
  $583 = (($574) + ($582))|0;
  $584 = (($583) + ($556))|0;
  $585 = (($114) + 16)|0;
  $586 = (($2) + ($585<<2)|0);
  HEAP32[$586>>2] = $584;
  $587 = (_rotr32($563,17)|0);
  $588 = (_rotr32($563,19)|0);
  $589 = $587 ^ $588;
  $590 = $563 >>> 10;
  $591 = $589 ^ $590;
  $592 = HEAP32[$424>>2]|0;
  $593 = (($591) + ($592))|0;
  $594 = HEAP32[$176>>2]|0;
  $595 = (_rotr32($594,7)|0);
  $596 = (_rotr32($594,18)|0);
  $597 = $595 ^ $596;
  $598 = $594 >>> 3;
  $599 = $597 ^ $598;
  $600 = (($593) + ($599))|0;
  $601 = (($600) + ($577))|0;
  $602 = (($144) + 16)|0;
  $603 = (($2) + ($602<<2)|0);
  HEAP32[$603>>2] = $601;
  $604 = (_rotr32($584,17)|0);
  $605 = (_rotr32($584,19)|0);
  $606 = $604 ^ $605;
  $607 = $584 >>> 10;
  $608 = $606 ^ $607;
  $609 = (($175) + 9)|0;
  $610 = (($2) + ($609<<2)|0);
  $611 = HEAP32[$610>>2]|0;
  $612 = (($608) + ($611))|0;
  $613 = (($175) + 1)|0;
  $614 = (($2) + ($613<<2)|0);
  $615 = HEAP32[$614>>2]|0;
  $616 = (_rotr32($615,7)|0);
  $617 = (_rotr32($615,18)|0);
  $618 = $616 ^ $617;
  $619 = $615 >>> 3;
  $620 = $618 ^ $619;
  $621 = (($612) + ($620))|0;
  $622 = (($621) + ($594))|0;
  $623 = (($175) + 16)|0;
  $624 = (($2) + ($623<<2)|0);
  HEAP32[$624>>2] = $622;
  $625 = (_rotr32($601,17)|0);
  $626 = (_rotr32($601,19)|0);
  $627 = $625 ^ $626;
  $628 = $601 >>> 10;
  $629 = $627 ^ $628;
  $630 = HEAP32[$486>>2]|0;
  $631 = (($629) + ($630))|0;
  $632 = HEAP32[$238>>2]|0;
  $633 = (_rotr32($632,7)|0);
  $634 = (_rotr32($632,18)|0);
  $635 = $633 ^ $634;
  $636 = $632 >>> 3;
  $637 = $635 ^ $636;
  $638 = (($631) + ($637))|0;
  $639 = (($638) + ($615))|0;
  $640 = (($206) + 16)|0;
  $641 = (($2) + ($640<<2)|0);
  HEAP32[$641>>2] = $639;
  $642 = (_rotr32($622,17)|0);
  $643 = (_rotr32($622,19)|0);
  $644 = $642 ^ $643;
  $645 = $622 >>> 10;
  $646 = $644 ^ $645;
  $647 = (($237) + 9)|0;
  $648 = (($2) + ($647<<2)|0);
  $649 = HEAP32[$648>>2]|0;
  $650 = (($646) + ($649))|0;
  $651 = (($237) + 1)|0;
  $652 = (($2) + ($651<<2)|0);
  $653 = HEAP32[$652>>2]|0;
  $654 = (_rotr32($653,7)|0);
  $655 = (_rotr32($653,18)|0);
  $656 = $654 ^ $655;
  $657 = $653 >>> 3;
  $658 = $656 ^ $657;
  $659 = (($650) + ($658))|0;
  $660 = (($659) + ($632))|0;
  $661 = (($237) + 16)|0;
  $662 = (($2) + ($661<<2)|0);
  HEAP32[$662>>2] = $660;
  $663 = (_rotr32($639,17)|0);
  $664 = (_rotr32($639,19)|0);
  $665 = $663 ^ $664;
  $666 = $639 >>> 10;
  $667 = $665 ^ $666;
  $668 = (($268) + 9)|0;
  $669 = (($2) + ($668<<2)|0);
  $670 = HEAP32[$669>>2]|0;
  $671 = (($667) + ($670))|0;
  $672 = HEAP32[$300>>2]|0;
  $673 = (_rotr32($672,7)|0);
  $674 = (_rotr32($672,18)|0);
  $675 = $673 ^ $674;
  $676 = $672 >>> 3;
  $677 = $675 ^ $676;
  $678 = (($671) + ($677))|0;
  $679 = (($678) + ($653))|0;
  $680 = (($268) + 16)|0;
  $681 = (($2) + ($680<<2)|0);
  HEAP32[$681>>2] = $679;
  $682 = (_rotr32($660,17)|0);
  $683 = (_rotr32($660,19)|0);
  $684 = $682 ^ $683;
  $685 = $660 >>> 10;
  $686 = $684 ^ $685;
  $687 = (($299) + 9)|0;
  $688 = (($2) + ($687<<2)|0);
  $689 = HEAP32[$688>>2]|0;
  $690 = (($686) + ($689))|0;
  $691 = (($299) + 1)|0;
  $692 = (($2) + ($691<<2)|0);
  $693 = HEAP32[$692>>2]|0;
  $694 = (_rotr32($693,7)|0);
  $695 = (_rotr32($693,18)|0);
  $696 = $694 ^ $695;
  $697 = $693 >>> 3;
  $698 = $696 ^ $697;
  $699 = (($690) + ($698))|0;
  $700 = (($699) + ($672))|0;
  $701 = (($299) + 16)|0;
  $702 = (($2) + ($701<<2)|0);
  HEAP32[$702>>2] = $700;
  $703 = (_rotr32($679,17)|0);
  $704 = (_rotr32($679,19)|0);
  $705 = $703 ^ $704;
  $706 = $679 >>> 10;
  $707 = $705 ^ $706;
  $708 = (($330) + 9)|0;
  $709 = (($2) + ($708<<2)|0);
  $710 = HEAP32[$709>>2]|0;
  $711 = (($707) + ($710))|0;
  $712 = HEAP32[$362>>2]|0;
  $713 = (_rotr32($712,7)|0);
  $714 = (_rotr32($712,18)|0);
  $715 = $713 ^ $714;
  $716 = $712 >>> 3;
  $717 = $715 ^ $716;
  $718 = (($711) + ($717))|0;
  $719 = (($718) + ($693))|0;
  $720 = (($330) + 16)|0;
  $721 = (($2) + ($720<<2)|0);
  HEAP32[$721>>2] = $719;
  $722 = (_rotr32($700,17)|0);
  $723 = (_rotr32($700,19)|0);
  $724 = $722 ^ $723;
  $725 = $700 >>> 10;
  $726 = $724 ^ $725;
  $727 = (($361) + 9)|0;
  $728 = (($2) + ($727<<2)|0);
  $729 = HEAP32[$728>>2]|0;
  $730 = (($726) + ($729))|0;
  $731 = (($361) + 1)|0;
  $732 = (($2) + ($731<<2)|0);
  $733 = HEAP32[$732>>2]|0;
  $734 = (_rotr32($733,7)|0);
  $735 = (_rotr32($733,18)|0);
  $736 = $734 ^ $735;
  $737 = $733 >>> 3;
  $738 = $736 ^ $737;
  $739 = (($730) + ($738))|0;
  $740 = (($739) + ($712))|0;
  $741 = (($361) + 16)|0;
  $742 = (($2) + ($741<<2)|0);
  HEAP32[$742>>2] = $740;
  $743 = (_rotr32($719,17)|0);
  $744 = (_rotr32($719,19)|0);
  $745 = $743 ^ $744;
  $746 = $719 >>> 10;
  $747 = $745 ^ $746;
  $748 = (($392) + 9)|0;
  $749 = (($2) + ($748<<2)|0);
  $750 = HEAP32[$749>>2]|0;
  $751 = (($747) + ($750))|0;
  $752 = HEAP32[$424>>2]|0;
  $753 = (_rotr32($752,7)|0);
  $754 = (_rotr32($752,18)|0);
  $755 = $753 ^ $754;
  $756 = $752 >>> 3;
  $757 = $755 ^ $756;
  $758 = (($751) + ($757))|0;
  $759 = (($758) + ($733))|0;
  $760 = (($392) + 16)|0;
  $761 = (($2) + ($760<<2)|0);
  HEAP32[$761>>2] = $759;
  $762 = (_rotr32($740,17)|0);
  $763 = (_rotr32($740,19)|0);
  $764 = $762 ^ $763;
  $765 = $740 >>> 10;
  $766 = $764 ^ $765;
  $767 = (($423) + 9)|0;
  $768 = (($2) + ($767<<2)|0);
  $769 = HEAP32[$768>>2]|0;
  $770 = (($766) + ($769))|0;
  $771 = (($423) + 1)|0;
  $772 = (($2) + ($771<<2)|0);
  $773 = HEAP32[$772>>2]|0;
  $774 = (_rotr32($773,7)|0);
  $775 = (_rotr32($773,18)|0);
  $776 = $774 ^ $775;
  $777 = $773 >>> 3;
  $778 = $776 ^ $777;
  $779 = (($770) + ($778))|0;
  $780 = (($779) + ($752))|0;
  $781 = (($423) + 16)|0;
  $782 = (($2) + ($781<<2)|0);
  HEAP32[$782>>2] = $780;
  $783 = (_rotr32($759,17)|0);
  $784 = (_rotr32($759,19)|0);
  $785 = $783 ^ $784;
  $786 = $759 >>> 10;
  $787 = $785 ^ $786;
  $788 = (($454) + 9)|0;
  $789 = (($2) + ($788<<2)|0);
  $790 = HEAP32[$789>>2]|0;
  $791 = (($787) + ($790))|0;
  $792 = HEAP32[$486>>2]|0;
  $793 = (_rotr32($792,7)|0);
  $794 = (_rotr32($792,18)|0);
  $795 = $793 ^ $794;
  $796 = $792 >>> 3;
  $797 = $795 ^ $796;
  $798 = (($791) + ($797))|0;
  $799 = (($798) + ($773))|0;
  $800 = (($454) + 16)|0;
  $801 = (($2) + ($800<<2)|0);
  HEAP32[$801>>2] = $799;
  $802 = (_rotr32($780,17)|0);
  $803 = (_rotr32($780,19)|0);
  $804 = $802 ^ $803;
  $805 = $780 >>> 10;
  $806 = $804 ^ $805;
  $807 = (($485) + 9)|0;
  $808 = (($2) + ($807<<2)|0);
  $809 = HEAP32[$808>>2]|0;
  $810 = (($806) + ($809))|0;
  $811 = (($485) + 1)|0;
  $812 = (($2) + ($811<<2)|0);
  $813 = HEAP32[$812>>2]|0;
  $814 = (_rotr32($813,7)|0);
  $815 = (_rotr32($813,18)|0);
  $816 = $814 ^ $815;
  $817 = $813 >>> 3;
  $818 = $816 ^ $817;
  $819 = (($810) + ($818))|0;
  $820 = (($819) + ($792))|0;
  $821 = (($485) + 16)|0;
  $822 = (($2) + ($821<<2)|0);
  HEAP32[$822>>2] = $820;
  $$0 = $525;
 }
 while(1) {
  $exitcond = ($$1|0)==(8);
  if ($exitcond) {
   break;
  }
  $823 = (($3) + ($$1<<2)|0);
  $824 = HEAP32[$823>>2]|0;
  $825 = (($0) + ($$1<<2)|0);
  $826 = HEAP32[$825>>2]|0;
  $827 = (($826) + ($824))|0;
  HEAP32[$825>>2] = $827;
  $828 = (($$1) + 1)|0;
  $$1 = $828;
 }
 return;
}
function _be32dec_vect($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(16);
  if ($exitcond) {
   break;
  }
  $2 = $$0 << 2;
  $3 = (($1) + ($2)|0);
  $4 = (_load32_be($3)|0);
  $5 = (($0) + ($$0<<2)|0);
  HEAP32[$5>>2] = $4;
  $6 = (($$0) + 1)|0;
  $$0 = $6;
 }
 return;
}
function _rotr32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $0 >>> $1;
 $3 = (32 - ($1))|0;
 $4 = $0 << $3;
 $5 = $2 | $4;
 return ($5|0);
}
function _load32_be($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 3|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = ((($0)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = $3 | $7;
 $9 = ((($0)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 16;
 $13 = $8 | $12;
 $14 = HEAP8[$0>>0]|0;
 $15 = $14&255;
 $16 = $15 << 24;
 $17 = $13 | $16;
 return ($17|0);
}
function _crypto_hash_sha256_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 288|0;
 $2 = sp_a;
 _SHA256_Pad($0,$2);
 _be32enc_vect($1,$0);
 _sodium_memzero($2,288);
 _sodium_memzero($0,104);
 STACKTOP = sp;return 0;
}
function _SHA256_Pad($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$phi3Z2D = 0, $$pre$phi5Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_bitshift64Lshr(($5|0),($8|0),3)|0);
 $10 = tempRet0;
 $11 = $9 & 63;
 $12 = (0)<(0);
 $13 = ($11>>>0)<(56);
 $14 = (0)==(0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 if ($16) {
  $19 = (_i64Subtract(56,0,($11|0),0)|0);
  $20 = tempRet0;
  $22 = 0;$24 = 0;
  while(1) {
   $21 = ($22>>>0)<($20>>>0);
   $23 = ($24>>>0)<($19>>>0);
   $25 = ($22|0)==($20|0);
   $26 = $25 & $23;
   $27 = $21 | $26;
   if (!($27)) {
    break;
   }
   $28 = (33954 + ($24)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = (_i64Add(($11|0),0,($24|0),($22|0))|0);
   $31 = tempRet0;
   $32 = (((($0)) + 40|0) + ($30)|0);
   HEAP8[$32>>0] = $29;
   $33 = (_i64Add(($24|0),($22|0),1,0)|0);
   $34 = tempRet0;
   $22 = $34;$24 = $33;
  }
  $$pre2 = ((($0)) + 40|0);
  $$pre4 = ((($1)) + 256|0);
  $$pre$phi3Z2D = $$pre2;$$pre$phi5Z2D = $$pre4;$$pre$phiZ2D = $0;
  $51 = ((($0)) + 96|0);
  $52 = $2;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($52) + 4)|0;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  _store64_be($51,$54,$57);
  _SHA256_Transform($$pre$phiZ2D,$$pre$phi3Z2D,$1,$$pre$phi5Z2D);
  return;
 } else {
  $17 = (_i64Subtract(64,0,($11|0),0)|0);
  $18 = tempRet0;
  $36 = 0;$38 = 0;
  while(1) {
   $35 = ($36>>>0)<($18>>>0);
   $37 = ($38>>>0)<($17>>>0);
   $39 = ($36|0)==($18|0);
   $40 = $39 & $37;
   $41 = $35 | $40;
   if (!($41)) {
    break;
   }
   $42 = (33954 + ($38)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = (_i64Add(($11|0),0,($38|0),($36|0))|0);
   $45 = tempRet0;
   $46 = (((($0)) + 40|0) + ($44)|0);
   HEAP8[$46>>0] = $43;
   $47 = (_i64Add(($38|0),($36|0),1,0)|0);
   $48 = tempRet0;
   $36 = $48;$38 = $47;
  }
  $49 = ((($0)) + 40|0);
  $50 = ((($1)) + 256|0);
  _SHA256_Transform($0,$49,$1,$50);
  dest=$49; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $$pre$phi3Z2D = $49;$$pre$phi5Z2D = $50;$$pre$phiZ2D = $0;
  $51 = ((($0)) + 96|0);
  $52 = $2;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($52) + 4)|0;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  _store64_be($51,$54,$57);
  _SHA256_Transform($$pre$phiZ2D,$$pre$phi3Z2D,$1,$$pre$phi5Z2D);
  return;
 }
}
function _be32enc_vect($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(8);
  if ($exitcond) {
   break;
  }
  $2 = $$0 << 2;
  $3 = (($0) + ($2)|0);
  $4 = (($1) + ($$0<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  _store32_be($3,$5);
  $6 = (($$0) + 1)|0;
  $$0 = $6;
 }
 return;
}
function _store32_be($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $1&255;
 $3 = ((($0)) + 3|0);
 HEAP8[$3>>0] = $2;
 $4 = $1 >>> 8;
 $5 = $4&255;
 $6 = ((($0)) + 2|0);
 HEAP8[$6>>0] = $5;
 $7 = $1 >>> 16;
 $8 = $7&255;
 $9 = ((($0)) + 1|0);
 HEAP8[$9>>0] = $8;
 $10 = $1 >>> 24;
 $11 = $10&255;
 HEAP8[$0>>0] = $11;
 return;
}
function _store64_be($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $4 = ((($0)) + 7|0);
 HEAP8[$4>>0] = $3;
 $5 = (_bitshift64Lshr(($1|0),($2|0),8)|0);
 $6 = tempRet0;
 $7 = $5&255;
 $8 = ((($0)) + 6|0);
 HEAP8[$8>>0] = $7;
 $9 = (_bitshift64Lshr(($1|0),($2|0),16)|0);
 $10 = tempRet0;
 $11 = $9&255;
 $12 = ((($0)) + 5|0);
 HEAP8[$12>>0] = $11;
 $13 = (_bitshift64Lshr(($1|0),($2|0),24)|0);
 $14 = tempRet0;
 $15 = $13&255;
 $16 = ((($0)) + 4|0);
 HEAP8[$16>>0] = $15;
 $17 = $2&255;
 $18 = ((($0)) + 3|0);
 HEAP8[$18>>0] = $17;
 $19 = (_bitshift64Lshr(($1|0),($2|0),40)|0);
 $20 = tempRet0;
 $21 = $19&255;
 $22 = ((($0)) + 2|0);
 HEAP8[$22>>0] = $21;
 $23 = (_bitshift64Lshr(($1|0),($2|0),48)|0);
 $24 = tempRet0;
 $25 = $23&255;
 $26 = ((($0)) + 1|0);
 HEAP8[$26>>0] = $25;
 $27 = (_bitshift64Lshr(($1|0),($2|0),56)|0);
 $28 = tempRet0;
 $29 = $27&255;
 HEAP8[$0>>0] = $29;
 return;
}
function _crypto_hash_sha256($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 112|0;
 $4 = sp_a;
 (_crypto_hash_sha256_init($4)|0);
 (_crypto_hash_sha256_update($4,$1,$2,$3)|0);
 (_crypto_hash_sha256_final($4,$0)|0);
 STACKTOP = sp;return 0;
}
function _crypto_hash_sha512_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_hash_sha512_statebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 208;
}
function _crypto_hash_sha512_init($0) {
 $0 = $0|0;
 var $1 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 dest=$0; src=400; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return 0;
}
function _crypto_hash_sha512_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 704|0;
 $4 = sp_a;
 $5 = ($2|0)==(0);
 $6 = ($3|0)==(0);
 $7 = $5 & $6;
 if ($7) {
  STACKTOP = sp;return 0;
 }
 $8 = ((($0)) + 72|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_bitshift64Lshr(($11|0),($14|0),3)|0);
 $16 = tempRet0;
 $17 = $15 & 127;
 $18 = (_bitshift64Shl(($2|0),($3|0),3)|0);
 $19 = tempRet0;
 $20 = (_bitshift64Lshr(($2|0),($3|0),61)|0);
 $21 = tempRet0;
 $22 = (_i64Add(($11|0),($14|0),($18|0),($19|0))|0);
 $23 = tempRet0;
 $24 = $8;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = ($23>>>0)<($19>>>0);
 $29 = ($22>>>0)<($18>>>0);
 $30 = ($23|0)==($19|0);
 $31 = $30 & $29;
 $32 = $28 | $31;
 $33 = ((($0)) + 64|0);
 $34 = $33;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 if ($32) {
  $40 = (_i64Add(($36|0),($39|0),1,0)|0);
  $41 = tempRet0;
  $42 = $33;
  $43 = $42;
  HEAP32[$43>>2] = $40;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP32[$45>>2] = $41;
  $46 = $40;$47 = $41;
 } else {
  $46 = $36;$47 = $39;
 }
 $48 = (_i64Add(($46|0),($47|0),($20|0),($21|0))|0);
 $49 = tempRet0;
 $50 = $33;
 $51 = $50;
 HEAP32[$51>>2] = $48;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = $49;
 $54 = (_i64Subtract(128,0,($17|0),0)|0);
 $55 = tempRet0;
 $56 = ($55>>>0)>($3>>>0);
 $57 = ($54>>>0)>($2>>>0);
 $58 = ($55|0)==($3|0);
 $59 = $58 & $57;
 $60 = $56 | $59;
 if ($60) {
  $62 = 0;$64 = 0;
  while(1) {
   $61 = ($62>>>0)<($3>>>0);
   $63 = ($64>>>0)<($2>>>0);
   $65 = ($62|0)==($3|0);
   $66 = $65 & $63;
   $67 = $61 | $66;
   if (!($67)) {
    break;
   }
   $68 = (($1) + ($64)|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = (_i64Add(($17|0),0,($64|0),($62|0))|0);
   $71 = tempRet0;
   $72 = (((($0)) + 80|0) + ($70)|0);
   HEAP8[$72>>0] = $69;
   $73 = (_i64Add(($64|0),($62|0),1,0)|0);
   $74 = tempRet0;
   $62 = $74;$64 = $73;
  }
  STACKTOP = sp;return 0;
 } else {
  $76 = 0;$78 = 0;
 }
 while(1) {
  $75 = ($76>>>0)<($55>>>0);
  $77 = ($78>>>0)<($54>>>0);
  $79 = ($76|0)==($55|0);
  $80 = $79 & $77;
  $81 = $75 | $80;
  if (!($81)) {
   break;
  }
  $82 = (($1) + ($78)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = (_i64Add(($17|0),0,($78|0),($76|0))|0);
  $85 = tempRet0;
  $86 = (((($0)) + 80|0) + ($84)|0);
  HEAP8[$86>>0] = $83;
  $87 = (_i64Add(($78|0),($76|0),1,0)|0);
  $88 = tempRet0;
  $76 = $88;$78 = $87;
 }
 $89 = ((($0)) + 80|0);
 $90 = ((($4)) + 640|0);
 _SHA512_Transform($0,$89,$4,$90);
 $91 = (($1) + ($54)|0);
 $92 = $15 | -128;
 $93 = (_i64Add(($92|0),-1,($2|0),($3|0))|0);
 $94 = tempRet0;
 $$02 = $91;$96 = $94;$98 = $93;
 while(1) {
  $95 = ($96>>>0)>(0);
  $97 = ($98>>>0)>(127);
  $99 = ($96|0)==(0);
  $100 = $99 & $97;
  $101 = $95 | $100;
  if (!($101)) {
   break;
  }
  _SHA512_Transform($0,$$02,$4,$90);
  $102 = ((($$02)) + 128|0);
  $103 = (_i64Add(($98|0),($96|0),-128,-1)|0);
  $104 = tempRet0;
  $$02 = $102;$96 = $104;$98 = $103;
 }
 $105 = $98 & 127;
 $107 = 0;$109 = 0;
 while(1) {
  $106 = ($107>>>0)<(0);
  $108 = ($109>>>0)<($105>>>0);
  $110 = ($107|0)==(0);
  $111 = $110 & $108;
  $112 = $106 | $111;
  if (!($112)) {
   break;
  }
  $113 = (($$02) + ($109)|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = (((($0)) + 80|0) + ($109)|0);
  HEAP8[$115>>0] = $114;
  $116 = (_i64Add(($109|0),($107|0),1,0)|0);
  $117 = tempRet0;
  $107 = $117;$109 = $116;
 }
 _sodium_memzero($4,704);
 STACKTOP = sp;return 0;
}
function _SHA512_Transform($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0;
 var $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0;
 var $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0;
 var $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0;
 var $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0;
 var $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0;
 var $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0;
 var $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $exitcond = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 _be64dec_vect($2,$1);
 dest=$3; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 $5 = ((($3)) + 40|0);
 $6 = ((($3)) + 48|0);
 $7 = ((($3)) + 56|0);
 $8 = ((($3)) + 24|0);
 $9 = ((($3)) + 8|0);
 $10 = ((($3)) + 16|0);
 $$0 = 0;
 while(1) {
  $11 = $4;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (_rotr64_63($13,$16,14)|0);
  $18 = tempRet0;
  $19 = (_rotr64_63($13,$16,18)|0);
  $20 = tempRet0;
  $21 = $17 ^ $19;
  $22 = $18 ^ $20;
  $23 = (_rotr64_63($13,$16,41)|0);
  $24 = tempRet0;
  $25 = $21 ^ $23;
  $26 = $22 ^ $24;
  $27 = $5;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = $6;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = $29 ^ $35;
  $40 = $32 ^ $38;
  $41 = $13 & $39;
  $42 = $16 & $40;
  $43 = $41 ^ $35;
  $44 = $42 ^ $38;
  $45 = (_i64Add(($25|0),($26|0),($43|0),($44|0))|0);
  $46 = tempRet0;
  $47 = (($2) + ($$0<<3)|0);
  $48 = $47;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (_i64Add(($45|0),($46|0),($50|0),($53|0))|0);
  $55 = tempRet0;
  $56 = (464 + ($$0<<3)|0);
  $57 = $56;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (_i64Add(($54|0),($55|0),($59|0),($62|0))|0);
  $64 = tempRet0;
  $65 = $7;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (_i64Add(($67|0),($70|0),($63|0),($64|0))|0);
  $72 = tempRet0;
  $73 = $8;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($73) + 4)|0;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (_i64Add(($75|0),($78|0),($71|0),($72|0))|0);
  $80 = tempRet0;
  $81 = $8;
  $82 = $81;
  HEAP32[$82>>2] = $79;
  $83 = (($81) + 4)|0;
  $84 = $83;
  HEAP32[$84>>2] = $80;
  $85 = $3;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + 4)|0;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = (_rotr64_63($87,$90,28)|0);
  $92 = tempRet0;
  $93 = (_rotr64_63($87,$90,34)|0);
  $94 = tempRet0;
  $95 = $91 ^ $93;
  $96 = $92 ^ $94;
  $97 = (_rotr64_63($87,$90,39)|0);
  $98 = tempRet0;
  $99 = $95 ^ $97;
  $100 = $96 ^ $98;
  $101 = $9;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($101) + 4)|0;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = $10;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = (($107) + 4)|0;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = $103 | $109;
  $114 = $106 | $112;
  $115 = $87 & $113;
  $116 = $90 & $114;
  $117 = $103 & $109;
  $118 = $106 & $112;
  $119 = $115 | $117;
  $120 = $116 | $118;
  $121 = (_i64Add(($99|0),($100|0),($119|0),($120|0))|0);
  $122 = tempRet0;
  $123 = (_i64Add(($71|0),($72|0),($121|0),($122|0))|0);
  $124 = tempRet0;
  $125 = $7;
  $126 = $125;
  HEAP32[$126>>2] = $123;
  $127 = (($125) + 4)|0;
  $128 = $127;
  HEAP32[$128>>2] = $124;
  $129 = (_rotr64_63($79,$80,14)|0);
  $130 = tempRet0;
  $131 = (_rotr64_63($79,$80,18)|0);
  $132 = tempRet0;
  $133 = $129 ^ $131;
  $134 = $130 ^ $132;
  $135 = (_rotr64_63($79,$80,41)|0);
  $136 = tempRet0;
  $137 = $133 ^ $135;
  $138 = $134 ^ $136;
  $139 = $13 ^ $29;
  $140 = $16 ^ $32;
  $141 = $79 & $139;
  $142 = $80 & $140;
  $143 = $141 ^ $29;
  $144 = $142 ^ $32;
  $145 = (_i64Add(($137|0),($138|0),($143|0),($144|0))|0);
  $146 = tempRet0;
  $147 = $$0 | 1;
  $148 = (($2) + ($147<<3)|0);
  $149 = $148;
  $150 = $149;
  $151 = HEAP32[$150>>2]|0;
  $152 = (($149) + 4)|0;
  $153 = $152;
  $154 = HEAP32[$153>>2]|0;
  $155 = (_i64Add(($145|0),($146|0),($151|0),($154|0))|0);
  $156 = tempRet0;
  $157 = (464 + ($147<<3)|0);
  $158 = $157;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + 4)|0;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = (_i64Add(($155|0),($156|0),($160|0),($163|0))|0);
  $165 = tempRet0;
  $166 = (_i64Add(($35|0),($38|0),($164|0),($165|0))|0);
  $167 = tempRet0;
  $168 = (_i64Add(($109|0),($112|0),($166|0),($167|0))|0);
  $169 = tempRet0;
  $170 = $10;
  $171 = $170;
  HEAP32[$171>>2] = $168;
  $172 = (($170) + 4)|0;
  $173 = $172;
  HEAP32[$173>>2] = $169;
  $174 = (_rotr64_63($123,$124,28)|0);
  $175 = tempRet0;
  $176 = (_rotr64_63($123,$124,34)|0);
  $177 = tempRet0;
  $178 = $174 ^ $176;
  $179 = $175 ^ $177;
  $180 = (_rotr64_63($123,$124,39)|0);
  $181 = tempRet0;
  $182 = $178 ^ $180;
  $183 = $179 ^ $181;
  $184 = $87 | $103;
  $185 = $90 | $106;
  $186 = $123 & $184;
  $187 = $124 & $185;
  $188 = $87 & $103;
  $189 = $90 & $106;
  $190 = $186 | $188;
  $191 = $187 | $189;
  $192 = (_i64Add(($182|0),($183|0),($190|0),($191|0))|0);
  $193 = tempRet0;
  $194 = (_i64Add(($166|0),($167|0),($192|0),($193|0))|0);
  $195 = tempRet0;
  $196 = $6;
  $197 = $196;
  HEAP32[$197>>2] = $194;
  $198 = (($196) + 4)|0;
  $199 = $198;
  HEAP32[$199>>2] = $195;
  $200 = (_rotr64_63($168,$169,14)|0);
  $201 = tempRet0;
  $202 = (_rotr64_63($168,$169,18)|0);
  $203 = tempRet0;
  $204 = $200 ^ $202;
  $205 = $201 ^ $203;
  $206 = (_rotr64_63($168,$169,41)|0);
  $207 = tempRet0;
  $208 = $204 ^ $206;
  $209 = $205 ^ $207;
  $210 = $79 ^ $13;
  $211 = $80 ^ $16;
  $212 = $168 & $210;
  $213 = $169 & $211;
  $214 = $212 ^ $13;
  $215 = $213 ^ $16;
  $216 = (_i64Add(($208|0),($209|0),($214|0),($215|0))|0);
  $217 = tempRet0;
  $218 = $$0 | 2;
  $219 = (($2) + ($218<<3)|0);
  $220 = $219;
  $221 = $220;
  $222 = HEAP32[$221>>2]|0;
  $223 = (($220) + 4)|0;
  $224 = $223;
  $225 = HEAP32[$224>>2]|0;
  $226 = (_i64Add(($216|0),($217|0),($222|0),($225|0))|0);
  $227 = tempRet0;
  $228 = (464 + ($218<<3)|0);
  $229 = $228;
  $230 = $229;
  $231 = HEAP32[$230>>2]|0;
  $232 = (($229) + 4)|0;
  $233 = $232;
  $234 = HEAP32[$233>>2]|0;
  $235 = (_i64Add(($226|0),($227|0),($231|0),($234|0))|0);
  $236 = tempRet0;
  $237 = (_i64Add(($29|0),($32|0),($235|0),($236|0))|0);
  $238 = tempRet0;
  $239 = (_i64Add(($103|0),($106|0),($237|0),($238|0))|0);
  $240 = tempRet0;
  $241 = $9;
  $242 = $241;
  HEAP32[$242>>2] = $239;
  $243 = (($241) + 4)|0;
  $244 = $243;
  HEAP32[$244>>2] = $240;
  $245 = (_rotr64_63($194,$195,28)|0);
  $246 = tempRet0;
  $247 = (_rotr64_63($194,$195,34)|0);
  $248 = tempRet0;
  $249 = $245 ^ $247;
  $250 = $246 ^ $248;
  $251 = (_rotr64_63($194,$195,39)|0);
  $252 = tempRet0;
  $253 = $249 ^ $251;
  $254 = $250 ^ $252;
  $255 = $123 | $87;
  $256 = $124 | $90;
  $257 = $194 & $255;
  $258 = $195 & $256;
  $259 = $123 & $87;
  $260 = $124 & $90;
  $261 = $257 | $259;
  $262 = $258 | $260;
  $263 = (_i64Add(($253|0),($254|0),($261|0),($262|0))|0);
  $264 = tempRet0;
  $265 = (_i64Add(($237|0),($238|0),($263|0),($264|0))|0);
  $266 = tempRet0;
  $267 = $5;
  $268 = $267;
  HEAP32[$268>>2] = $265;
  $269 = (($267) + 4)|0;
  $270 = $269;
  HEAP32[$270>>2] = $266;
  $271 = (_rotr64_63($239,$240,14)|0);
  $272 = tempRet0;
  $273 = (_rotr64_63($239,$240,18)|0);
  $274 = tempRet0;
  $275 = $271 ^ $273;
  $276 = $272 ^ $274;
  $277 = (_rotr64_63($239,$240,41)|0);
  $278 = tempRet0;
  $279 = $275 ^ $277;
  $280 = $276 ^ $278;
  $281 = $168 ^ $79;
  $282 = $169 ^ $80;
  $283 = $239 & $281;
  $284 = $240 & $282;
  $285 = $283 ^ $79;
  $286 = $284 ^ $80;
  $287 = (_i64Add(($279|0),($280|0),($285|0),($286|0))|0);
  $288 = tempRet0;
  $289 = $$0 | 3;
  $290 = (($2) + ($289<<3)|0);
  $291 = $290;
  $292 = $291;
  $293 = HEAP32[$292>>2]|0;
  $294 = (($291) + 4)|0;
  $295 = $294;
  $296 = HEAP32[$295>>2]|0;
  $297 = (_i64Add(($287|0),($288|0),($293|0),($296|0))|0);
  $298 = tempRet0;
  $299 = (464 + ($289<<3)|0);
  $300 = $299;
  $301 = $300;
  $302 = HEAP32[$301>>2]|0;
  $303 = (($300) + 4)|0;
  $304 = $303;
  $305 = HEAP32[$304>>2]|0;
  $306 = (_i64Add(($297|0),($298|0),($302|0),($305|0))|0);
  $307 = tempRet0;
  $308 = $4;
  $309 = $308;
  $310 = HEAP32[$309>>2]|0;
  $311 = (($308) + 4)|0;
  $312 = $311;
  $313 = HEAP32[$312>>2]|0;
  $314 = (_i64Add(($310|0),($313|0),($306|0),($307|0))|0);
  $315 = tempRet0;
  $316 = (_i64Add(($87|0),($90|0),($314|0),($315|0))|0);
  $317 = tempRet0;
  $318 = $3;
  $319 = $318;
  HEAP32[$319>>2] = $316;
  $320 = (($318) + 4)|0;
  $321 = $320;
  HEAP32[$321>>2] = $317;
  $322 = (_rotr64_63($265,$266,28)|0);
  $323 = tempRet0;
  $324 = (_rotr64_63($265,$266,34)|0);
  $325 = tempRet0;
  $326 = $322 ^ $324;
  $327 = $323 ^ $325;
  $328 = (_rotr64_63($265,$266,39)|0);
  $329 = tempRet0;
  $330 = $326 ^ $328;
  $331 = $327 ^ $329;
  $332 = $194 | $123;
  $333 = $195 | $124;
  $334 = $265 & $332;
  $335 = $266 & $333;
  $336 = $194 & $123;
  $337 = $195 & $124;
  $338 = $334 | $336;
  $339 = $335 | $337;
  $340 = (_i64Add(($330|0),($331|0),($338|0),($339|0))|0);
  $341 = tempRet0;
  $342 = (_i64Add(($314|0),($315|0),($340|0),($341|0))|0);
  $343 = tempRet0;
  $344 = $4;
  $345 = $344;
  HEAP32[$345>>2] = $342;
  $346 = (($344) + 4)|0;
  $347 = $346;
  HEAP32[$347>>2] = $343;
  $348 = (_rotr64_63($316,$317,14)|0);
  $349 = tempRet0;
  $350 = (_rotr64_63($316,$317,18)|0);
  $351 = tempRet0;
  $352 = $348 ^ $350;
  $353 = $349 ^ $351;
  $354 = (_rotr64_63($316,$317,41)|0);
  $355 = tempRet0;
  $356 = $352 ^ $354;
  $357 = $353 ^ $355;
  $358 = $239 ^ $168;
  $359 = $240 ^ $169;
  $360 = $316 & $358;
  $361 = $317 & $359;
  $362 = $360 ^ $168;
  $363 = $361 ^ $169;
  $364 = (_i64Add(($356|0),($357|0),($362|0),($363|0))|0);
  $365 = tempRet0;
  $366 = $$0 | 4;
  $367 = (($2) + ($366<<3)|0);
  $368 = $367;
  $369 = $368;
  $370 = HEAP32[$369>>2]|0;
  $371 = (($368) + 4)|0;
  $372 = $371;
  $373 = HEAP32[$372>>2]|0;
  $374 = (_i64Add(($364|0),($365|0),($370|0),($373|0))|0);
  $375 = tempRet0;
  $376 = (464 + ($366<<3)|0);
  $377 = $376;
  $378 = $377;
  $379 = HEAP32[$378>>2]|0;
  $380 = (($377) + 4)|0;
  $381 = $380;
  $382 = HEAP32[$381>>2]|0;
  $383 = (_i64Add(($374|0),($375|0),($379|0),($382|0))|0);
  $384 = tempRet0;
  $385 = $8;
  $386 = $385;
  $387 = HEAP32[$386>>2]|0;
  $388 = (($385) + 4)|0;
  $389 = $388;
  $390 = HEAP32[$389>>2]|0;
  $391 = (_i64Add(($387|0),($390|0),($383|0),($384|0))|0);
  $392 = tempRet0;
  $393 = $7;
  $394 = $393;
  $395 = HEAP32[$394>>2]|0;
  $396 = (($393) + 4)|0;
  $397 = $396;
  $398 = HEAP32[$397>>2]|0;
  $399 = (_i64Add(($395|0),($398|0),($391|0),($392|0))|0);
  $400 = tempRet0;
  $401 = $7;
  $402 = $401;
  HEAP32[$402>>2] = $399;
  $403 = (($401) + 4)|0;
  $404 = $403;
  HEAP32[$404>>2] = $400;
  $405 = (_rotr64_63($342,$343,28)|0);
  $406 = tempRet0;
  $407 = (_rotr64_63($342,$343,34)|0);
  $408 = tempRet0;
  $409 = $405 ^ $407;
  $410 = $406 ^ $408;
  $411 = (_rotr64_63($342,$343,39)|0);
  $412 = tempRet0;
  $413 = $409 ^ $411;
  $414 = $410 ^ $412;
  $415 = $265 | $194;
  $416 = $266 | $195;
  $417 = $342 & $415;
  $418 = $343 & $416;
  $419 = $265 & $194;
  $420 = $266 & $195;
  $421 = $417 | $419;
  $422 = $418 | $420;
  $423 = (_i64Add(($413|0),($414|0),($421|0),($422|0))|0);
  $424 = tempRet0;
  $425 = (_i64Add(($391|0),($392|0),($423|0),($424|0))|0);
  $426 = tempRet0;
  $427 = $8;
  $428 = $427;
  HEAP32[$428>>2] = $425;
  $429 = (($427) + 4)|0;
  $430 = $429;
  HEAP32[$430>>2] = $426;
  $431 = (_rotr64_63($399,$400,14)|0);
  $432 = tempRet0;
  $433 = (_rotr64_63($399,$400,18)|0);
  $434 = tempRet0;
  $435 = $431 ^ $433;
  $436 = $432 ^ $434;
  $437 = (_rotr64_63($399,$400,41)|0);
  $438 = tempRet0;
  $439 = $435 ^ $437;
  $440 = $436 ^ $438;
  $441 = $316 ^ $239;
  $442 = $317 ^ $240;
  $443 = $399 & $441;
  $444 = $400 & $442;
  $445 = $443 ^ $239;
  $446 = $444 ^ $240;
  $447 = (_i64Add(($439|0),($440|0),($445|0),($446|0))|0);
  $448 = tempRet0;
  $449 = $$0 | 5;
  $450 = (($2) + ($449<<3)|0);
  $451 = $450;
  $452 = $451;
  $453 = HEAP32[$452>>2]|0;
  $454 = (($451) + 4)|0;
  $455 = $454;
  $456 = HEAP32[$455>>2]|0;
  $457 = (_i64Add(($447|0),($448|0),($453|0),($456|0))|0);
  $458 = tempRet0;
  $459 = (464 + ($449<<3)|0);
  $460 = $459;
  $461 = $460;
  $462 = HEAP32[$461>>2]|0;
  $463 = (($460) + 4)|0;
  $464 = $463;
  $465 = HEAP32[$464>>2]|0;
  $466 = (_i64Add(($457|0),($458|0),($462|0),($465|0))|0);
  $467 = tempRet0;
  $468 = $10;
  $469 = $468;
  $470 = HEAP32[$469>>2]|0;
  $471 = (($468) + 4)|0;
  $472 = $471;
  $473 = HEAP32[$472>>2]|0;
  $474 = (_i64Add(($470|0),($473|0),($466|0),($467|0))|0);
  $475 = tempRet0;
  $476 = $6;
  $477 = $476;
  $478 = HEAP32[$477>>2]|0;
  $479 = (($476) + 4)|0;
  $480 = $479;
  $481 = HEAP32[$480>>2]|0;
  $482 = (_i64Add(($478|0),($481|0),($474|0),($475|0))|0);
  $483 = tempRet0;
  $484 = $6;
  $485 = $484;
  HEAP32[$485>>2] = $482;
  $486 = (($484) + 4)|0;
  $487 = $486;
  HEAP32[$487>>2] = $483;
  $488 = (_rotr64_63($425,$426,28)|0);
  $489 = tempRet0;
  $490 = (_rotr64_63($425,$426,34)|0);
  $491 = tempRet0;
  $492 = $488 ^ $490;
  $493 = $489 ^ $491;
  $494 = (_rotr64_63($425,$426,39)|0);
  $495 = tempRet0;
  $496 = $492 ^ $494;
  $497 = $493 ^ $495;
  $498 = $342 | $265;
  $499 = $343 | $266;
  $500 = $425 & $498;
  $501 = $426 & $499;
  $502 = $342 & $265;
  $503 = $343 & $266;
  $504 = $500 | $502;
  $505 = $501 | $503;
  $506 = (_i64Add(($496|0),($497|0),($504|0),($505|0))|0);
  $507 = tempRet0;
  $508 = (_i64Add(($474|0),($475|0),($506|0),($507|0))|0);
  $509 = tempRet0;
  $510 = $10;
  $511 = $510;
  HEAP32[$511>>2] = $508;
  $512 = (($510) + 4)|0;
  $513 = $512;
  HEAP32[$513>>2] = $509;
  $514 = (_rotr64_63($482,$483,14)|0);
  $515 = tempRet0;
  $516 = (_rotr64_63($482,$483,18)|0);
  $517 = tempRet0;
  $518 = $514 ^ $516;
  $519 = $515 ^ $517;
  $520 = (_rotr64_63($482,$483,41)|0);
  $521 = tempRet0;
  $522 = $518 ^ $520;
  $523 = $519 ^ $521;
  $524 = $399 ^ $316;
  $525 = $400 ^ $317;
  $526 = $482 & $524;
  $527 = $483 & $525;
  $528 = $526 ^ $316;
  $529 = $527 ^ $317;
  $530 = (_i64Add(($522|0),($523|0),($528|0),($529|0))|0);
  $531 = tempRet0;
  $532 = $$0 | 6;
  $533 = (($2) + ($532<<3)|0);
  $534 = $533;
  $535 = $534;
  $536 = HEAP32[$535>>2]|0;
  $537 = (($534) + 4)|0;
  $538 = $537;
  $539 = HEAP32[$538>>2]|0;
  $540 = (_i64Add(($530|0),($531|0),($536|0),($539|0))|0);
  $541 = tempRet0;
  $542 = (464 + ($532<<3)|0);
  $543 = $542;
  $544 = $543;
  $545 = HEAP32[$544>>2]|0;
  $546 = (($543) + 4)|0;
  $547 = $546;
  $548 = HEAP32[$547>>2]|0;
  $549 = (_i64Add(($540|0),($541|0),($545|0),($548|0))|0);
  $550 = tempRet0;
  $551 = $9;
  $552 = $551;
  $553 = HEAP32[$552>>2]|0;
  $554 = (($551) + 4)|0;
  $555 = $554;
  $556 = HEAP32[$555>>2]|0;
  $557 = (_i64Add(($553|0),($556|0),($549|0),($550|0))|0);
  $558 = tempRet0;
  $559 = $5;
  $560 = $559;
  $561 = HEAP32[$560>>2]|0;
  $562 = (($559) + 4)|0;
  $563 = $562;
  $564 = HEAP32[$563>>2]|0;
  $565 = (_i64Add(($561|0),($564|0),($557|0),($558|0))|0);
  $566 = tempRet0;
  $567 = $5;
  $568 = $567;
  HEAP32[$568>>2] = $565;
  $569 = (($567) + 4)|0;
  $570 = $569;
  HEAP32[$570>>2] = $566;
  $571 = (_rotr64_63($508,$509,28)|0);
  $572 = tempRet0;
  $573 = (_rotr64_63($508,$509,34)|0);
  $574 = tempRet0;
  $575 = $571 ^ $573;
  $576 = $572 ^ $574;
  $577 = (_rotr64_63($508,$509,39)|0);
  $578 = tempRet0;
  $579 = $575 ^ $577;
  $580 = $576 ^ $578;
  $581 = $425 | $342;
  $582 = $426 | $343;
  $583 = $508 & $581;
  $584 = $509 & $582;
  $585 = $425 & $342;
  $586 = $426 & $343;
  $587 = $583 | $585;
  $588 = $584 | $586;
  $589 = (_i64Add(($579|0),($580|0),($587|0),($588|0))|0);
  $590 = tempRet0;
  $591 = (_i64Add(($557|0),($558|0),($589|0),($590|0))|0);
  $592 = tempRet0;
  $593 = $9;
  $594 = $593;
  HEAP32[$594>>2] = $591;
  $595 = (($593) + 4)|0;
  $596 = $595;
  HEAP32[$596>>2] = $592;
  $597 = (_rotr64_63($565,$566,14)|0);
  $598 = tempRet0;
  $599 = (_rotr64_63($565,$566,18)|0);
  $600 = tempRet0;
  $601 = $597 ^ $599;
  $602 = $598 ^ $600;
  $603 = (_rotr64_63($565,$566,41)|0);
  $604 = tempRet0;
  $605 = $601 ^ $603;
  $606 = $602 ^ $604;
  $607 = $482 ^ $399;
  $608 = $483 ^ $400;
  $609 = $565 & $607;
  $610 = $566 & $608;
  $611 = $609 ^ $399;
  $612 = $610 ^ $400;
  $613 = (_i64Add(($605|0),($606|0),($611|0),($612|0))|0);
  $614 = tempRet0;
  $615 = $$0 | 7;
  $616 = (($2) + ($615<<3)|0);
  $617 = $616;
  $618 = $617;
  $619 = HEAP32[$618>>2]|0;
  $620 = (($617) + 4)|0;
  $621 = $620;
  $622 = HEAP32[$621>>2]|0;
  $623 = (_i64Add(($613|0),($614|0),($619|0),($622|0))|0);
  $624 = tempRet0;
  $625 = (464 + ($615<<3)|0);
  $626 = $625;
  $627 = $626;
  $628 = HEAP32[$627>>2]|0;
  $629 = (($626) + 4)|0;
  $630 = $629;
  $631 = HEAP32[$630>>2]|0;
  $632 = (_i64Add(($623|0),($624|0),($628|0),($631|0))|0);
  $633 = tempRet0;
  $634 = $3;
  $635 = $634;
  $636 = HEAP32[$635>>2]|0;
  $637 = (($634) + 4)|0;
  $638 = $637;
  $639 = HEAP32[$638>>2]|0;
  $640 = (_i64Add(($636|0),($639|0),($632|0),($633|0))|0);
  $641 = tempRet0;
  $642 = $4;
  $643 = $642;
  $644 = HEAP32[$643>>2]|0;
  $645 = (($642) + 4)|0;
  $646 = $645;
  $647 = HEAP32[$646>>2]|0;
  $648 = (_i64Add(($644|0),($647|0),($640|0),($641|0))|0);
  $649 = tempRet0;
  $650 = $4;
  $651 = $650;
  HEAP32[$651>>2] = $648;
  $652 = (($650) + 4)|0;
  $653 = $652;
  HEAP32[$653>>2] = $649;
  $654 = (_rotr64_63($591,$592,28)|0);
  $655 = tempRet0;
  $656 = (_rotr64_63($591,$592,34)|0);
  $657 = tempRet0;
  $658 = $654 ^ $656;
  $659 = $655 ^ $657;
  $660 = (_rotr64_63($591,$592,39)|0);
  $661 = tempRet0;
  $662 = $658 ^ $660;
  $663 = $659 ^ $661;
  $664 = $508 | $425;
  $665 = $509 | $426;
  $666 = $591 & $664;
  $667 = $592 & $665;
  $668 = $508 & $425;
  $669 = $509 & $426;
  $670 = $666 | $668;
  $671 = $667 | $669;
  $672 = (_i64Add(($662|0),($663|0),($670|0),($671|0))|0);
  $673 = tempRet0;
  $674 = (_i64Add(($640|0),($641|0),($672|0),($673|0))|0);
  $675 = tempRet0;
  $676 = $3;
  $677 = $676;
  HEAP32[$677>>2] = $674;
  $678 = (($676) + 4)|0;
  $679 = $678;
  HEAP32[$679>>2] = $675;
  $680 = (_rotr64_63($648,$649,14)|0);
  $681 = tempRet0;
  $682 = (_rotr64_63($648,$649,18)|0);
  $683 = tempRet0;
  $684 = $680 ^ $682;
  $685 = $681 ^ $683;
  $686 = (_rotr64_63($648,$649,41)|0);
  $687 = tempRet0;
  $688 = $684 ^ $686;
  $689 = $685 ^ $687;
  $690 = $565 ^ $482;
  $691 = $566 ^ $483;
  $692 = $648 & $690;
  $693 = $649 & $691;
  $694 = $692 ^ $482;
  $695 = $693 ^ $483;
  $696 = (_i64Add(($688|0),($689|0),($694|0),($695|0))|0);
  $697 = tempRet0;
  $698 = $$0 | 8;
  $699 = (($2) + ($698<<3)|0);
  $700 = $699;
  $701 = $700;
  $702 = HEAP32[$701>>2]|0;
  $703 = (($700) + 4)|0;
  $704 = $703;
  $705 = HEAP32[$704>>2]|0;
  $706 = (_i64Add(($696|0),($697|0),($702|0),($705|0))|0);
  $707 = tempRet0;
  $708 = (464 + ($698<<3)|0);
  $709 = $708;
  $710 = $709;
  $711 = HEAP32[$710>>2]|0;
  $712 = (($709) + 4)|0;
  $713 = $712;
  $714 = HEAP32[$713>>2]|0;
  $715 = (_i64Add(($706|0),($707|0),($711|0),($714|0))|0);
  $716 = tempRet0;
  $717 = $7;
  $718 = $717;
  $719 = HEAP32[$718>>2]|0;
  $720 = (($717) + 4)|0;
  $721 = $720;
  $722 = HEAP32[$721>>2]|0;
  $723 = (_i64Add(($719|0),($722|0),($715|0),($716|0))|0);
  $724 = tempRet0;
  $725 = $8;
  $726 = $725;
  $727 = HEAP32[$726>>2]|0;
  $728 = (($725) + 4)|0;
  $729 = $728;
  $730 = HEAP32[$729>>2]|0;
  $731 = (_i64Add(($727|0),($730|0),($723|0),($724|0))|0);
  $732 = tempRet0;
  $733 = $8;
  $734 = $733;
  HEAP32[$734>>2] = $731;
  $735 = (($733) + 4)|0;
  $736 = $735;
  HEAP32[$736>>2] = $732;
  $737 = (_rotr64_63($674,$675,28)|0);
  $738 = tempRet0;
  $739 = (_rotr64_63($674,$675,34)|0);
  $740 = tempRet0;
  $741 = $737 ^ $739;
  $742 = $738 ^ $740;
  $743 = (_rotr64_63($674,$675,39)|0);
  $744 = tempRet0;
  $745 = $741 ^ $743;
  $746 = $742 ^ $744;
  $747 = $591 | $508;
  $748 = $592 | $509;
  $749 = $674 & $747;
  $750 = $675 & $748;
  $751 = $591 & $508;
  $752 = $592 & $509;
  $753 = $749 | $751;
  $754 = $750 | $752;
  $755 = (_i64Add(($745|0),($746|0),($753|0),($754|0))|0);
  $756 = tempRet0;
  $757 = (_i64Add(($723|0),($724|0),($755|0),($756|0))|0);
  $758 = tempRet0;
  $759 = $7;
  $760 = $759;
  HEAP32[$760>>2] = $757;
  $761 = (($759) + 4)|0;
  $762 = $761;
  HEAP32[$762>>2] = $758;
  $763 = (_rotr64_63($731,$732,14)|0);
  $764 = tempRet0;
  $765 = (_rotr64_63($731,$732,18)|0);
  $766 = tempRet0;
  $767 = $763 ^ $765;
  $768 = $764 ^ $766;
  $769 = (_rotr64_63($731,$732,41)|0);
  $770 = tempRet0;
  $771 = $767 ^ $769;
  $772 = $768 ^ $770;
  $773 = $648 ^ $565;
  $774 = $649 ^ $566;
  $775 = $731 & $773;
  $776 = $732 & $774;
  $777 = $775 ^ $565;
  $778 = $776 ^ $566;
  $779 = (_i64Add(($771|0),($772|0),($777|0),($778|0))|0);
  $780 = tempRet0;
  $781 = $$0 | 9;
  $782 = (($2) + ($781<<3)|0);
  $783 = $782;
  $784 = $783;
  $785 = HEAP32[$784>>2]|0;
  $786 = (($783) + 4)|0;
  $787 = $786;
  $788 = HEAP32[$787>>2]|0;
  $789 = (_i64Add(($779|0),($780|0),($785|0),($788|0))|0);
  $790 = tempRet0;
  $791 = (464 + ($781<<3)|0);
  $792 = $791;
  $793 = $792;
  $794 = HEAP32[$793>>2]|0;
  $795 = (($792) + 4)|0;
  $796 = $795;
  $797 = HEAP32[$796>>2]|0;
  $798 = (_i64Add(($789|0),($790|0),($794|0),($797|0))|0);
  $799 = tempRet0;
  $800 = $6;
  $801 = $800;
  $802 = HEAP32[$801>>2]|0;
  $803 = (($800) + 4)|0;
  $804 = $803;
  $805 = HEAP32[$804>>2]|0;
  $806 = (_i64Add(($802|0),($805|0),($798|0),($799|0))|0);
  $807 = tempRet0;
  $808 = $10;
  $809 = $808;
  $810 = HEAP32[$809>>2]|0;
  $811 = (($808) + 4)|0;
  $812 = $811;
  $813 = HEAP32[$812>>2]|0;
  $814 = (_i64Add(($810|0),($813|0),($806|0),($807|0))|0);
  $815 = tempRet0;
  $816 = $10;
  $817 = $816;
  HEAP32[$817>>2] = $814;
  $818 = (($816) + 4)|0;
  $819 = $818;
  HEAP32[$819>>2] = $815;
  $820 = (_rotr64_63($757,$758,28)|0);
  $821 = tempRet0;
  $822 = (_rotr64_63($757,$758,34)|0);
  $823 = tempRet0;
  $824 = $820 ^ $822;
  $825 = $821 ^ $823;
  $826 = (_rotr64_63($757,$758,39)|0);
  $827 = tempRet0;
  $828 = $824 ^ $826;
  $829 = $825 ^ $827;
  $830 = $674 | $591;
  $831 = $675 | $592;
  $832 = $757 & $830;
  $833 = $758 & $831;
  $834 = $674 & $591;
  $835 = $675 & $592;
  $836 = $832 | $834;
  $837 = $833 | $835;
  $838 = (_i64Add(($828|0),($829|0),($836|0),($837|0))|0);
  $839 = tempRet0;
  $840 = (_i64Add(($806|0),($807|0),($838|0),($839|0))|0);
  $841 = tempRet0;
  $842 = $6;
  $843 = $842;
  HEAP32[$843>>2] = $840;
  $844 = (($842) + 4)|0;
  $845 = $844;
  HEAP32[$845>>2] = $841;
  $846 = (_rotr64_63($814,$815,14)|0);
  $847 = tempRet0;
  $848 = (_rotr64_63($814,$815,18)|0);
  $849 = tempRet0;
  $850 = $846 ^ $848;
  $851 = $847 ^ $849;
  $852 = (_rotr64_63($814,$815,41)|0);
  $853 = tempRet0;
  $854 = $850 ^ $852;
  $855 = $851 ^ $853;
  $856 = $731 ^ $648;
  $857 = $732 ^ $649;
  $858 = $814 & $856;
  $859 = $815 & $857;
  $860 = $858 ^ $648;
  $861 = $859 ^ $649;
  $862 = (_i64Add(($854|0),($855|0),($860|0),($861|0))|0);
  $863 = tempRet0;
  $864 = $$0 | 10;
  $865 = (($2) + ($864<<3)|0);
  $866 = $865;
  $867 = $866;
  $868 = HEAP32[$867>>2]|0;
  $869 = (($866) + 4)|0;
  $870 = $869;
  $871 = HEAP32[$870>>2]|0;
  $872 = (_i64Add(($862|0),($863|0),($868|0),($871|0))|0);
  $873 = tempRet0;
  $874 = (464 + ($864<<3)|0);
  $875 = $874;
  $876 = $875;
  $877 = HEAP32[$876>>2]|0;
  $878 = (($875) + 4)|0;
  $879 = $878;
  $880 = HEAP32[$879>>2]|0;
  $881 = (_i64Add(($872|0),($873|0),($877|0),($880|0))|0);
  $882 = tempRet0;
  $883 = $5;
  $884 = $883;
  $885 = HEAP32[$884>>2]|0;
  $886 = (($883) + 4)|0;
  $887 = $886;
  $888 = HEAP32[$887>>2]|0;
  $889 = (_i64Add(($885|0),($888|0),($881|0),($882|0))|0);
  $890 = tempRet0;
  $891 = $9;
  $892 = $891;
  $893 = HEAP32[$892>>2]|0;
  $894 = (($891) + 4)|0;
  $895 = $894;
  $896 = HEAP32[$895>>2]|0;
  $897 = (_i64Add(($893|0),($896|0),($889|0),($890|0))|0);
  $898 = tempRet0;
  $899 = $9;
  $900 = $899;
  HEAP32[$900>>2] = $897;
  $901 = (($899) + 4)|0;
  $902 = $901;
  HEAP32[$902>>2] = $898;
  $903 = (_rotr64_63($840,$841,28)|0);
  $904 = tempRet0;
  $905 = (_rotr64_63($840,$841,34)|0);
  $906 = tempRet0;
  $907 = $903 ^ $905;
  $908 = $904 ^ $906;
  $909 = (_rotr64_63($840,$841,39)|0);
  $910 = tempRet0;
  $911 = $907 ^ $909;
  $912 = $908 ^ $910;
  $913 = $757 | $674;
  $914 = $758 | $675;
  $915 = $840 & $913;
  $916 = $841 & $914;
  $917 = $757 & $674;
  $918 = $758 & $675;
  $919 = $915 | $917;
  $920 = $916 | $918;
  $921 = (_i64Add(($911|0),($912|0),($919|0),($920|0))|0);
  $922 = tempRet0;
  $923 = (_i64Add(($889|0),($890|0),($921|0),($922|0))|0);
  $924 = tempRet0;
  $925 = $5;
  $926 = $925;
  HEAP32[$926>>2] = $923;
  $927 = (($925) + 4)|0;
  $928 = $927;
  HEAP32[$928>>2] = $924;
  $929 = (_rotr64_63($897,$898,14)|0);
  $930 = tempRet0;
  $931 = (_rotr64_63($897,$898,18)|0);
  $932 = tempRet0;
  $933 = $929 ^ $931;
  $934 = $930 ^ $932;
  $935 = (_rotr64_63($897,$898,41)|0);
  $936 = tempRet0;
  $937 = $933 ^ $935;
  $938 = $934 ^ $936;
  $939 = $814 ^ $731;
  $940 = $815 ^ $732;
  $941 = $897 & $939;
  $942 = $898 & $940;
  $943 = $941 ^ $731;
  $944 = $942 ^ $732;
  $945 = (_i64Add(($937|0),($938|0),($943|0),($944|0))|0);
  $946 = tempRet0;
  $947 = $$0 | 11;
  $948 = (($2) + ($947<<3)|0);
  $949 = $948;
  $950 = $949;
  $951 = HEAP32[$950>>2]|0;
  $952 = (($949) + 4)|0;
  $953 = $952;
  $954 = HEAP32[$953>>2]|0;
  $955 = (_i64Add(($945|0),($946|0),($951|0),($954|0))|0);
  $956 = tempRet0;
  $957 = (464 + ($947<<3)|0);
  $958 = $957;
  $959 = $958;
  $960 = HEAP32[$959>>2]|0;
  $961 = (($958) + 4)|0;
  $962 = $961;
  $963 = HEAP32[$962>>2]|0;
  $964 = (_i64Add(($955|0),($956|0),($960|0),($963|0))|0);
  $965 = tempRet0;
  $966 = $4;
  $967 = $966;
  $968 = HEAP32[$967>>2]|0;
  $969 = (($966) + 4)|0;
  $970 = $969;
  $971 = HEAP32[$970>>2]|0;
  $972 = (_i64Add(($968|0),($971|0),($964|0),($965|0))|0);
  $973 = tempRet0;
  $974 = $3;
  $975 = $974;
  $976 = HEAP32[$975>>2]|0;
  $977 = (($974) + 4)|0;
  $978 = $977;
  $979 = HEAP32[$978>>2]|0;
  $980 = (_i64Add(($976|0),($979|0),($972|0),($973|0))|0);
  $981 = tempRet0;
  $982 = $3;
  $983 = $982;
  HEAP32[$983>>2] = $980;
  $984 = (($982) + 4)|0;
  $985 = $984;
  HEAP32[$985>>2] = $981;
  $986 = (_rotr64_63($923,$924,28)|0);
  $987 = tempRet0;
  $988 = (_rotr64_63($923,$924,34)|0);
  $989 = tempRet0;
  $990 = $986 ^ $988;
  $991 = $987 ^ $989;
  $992 = (_rotr64_63($923,$924,39)|0);
  $993 = tempRet0;
  $994 = $990 ^ $992;
  $995 = $991 ^ $993;
  $996 = $840 | $757;
  $997 = $841 | $758;
  $998 = $923 & $996;
  $999 = $924 & $997;
  $1000 = $840 & $757;
  $1001 = $841 & $758;
  $1002 = $998 | $1000;
  $1003 = $999 | $1001;
  $1004 = (_i64Add(($994|0),($995|0),($1002|0),($1003|0))|0);
  $1005 = tempRet0;
  $1006 = (_i64Add(($972|0),($973|0),($1004|0),($1005|0))|0);
  $1007 = tempRet0;
  $1008 = $4;
  $1009 = $1008;
  HEAP32[$1009>>2] = $1006;
  $1010 = (($1008) + 4)|0;
  $1011 = $1010;
  HEAP32[$1011>>2] = $1007;
  $1012 = (_rotr64_63($980,$981,14)|0);
  $1013 = tempRet0;
  $1014 = (_rotr64_63($980,$981,18)|0);
  $1015 = tempRet0;
  $1016 = $1012 ^ $1014;
  $1017 = $1013 ^ $1015;
  $1018 = (_rotr64_63($980,$981,41)|0);
  $1019 = tempRet0;
  $1020 = $1016 ^ $1018;
  $1021 = $1017 ^ $1019;
  $1022 = $897 ^ $814;
  $1023 = $898 ^ $815;
  $1024 = $980 & $1022;
  $1025 = $981 & $1023;
  $1026 = $1024 ^ $814;
  $1027 = $1025 ^ $815;
  $1028 = (_i64Add(($1020|0),($1021|0),($1026|0),($1027|0))|0);
  $1029 = tempRet0;
  $1030 = $$0 | 12;
  $1031 = (($2) + ($1030<<3)|0);
  $1032 = $1031;
  $1033 = $1032;
  $1034 = HEAP32[$1033>>2]|0;
  $1035 = (($1032) + 4)|0;
  $1036 = $1035;
  $1037 = HEAP32[$1036>>2]|0;
  $1038 = (_i64Add(($1028|0),($1029|0),($1034|0),($1037|0))|0);
  $1039 = tempRet0;
  $1040 = (464 + ($1030<<3)|0);
  $1041 = $1040;
  $1042 = $1041;
  $1043 = HEAP32[$1042>>2]|0;
  $1044 = (($1041) + 4)|0;
  $1045 = $1044;
  $1046 = HEAP32[$1045>>2]|0;
  $1047 = (_i64Add(($1038|0),($1039|0),($1043|0),($1046|0))|0);
  $1048 = tempRet0;
  $1049 = $8;
  $1050 = $1049;
  $1051 = HEAP32[$1050>>2]|0;
  $1052 = (($1049) + 4)|0;
  $1053 = $1052;
  $1054 = HEAP32[$1053>>2]|0;
  $1055 = (_i64Add(($1051|0),($1054|0),($1047|0),($1048|0))|0);
  $1056 = tempRet0;
  $1057 = $7;
  $1058 = $1057;
  $1059 = HEAP32[$1058>>2]|0;
  $1060 = (($1057) + 4)|0;
  $1061 = $1060;
  $1062 = HEAP32[$1061>>2]|0;
  $1063 = (_i64Add(($1059|0),($1062|0),($1055|0),($1056|0))|0);
  $1064 = tempRet0;
  $1065 = $7;
  $1066 = $1065;
  HEAP32[$1066>>2] = $1063;
  $1067 = (($1065) + 4)|0;
  $1068 = $1067;
  HEAP32[$1068>>2] = $1064;
  $1069 = (_rotr64_63($1006,$1007,28)|0);
  $1070 = tempRet0;
  $1071 = (_rotr64_63($1006,$1007,34)|0);
  $1072 = tempRet0;
  $1073 = $1069 ^ $1071;
  $1074 = $1070 ^ $1072;
  $1075 = (_rotr64_63($1006,$1007,39)|0);
  $1076 = tempRet0;
  $1077 = $1073 ^ $1075;
  $1078 = $1074 ^ $1076;
  $1079 = $923 | $840;
  $1080 = $924 | $841;
  $1081 = $1006 & $1079;
  $1082 = $1007 & $1080;
  $1083 = $923 & $840;
  $1084 = $924 & $841;
  $1085 = $1081 | $1083;
  $1086 = $1082 | $1084;
  $1087 = (_i64Add(($1077|0),($1078|0),($1085|0),($1086|0))|0);
  $1088 = tempRet0;
  $1089 = (_i64Add(($1055|0),($1056|0),($1087|0),($1088|0))|0);
  $1090 = tempRet0;
  $1091 = $8;
  $1092 = $1091;
  HEAP32[$1092>>2] = $1089;
  $1093 = (($1091) + 4)|0;
  $1094 = $1093;
  HEAP32[$1094>>2] = $1090;
  $1095 = (_rotr64_63($1063,$1064,14)|0);
  $1096 = tempRet0;
  $1097 = (_rotr64_63($1063,$1064,18)|0);
  $1098 = tempRet0;
  $1099 = $1095 ^ $1097;
  $1100 = $1096 ^ $1098;
  $1101 = (_rotr64_63($1063,$1064,41)|0);
  $1102 = tempRet0;
  $1103 = $1099 ^ $1101;
  $1104 = $1100 ^ $1102;
  $1105 = $980 ^ $897;
  $1106 = $981 ^ $898;
  $1107 = $1063 & $1105;
  $1108 = $1064 & $1106;
  $1109 = $1107 ^ $897;
  $1110 = $1108 ^ $898;
  $1111 = (_i64Add(($1103|0),($1104|0),($1109|0),($1110|0))|0);
  $1112 = tempRet0;
  $1113 = $$0 | 13;
  $1114 = (($2) + ($1113<<3)|0);
  $1115 = $1114;
  $1116 = $1115;
  $1117 = HEAP32[$1116>>2]|0;
  $1118 = (($1115) + 4)|0;
  $1119 = $1118;
  $1120 = HEAP32[$1119>>2]|0;
  $1121 = (_i64Add(($1111|0),($1112|0),($1117|0),($1120|0))|0);
  $1122 = tempRet0;
  $1123 = (464 + ($1113<<3)|0);
  $1124 = $1123;
  $1125 = $1124;
  $1126 = HEAP32[$1125>>2]|0;
  $1127 = (($1124) + 4)|0;
  $1128 = $1127;
  $1129 = HEAP32[$1128>>2]|0;
  $1130 = (_i64Add(($1121|0),($1122|0),($1126|0),($1129|0))|0);
  $1131 = tempRet0;
  $1132 = $10;
  $1133 = $1132;
  $1134 = HEAP32[$1133>>2]|0;
  $1135 = (($1132) + 4)|0;
  $1136 = $1135;
  $1137 = HEAP32[$1136>>2]|0;
  $1138 = (_i64Add(($1134|0),($1137|0),($1130|0),($1131|0))|0);
  $1139 = tempRet0;
  $1140 = $6;
  $1141 = $1140;
  $1142 = HEAP32[$1141>>2]|0;
  $1143 = (($1140) + 4)|0;
  $1144 = $1143;
  $1145 = HEAP32[$1144>>2]|0;
  $1146 = (_i64Add(($1142|0),($1145|0),($1138|0),($1139|0))|0);
  $1147 = tempRet0;
  $1148 = $6;
  $1149 = $1148;
  HEAP32[$1149>>2] = $1146;
  $1150 = (($1148) + 4)|0;
  $1151 = $1150;
  HEAP32[$1151>>2] = $1147;
  $1152 = (_rotr64_63($1089,$1090,28)|0);
  $1153 = tempRet0;
  $1154 = (_rotr64_63($1089,$1090,34)|0);
  $1155 = tempRet0;
  $1156 = $1152 ^ $1154;
  $1157 = $1153 ^ $1155;
  $1158 = (_rotr64_63($1089,$1090,39)|0);
  $1159 = tempRet0;
  $1160 = $1156 ^ $1158;
  $1161 = $1157 ^ $1159;
  $1162 = $1006 | $923;
  $1163 = $1007 | $924;
  $1164 = $1089 & $1162;
  $1165 = $1090 & $1163;
  $1166 = $1006 & $923;
  $1167 = $1007 & $924;
  $1168 = $1164 | $1166;
  $1169 = $1165 | $1167;
  $1170 = (_i64Add(($1160|0),($1161|0),($1168|0),($1169|0))|0);
  $1171 = tempRet0;
  $1172 = (_i64Add(($1138|0),($1139|0),($1170|0),($1171|0))|0);
  $1173 = tempRet0;
  $1174 = $10;
  $1175 = $1174;
  HEAP32[$1175>>2] = $1172;
  $1176 = (($1174) + 4)|0;
  $1177 = $1176;
  HEAP32[$1177>>2] = $1173;
  $1178 = (_rotr64_63($1146,$1147,14)|0);
  $1179 = tempRet0;
  $1180 = (_rotr64_63($1146,$1147,18)|0);
  $1181 = tempRet0;
  $1182 = $1178 ^ $1180;
  $1183 = $1179 ^ $1181;
  $1184 = (_rotr64_63($1146,$1147,41)|0);
  $1185 = tempRet0;
  $1186 = $1182 ^ $1184;
  $1187 = $1183 ^ $1185;
  $1188 = $1063 ^ $980;
  $1189 = $1064 ^ $981;
  $1190 = $1146 & $1188;
  $1191 = $1147 & $1189;
  $1192 = $1190 ^ $980;
  $1193 = $1191 ^ $981;
  $1194 = (_i64Add(($1186|0),($1187|0),($1192|0),($1193|0))|0);
  $1195 = tempRet0;
  $1196 = $$0 | 14;
  $1197 = (($2) + ($1196<<3)|0);
  $1198 = $1197;
  $1199 = $1198;
  $1200 = HEAP32[$1199>>2]|0;
  $1201 = (($1198) + 4)|0;
  $1202 = $1201;
  $1203 = HEAP32[$1202>>2]|0;
  $1204 = (_i64Add(($1194|0),($1195|0),($1200|0),($1203|0))|0);
  $1205 = tempRet0;
  $1206 = (464 + ($1196<<3)|0);
  $1207 = $1206;
  $1208 = $1207;
  $1209 = HEAP32[$1208>>2]|0;
  $1210 = (($1207) + 4)|0;
  $1211 = $1210;
  $1212 = HEAP32[$1211>>2]|0;
  $1213 = (_i64Add(($1204|0),($1205|0),($1209|0),($1212|0))|0);
  $1214 = tempRet0;
  $1215 = $9;
  $1216 = $1215;
  $1217 = HEAP32[$1216>>2]|0;
  $1218 = (($1215) + 4)|0;
  $1219 = $1218;
  $1220 = HEAP32[$1219>>2]|0;
  $1221 = (_i64Add(($1217|0),($1220|0),($1213|0),($1214|0))|0);
  $1222 = tempRet0;
  $1223 = $5;
  $1224 = $1223;
  $1225 = HEAP32[$1224>>2]|0;
  $1226 = (($1223) + 4)|0;
  $1227 = $1226;
  $1228 = HEAP32[$1227>>2]|0;
  $1229 = (_i64Add(($1225|0),($1228|0),($1221|0),($1222|0))|0);
  $1230 = tempRet0;
  $1231 = $5;
  $1232 = $1231;
  HEAP32[$1232>>2] = $1229;
  $1233 = (($1231) + 4)|0;
  $1234 = $1233;
  HEAP32[$1234>>2] = $1230;
  $1235 = (_rotr64_63($1172,$1173,28)|0);
  $1236 = tempRet0;
  $1237 = (_rotr64_63($1172,$1173,34)|0);
  $1238 = tempRet0;
  $1239 = $1235 ^ $1237;
  $1240 = $1236 ^ $1238;
  $1241 = (_rotr64_63($1172,$1173,39)|0);
  $1242 = tempRet0;
  $1243 = $1239 ^ $1241;
  $1244 = $1240 ^ $1242;
  $1245 = $1089 | $1006;
  $1246 = $1090 | $1007;
  $1247 = $1172 & $1245;
  $1248 = $1173 & $1246;
  $1249 = $1089 & $1006;
  $1250 = $1090 & $1007;
  $1251 = $1247 | $1249;
  $1252 = $1248 | $1250;
  $1253 = (_i64Add(($1243|0),($1244|0),($1251|0),($1252|0))|0);
  $1254 = tempRet0;
  $1255 = (_i64Add(($1221|0),($1222|0),($1253|0),($1254|0))|0);
  $1256 = tempRet0;
  $1257 = $9;
  $1258 = $1257;
  HEAP32[$1258>>2] = $1255;
  $1259 = (($1257) + 4)|0;
  $1260 = $1259;
  HEAP32[$1260>>2] = $1256;
  $1261 = (_rotr64_63($1229,$1230,14)|0);
  $1262 = tempRet0;
  $1263 = (_rotr64_63($1229,$1230,18)|0);
  $1264 = tempRet0;
  $1265 = $1261 ^ $1263;
  $1266 = $1262 ^ $1264;
  $1267 = (_rotr64_63($1229,$1230,41)|0);
  $1268 = tempRet0;
  $1269 = $1265 ^ $1267;
  $1270 = $1266 ^ $1268;
  $1271 = $1146 ^ $1063;
  $1272 = $1147 ^ $1064;
  $1273 = $1229 & $1271;
  $1274 = $1230 & $1272;
  $1275 = $1273 ^ $1063;
  $1276 = $1274 ^ $1064;
  $1277 = (_i64Add(($1269|0),($1270|0),($1275|0),($1276|0))|0);
  $1278 = tempRet0;
  $1279 = $$0 | 15;
  $1280 = (($2) + ($1279<<3)|0);
  $1281 = $1280;
  $1282 = $1281;
  $1283 = HEAP32[$1282>>2]|0;
  $1284 = (($1281) + 4)|0;
  $1285 = $1284;
  $1286 = HEAP32[$1285>>2]|0;
  $1287 = (_i64Add(($1277|0),($1278|0),($1283|0),($1286|0))|0);
  $1288 = tempRet0;
  $1289 = (464 + ($1279<<3)|0);
  $1290 = $1289;
  $1291 = $1290;
  $1292 = HEAP32[$1291>>2]|0;
  $1293 = (($1290) + 4)|0;
  $1294 = $1293;
  $1295 = HEAP32[$1294>>2]|0;
  $1296 = (_i64Add(($1287|0),($1288|0),($1292|0),($1295|0))|0);
  $1297 = tempRet0;
  $1298 = $3;
  $1299 = $1298;
  $1300 = HEAP32[$1299>>2]|0;
  $1301 = (($1298) + 4)|0;
  $1302 = $1301;
  $1303 = HEAP32[$1302>>2]|0;
  $1304 = (_i64Add(($1300|0),($1303|0),($1296|0),($1297|0))|0);
  $1305 = tempRet0;
  $1306 = $4;
  $1307 = $1306;
  $1308 = HEAP32[$1307>>2]|0;
  $1309 = (($1306) + 4)|0;
  $1310 = $1309;
  $1311 = HEAP32[$1310>>2]|0;
  $1312 = (_i64Add(($1308|0),($1311|0),($1304|0),($1305|0))|0);
  $1313 = tempRet0;
  $1314 = $4;
  $1315 = $1314;
  HEAP32[$1315>>2] = $1312;
  $1316 = (($1314) + 4)|0;
  $1317 = $1316;
  HEAP32[$1317>>2] = $1313;
  $1318 = (_rotr64_63($1255,$1256,28)|0);
  $1319 = tempRet0;
  $1320 = (_rotr64_63($1255,$1256,34)|0);
  $1321 = tempRet0;
  $1322 = $1318 ^ $1320;
  $1323 = $1319 ^ $1321;
  $1324 = (_rotr64_63($1255,$1256,39)|0);
  $1325 = tempRet0;
  $1326 = $1322 ^ $1324;
  $1327 = $1323 ^ $1325;
  $1328 = $1172 | $1089;
  $1329 = $1173 | $1090;
  $1330 = $1255 & $1328;
  $1331 = $1256 & $1329;
  $1332 = $1172 & $1089;
  $1333 = $1173 & $1090;
  $1334 = $1330 | $1332;
  $1335 = $1331 | $1333;
  $1336 = (_i64Add(($1326|0),($1327|0),($1334|0),($1335|0))|0);
  $1337 = tempRet0;
  $1338 = (_i64Add(($1304|0),($1305|0),($1336|0),($1337|0))|0);
  $1339 = tempRet0;
  $1340 = $3;
  $1341 = $1340;
  HEAP32[$1341>>2] = $1338;
  $1342 = (($1340) + 4)|0;
  $1343 = $1342;
  HEAP32[$1343>>2] = $1339;
  $1344 = ($$0|0)==(64);
  if ($1344) {
   $$1 = 0;
   break;
  }
  $1345 = $1197;
  $1346 = $1345;
  $1347 = HEAP32[$1346>>2]|0;
  $1348 = (($1345) + 4)|0;
  $1349 = $1348;
  $1350 = HEAP32[$1349>>2]|0;
  $1351 = (_rotr64_63($1347,$1350,19)|0);
  $1352 = tempRet0;
  $1353 = (_rotr64_63($1347,$1350,61)|0);
  $1354 = tempRet0;
  $1355 = $1351 ^ $1353;
  $1356 = $1352 ^ $1354;
  $1357 = (_bitshift64Lshr(($1347|0),($1350|0),6)|0);
  $1358 = tempRet0;
  $1359 = $1355 ^ $1357;
  $1360 = $1356 ^ $1358;
  $1361 = $782;
  $1362 = $1361;
  $1363 = HEAP32[$1362>>2]|0;
  $1364 = (($1361) + 4)|0;
  $1365 = $1364;
  $1366 = HEAP32[$1365>>2]|0;
  $1367 = (_i64Add(($1359|0),($1360|0),($1363|0),($1366|0))|0);
  $1368 = tempRet0;
  $1369 = $148;
  $1370 = $1369;
  $1371 = HEAP32[$1370>>2]|0;
  $1372 = (($1369) + 4)|0;
  $1373 = $1372;
  $1374 = HEAP32[$1373>>2]|0;
  $1375 = (_rotr64_63($1371,$1374,1)|0);
  $1376 = tempRet0;
  $1377 = (_rotr64_63($1371,$1374,8)|0);
  $1378 = tempRet0;
  $1379 = $1375 ^ $1377;
  $1380 = $1376 ^ $1378;
  $1381 = (_bitshift64Lshr(($1371|0),($1374|0),7)|0);
  $1382 = tempRet0;
  $1383 = $1379 ^ $1381;
  $1384 = $1380 ^ $1382;
  $1385 = (_i64Add(($1367|0),($1368|0),($1383|0),($1384|0))|0);
  $1386 = tempRet0;
  $1387 = $47;
  $1388 = $1387;
  $1389 = HEAP32[$1388>>2]|0;
  $1390 = (($1387) + 4)|0;
  $1391 = $1390;
  $1392 = HEAP32[$1391>>2]|0;
  $1393 = (_i64Add(($1385|0),($1386|0),($1389|0),($1392|0))|0);
  $1394 = tempRet0;
  $1395 = (($$0) + 16)|0;
  $1396 = (($2) + ($1395<<3)|0);
  $1397 = $1396;
  $1398 = $1397;
  HEAP32[$1398>>2] = $1393;
  $1399 = (($1397) + 4)|0;
  $1400 = $1399;
  HEAP32[$1400>>2] = $1394;
  $1401 = $1280;
  $1402 = $1401;
  $1403 = HEAP32[$1402>>2]|0;
  $1404 = (($1401) + 4)|0;
  $1405 = $1404;
  $1406 = HEAP32[$1405>>2]|0;
  $1407 = (_rotr64_63($1403,$1406,19)|0);
  $1408 = tempRet0;
  $1409 = (_rotr64_63($1403,$1406,61)|0);
  $1410 = tempRet0;
  $1411 = $1407 ^ $1409;
  $1412 = $1408 ^ $1410;
  $1413 = (_bitshift64Lshr(($1403|0),($1406|0),6)|0);
  $1414 = tempRet0;
  $1415 = $1411 ^ $1413;
  $1416 = $1412 ^ $1414;
  $1417 = (($147) + 9)|0;
  $1418 = (($2) + ($1417<<3)|0);
  $1419 = $1418;
  $1420 = $1419;
  $1421 = HEAP32[$1420>>2]|0;
  $1422 = (($1419) + 4)|0;
  $1423 = $1422;
  $1424 = HEAP32[$1423>>2]|0;
  $1425 = (_i64Add(($1415|0),($1416|0),($1421|0),($1424|0))|0);
  $1426 = tempRet0;
  $1427 = (($147) + 1)|0;
  $1428 = (($2) + ($1427<<3)|0);
  $1429 = $1428;
  $1430 = $1429;
  $1431 = HEAP32[$1430>>2]|0;
  $1432 = (($1429) + 4)|0;
  $1433 = $1432;
  $1434 = HEAP32[$1433>>2]|0;
  $1435 = (_rotr64_63($1431,$1434,1)|0);
  $1436 = tempRet0;
  $1437 = (_rotr64_63($1431,$1434,8)|0);
  $1438 = tempRet0;
  $1439 = $1435 ^ $1437;
  $1440 = $1436 ^ $1438;
  $1441 = (_bitshift64Lshr(($1431|0),($1434|0),7)|0);
  $1442 = tempRet0;
  $1443 = $1439 ^ $1441;
  $1444 = $1440 ^ $1442;
  $1445 = (_i64Add(($1425|0),($1426|0),($1443|0),($1444|0))|0);
  $1446 = tempRet0;
  $1447 = (_i64Add(($1445|0),($1446|0),($1371|0),($1374|0))|0);
  $1448 = tempRet0;
  $1449 = (($147) + 16)|0;
  $1450 = (($2) + ($1449<<3)|0);
  $1451 = $1450;
  $1452 = $1451;
  HEAP32[$1452>>2] = $1447;
  $1453 = (($1451) + 4)|0;
  $1454 = $1453;
  HEAP32[$1454>>2] = $1448;
  $1455 = (_rotr64_63($1393,$1394,19)|0);
  $1456 = tempRet0;
  $1457 = (_rotr64_63($1393,$1394,61)|0);
  $1458 = tempRet0;
  $1459 = $1455 ^ $1457;
  $1460 = $1456 ^ $1458;
  $1461 = (_bitshift64Lshr(($1393|0),($1394|0),6)|0);
  $1462 = tempRet0;
  $1463 = $1459 ^ $1461;
  $1464 = $1460 ^ $1462;
  $1465 = $948;
  $1466 = $1465;
  $1467 = HEAP32[$1466>>2]|0;
  $1468 = (($1465) + 4)|0;
  $1469 = $1468;
  $1470 = HEAP32[$1469>>2]|0;
  $1471 = (_i64Add(($1463|0),($1464|0),($1467|0),($1470|0))|0);
  $1472 = tempRet0;
  $1473 = $290;
  $1474 = $1473;
  $1475 = HEAP32[$1474>>2]|0;
  $1476 = (($1473) + 4)|0;
  $1477 = $1476;
  $1478 = HEAP32[$1477>>2]|0;
  $1479 = (_rotr64_63($1475,$1478,1)|0);
  $1480 = tempRet0;
  $1481 = (_rotr64_63($1475,$1478,8)|0);
  $1482 = tempRet0;
  $1483 = $1479 ^ $1481;
  $1484 = $1480 ^ $1482;
  $1485 = (_bitshift64Lshr(($1475|0),($1478|0),7)|0);
  $1486 = tempRet0;
  $1487 = $1483 ^ $1485;
  $1488 = $1484 ^ $1486;
  $1489 = (_i64Add(($1471|0),($1472|0),($1487|0),($1488|0))|0);
  $1490 = tempRet0;
  $1491 = (_i64Add(($1489|0),($1490|0),($1431|0),($1434|0))|0);
  $1492 = tempRet0;
  $1493 = (($218) + 16)|0;
  $1494 = (($2) + ($1493<<3)|0);
  $1495 = $1494;
  $1496 = $1495;
  HEAP32[$1496>>2] = $1491;
  $1497 = (($1495) + 4)|0;
  $1498 = $1497;
  HEAP32[$1498>>2] = $1492;
  $1499 = (_rotr64_63($1447,$1448,19)|0);
  $1500 = tempRet0;
  $1501 = (_rotr64_63($1447,$1448,61)|0);
  $1502 = tempRet0;
  $1503 = $1499 ^ $1501;
  $1504 = $1500 ^ $1502;
  $1505 = (_bitshift64Lshr(($1447|0),($1448|0),6)|0);
  $1506 = tempRet0;
  $1507 = $1503 ^ $1505;
  $1508 = $1504 ^ $1506;
  $1509 = (($289) + 9)|0;
  $1510 = (($2) + ($1509<<3)|0);
  $1511 = $1510;
  $1512 = $1511;
  $1513 = HEAP32[$1512>>2]|0;
  $1514 = (($1511) + 4)|0;
  $1515 = $1514;
  $1516 = HEAP32[$1515>>2]|0;
  $1517 = (_i64Add(($1507|0),($1508|0),($1513|0),($1516|0))|0);
  $1518 = tempRet0;
  $1519 = (($289) + 1)|0;
  $1520 = (($2) + ($1519<<3)|0);
  $1521 = $1520;
  $1522 = $1521;
  $1523 = HEAP32[$1522>>2]|0;
  $1524 = (($1521) + 4)|0;
  $1525 = $1524;
  $1526 = HEAP32[$1525>>2]|0;
  $1527 = (_rotr64_63($1523,$1526,1)|0);
  $1528 = tempRet0;
  $1529 = (_rotr64_63($1523,$1526,8)|0);
  $1530 = tempRet0;
  $1531 = $1527 ^ $1529;
  $1532 = $1528 ^ $1530;
  $1533 = (_bitshift64Lshr(($1523|0),($1526|0),7)|0);
  $1534 = tempRet0;
  $1535 = $1531 ^ $1533;
  $1536 = $1532 ^ $1534;
  $1537 = (_i64Add(($1517|0),($1518|0),($1535|0),($1536|0))|0);
  $1538 = tempRet0;
  $1539 = (_i64Add(($1537|0),($1538|0),($1475|0),($1478|0))|0);
  $1540 = tempRet0;
  $1541 = (($289) + 16)|0;
  $1542 = (($2) + ($1541<<3)|0);
  $1543 = $1542;
  $1544 = $1543;
  HEAP32[$1544>>2] = $1539;
  $1545 = (($1543) + 4)|0;
  $1546 = $1545;
  HEAP32[$1546>>2] = $1540;
  $1547 = (_rotr64_63($1491,$1492,19)|0);
  $1548 = tempRet0;
  $1549 = (_rotr64_63($1491,$1492,61)|0);
  $1550 = tempRet0;
  $1551 = $1547 ^ $1549;
  $1552 = $1548 ^ $1550;
  $1553 = (_bitshift64Lshr(($1491|0),($1492|0),6)|0);
  $1554 = tempRet0;
  $1555 = $1551 ^ $1553;
  $1556 = $1552 ^ $1554;
  $1557 = $1114;
  $1558 = $1557;
  $1559 = HEAP32[$1558>>2]|0;
  $1560 = (($1557) + 4)|0;
  $1561 = $1560;
  $1562 = HEAP32[$1561>>2]|0;
  $1563 = (_i64Add(($1555|0),($1556|0),($1559|0),($1562|0))|0);
  $1564 = tempRet0;
  $1565 = $450;
  $1566 = $1565;
  $1567 = HEAP32[$1566>>2]|0;
  $1568 = (($1565) + 4)|0;
  $1569 = $1568;
  $1570 = HEAP32[$1569>>2]|0;
  $1571 = (_rotr64_63($1567,$1570,1)|0);
  $1572 = tempRet0;
  $1573 = (_rotr64_63($1567,$1570,8)|0);
  $1574 = tempRet0;
  $1575 = $1571 ^ $1573;
  $1576 = $1572 ^ $1574;
  $1577 = (_bitshift64Lshr(($1567|0),($1570|0),7)|0);
  $1578 = tempRet0;
  $1579 = $1575 ^ $1577;
  $1580 = $1576 ^ $1578;
  $1581 = (_i64Add(($1563|0),($1564|0),($1579|0),($1580|0))|0);
  $1582 = tempRet0;
  $1583 = (_i64Add(($1581|0),($1582|0),($1523|0),($1526|0))|0);
  $1584 = tempRet0;
  $1585 = (($366) + 16)|0;
  $1586 = (($2) + ($1585<<3)|0);
  $1587 = $1586;
  $1588 = $1587;
  HEAP32[$1588>>2] = $1583;
  $1589 = (($1587) + 4)|0;
  $1590 = $1589;
  HEAP32[$1590>>2] = $1584;
  $1591 = (_rotr64_63($1539,$1540,19)|0);
  $1592 = tempRet0;
  $1593 = (_rotr64_63($1539,$1540,61)|0);
  $1594 = tempRet0;
  $1595 = $1591 ^ $1593;
  $1596 = $1592 ^ $1594;
  $1597 = (_bitshift64Lshr(($1539|0),($1540|0),6)|0);
  $1598 = tempRet0;
  $1599 = $1595 ^ $1597;
  $1600 = $1596 ^ $1598;
  $1601 = (($449) + 9)|0;
  $1602 = (($2) + ($1601<<3)|0);
  $1603 = $1602;
  $1604 = $1603;
  $1605 = HEAP32[$1604>>2]|0;
  $1606 = (($1603) + 4)|0;
  $1607 = $1606;
  $1608 = HEAP32[$1607>>2]|0;
  $1609 = (_i64Add(($1599|0),($1600|0),($1605|0),($1608|0))|0);
  $1610 = tempRet0;
  $1611 = (($449) + 1)|0;
  $1612 = (($2) + ($1611<<3)|0);
  $1613 = $1612;
  $1614 = $1613;
  $1615 = HEAP32[$1614>>2]|0;
  $1616 = (($1613) + 4)|0;
  $1617 = $1616;
  $1618 = HEAP32[$1617>>2]|0;
  $1619 = (_rotr64_63($1615,$1618,1)|0);
  $1620 = tempRet0;
  $1621 = (_rotr64_63($1615,$1618,8)|0);
  $1622 = tempRet0;
  $1623 = $1619 ^ $1621;
  $1624 = $1620 ^ $1622;
  $1625 = (_bitshift64Lshr(($1615|0),($1618|0),7)|0);
  $1626 = tempRet0;
  $1627 = $1623 ^ $1625;
  $1628 = $1624 ^ $1626;
  $1629 = (_i64Add(($1609|0),($1610|0),($1627|0),($1628|0))|0);
  $1630 = tempRet0;
  $1631 = (_i64Add(($1629|0),($1630|0),($1567|0),($1570|0))|0);
  $1632 = tempRet0;
  $1633 = (($449) + 16)|0;
  $1634 = (($2) + ($1633<<3)|0);
  $1635 = $1634;
  $1636 = $1635;
  HEAP32[$1636>>2] = $1631;
  $1637 = (($1635) + 4)|0;
  $1638 = $1637;
  HEAP32[$1638>>2] = $1632;
  $1639 = (_rotr64_63($1583,$1584,19)|0);
  $1640 = tempRet0;
  $1641 = (_rotr64_63($1583,$1584,61)|0);
  $1642 = tempRet0;
  $1643 = $1639 ^ $1641;
  $1644 = $1640 ^ $1642;
  $1645 = (_bitshift64Lshr(($1583|0),($1584|0),6)|0);
  $1646 = tempRet0;
  $1647 = $1643 ^ $1645;
  $1648 = $1644 ^ $1646;
  $1649 = $1280;
  $1650 = $1649;
  $1651 = HEAP32[$1650>>2]|0;
  $1652 = (($1649) + 4)|0;
  $1653 = $1652;
  $1654 = HEAP32[$1653>>2]|0;
  $1655 = (_i64Add(($1647|0),($1648|0),($1651|0),($1654|0))|0);
  $1656 = tempRet0;
  $1657 = $616;
  $1658 = $1657;
  $1659 = HEAP32[$1658>>2]|0;
  $1660 = (($1657) + 4)|0;
  $1661 = $1660;
  $1662 = HEAP32[$1661>>2]|0;
  $1663 = (_rotr64_63($1659,$1662,1)|0);
  $1664 = tempRet0;
  $1665 = (_rotr64_63($1659,$1662,8)|0);
  $1666 = tempRet0;
  $1667 = $1663 ^ $1665;
  $1668 = $1664 ^ $1666;
  $1669 = (_bitshift64Lshr(($1659|0),($1662|0),7)|0);
  $1670 = tempRet0;
  $1671 = $1667 ^ $1669;
  $1672 = $1668 ^ $1670;
  $1673 = (_i64Add(($1655|0),($1656|0),($1671|0),($1672|0))|0);
  $1674 = tempRet0;
  $1675 = (_i64Add(($1673|0),($1674|0),($1615|0),($1618|0))|0);
  $1676 = tempRet0;
  $1677 = (($532) + 16)|0;
  $1678 = (($2) + ($1677<<3)|0);
  $1679 = $1678;
  $1680 = $1679;
  HEAP32[$1680>>2] = $1675;
  $1681 = (($1679) + 4)|0;
  $1682 = $1681;
  HEAP32[$1682>>2] = $1676;
  $1683 = (_rotr64_63($1631,$1632,19)|0);
  $1684 = tempRet0;
  $1685 = (_rotr64_63($1631,$1632,61)|0);
  $1686 = tempRet0;
  $1687 = $1683 ^ $1685;
  $1688 = $1684 ^ $1686;
  $1689 = (_bitshift64Lshr(($1631|0),($1632|0),6)|0);
  $1690 = tempRet0;
  $1691 = $1687 ^ $1689;
  $1692 = $1688 ^ $1690;
  $1693 = (($615) + 9)|0;
  $1694 = (($2) + ($1693<<3)|0);
  $1695 = $1694;
  $1696 = $1695;
  $1697 = HEAP32[$1696>>2]|0;
  $1698 = (($1695) + 4)|0;
  $1699 = $1698;
  $1700 = HEAP32[$1699>>2]|0;
  $1701 = (_i64Add(($1691|0),($1692|0),($1697|0),($1700|0))|0);
  $1702 = tempRet0;
  $1703 = (($615) + 1)|0;
  $1704 = (($2) + ($1703<<3)|0);
  $1705 = $1704;
  $1706 = $1705;
  $1707 = HEAP32[$1706>>2]|0;
  $1708 = (($1705) + 4)|0;
  $1709 = $1708;
  $1710 = HEAP32[$1709>>2]|0;
  $1711 = (_rotr64_63($1707,$1710,1)|0);
  $1712 = tempRet0;
  $1713 = (_rotr64_63($1707,$1710,8)|0);
  $1714 = tempRet0;
  $1715 = $1711 ^ $1713;
  $1716 = $1712 ^ $1714;
  $1717 = (_bitshift64Lshr(($1707|0),($1710|0),7)|0);
  $1718 = tempRet0;
  $1719 = $1715 ^ $1717;
  $1720 = $1716 ^ $1718;
  $1721 = (_i64Add(($1701|0),($1702|0),($1719|0),($1720|0))|0);
  $1722 = tempRet0;
  $1723 = (_i64Add(($1721|0),($1722|0),($1659|0),($1662|0))|0);
  $1724 = tempRet0;
  $1725 = (($615) + 16)|0;
  $1726 = (($2) + ($1725<<3)|0);
  $1727 = $1726;
  $1728 = $1727;
  HEAP32[$1728>>2] = $1723;
  $1729 = (($1727) + 4)|0;
  $1730 = $1729;
  HEAP32[$1730>>2] = $1724;
  $1731 = (_rotr64_63($1675,$1676,19)|0);
  $1732 = tempRet0;
  $1733 = (_rotr64_63($1675,$1676,61)|0);
  $1734 = tempRet0;
  $1735 = $1731 ^ $1733;
  $1736 = $1732 ^ $1734;
  $1737 = (_bitshift64Lshr(($1675|0),($1676|0),6)|0);
  $1738 = tempRet0;
  $1739 = $1735 ^ $1737;
  $1740 = $1736 ^ $1738;
  $1741 = (($698) + 9)|0;
  $1742 = (($2) + ($1741<<3)|0);
  $1743 = $1742;
  $1744 = $1743;
  $1745 = HEAP32[$1744>>2]|0;
  $1746 = (($1743) + 4)|0;
  $1747 = $1746;
  $1748 = HEAP32[$1747>>2]|0;
  $1749 = (_i64Add(($1739|0),($1740|0),($1745|0),($1748|0))|0);
  $1750 = tempRet0;
  $1751 = $782;
  $1752 = $1751;
  $1753 = HEAP32[$1752>>2]|0;
  $1754 = (($1751) + 4)|0;
  $1755 = $1754;
  $1756 = HEAP32[$1755>>2]|0;
  $1757 = (_rotr64_63($1753,$1756,1)|0);
  $1758 = tempRet0;
  $1759 = (_rotr64_63($1753,$1756,8)|0);
  $1760 = tempRet0;
  $1761 = $1757 ^ $1759;
  $1762 = $1758 ^ $1760;
  $1763 = (_bitshift64Lshr(($1753|0),($1756|0),7)|0);
  $1764 = tempRet0;
  $1765 = $1761 ^ $1763;
  $1766 = $1762 ^ $1764;
  $1767 = (_i64Add(($1749|0),($1750|0),($1765|0),($1766|0))|0);
  $1768 = tempRet0;
  $1769 = (_i64Add(($1767|0),($1768|0),($1707|0),($1710|0))|0);
  $1770 = tempRet0;
  $1771 = (($698) + 16)|0;
  $1772 = (($2) + ($1771<<3)|0);
  $1773 = $1772;
  $1774 = $1773;
  HEAP32[$1774>>2] = $1769;
  $1775 = (($1773) + 4)|0;
  $1776 = $1775;
  HEAP32[$1776>>2] = $1770;
  $1777 = (_rotr64_63($1723,$1724,19)|0);
  $1778 = tempRet0;
  $1779 = (_rotr64_63($1723,$1724,61)|0);
  $1780 = tempRet0;
  $1781 = $1777 ^ $1779;
  $1782 = $1778 ^ $1780;
  $1783 = (_bitshift64Lshr(($1723|0),($1724|0),6)|0);
  $1784 = tempRet0;
  $1785 = $1781 ^ $1783;
  $1786 = $1782 ^ $1784;
  $1787 = (($781) + 9)|0;
  $1788 = (($2) + ($1787<<3)|0);
  $1789 = $1788;
  $1790 = $1789;
  $1791 = HEAP32[$1790>>2]|0;
  $1792 = (($1789) + 4)|0;
  $1793 = $1792;
  $1794 = HEAP32[$1793>>2]|0;
  $1795 = (_i64Add(($1785|0),($1786|0),($1791|0),($1794|0))|0);
  $1796 = tempRet0;
  $1797 = (($781) + 1)|0;
  $1798 = (($2) + ($1797<<3)|0);
  $1799 = $1798;
  $1800 = $1799;
  $1801 = HEAP32[$1800>>2]|0;
  $1802 = (($1799) + 4)|0;
  $1803 = $1802;
  $1804 = HEAP32[$1803>>2]|0;
  $1805 = (_rotr64_63($1801,$1804,1)|0);
  $1806 = tempRet0;
  $1807 = (_rotr64_63($1801,$1804,8)|0);
  $1808 = tempRet0;
  $1809 = $1805 ^ $1807;
  $1810 = $1806 ^ $1808;
  $1811 = (_bitshift64Lshr(($1801|0),($1804|0),7)|0);
  $1812 = tempRet0;
  $1813 = $1809 ^ $1811;
  $1814 = $1810 ^ $1812;
  $1815 = (_i64Add(($1795|0),($1796|0),($1813|0),($1814|0))|0);
  $1816 = tempRet0;
  $1817 = (_i64Add(($1815|0),($1816|0),($1753|0),($1756|0))|0);
  $1818 = tempRet0;
  $1819 = (($781) + 16)|0;
  $1820 = (($2) + ($1819<<3)|0);
  $1821 = $1820;
  $1822 = $1821;
  HEAP32[$1822>>2] = $1817;
  $1823 = (($1821) + 4)|0;
  $1824 = $1823;
  HEAP32[$1824>>2] = $1818;
  $1825 = (_rotr64_63($1769,$1770,19)|0);
  $1826 = tempRet0;
  $1827 = (_rotr64_63($1769,$1770,61)|0);
  $1828 = tempRet0;
  $1829 = $1825 ^ $1827;
  $1830 = $1826 ^ $1828;
  $1831 = (_bitshift64Lshr(($1769|0),($1770|0),6)|0);
  $1832 = tempRet0;
  $1833 = $1829 ^ $1831;
  $1834 = $1830 ^ $1832;
  $1835 = (($864) + 9)|0;
  $1836 = (($2) + ($1835<<3)|0);
  $1837 = $1836;
  $1838 = $1837;
  $1839 = HEAP32[$1838>>2]|0;
  $1840 = (($1837) + 4)|0;
  $1841 = $1840;
  $1842 = HEAP32[$1841>>2]|0;
  $1843 = (_i64Add(($1833|0),($1834|0),($1839|0),($1842|0))|0);
  $1844 = tempRet0;
  $1845 = $948;
  $1846 = $1845;
  $1847 = HEAP32[$1846>>2]|0;
  $1848 = (($1845) + 4)|0;
  $1849 = $1848;
  $1850 = HEAP32[$1849>>2]|0;
  $1851 = (_rotr64_63($1847,$1850,1)|0);
  $1852 = tempRet0;
  $1853 = (_rotr64_63($1847,$1850,8)|0);
  $1854 = tempRet0;
  $1855 = $1851 ^ $1853;
  $1856 = $1852 ^ $1854;
  $1857 = (_bitshift64Lshr(($1847|0),($1850|0),7)|0);
  $1858 = tempRet0;
  $1859 = $1855 ^ $1857;
  $1860 = $1856 ^ $1858;
  $1861 = (_i64Add(($1843|0),($1844|0),($1859|0),($1860|0))|0);
  $1862 = tempRet0;
  $1863 = (_i64Add(($1861|0),($1862|0),($1801|0),($1804|0))|0);
  $1864 = tempRet0;
  $1865 = (($864) + 16)|0;
  $1866 = (($2) + ($1865<<3)|0);
  $1867 = $1866;
  $1868 = $1867;
  HEAP32[$1868>>2] = $1863;
  $1869 = (($1867) + 4)|0;
  $1870 = $1869;
  HEAP32[$1870>>2] = $1864;
  $1871 = (_rotr64_63($1817,$1818,19)|0);
  $1872 = tempRet0;
  $1873 = (_rotr64_63($1817,$1818,61)|0);
  $1874 = tempRet0;
  $1875 = $1871 ^ $1873;
  $1876 = $1872 ^ $1874;
  $1877 = (_bitshift64Lshr(($1817|0),($1818|0),6)|0);
  $1878 = tempRet0;
  $1879 = $1875 ^ $1877;
  $1880 = $1876 ^ $1878;
  $1881 = (($947) + 9)|0;
  $1882 = (($2) + ($1881<<3)|0);
  $1883 = $1882;
  $1884 = $1883;
  $1885 = HEAP32[$1884>>2]|0;
  $1886 = (($1883) + 4)|0;
  $1887 = $1886;
  $1888 = HEAP32[$1887>>2]|0;
  $1889 = (_i64Add(($1879|0),($1880|0),($1885|0),($1888|0))|0);
  $1890 = tempRet0;
  $1891 = (($947) + 1)|0;
  $1892 = (($2) + ($1891<<3)|0);
  $1893 = $1892;
  $1894 = $1893;
  $1895 = HEAP32[$1894>>2]|0;
  $1896 = (($1893) + 4)|0;
  $1897 = $1896;
  $1898 = HEAP32[$1897>>2]|0;
  $1899 = (_rotr64_63($1895,$1898,1)|0);
  $1900 = tempRet0;
  $1901 = (_rotr64_63($1895,$1898,8)|0);
  $1902 = tempRet0;
  $1903 = $1899 ^ $1901;
  $1904 = $1900 ^ $1902;
  $1905 = (_bitshift64Lshr(($1895|0),($1898|0),7)|0);
  $1906 = tempRet0;
  $1907 = $1903 ^ $1905;
  $1908 = $1904 ^ $1906;
  $1909 = (_i64Add(($1889|0),($1890|0),($1907|0),($1908|0))|0);
  $1910 = tempRet0;
  $1911 = (_i64Add(($1909|0),($1910|0),($1847|0),($1850|0))|0);
  $1912 = tempRet0;
  $1913 = (($947) + 16)|0;
  $1914 = (($2) + ($1913<<3)|0);
  $1915 = $1914;
  $1916 = $1915;
  HEAP32[$1916>>2] = $1911;
  $1917 = (($1915) + 4)|0;
  $1918 = $1917;
  HEAP32[$1918>>2] = $1912;
  $1919 = (_rotr64_63($1863,$1864,19)|0);
  $1920 = tempRet0;
  $1921 = (_rotr64_63($1863,$1864,61)|0);
  $1922 = tempRet0;
  $1923 = $1919 ^ $1921;
  $1924 = $1920 ^ $1922;
  $1925 = (_bitshift64Lshr(($1863|0),($1864|0),6)|0);
  $1926 = tempRet0;
  $1927 = $1923 ^ $1925;
  $1928 = $1924 ^ $1926;
  $1929 = (($1030) + 9)|0;
  $1930 = (($2) + ($1929<<3)|0);
  $1931 = $1930;
  $1932 = $1931;
  $1933 = HEAP32[$1932>>2]|0;
  $1934 = (($1931) + 4)|0;
  $1935 = $1934;
  $1936 = HEAP32[$1935>>2]|0;
  $1937 = (_i64Add(($1927|0),($1928|0),($1933|0),($1936|0))|0);
  $1938 = tempRet0;
  $1939 = $1114;
  $1940 = $1939;
  $1941 = HEAP32[$1940>>2]|0;
  $1942 = (($1939) + 4)|0;
  $1943 = $1942;
  $1944 = HEAP32[$1943>>2]|0;
  $1945 = (_rotr64_63($1941,$1944,1)|0);
  $1946 = tempRet0;
  $1947 = (_rotr64_63($1941,$1944,8)|0);
  $1948 = tempRet0;
  $1949 = $1945 ^ $1947;
  $1950 = $1946 ^ $1948;
  $1951 = (_bitshift64Lshr(($1941|0),($1944|0),7)|0);
  $1952 = tempRet0;
  $1953 = $1949 ^ $1951;
  $1954 = $1950 ^ $1952;
  $1955 = (_i64Add(($1937|0),($1938|0),($1953|0),($1954|0))|0);
  $1956 = tempRet0;
  $1957 = (_i64Add(($1955|0),($1956|0),($1895|0),($1898|0))|0);
  $1958 = tempRet0;
  $1959 = (($1030) + 16)|0;
  $1960 = (($2) + ($1959<<3)|0);
  $1961 = $1960;
  $1962 = $1961;
  HEAP32[$1962>>2] = $1957;
  $1963 = (($1961) + 4)|0;
  $1964 = $1963;
  HEAP32[$1964>>2] = $1958;
  $1965 = (_rotr64_63($1911,$1912,19)|0);
  $1966 = tempRet0;
  $1967 = (_rotr64_63($1911,$1912,61)|0);
  $1968 = tempRet0;
  $1969 = $1965 ^ $1967;
  $1970 = $1966 ^ $1968;
  $1971 = (_bitshift64Lshr(($1911|0),($1912|0),6)|0);
  $1972 = tempRet0;
  $1973 = $1969 ^ $1971;
  $1974 = $1970 ^ $1972;
  $1975 = (($1113) + 9)|0;
  $1976 = (($2) + ($1975<<3)|0);
  $1977 = $1976;
  $1978 = $1977;
  $1979 = HEAP32[$1978>>2]|0;
  $1980 = (($1977) + 4)|0;
  $1981 = $1980;
  $1982 = HEAP32[$1981>>2]|0;
  $1983 = (_i64Add(($1973|0),($1974|0),($1979|0),($1982|0))|0);
  $1984 = tempRet0;
  $1985 = (($1113) + 1)|0;
  $1986 = (($2) + ($1985<<3)|0);
  $1987 = $1986;
  $1988 = $1987;
  $1989 = HEAP32[$1988>>2]|0;
  $1990 = (($1987) + 4)|0;
  $1991 = $1990;
  $1992 = HEAP32[$1991>>2]|0;
  $1993 = (_rotr64_63($1989,$1992,1)|0);
  $1994 = tempRet0;
  $1995 = (_rotr64_63($1989,$1992,8)|0);
  $1996 = tempRet0;
  $1997 = $1993 ^ $1995;
  $1998 = $1994 ^ $1996;
  $1999 = (_bitshift64Lshr(($1989|0),($1992|0),7)|0);
  $2000 = tempRet0;
  $2001 = $1997 ^ $1999;
  $2002 = $1998 ^ $2000;
  $2003 = (_i64Add(($1983|0),($1984|0),($2001|0),($2002|0))|0);
  $2004 = tempRet0;
  $2005 = (_i64Add(($2003|0),($2004|0),($1941|0),($1944|0))|0);
  $2006 = tempRet0;
  $2007 = (($1113) + 16)|0;
  $2008 = (($2) + ($2007<<3)|0);
  $2009 = $2008;
  $2010 = $2009;
  HEAP32[$2010>>2] = $2005;
  $2011 = (($2009) + 4)|0;
  $2012 = $2011;
  HEAP32[$2012>>2] = $2006;
  $2013 = (_rotr64_63($1957,$1958,19)|0);
  $2014 = tempRet0;
  $2015 = (_rotr64_63($1957,$1958,61)|0);
  $2016 = tempRet0;
  $2017 = $2013 ^ $2015;
  $2018 = $2014 ^ $2016;
  $2019 = (_bitshift64Lshr(($1957|0),($1958|0),6)|0);
  $2020 = tempRet0;
  $2021 = $2017 ^ $2019;
  $2022 = $2018 ^ $2020;
  $2023 = (($1196) + 9)|0;
  $2024 = (($2) + ($2023<<3)|0);
  $2025 = $2024;
  $2026 = $2025;
  $2027 = HEAP32[$2026>>2]|0;
  $2028 = (($2025) + 4)|0;
  $2029 = $2028;
  $2030 = HEAP32[$2029>>2]|0;
  $2031 = (_i64Add(($2021|0),($2022|0),($2027|0),($2030|0))|0);
  $2032 = tempRet0;
  $2033 = $1280;
  $2034 = $2033;
  $2035 = HEAP32[$2034>>2]|0;
  $2036 = (($2033) + 4)|0;
  $2037 = $2036;
  $2038 = HEAP32[$2037>>2]|0;
  $2039 = (_rotr64_63($2035,$2038,1)|0);
  $2040 = tempRet0;
  $2041 = (_rotr64_63($2035,$2038,8)|0);
  $2042 = tempRet0;
  $2043 = $2039 ^ $2041;
  $2044 = $2040 ^ $2042;
  $2045 = (_bitshift64Lshr(($2035|0),($2038|0),7)|0);
  $2046 = tempRet0;
  $2047 = $2043 ^ $2045;
  $2048 = $2044 ^ $2046;
  $2049 = (_i64Add(($2031|0),($2032|0),($2047|0),($2048|0))|0);
  $2050 = tempRet0;
  $2051 = (_i64Add(($2049|0),($2050|0),($1989|0),($1992|0))|0);
  $2052 = tempRet0;
  $2053 = (($1196) + 16)|0;
  $2054 = (($2) + ($2053<<3)|0);
  $2055 = $2054;
  $2056 = $2055;
  HEAP32[$2056>>2] = $2051;
  $2057 = (($2055) + 4)|0;
  $2058 = $2057;
  HEAP32[$2058>>2] = $2052;
  $2059 = (_rotr64_63($2005,$2006,19)|0);
  $2060 = tempRet0;
  $2061 = (_rotr64_63($2005,$2006,61)|0);
  $2062 = tempRet0;
  $2063 = $2059 ^ $2061;
  $2064 = $2060 ^ $2062;
  $2065 = (_bitshift64Lshr(($2005|0),($2006|0),6)|0);
  $2066 = tempRet0;
  $2067 = $2063 ^ $2065;
  $2068 = $2064 ^ $2066;
  $2069 = (($1279) + 9)|0;
  $2070 = (($2) + ($2069<<3)|0);
  $2071 = $2070;
  $2072 = $2071;
  $2073 = HEAP32[$2072>>2]|0;
  $2074 = (($2071) + 4)|0;
  $2075 = $2074;
  $2076 = HEAP32[$2075>>2]|0;
  $2077 = (_i64Add(($2067|0),($2068|0),($2073|0),($2076|0))|0);
  $2078 = tempRet0;
  $2079 = (($1279) + 1)|0;
  $2080 = (($2) + ($2079<<3)|0);
  $2081 = $2080;
  $2082 = $2081;
  $2083 = HEAP32[$2082>>2]|0;
  $2084 = (($2081) + 4)|0;
  $2085 = $2084;
  $2086 = HEAP32[$2085>>2]|0;
  $2087 = (_rotr64_63($2083,$2086,1)|0);
  $2088 = tempRet0;
  $2089 = (_rotr64_63($2083,$2086,8)|0);
  $2090 = tempRet0;
  $2091 = $2087 ^ $2089;
  $2092 = $2088 ^ $2090;
  $2093 = (_bitshift64Lshr(($2083|0),($2086|0),7)|0);
  $2094 = tempRet0;
  $2095 = $2091 ^ $2093;
  $2096 = $2092 ^ $2094;
  $2097 = (_i64Add(($2077|0),($2078|0),($2095|0),($2096|0))|0);
  $2098 = tempRet0;
  $2099 = (_i64Add(($2097|0),($2098|0),($2035|0),($2038|0))|0);
  $2100 = tempRet0;
  $2101 = (($1279) + 16)|0;
  $2102 = (($2) + ($2101<<3)|0);
  $2103 = $2102;
  $2104 = $2103;
  HEAP32[$2104>>2] = $2099;
  $2105 = (($2103) + 4)|0;
  $2106 = $2105;
  HEAP32[$2106>>2] = $2100;
  $$0 = $1395;
 }
 while(1) {
  $exitcond = ($$1|0)==(8);
  if ($exitcond) {
   break;
  }
  $2107 = (($3) + ($$1<<3)|0);
  $2108 = $2107;
  $2109 = $2108;
  $2110 = HEAP32[$2109>>2]|0;
  $2111 = (($2108) + 4)|0;
  $2112 = $2111;
  $2113 = HEAP32[$2112>>2]|0;
  $2114 = (($0) + ($$1<<3)|0);
  $2115 = $2114;
  $2116 = $2115;
  $2117 = HEAP32[$2116>>2]|0;
  $2118 = (($2115) + 4)|0;
  $2119 = $2118;
  $2120 = HEAP32[$2119>>2]|0;
  $2121 = (_i64Add(($2117|0),($2120|0),($2110|0),($2113|0))|0);
  $2122 = tempRet0;
  $2123 = $2114;
  $2124 = $2123;
  HEAP32[$2124>>2] = $2121;
  $2125 = (($2123) + 4)|0;
  $2126 = $2125;
  HEAP32[$2126>>2] = $2122;
  $2127 = (($$1) + 1)|0;
  $$1 = $2127;
 }
 return;
}
function _be64dec_vect($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(16);
  if ($exitcond) {
   break;
  }
  $2 = $$0 << 3;
  $3 = (($1) + ($2)|0);
  $4 = (_load64_be($3)|0);
  $5 = tempRet0;
  $6 = (($0) + ($$0<<3)|0);
  $7 = $6;
  $8 = $7;
  HEAP32[$8>>2] = $4;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = $5;
  $11 = (($$0) + 1)|0;
  $$0 = $11;
 }
 return;
}
function _rotr64_63($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_bitshift64Lshr(($0|0),($1|0),($2|0))|0);
 $4 = tempRet0;
 $5 = (64 - ($2))|0;
 $6 = (_bitshift64Shl(($0|0),($1|0),($5|0))|0);
 $7 = tempRet0;
 $8 = $3 | $6;
 $9 = $4 | $7;
 tempRet0 = ($9);
 return ($8|0);
}
function _load64_be($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 7|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = ((($0)) + 6|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (_bitshift64Shl(($6|0),0,8)|0);
 $8 = tempRet0;
 $9 = $3 | $7;
 $10 = ((($0)) + 5|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (_bitshift64Shl(($12|0),0,16)|0);
 $14 = tempRet0;
 $15 = $9 | $13;
 $16 = $8 | $14;
 $17 = ((($0)) + 4|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = (_bitshift64Shl(($19|0),0,24)|0);
 $21 = tempRet0;
 $22 = $15 | $20;
 $23 = $16 | $21;
 $24 = ((($0)) + 3|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $23 | $26;
 $28 = ((($0)) + 2|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (_bitshift64Shl(($30|0),0,40)|0);
 $32 = tempRet0;
 $33 = $22 | $31;
 $34 = $27 | $32;
 $35 = ((($0)) + 1|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = (_bitshift64Shl(($37|0),0,48)|0);
 $39 = tempRet0;
 $40 = $33 | $38;
 $41 = $34 | $39;
 $42 = HEAP8[$0>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,56)|0);
 $45 = tempRet0;
 $46 = $40 | $44;
 $47 = $41 | $45;
 tempRet0 = ($47);
 return ($46|0);
}
function _crypto_hash_sha512_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 704|0;
 $2 = sp_a;
 _SHA512_Pad($0,$2);
 _be64enc_vect($1,$0,64);
 _sodium_memzero($2,704);
 _sodium_memzero($0,208);
 STACKTOP = sp;return 0;
}
function _SHA512_Pad($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$phi3Z2D = 0, $$pre$phi5Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0;
 var stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_bitshift64Lshr(($5|0),($8|0),3)|0);
 $10 = tempRet0;
 $11 = $9 & 127;
 $12 = (0)<(0);
 $13 = ($11>>>0)<(112);
 $14 = (0)==(0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 if ($16) {
  $19 = (_i64Subtract(112,0,($11|0),0)|0);
  $20 = tempRet0;
  $22 = 0;$24 = 0;
  while(1) {
   $21 = ($22>>>0)<($20>>>0);
   $23 = ($24>>>0)<($19>>>0);
   $25 = ($22|0)==($20|0);
   $26 = $25 & $23;
   $27 = $21 | $26;
   if (!($27)) {
    break;
   }
   $28 = (34018 + ($24)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = (_i64Add(($11|0),0,($24|0),($22|0))|0);
   $31 = tempRet0;
   $32 = (((($0)) + 80|0) + ($30)|0);
   HEAP8[$32>>0] = $29;
   $33 = (_i64Add(($24|0),($22|0),1,0)|0);
   $34 = tempRet0;
   $22 = $34;$24 = $33;
  }
  $$pre2 = ((($0)) + 80|0);
  $$pre4 = ((($1)) + 640|0);
  $$pre$phi3Z2D = $$pre2;$$pre$phi5Z2D = $$pre4;$$pre$phiZ2D = $0;
  $51 = ((($0)) + 192|0);
  $52 = ((($0)) + 64|0);
  _be64enc_vect($51,$52,16);
  _SHA512_Transform($$pre$phiZ2D,$$pre$phi3Z2D,$1,$$pre$phi5Z2D);
  return;
 } else {
  $17 = (_i64Subtract(128,0,($11|0),0)|0);
  $18 = tempRet0;
  $36 = 0;$38 = 0;
  while(1) {
   $35 = ($36>>>0)<($18>>>0);
   $37 = ($38>>>0)<($17>>>0);
   $39 = ($36|0)==($18|0);
   $40 = $39 & $37;
   $41 = $35 | $40;
   if (!($41)) {
    break;
   }
   $42 = (34018 + ($38)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = (_i64Add(($11|0),0,($38|0),($36|0))|0);
   $45 = tempRet0;
   $46 = (((($0)) + 80|0) + ($44)|0);
   HEAP8[$46>>0] = $43;
   $47 = (_i64Add(($38|0),($36|0),1,0)|0);
   $48 = tempRet0;
   $36 = $48;$38 = $47;
  }
  $49 = ((($0)) + 80|0);
  $50 = ((($1)) + 640|0);
  _SHA512_Transform($0,$49,$1,$50);
  dest=$49; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $$pre$phi3Z2D = $49;$$pre$phi5Z2D = $50;$$pre$phiZ2D = $0;
  $51 = ((($0)) + 192|0);
  $52 = ((($0)) + 64|0);
  _be64enc_vect($51,$52,16);
  _SHA512_Transform($$pre$phiZ2D,$$pre$phi3Z2D,$1,$$pre$phi5Z2D);
  return;
 }
}
function _be64enc_vect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $2 >>> 3;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==($3|0);
  if ($exitcond) {
   break;
  }
  $4 = $$0 << 3;
  $5 = (($0) + ($4)|0);
  $6 = (($1) + ($$0<<3)|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  _store64_be_67($5,$9,$12);
  $13 = (($$0) + 1)|0;
  $$0 = $13;
 }
 return;
}
function _store64_be_67($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $4 = ((($0)) + 7|0);
 HEAP8[$4>>0] = $3;
 $5 = (_bitshift64Lshr(($1|0),($2|0),8)|0);
 $6 = tempRet0;
 $7 = $5&255;
 $8 = ((($0)) + 6|0);
 HEAP8[$8>>0] = $7;
 $9 = (_bitshift64Lshr(($1|0),($2|0),16)|0);
 $10 = tempRet0;
 $11 = $9&255;
 $12 = ((($0)) + 5|0);
 HEAP8[$12>>0] = $11;
 $13 = (_bitshift64Lshr(($1|0),($2|0),24)|0);
 $14 = tempRet0;
 $15 = $13&255;
 $16 = ((($0)) + 4|0);
 HEAP8[$16>>0] = $15;
 $17 = $2&255;
 $18 = ((($0)) + 3|0);
 HEAP8[$18>>0] = $17;
 $19 = (_bitshift64Lshr(($1|0),($2|0),40)|0);
 $20 = tempRet0;
 $21 = $19&255;
 $22 = ((($0)) + 2|0);
 HEAP8[$22>>0] = $21;
 $23 = (_bitshift64Lshr(($1|0),($2|0),48)|0);
 $24 = tempRet0;
 $25 = $23&255;
 $26 = ((($0)) + 1|0);
 HEAP8[$26>>0] = $25;
 $27 = (_bitshift64Lshr(($1|0),($2|0),56)|0);
 $28 = tempRet0;
 $29 = $27&255;
 HEAP8[$0>>0] = $29;
 return;
}
function _crypto_hash_sha512($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 208|0;
 $4 = sp_a;
 (_crypto_hash_sha512_init($4)|0);
 (_crypto_hash_sha512_update($4,$1,$2,$3)|0);
 (_crypto_hash_sha512_final($4,$0)|0);
 STACKTOP = sp;return 0;
}
function _crypto_kdf_blake2b_bytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_kdf_blake2b_bytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_kdf_blake2b_contextbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_kdf_blake2b_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_kdf_blake2b_derive_from_key($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp_a;
 $7 = sp_a + 16|0;
 $8 = $4;
 $9 = $8;
 $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAPU8[$12>>0]|(HEAPU8[$12+1>>0]<<8)|(HEAPU8[$12+2>>0]<<16)|(HEAPU8[$12+3>>0]<<24);
 $14 = $6;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = ((($6)) + 8|0);
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 _store64_le_71($7,$2,$3);
 $23 = ((($7)) + 8|0);
 $24 = $23;
 $25 = $24;
 HEAP8[$25>>0]=0&255;HEAP8[$25+1>>0]=(0>>8)&255;HEAP8[$25+2>>0]=(0>>16)&255;HEAP8[$25+3>>0]=0>>24;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP8[$27>>0]=0&255;HEAP8[$27+1>>0]=(0>>8)&255;HEAP8[$27+2>>0]=(0>>16)&255;HEAP8[$27+3>>0]=0>>24;
 $$off = (($1) + -16)|0;
 $28 = ($$off>>>0)>(48);
 if ($28) {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $29 = (_crypto_generichash_blake2b_salt_personal($0,$1,0,0,0,$5,32,$7,$6)|0);
  $$0 = $29;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _store64_le_71($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 HEAP8[$4>>0]=$1&255;HEAP8[$4+1>>0]=($1>>8)&255;HEAP8[$4+2>>0]=($1>>16)&255;HEAP8[$4+3>>0]=$1>>24;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP8[$6>>0]=$2&255;HEAP8[$6+1>>0]=($2>>8)&255;HEAP8[$6+2>>0]=($2>>16)&255;HEAP8[$6+3>>0]=$2>>24;
 return;
}
function _crypto_kdf_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34146|0);
}
function _crypto_kdf_bytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_kdf_bytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_kdf_contextbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_kdf_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_kdf_derive_from_key($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_kdf_blake2b_derive_from_key($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_kdf_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_kx_seed_keypair($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_generichash($1,32,$2,32,0,0,0)|0);
 $3 = (_crypto_scalarmult_base($0,$1)|0);
 return ($3|0);
}
function _crypto_kx_keypair($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($1,32);
 $2 = (_crypto_scalarmult_base($0,$1)|0);
 return ($2|0);
}
function _crypto_kx_client_session_keys($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$03 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 480|0;
 $5 = sp_a;
 $6 = sp_a + 448|0;
 $7 = sp_a + 384|0;
 $8 = ($0|0)==(0|0);
 $$ = $8 ? $1 : $0;
 $9 = ($1|0)==(0|0);
 $$02 = $9 ? $$ : $1;
 $10 = ($$|0)==(0|0);
 if ($10) {
  _sodium_misuse();
  // unreachable;
 }
 $11 = (_crypto_scalarmult($6,$3,$4)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_crypto_generichash_init($5,0,0,64)|0);
 (_crypto_generichash_update($5,$6,32,0)|0);
 _sodium_memzero($6,32);
 (_crypto_generichash_update($5,$2,32,0)|0);
 (_crypto_generichash_update($5,$4,32,0)|0);
 (_crypto_generichash_final($5,$7,64)|0);
 _sodium_memzero($5,384);
 $$03 = 0;
 while(1) {
  $exitcond = ($$03|0)==(32);
  if ($exitcond) {
   break;
  }
  $13 = (($7) + ($$03)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = (($$) + ($$03)|0);
  HEAP8[$15>>0] = $14;
  $16 = (($$03) + 32)|0;
  $17 = (($7) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = (($$02) + ($$03)|0);
  HEAP8[$19>>0] = $18;
  $20 = (($$03) + 1)|0;
  $$03 = $20;
 }
 _sodium_memzero($7,64);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_kx_server_session_keys($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$03 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 480|0;
 $5 = sp_a;
 $6 = sp_a + 448|0;
 $7 = sp_a + 384|0;
 $8 = ($0|0)==(0|0);
 $$ = $8 ? $1 : $0;
 $9 = ($1|0)==(0|0);
 $$02 = $9 ? $$ : $1;
 $10 = ($$|0)==(0|0);
 if ($10) {
  _sodium_misuse();
  // unreachable;
 }
 $11 = (_crypto_scalarmult($6,$3,$4)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_crypto_generichash_init($5,0,0,64)|0);
 (_crypto_generichash_update($5,$6,32,0)|0);
 _sodium_memzero($6,32);
 (_crypto_generichash_update($5,$4,32,0)|0);
 (_crypto_generichash_update($5,$2,32,0)|0);
 (_crypto_generichash_final($5,$7,64)|0);
 _sodium_memzero($5,384);
 $$03 = 0;
 while(1) {
  $exitcond = ($$03|0)==(32);
  if ($exitcond) {
   break;
  }
  $13 = (($7) + ($$03)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = (($$02) + ($$03)|0);
  HEAP8[$15>>0] = $14;
  $16 = (($$03) + 32)|0;
  $17 = (($7) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = (($$) + ($$03)|0);
  HEAP8[$19>>0] = $18;
  $20 = (($$03) + 1)|0;
  $$03 = $20;
 }
 _sodium_memzero($7,64);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_kx_publickeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_kx_secretkeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_kx_seedbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_kx_sessionkeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_kx_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34154|0);
}
function _crypto_onetimeauth_statebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 256;
}
function _crypto_onetimeauth_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_onetimeauth_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_onetimeauth($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_crypto_onetimeauth_poly1305($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_onetimeauth_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_crypto_onetimeauth_poly1305_verify($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_onetimeauth_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_onetimeauth_poly1305_init($0,$1)|0);
 return ($2|0);
}
function _crypto_onetimeauth_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (_crypto_onetimeauth_poly1305_update($0,$1,$2,$3)|0);
 return ($4|0);
}
function _crypto_onetimeauth_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_onetimeauth_poly1305_final($0,$1)|0);
 return ($2|0);
}
function _crypto_onetimeauth_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34168|0);
}
function _crypto_onetimeauth_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_onetimeauth_poly1305($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_crypto_onetimeauth_poly1305_donna($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_onetimeauth_poly1305_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_crypto_onetimeauth_poly1305_donna_verify($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_onetimeauth_poly1305_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_onetimeauth_poly1305_donna_init($0,$1)|0);
 return ($2|0);
}
function _crypto_onetimeauth_poly1305_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (_crypto_onetimeauth_poly1305_donna_update($0,$1,$2,$3)|0);
 return ($4|0);
}
function _crypto_onetimeauth_poly1305_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_onetimeauth_poly1305_donna_final($0,$1)|0);
 return ($2|0);
}
function _crypto_onetimeauth_poly1305_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_onetimeauth_poly1305_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_onetimeauth_poly1305_statebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 256;
}
function _crypto_onetimeauth_poly1305_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_onetimeauth_poly1305_donna($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 96|0;
 $5 = sp_a;
 _poly1305_init($5,$4);
 _poly1305_update($5,$1,$2,$3);
 _poly1305_finish($5,$0);
 STACKTOP = sp;return 0;
}
function _crypto_onetimeauth_poly1305_donna_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp_a;
 (_crypto_onetimeauth_poly1305_donna($5,$1,$2,$3,$4)|0);
 $6 = (_crypto_verify_16($0,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _crypto_onetimeauth_poly1305_donna_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _poly1305_init($0,$1);
 return 0;
}
function _crypto_onetimeauth_poly1305_donna_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _poly1305_update($0,$1,$2,$3);
 return 0;
}
function _crypto_onetimeauth_poly1305_donna_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _poly1305_finish($0,$1);
 return 0;
}
function _poly1305_finish($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fold = 0, $fold1 = 0, $fold2 = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==(0);
 $10 = ($8|0)==(0);
 $11 = $9 & $10;
 if (!($11)) {
  $$sink = 1;$13 = $5;$14 = $8;
  while(1) {
   $12 = (((($0)) + 64|0) + ($13)|0);
   HEAP8[$12>>0] = $$sink;
   $15 = (_i64Add(($13|0),($14|0),1,0)|0);
   $16 = tempRet0;
   $17 = ($16>>>0)<(0);
   $18 = ($15>>>0)<(16);
   $19 = ($16|0)==(0);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$sink = 0;$13 = $15;$14 = $16;
   } else {
    break;
   }
  }
  $22 = ((($0)) + 80|0);
  HEAP8[$22>>0] = 1;
  $23 = ((($0)) + 64|0);
  _poly1305_blocks($0,$23,16,0);
 }
 $24 = ((($0)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($0)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($0)) + 36|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $27 >>> 26;
 $35 = $27 & 67108863;
 $36 = (($29) + ($34))|0;
 $37 = $36 >>> 26;
 $38 = $36 & 67108863;
 $39 = (($31) + ($37))|0;
 $40 = $39 >>> 26;
 $41 = $39 & 67108863;
 $42 = (($33) + ($40))|0;
 $43 = $42 >>> 26;
 $44 = $42 & 67108863;
 $45 = ($43*5)|0;
 $46 = (($25) + ($45))|0;
 $47 = $46 >>> 26;
 $48 = $46 & 67108863;
 $49 = (($35) + ($47))|0;
 $50 = (($48) + 5)|0;
 $51 = $50 >>> 26;
 $fold = (($46) + 5)|0;
 $52 = $fold & 67108863;
 $53 = (($49) + ($51))|0;
 $54 = $53 >>> 26;
 $55 = $53 & 67108863;
 $56 = (($38) + ($54))|0;
 $57 = $56 >>> 26;
 $fold1 = (($36) + ($54))|0;
 $58 = $fold1 & 67108863;
 $59 = (($41) + ($57))|0;
 $60 = $59 >>> 26;
 $fold2 = (($39) + ($57))|0;
 $61 = $fold2 & 67108863;
 $62 = (($44) + ($60))|0;
 $63 = (($62) + -67108864)|0;
 $64 = $63 >>> 31;
 $65 = (($64) + -1)|0;
 $66 = $52 & $65;
 $67 = $55 & $65;
 $68 = $58 & $65;
 $69 = $61 & $65;
 $70 = $63 & $65;
 $71 = $63 >> 31;
 $72 = $48 & $71;
 $73 = $72 | $66;
 $74 = $49 & $71;
 $75 = $74 | $67;
 $76 = $38 & $71;
 $77 = $76 | $68;
 $78 = $41 & $71;
 $79 = $78 | $69;
 $80 = $42 & $71;
 $81 = $80 | $70;
 $82 = $75 << 26;
 $83 = $73 | $82;
 $84 = $75 >>> 6;
 $85 = $77 << 20;
 $86 = $84 | $85;
 $87 = $77 >>> 12;
 $88 = $79 << 14;
 $89 = $87 | $88;
 $90 = $79 >>> 18;
 $91 = $81 << 8;
 $92 = $90 | $91;
 $93 = ((($0)) + 40|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (_i64Add(($83|0),0,($94|0),0)|0);
 $96 = tempRet0;
 $97 = ((($0)) + 44|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (_i64Add(($86|0),0,($98|0),0)|0);
 $100 = tempRet0;
 $101 = (_i64Add(($99|0),($100|0),($96|0),0)|0);
 $102 = tempRet0;
 $103 = ((($0)) + 48|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (_i64Add(($89|0),0,($104|0),0)|0);
 $106 = tempRet0;
 $107 = (_i64Add(($105|0),($106|0),($102|0),0)|0);
 $108 = tempRet0;
 $109 = ((($0)) + 52|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (_i64Add(($92|0),0,($110|0),0)|0);
 $112 = tempRet0;
 $113 = (_i64Add(($111|0),($112|0),($108|0),0)|0);
 $114 = tempRet0;
 _store32_le_87($1,$95);
 $115 = ((($1)) + 4|0);
 _store32_le_87($115,$101);
 $116 = ((($1)) + 8|0);
 _store32_le_87($116,$107);
 $117 = ((($1)) + 12|0);
 _store32_le_87($117,$113);
 _sodium_memzero($0,88);
 return;
}
function _poly1305_blocks($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fold = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 80|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 $7 = $6 ? 0 : 16777216;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($10*5)|0;
 $18 = ($12*5)|0;
 $19 = ($14*5)|0;
 $20 = ($16*5)|0;
 $21 = ((($0)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($0)) + 36|0);
 $30 = HEAP32[$29>>2]|0;
 $$0 = $30;$$01 = $1;$$03 = $28;$$04 = $26;$$05 = $24;$$06 = $22;$32 = $3;$34 = $2;
 while(1) {
  $31 = ($32>>>0)>(0);
  $33 = ($34>>>0)>(15);
  $35 = ($32|0)==(0);
  $36 = $35 & $33;
  $37 = $31 | $36;
  if (!($37)) {
   break;
  }
  $38 = (_load32_le_88($$01)|0);
  $39 = $38 & 67108863;
  $40 = (($$06) + ($39))|0;
  $41 = ((($$01)) + 3|0);
  $42 = (_load32_le_88($41)|0);
  $43 = $42 >>> 2;
  $44 = $43 & 67108863;
  $45 = (($$05) + ($44))|0;
  $46 = ((($$01)) + 6|0);
  $47 = (_load32_le_88($46)|0);
  $48 = $47 >>> 4;
  $49 = $48 & 67108863;
  $50 = (($$04) + ($49))|0;
  $51 = ((($$01)) + 9|0);
  $52 = (_load32_le_88($51)|0);
  $53 = $52 >>> 6;
  $54 = (($$03) + ($53))|0;
  $55 = ((($$01)) + 12|0);
  $56 = (_load32_le_88($55)|0);
  $57 = $56 >>> 8;
  $58 = $57 | $7;
  $59 = (($$0) + ($58))|0;
  $60 = (___muldi3(($40|0),0,($8|0),0)|0);
  $61 = tempRet0;
  $62 = (___muldi3(($45|0),0,($20|0),0)|0);
  $63 = tempRet0;
  $64 = (_i64Add(($60|0),($61|0),($62|0),($63|0))|0);
  $65 = tempRet0;
  $66 = (___muldi3(($50|0),0,($19|0),0)|0);
  $67 = tempRet0;
  $68 = (_i64Add(($64|0),($65|0),($66|0),($67|0))|0);
  $69 = tempRet0;
  $70 = (___muldi3(($54|0),0,($18|0),0)|0);
  $71 = tempRet0;
  $72 = (_i64Add(($68|0),($69|0),($70|0),($71|0))|0);
  $73 = tempRet0;
  $74 = (___muldi3(($59|0),0,($17|0),0)|0);
  $75 = tempRet0;
  $76 = (_i64Add(($72|0),($73|0),($74|0),($75|0))|0);
  $77 = tempRet0;
  $78 = (___muldi3(($40|0),0,($10|0),0)|0);
  $79 = tempRet0;
  $80 = (___muldi3(($45|0),0,($8|0),0)|0);
  $81 = tempRet0;
  $82 = (_i64Add(($78|0),($79|0),($80|0),($81|0))|0);
  $83 = tempRet0;
  $84 = (___muldi3(($50|0),0,($20|0),0)|0);
  $85 = tempRet0;
  $86 = (_i64Add(($82|0),($83|0),($84|0),($85|0))|0);
  $87 = tempRet0;
  $88 = (___muldi3(($54|0),0,($19|0),0)|0);
  $89 = tempRet0;
  $90 = (_i64Add(($86|0),($87|0),($88|0),($89|0))|0);
  $91 = tempRet0;
  $92 = (___muldi3(($59|0),0,($18|0),0)|0);
  $93 = tempRet0;
  $94 = (_i64Add(($90|0),($91|0),($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = (___muldi3(($40|0),0,($12|0),0)|0);
  $97 = tempRet0;
  $98 = (___muldi3(($45|0),0,($10|0),0)|0);
  $99 = tempRet0;
  $100 = (_i64Add(($96|0),($97|0),($98|0),($99|0))|0);
  $101 = tempRet0;
  $102 = (___muldi3(($50|0),0,($8|0),0)|0);
  $103 = tempRet0;
  $104 = (_i64Add(($100|0),($101|0),($102|0),($103|0))|0);
  $105 = tempRet0;
  $106 = (___muldi3(($54|0),0,($20|0),0)|0);
  $107 = tempRet0;
  $108 = (_i64Add(($104|0),($105|0),($106|0),($107|0))|0);
  $109 = tempRet0;
  $110 = (___muldi3(($59|0),0,($19|0),0)|0);
  $111 = tempRet0;
  $112 = (_i64Add(($108|0),($109|0),($110|0),($111|0))|0);
  $113 = tempRet0;
  $114 = (___muldi3(($40|0),0,($14|0),0)|0);
  $115 = tempRet0;
  $116 = (___muldi3(($45|0),0,($12|0),0)|0);
  $117 = tempRet0;
  $118 = (_i64Add(($114|0),($115|0),($116|0),($117|0))|0);
  $119 = tempRet0;
  $120 = (___muldi3(($50|0),0,($10|0),0)|0);
  $121 = tempRet0;
  $122 = (_i64Add(($118|0),($119|0),($120|0),($121|0))|0);
  $123 = tempRet0;
  $124 = (___muldi3(($54|0),0,($8|0),0)|0);
  $125 = tempRet0;
  $126 = (_i64Add(($122|0),($123|0),($124|0),($125|0))|0);
  $127 = tempRet0;
  $128 = (___muldi3(($59|0),0,($20|0),0)|0);
  $129 = tempRet0;
  $130 = (_i64Add(($126|0),($127|0),($128|0),($129|0))|0);
  $131 = tempRet0;
  $132 = (___muldi3(($40|0),0,($16|0),0)|0);
  $133 = tempRet0;
  $134 = (___muldi3(($45|0),0,($14|0),0)|0);
  $135 = tempRet0;
  $136 = (_i64Add(($132|0),($133|0),($134|0),($135|0))|0);
  $137 = tempRet0;
  $138 = (___muldi3(($50|0),0,($12|0),0)|0);
  $139 = tempRet0;
  $140 = (_i64Add(($136|0),($137|0),($138|0),($139|0))|0);
  $141 = tempRet0;
  $142 = (___muldi3(($54|0),0,($10|0),0)|0);
  $143 = tempRet0;
  $144 = (_i64Add(($140|0),($141|0),($142|0),($143|0))|0);
  $145 = tempRet0;
  $146 = (___muldi3(($59|0),0,($8|0),0)|0);
  $147 = tempRet0;
  $148 = (_i64Add(($144|0),($145|0),($146|0),($147|0))|0);
  $149 = tempRet0;
  $150 = (_bitshift64Lshr(($76|0),($77|0),26)|0);
  $151 = tempRet0;
  $152 = $76 & 67108863;
  $153 = (_i64Add(($94|0),($95|0),($150|0),0)|0);
  $154 = tempRet0;
  $155 = (_bitshift64Lshr(($153|0),($154|0),26)|0);
  $156 = tempRet0;
  $157 = $153 & 67108863;
  $158 = (_i64Add(($112|0),($113|0),($155|0),0)|0);
  $159 = tempRet0;
  $160 = (_bitshift64Lshr(($158|0),($159|0),26)|0);
  $161 = tempRet0;
  $162 = $158 & 67108863;
  $163 = (_i64Add(($130|0),($131|0),($160|0),0)|0);
  $164 = tempRet0;
  $165 = (_bitshift64Lshr(($163|0),($164|0),26)|0);
  $166 = tempRet0;
  $167 = $163 & 67108863;
  $168 = (_i64Add(($148|0),($149|0),($165|0),0)|0);
  $169 = tempRet0;
  $170 = (_bitshift64Lshr(($168|0),($169|0),26)|0);
  $171 = tempRet0;
  $172 = $168 & 67108863;
  $173 = ($170*5)|0;
  $174 = (($152) + ($173))|0;
  $175 = $174 >>> 26;
  $fold = (($76) + ($173))|0;
  $176 = $fold & 67108863;
  $177 = (($157) + ($175))|0;
  $178 = ((($$01)) + 16|0);
  $179 = (_i64Add(($34|0),($32|0),-16,-1)|0);
  $180 = tempRet0;
  $$0 = $172;$$01 = $178;$$03 = $167;$$04 = $162;$$05 = $177;$$06 = $176;$32 = $180;$34 = $179;
 }
 HEAP32[$21>>2] = $$06;
 HEAP32[$23>>2] = $$05;
 HEAP32[$25>>2] = $$04;
 HEAP32[$27>>2] = $$03;
 HEAP32[$29>>2] = $$0;
 return;
}
function _store32_le_87($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 return;
}
function _load32_le_88($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 return ($1|0);
}
function _poly1305_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$01 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 56|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)==(0);
 $12 = ($10|0)==(0);
 $13 = $11 & $12;
 do {
  if ($13) {
   $$01 = $1;$69 = $3;$71 = $2;
  } else {
   $14 = (_i64Subtract(16,0,($7|0),($10|0))|0);
   $15 = tempRet0;
   $16 = ($15>>>0)>($3>>>0);
   $17 = ($14>>>0)>($2>>>0);
   $18 = ($15|0)==($3|0);
   $19 = $18 & $17;
   $20 = $16 | $19;
   $21 = $20 ? $2 : $14;
   $22 = $20 ? $3 : $15;
   $24 = 0;$26 = 0;
   while(1) {
    $23 = ($24>>>0)<($22>>>0);
    $25 = ($26>>>0)<($21>>>0);
    $27 = ($24|0)==($22|0);
    $28 = $27 & $25;
    $29 = $23 | $28;
    if (!($29)) {
     break;
    }
    $30 = (($1) + ($26)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $4;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($32) + 4)|0;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = (_i64Add(($34|0),($37|0),($26|0),($24|0))|0);
    $39 = tempRet0;
    $40 = (((($0)) + 64|0) + ($38)|0);
    HEAP8[$40>>0] = $31;
    $41 = (_i64Add(($26|0),($24|0),1,0)|0);
    $42 = tempRet0;
    $24 = $42;$26 = $41;
   }
   $43 = $4;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + 4)|0;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (_i64Add(($45|0),($48|0),($21|0),($22|0))|0);
   $50 = tempRet0;
   $51 = $4;
   $52 = $51;
   HEAP32[$52>>2] = $49;
   $53 = (($51) + 4)|0;
   $54 = $53;
   HEAP32[$54>>2] = $50;
   $55 = ($50>>>0)<(0);
   $56 = ($49>>>0)<(16);
   $57 = ($50|0)==(0);
   $58 = $57 & $56;
   $59 = $55 | $58;
   if ($59) {
    return;
   } else {
    $60 = (($1) + ($21)|0);
    $61 = (_i64Subtract(($2|0),($3|0),($21|0),($22|0))|0);
    $62 = tempRet0;
    $63 = ((($0)) + 64|0);
    _poly1305_blocks($0,$63,16,0);
    $64 = $4;
    $65 = $64;
    HEAP32[$65>>2] = 0;
    $66 = (($64) + 4)|0;
    $67 = $66;
    HEAP32[$67>>2] = 0;
    $$01 = $60;$69 = $62;$71 = $61;
    break;
   }
  }
 } while(0);
 $68 = ($69>>>0)>(0);
 $70 = ($71>>>0)>(15);
 $72 = ($69|0)==(0);
 $73 = $72 & $70;
 $74 = $68 | $73;
 if ($74) {
  $75 = $71 & -16;
  _poly1305_blocks($0,$$01,$75,$69);
  $76 = (($$01) + ($75)|0);
  $77 = (_i64Subtract(($71|0),($69|0),($75|0),($69|0))|0);
  $78 = tempRet0;
  $$1 = $76;$80 = $77;$82 = $78;
 } else {
  $$1 = $$01;$80 = $71;$82 = $69;
 }
 $79 = ($80|0)==(0);
 $81 = ($82|0)==(0);
 $83 = $79 & $81;
 if ($83) {
  return;
 } else {
  $85 = 0;$87 = 0;
 }
 while(1) {
  $84 = ($85>>>0)<($82>>>0);
  $86 = ($87>>>0)<($80>>>0);
  $88 = ($85|0)==($82|0);
  $89 = $88 & $86;
  $90 = $84 | $89;
  if (!($90)) {
   break;
  }
  $91 = (($$1) + ($87)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $4;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = (_i64Add(($95|0),($98|0),($87|0),($85|0))|0);
  $100 = tempRet0;
  $101 = (((($0)) + 64|0) + ($99)|0);
  HEAP8[$101>>0] = $92;
  $102 = (_i64Add(($87|0),($85|0),1,0)|0);
  $103 = tempRet0;
  $85 = $103;$87 = $102;
 }
 $104 = $4;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 4)|0;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (_i64Add(($106|0),($109|0),($80|0),($82|0))|0);
 $111 = tempRet0;
 $112 = $4;
 $113 = $112;
 HEAP32[$113>>2] = $110;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $111;
 return;
}
function _poly1305_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_load32_le_88($1)|0);
 $3 = $2 & 67108863;
 HEAP32[$0>>2] = $3;
 $4 = ((($1)) + 3|0);
 $5 = (_load32_le_88($4)|0);
 $6 = $5 >>> 2;
 $7 = $6 & 67108611;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 6|0);
 $10 = (_load32_le_88($9)|0);
 $11 = $10 >>> 4;
 $12 = $11 & 67092735;
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($1)) + 9|0);
 $15 = (_load32_le_88($14)|0);
 $16 = $15 >>> 6;
 $17 = $16 & 66076671;
 $18 = ((($0)) + 12|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($1)) + 12|0);
 $20 = (_load32_le_88($19)|0);
 $21 = $20 >>> 8;
 $22 = $21 & 1048575;
 $23 = ((($0)) + 16|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($0)) + 20|0);
 $25 = ((($1)) + 16|0);
 ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;HEAP32[$24+16>>2]=0|0;
 $26 = (_load32_le_88($25)|0);
 $27 = ((($0)) + 40|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($1)) + 20|0);
 $29 = (_load32_le_88($28)|0);
 $30 = ((($0)) + 44|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($1)) + 24|0);
 $32 = (_load32_le_88($31)|0);
 $33 = ((($0)) + 48|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($1)) + 28|0);
 $35 = (_load32_le_88($34)|0);
 $36 = ((($0)) + 52|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($0)) + 56|0);
 $38 = $37;
 $39 = $38;
 HEAP32[$39>>2] = 0;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = 0;
 $42 = ((($0)) + 80|0);
 HEAP8[$42>>0] = 0;
 return;
}
function _free_instance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $1 & 4;
 _clear_memory($0,$2);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 HEAP32[$3>>2] = 0;
 $5 = HEAP32[$0>>2]|0;
 _free_memory($5);
 HEAP32[$0>>2] = 0;
 return;
}
function _clear_memory($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 << 10;
  _sodium_memzero($6,$9);
 }
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 3;
 _sodium_memzero($11,$15);
 return;
}
function _free_memory($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   _free($2);
  }
 }
 _free($0);
 return;
}
function _finalize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 2048|0;
 $2 = sp_a;
 $3 = sp_a + 1024|0;
 $4 = ($0|0)==(0|0);
 $5 = ($1|0)==(0|0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + ($10<<10)|0);
 $12 = ((($11)) + -1024|0);
 _copy_block($2,$12);
 $13 = ((($1)) + 24|0);
 $$0 = 1;
 while(1) {
  $14 = HEAP32[$13>>2]|0;
  $15 = ($$0>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$9>>2]|0;
  $17 = Math_imul($$0, $16)|0;
  $18 = (($16) + -1)|0;
  $19 = (($17) + ($18))|0;
  $20 = HEAP32[$1>>2]|0;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<10)|0);
  _xor_block($2,$23);
  $24 = (($$0) + 1)|0;
  $$0 = $24;
 }
 _store_block($3,$2);
 $25 = HEAP32[$0>>2]|0;
 $26 = ((($0)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 _blake2b_long($25,$27,$3,1024);
 _sodium_memzero($2,1024);
 _sodium_memzero($3,1024);
 $28 = ((($0)) + 56|0);
 $29 = HEAP32[$28>>2]|0;
 _free_instance($1,$29);
 STACKTOP = sp;return;
}
function _copy_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _memcpy(($0|0),($1|0),1024)|0;
 return;
}
function _xor_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(128);
  if ($exitcond) {
   break;
  }
  $2 = (($1) + ($$0<<3)|0);
  $3 = $2;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($0) + ($$0<<3)|0);
  $10 = $9;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = $12 ^ $5;
  $17 = $15 ^ $8;
  $18 = $9;
  $19 = $18;
  HEAP32[$19>>2] = $16;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = $17;
  $22 = (($$0) + 1)|0;
  $$0 = $22;
 }
 return;
}
function _store_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(128);
  if ($exitcond) {
   break;
  }
  $2 = $$0 << 3;
  $3 = (($0) + ($2)|0);
  $4 = (($1) + ($$0<<3)|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  _store64_le_89($3,$7,$10);
  $11 = (($$0) + 1)|0;
  $$0 = $11;
 }
 return;
}
function _store64_le_89($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 HEAP8[$4>>0]=$1&255;HEAP8[$4+1>>0]=($1>>8)&255;HEAP8[$4+2>>0]=($1>>16)&255;HEAP8[$4+3>>0]=$1>>24;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP8[$6>>0]=$2&255;HEAP8[$6+1>>0]=($2>>8)&255;HEAP8[$6+2>>0]=($2>>16)&255;HEAP8[$6+3>>0]=$2>>24;
 return;
}
function _index_alpha($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = ((($1)) + 8|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    $9 = ((($1)) + 12|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + -1)|0;
    $$3 = $11;
    break;
   }
   $12 = ($3|0)==(0);
   $13 = ((($0)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($1)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $7&255;
   $18 = Math_imul($17, $14)|0;
   if ($12) {
    $21 = ($16|0)==(0);
    $22 = $21 << 31 >> 31;
    $23 = (($18) + ($22))|0;
    $$3 = $23;
    break;
   } else {
    $19 = (($18) + ($16))|0;
    $20 = (($19) + -1)|0;
    $$3 = $20;
    break;
   }
  } else {
   $24 = ($3|0)==(0);
   $25 = ((($0)) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($0)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($1)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($26) - ($28))|0;
   if ($24) {
    $34 = ($30|0)==(0);
    $35 = $34 << 31 >> 31;
    $36 = (($31) + ($35))|0;
    $$3 = $36;
    break;
   } else {
    $32 = (($31) + ($30))|0;
    $33 = (($32) + -1)|0;
    $$3 = $33;
    break;
   }
  }
 } while(0);
 (___muldi3(($2|0),0,($2|0),0)|0);
 $37 = tempRet0;
 $38 = (($$3) + -1)|0;
 (___muldi3(($$3|0),0,($37|0),0)|0);
 $39 = tempRet0;
 $40 = (_i64Subtract(($38|0),0,($39|0),0)|0);
 $41 = tempRet0;
 if ($5) {
  $50 = 0;$51 = 0;
 } else {
  $42 = ((($1)) + 8|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = ($43<<24>>24)==(3);
  if ($44) {
   $50 = 0;$51 = 0;
  } else {
   $45 = $43&255;
   $46 = (($45) + 1)|0;
   $47 = ((($0)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = Math_imul($46, $48)|0;
   $50 = $49;$51 = 0;
  }
 }
 $52 = (_i64Add(($50|0),($51|0),($40|0),($41|0))|0);
 $53 = tempRet0;
 $54 = ((($0)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (___uremdi3(($52|0),($53|0),($55|0),0)|0);
 $57 = tempRet0;
 return ($56|0);
}
function _fill_memory_blocks($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp_a + 16|0;
 $1 = sp_a;
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ((($0)) + 8|0);
 $7 = ((($1)) + 4|0);
 $8 = ((($1)) + 8|0);
 $9 = ((($1)) + 12|0);
 $$01 = 0;$18 = $4;
 while(1) {
  $10 = HEAP32[$6>>2]|0;
  $11 = ($$01>>>0)<($10>>>0);
  if ($11) {
   $$02 = 0;$19 = $18;
  } else {
   break;
  }
  while(1) {
   $exitcond = ($$02|0)==(4);
   if ($exitcond) {
    break;
   }
   $12 = $$02&255;
   $$0 = 0;$14 = $19;
   while(1) {
    $13 = ($$0>>>0)<($14>>>0);
    if (!($13)) {
     break;
    }
    HEAP32[$1>>2] = $$01;
    HEAP32[$7>>2] = $$0;
    HEAP8[$8>>0] = $12;
    HEAP32[$9>>2] = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
    _fill_segment_ref($0,$$byval_copy);
    $15 = (($$0) + 1)|0;
    $$pre = HEAP32[$3>>2]|0;
    $$0 = $15;$14 = $$pre;
   }
   $16 = (($$02) + 1)|0;
   $$02 = $16;$19 = $14;
  }
  $17 = (($$01) + 1)|0;
  $$01 = $17;$18 = $19;
 }
 STACKTOP = sp;return;
}
function _validate_inputs($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -25;
  return ($$0|0);
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<(16);
 if ($6) {
  $$0 = -2;
  return ($$0|0);
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = ((($0)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $$0 = -18;
   return ($$0|0);
  }
 }
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 $16 = ((($0)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 if ($15) {
  $18 = ($17|0)==(0);
  $$1 = $18 ? -6 : -19;
  return ($$1|0);
 }
 $phitmp = ($17>>>0)<(8);
 if ($phitmp) {
  $$0 = -6;
  return ($$0|0);
 }
 $19 = ((($0)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = ((($0)) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0);
  if (!($24)) {
   $$0 = -20;
   return ($$0|0);
  }
 }
 $25 = ((($0)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = ((($0)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  if (!($30)) {
   $$0 = -21;
   return ($$0|0);
  }
 }
 $31 = ((($0)) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32>>>0)<(8);
 if ($33) {
  $$0 = -14;
  return ($$0|0);
 }
 $34 = ($32>>>0)>(2097152);
 if ($34) {
  $$0 = -15;
  return ($$0|0);
 }
 $35 = ((($0)) + 48|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 << 3;
 $38 = ($32>>>0)<($37>>>0);
 if ($38) {
  $$0 = -14;
  return ($$0|0);
 }
 $39 = ((($0)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40>>>0)<(3);
 if ($41) {
  $$0 = -12;
  return ($$0|0);
 }
 $42 = ($36|0)==(0);
 if ($42) {
  $$0 = -16;
  return ($$0|0);
 }
 $43 = ($36>>>0)>(16777215);
 if ($43) {
  $$0 = -17;
  return ($$0|0);
 }
 $44 = ((($0)) + 52|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  $$0 = -28;
  return ($$0|0);
 } else {
  $47 = ($45>>>0)>(16777215);
  $$ = $47 ? -29 : 0;
  return ($$|0);
 }
 return (0)|0;
}
function _fill_first_blocks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 1024|0;
 $2 = sp_a;
 $3 = ((($1)) + 24|0);
 $4 = ((($0)) + 64|0);
 $5 = ((($0)) + 68|0);
 $6 = ((($1)) + 20|0);
 $$0 = 0;
 while(1) {
  $7 = HEAP32[$3>>2]|0;
  $8 = ($$0>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  _store32_le_90($4,0);
  _store32_le_90($5,$$0);
  _blake2b_long($2,1024,$0,72);
  $9 = HEAP32[$1>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$6>>2]|0;
  $13 = Math_imul($$0, $12)|0;
  $14 = (($11) + ($13<<10)|0);
  _load_block($14,$2);
  _store32_le_90($4,1);
  _blake2b_long($2,1024,$0,72);
  $15 = HEAP32[$1>>2]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$6>>2]|0;
  $19 = Math_imul($$0, $18)|0;
  $20 = (($19) + 1)|0;
  $21 = (($17) + ($20<<10)|0);
  _load_block($21,$2);
  $22 = (($$0) + 1)|0;
  $$0 = $22;
 }
 _sodium_memzero($2,1024);
 STACKTOP = sp;return;
}
function _store32_le_90($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 return;
}
function _load_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(128);
  if ($exitcond) {
   break;
  }
  $2 = $$0 << 3;
  $3 = (($1) + ($2)|0);
  $4 = (_load64_le_91($3)|0);
  $5 = tempRet0;
  $6 = (($0) + ($$0<<3)|0);
  $7 = $6;
  $8 = $7;
  HEAP32[$8>>2] = $4;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = $5;
  $11 = (($$0) + 1)|0;
  $$0 = $11;
 }
 return;
}
function _load64_le_91($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 tempRet0 = ($6);
 return ($3|0);
}
function _initial_hash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 400|0;
 $3 = sp_a;
 $4 = sp_a + 384|0;
 $5 = ($1|0)==(0|0);
 $6 = ($0|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 (_crypto_generichash_blake2b_init($3,0,0,64)|0);
 $7 = ((($1)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 _store32_le_90($4,$8);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _store32_le_90($4,$10);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 $11 = ((($1)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 _store32_le_90($4,$12);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 $13 = ((($1)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 _store32_le_90($4,$14);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 _store32_le_90($4,19);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 _store32_le_90($4,$2);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 $15 = ((($1)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 _store32_le_90($4,$16);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 $17 = ((($1)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $20 = HEAP32[$15>>2]|0;
  (_crypto_generichash_blake2b_update($3,$18,$20,0)|0);
  $21 = ((($1)) + 56|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 1;
  $24 = ($23|0)==(0);
  if (!($24)) {
   $25 = HEAP32[$17>>2]|0;
   $26 = HEAP32[$15>>2]|0;
   _sodium_memzero($25,$26);
   HEAP32[$15>>2] = 0;
  }
 }
 $27 = ((($1)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 _store32_le_90($4,$28);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 $29 = ((($1)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $32 = HEAP32[$27>>2]|0;
  (_crypto_generichash_blake2b_update($3,$30,$32,0)|0);
 }
 $33 = ((($1)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 _store32_le_90($4,$34);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 $35 = ((($1)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = HEAP32[$33>>2]|0;
  (_crypto_generichash_blake2b_update($3,$36,$38,0)|0);
  $39 = ((($1)) + 56|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 & 2;
  $42 = ($41|0)==(0);
  if (!($42)) {
   $43 = HEAP32[$35>>2]|0;
   $44 = HEAP32[$33>>2]|0;
   _sodium_memzero($43,$44);
   HEAP32[$33>>2] = 0;
  }
 }
 $45 = ((($1)) + 36|0);
 $46 = HEAP32[$45>>2]|0;
 _store32_le_90($4,$46);
 (_crypto_generichash_blake2b_update($3,$4,4,0)|0);
 $47 = ((($1)) + 32|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  $50 = HEAP32[$45>>2]|0;
  (_crypto_generichash_blake2b_update($3,$48,$50,0)|0);
 }
 (_crypto_generichash_blake2b_final($3,$0,64)|0);
 STACKTOP = sp;return;
}
function _initialize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 80|0;
 $2 = sp_a;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$0 = -25;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 << 3;
 $8 = (_malloc($7)|0);
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 if ($10) {
  $$0 = -22;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_allocate_memory($0,$12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $17 = ((($0)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  _initial_hash($2,$1,$18);
  $19 = ((($2)) + 64|0);
  _sodium_memzero($19,8);
  _fill_first_blocks($2,$0);
  _sodium_memzero($2,72);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $15 = ((($1)) + 56|0);
  $16 = HEAP32[$15>>2]|0;
  _free_instance($0,$16);
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _allocate_memory($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp_a;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = -22;
  } else {
   $4 = $1 << 10;
   $5 = ($1|0)==(0);
   if ($5) {
    $$0 = -22;
   } else {
    $6 = (($4>>>0) / ($1>>>0))&-1;
    $7 = ($6|0)==(1024);
    if ($7) {
     $8 = (_malloc(12)|0);
     HEAP32[$0>>2] = $8;
     $9 = ($8|0)==(0|0);
     if ($9) {
      $$0 = -22;
     } else {
      $10 = ((($8)) + 4|0);
      HEAP32[$10>>2] = 0;
      $11 = HEAP32[$0>>2]|0;
      HEAP32[$11>>2] = 0;
      $12 = (_posix_memalign($2,$4)|0);
      HEAP32[(33256)>>2] = $12;
      $13 = ($12|0)==(0);
      if (!($13)) {
       HEAP32[$2>>2] = 0;
       $$0 = -22;
       break;
      }
      $$pre = HEAP32[$2>>2]|0;
      $14 = ($$pre|0)==(0);
      if ($14) {
       $$0 = -22;
      } else {
       $15 = HEAP32[$0>>2]|0;
       HEAP32[$15>>2] = $$pre;
       $16 = HEAP32[$0>>2]|0;
       $17 = ((($16)) + 4|0);
       HEAP32[$17>>2] = $$pre;
       $18 = HEAP32[$0>>2]|0;
       $19 = ((($18)) + 8|0);
       HEAP32[$19>>2] = $4;
       $$0 = 0;
      }
     }
    } else {
     $$0 = -22;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _decode_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp_a + 28|0;
 $4 = sp_a + 24|0;
 $5 = sp_a + 20|0;
 $6 = sp_a + 16|0;
 $7 = sp_a + 12|0;
 $8 = sp_a + 8|0;
 $9 = sp_a + 4|0;
 $10 = sp_a;
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$11>>2] = 0;
 HEAP32[$13>>2] = 0;
 switch ($2|0) {
 case 2:  {
  $15 = (_strncmp($1,34177,9)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $$sink = 9;
   label = 4;
  } else {
   $$0 = -32;
  }
  break;
 }
 case 1:  {
  $17 = (_strncmp($1,34187,8)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $$sink = 8;
   label = 4;
  } else {
   $$0 = -32;
  }
  break;
 }
 default: {
  $$0 = -26;
 }
 }
 if ((label|0) == 4) {
  $19 = (($1) + ($$sink)|0);
  $20 = (_strncmp($19,34196,3)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   $22 = ((($19)) + 3|0);
   $23 = (_decode_decimal($22,$3)|0);
   $24 = ($23|0)==(0|0);
   if ($24) {
    $$0 = -32;
   } else {
    $25 = HEAP32[$3>>2]|0;
    $26 = ($25|0)==(19);
    if ($26) {
     $27 = (_strncmp($23,34200,3)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $29 = ((($23)) + 3|0);
      $30 = (_decode_decimal($29,$4)|0);
      $31 = ($30|0)==(0|0);
      if ($31) {
       $$0 = -32;
      } else {
       $32 = HEAP32[$4>>2]|0;
       $33 = ((($0)) + 44|0);
       HEAP32[$33>>2] = $32;
       $34 = (_strncmp($30,34204,3)|0);
       $35 = ($34|0)==(0);
       if ($35) {
        $36 = ((($30)) + 3|0);
        $37 = (_decode_decimal($36,$5)|0);
        $38 = ($37|0)==(0|0);
        if ($38) {
         $$0 = -32;
        } else {
         $39 = HEAP32[$5>>2]|0;
         $40 = ((($0)) + 40|0);
         HEAP32[$40>>2] = $39;
         $41 = (_strncmp($37,34208,3)|0);
         $42 = ($41|0)==(0);
         if ($42) {
          $43 = ((($37)) + 3|0);
          $44 = (_decode_decimal($43,$6)|0);
          $45 = ($44|0)==(0|0);
          if ($45) {
           $$0 = -32;
          } else {
           $46 = HEAP32[$6>>2]|0;
           $47 = ((($0)) + 48|0);
           HEAP32[$47>>2] = $46;
           $48 = ((($0)) + 52|0);
           HEAP32[$48>>2] = $46;
           $49 = (_strncmp($44,34212,1)|0);
           $50 = ($49|0)==(0);
           if ($50) {
            $51 = ((($44)) + 1|0);
            HEAP32[$7>>2] = $12;
            $52 = ((($0)) + 16|0);
            $53 = HEAP32[$52>>2]|0;
            $54 = (_strlen($51)|0);
            $55 = (_sodium_base642bin($53,$12,$51,$54,0,$7,$8,3)|0);
            $56 = ($55|0)==(0);
            if ($56) {
             $57 = HEAP32[$7>>2]|0;
             HEAP32[$11>>2] = $57;
             $58 = HEAP32[$8>>2]|0;
             $59 = (_strncmp($58,34212,1)|0);
             $60 = ($59|0)==(0);
             if ($60) {
              $61 = ((($58)) + 1|0);
              HEAP32[$9>>2] = $14;
              $62 = HEAP32[$0>>2]|0;
              $63 = (_strlen($61)|0);
              $64 = (_sodium_base642bin($62,$14,$61,$63,0,$9,$10,3)|0);
              $65 = ($64|0)==(0);
              if ($65) {
               $66 = HEAP32[$9>>2]|0;
               HEAP32[$13>>2] = $66;
               $67 = (_validate_inputs($0)|0);
               $68 = ($67|0)==(0);
               if ($68) {
                $69 = HEAP32[$10>>2]|0;
                $70 = HEAP8[$69>>0]|0;
                $71 = ($70<<24>>24)==(0);
                $$ = $71 ? 0 : -32;
                STACKTOP = sp;return ($$|0);
               } else {
                $$0 = $67;
               }
              } else {
               $$0 = -32;
              }
             } else {
              $$0 = -32;
             }
            } else {
             $$0 = -32;
            }
           } else {
            $$0 = -32;
           }
          }
         } else {
          $$0 = -32;
         }
        }
       } else {
        $$0 = -32;
       }
      }
     } else {
      $$0 = -32;
     }
    } else {
     $$0 = -26;
    }
   }
  } else {
   $$0 = -32;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _decode_decimal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond8 = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$01 = $0;$$02 = 0;
 while(1) {
  $2 = HEAP8[$$01>>0]|0;
  $$off = (($2) + -48)<<24>>24;
  $3 = ($$off&255)>(9);
  if ($3) {
   label = 6;
   break;
  }
  $4 = $2 << 24 >> 24;
  $5 = (($4) + -48)|0;
  $6 = ($$02>>>0)>(429496729);
  if ($6) {
   $$0 = 0;
   label = 9;
   break;
  }
  $7 = ($$02*10)|0;
  $8 = $7 ^ -1;
  $9 = ($5>>>0)>($8>>>0);
  if ($9) {
   $$0 = 0;
   label = 9;
   break;
  }
  $10 = (($7) + ($5))|0;
  $11 = ((($$01)) + 1|0);
  $$01 = $11;$$02 = $10;
 }
 if ((label|0) == 6) {
  $12 = ($$01|0)==($0|0);
  if ($12) {
   $$0 = 0;
   return ($$0|0);
  }
  $13 = HEAP8[$0>>0]|0;
  $14 = ($13<<24>>24)!=(48);
  $15 = ((($0)) + 1|0);
  $16 = ($$01|0)==($15|0);
  $or$cond8 = $14 | $16;
  if (!($or$cond8)) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$1>>2] = $$02;
  $$0 = $$01;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  return ($$0|0);
 }
 return (0)|0;
}
function _encode_string($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$sink = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 48|0;
 $4 = sp_a + 33|0;
 $5 = sp_a + 22|0;
 $6 = sp_a + 11|0;
 $7 = sp_a;
 L1: do {
  switch ($3|0) {
  case 2:  {
   $8 = ($1>>>0)<(13);
   if ($8) {
    $$0 = -31;
    STACKTOP = sp;return ($$0|0);
   } else {
    dest=$0; src=34214; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sink = 12;$$sink3 = -12;
    break L1;
   }
   break;
  }
  case 1:  {
   $9 = ($1>>>0)<(12);
   if ($9) {
    $$0 = -31;
    STACKTOP = sp;return ($$0|0);
   } else {
    dest=$0; src=34227; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$sink = 11;$$sink3 = -11;
    break L1;
   }
   break;
  }
  default: {
   $$0 = -31;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 $10 = (($$sink3) + ($1))|0;
 $11 = (($0) + ($$sink)|0);
 $12 = (_validate_inputs($2)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 _u32_to_string($4,19);
 $14 = (_strlen($4)|0);
 $15 = ($10>>>0)>($14>>>0);
 if (!($15)) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($14) + 1)|0;
 _memcpy(($11|0),($4|0),($16|0))|0;
 $17 = (($11) + ($14)|0);
 $18 = (($10) - ($14))|0;
 $19 = ($18>>>0)<(4);
 if ($19) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$17>>0]=4025636&255;HEAP8[$17+1>>0]=(4025636>>8)&255;HEAP8[$17+2>>0]=(4025636>>16)&255;HEAP8[$17+3>>0]=4025636>>24;
 $20 = ((($17)) + 3|0);
 $21 = (($18) + -3)|0;
 $22 = ((($2)) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 _u32_to_string($5,$23);
 $24 = (_strlen($5)|0);
 $25 = ($21>>>0)>($24>>>0);
 if (!($25)) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($24) + 1)|0;
 _memcpy(($20|0),($5|0),($26|0))|0;
 $27 = (($20) + ($24)|0);
 $28 = (($21) - ($24))|0;
 $29 = ($28>>>0)<(4);
 if ($29) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$27>>0]=4027436&255;HEAP8[$27+1>>0]=(4027436>>8)&255;HEAP8[$27+2>>0]=(4027436>>16)&255;HEAP8[$27+3>>0]=4027436>>24;
 $30 = ((($27)) + 3|0);
 $31 = (($28) + -3)|0;
 $32 = ((($2)) + 40|0);
 $33 = HEAP32[$32>>2]|0;
 _u32_to_string($6,$33);
 $34 = (_strlen($6)|0);
 $35 = ($31>>>0)>($34>>>0);
 if (!($35)) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = (($34) + 1)|0;
 _memcpy(($30|0),($6|0),($36|0))|0;
 $37 = (($30) + ($34)|0);
 $38 = (($31) - ($34))|0;
 $39 = ($38>>>0)<(4);
 if ($39) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$37>>0]=4026412&255;HEAP8[$37+1>>0]=(4026412>>8)&255;HEAP8[$37+2>>0]=(4026412>>16)&255;HEAP8[$37+3>>0]=4026412>>24;
 $40 = ((($37)) + 3|0);
 $41 = (($38) + -3)|0;
 $42 = ((($2)) + 48|0);
 $43 = HEAP32[$42>>2]|0;
 _u32_to_string($7,$43);
 $44 = (_strlen($7)|0);
 $45 = ($41>>>0)>($44>>>0);
 if (!($45)) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = (($44) + 1)|0;
 _memcpy(($40|0),($7|0),($46|0))|0;
 $47 = (($40) + ($44)|0);
 $48 = (($41) - ($44))|0;
 $49 = ($48>>>0)<(2);
 if ($49) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$47>>0]=36&255;HEAP8[$47+1>>0]=36>>8;
 $50 = ((($47)) + 1|0);
 $51 = (($48) + -1)|0;
 $52 = ((($2)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($2)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (_sodium_bin2base64($50,$51,$53,$55,3)|0);
 $57 = ($56|0)==(0|0);
 if ($57) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = (_strlen($50)|0);
 $59 = (($50) + ($58)|0);
 $60 = (($51) - ($58))|0;
 $61 = ($60>>>0)<(2);
 if ($61) {
  $$0 = -31;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP8[$59>>0]=36&255;HEAP8[$59+1>>0]=36>>8;
  $62 = ((($59)) + 1|0);
  $63 = (($60) + -1)|0;
  $64 = HEAP32[$2>>2]|0;
  $65 = ((($2)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (_sodium_bin2base64($62,$63,$64,$66,3)|0);
  $68 = ($67|0)==(0|0);
  $$ = $68 ? -31 : 0;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function _u32_to_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp_a;
 $$0 = 10;$$01 = $1;
 while(1) {
  $3 = (($$01>>>0) % 10)&-1;
  $4 = $3 | 48;
  $5 = $4&255;
  $6 = (($$0) + -1)|0;
  $7 = (($2) + ($6)|0);
  HEAP8[$7>>0] = $5;
  $8 = (($$01>>>0) / 10)&-1;
  $9 = ($$01>>>0)>(9);
  $10 = ($6|0)!=(0);
  $or$cond = $9 & $10;
  if ($or$cond) {
   $$0 = $6;$$01 = $8;
  } else {
   break;
  }
 }
 $11 = (11 - ($$0))|0;
 _memcpy(($0|0),($7|0),($11|0))|0;
 $12 = (($0) + ($11)|0);
 HEAP8[$12>>0] = 0;
 STACKTOP = sp;return;
}
function _fill_segment_ref($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$1 = 0, $$01$in = 0, $$02 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $$07 = 0, $$1 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(2);
 do {
  if ($5) {
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = ((($1)) + 8|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9&255)>(1);
    if (!($10)) {
     label = 6;
     break;
    }
   }
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $$07 = 0;$16 = $6;$44 = $12;
  } else {
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ((($0)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  _generate_addresses($0,$1,$14);
  $$pre = HEAP32[$1>>2]|0;
  $$07 = 1;$16 = $$pre;$44 = $14;
 }
 $15 = ($16|0)==(0);
 $17 = ((($1)) + 8|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)==(0);
 $or$cond = $15 & $19;
 $$06 = $or$cond ? 2 : 0;
 $20 = ((($1)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($21, $23)|0;
 $25 = $18&255;
 $26 = $or$cond ? 0 : $25;
 $27 = ((($0)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = Math_imul($26, $28)|0;
 $30 = (($24) + ($29))|0;
 $31 = (($30) + ($$06))|0;
 $32 = (($31>>>0) % ($23>>>0))&-1;
 $33 = ($32|0)==(0);
 $34 = $33 ? $23 : 0;
 $$ = (($31) + ($34))|0;
 $$04 = (($$) + -1)|0;
 $35 = ((($0)) + 24|0);
 $36 = ((($1)) + 12|0);
 $$02 = $$06;$$05 = $31;$$1 = $$04;$38 = $28;
 while(1) {
  $37 = ($$02>>>0)<($38>>>0);
  if (!($37)) {
   break;
  }
  $39 = HEAP32[$22>>2]|0;
  $40 = (($$05>>>0) % ($39>>>0))&-1;
  $41 = ($40|0)==(1);
  $42 = (($$05) + -1)|0;
  $$$1 = $41 ? $42 : $$1;
  if ($$07) {
   $43 = (($44) + ($$02<<3)|0);
   $$01$in = $43;
  } else {
   $45 = HEAP32[$0>>2]|0;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($$$1<<10)|0);
   $$01$in = $48;
  }
  $49 = $$01$in;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = HEAP32[$35>>2]|0;
  $56 = (___uremdi3(($54|0),0,($55|0),0)|0);
  $57 = tempRet0;
  $58 = HEAP32[$1>>2]|0;
  $59 = ($58|0)==(0);
  if ($59) {
   $60 = HEAP8[$17>>0]|0;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $62 = HEAP32[$20>>2]|0;
    $65 = $62;$67 = 0;
   } else {
    $65 = $56;$67 = $57;
   }
  } else {
   $65 = $56;$67 = $57;
  }
  HEAP32[$36>>2] = $$02;
  $63 = HEAP32[$20>>2]|0;
  $64 = ($65|0)==($63|0);
  $66 = ($67|0)==(0);
  $68 = $64 & $66;
  $69 = $68&1;
  $70 = (_index_alpha($0,$1,$51,$69)|0);
  $71 = HEAP32[$0>>2]|0;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = HEAP32[$22>>2]|0;
  $75 = (___muldi3(($74|0),0,($65|0),($67|0))|0);
  $76 = tempRet0;
  $77 = (($73) + ($75<<10)|0);
  $78 = (($77) + ($70<<10)|0);
  $79 = (($73) + ($$05<<10)|0);
  $80 = (($73) + ($$$1<<10)|0);
  if ($59) {
   _fill_block($80,$78,$79);
  } else {
   _fill_block_with_xor($80,$78,$79);
  }
  $81 = (($$02) + 1)|0;
  $82 = (($$05) + 1)|0;
  $83 = (($$$1) + 1)|0;
  $$pre11 = HEAP32[$27>>2]|0;
  $$02 = $81;$$05 = $82;$$1 = $83;$38 = $$pre11;
 }
 return;
}
function _generate_addresses($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 4096|0;
 $3 = sp_a + 3072|0;
 $4 = sp_a + 2048|0;
 $5 = sp_a + 1024|0;
 $6 = sp_a;
 _init_block_value($3);
 _init_block_value($4);
 $7 = ($0|0)==(0|0);
 $8 = ($1|0)==(0|0);
 $or$cond = $7 | $8;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = $4;
 $11 = $10;
 HEAP32[$11>>2] = $9;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($4)) + 8|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ((($1)) + 8|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ((($4)) + 16|0);
 $25 = $24;
 $26 = $25;
 HEAP32[$26>>2] = $23;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = ((($0)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($4)) + 24|0);
 $32 = $31;
 $33 = $32;
 HEAP32[$33>>2] = $30;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = 0;
 $36 = ((($0)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($4)) + 32|0);
 $39 = $38;
 $40 = $39;
 HEAP32[$40>>2] = $37;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = 0;
 $43 = ((($0)) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($4)) + 40|0);
 $46 = $45;
 $47 = $46;
 HEAP32[$47>>2] = $44;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = 0;
 $50 = ((($0)) + 16|0);
 $51 = ((($4)) + 48|0);
 $$0 = 0;
 while(1) {
  $52 = HEAP32[$50>>2]|0;
  $53 = ($$0>>>0)<($52>>>0);
  if (!($53)) {
   break;
  }
  $54 = $$0 & 127;
  $55 = ($54|0)==(0);
  if ($55) {
   $56 = $51;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($56) + 4)|0;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (_i64Add(($58|0),($61|0),1,0)|0);
   $63 = tempRet0;
   $64 = $51;
   $65 = $64;
   HEAP32[$65>>2] = $62;
   $66 = (($64) + 4)|0;
   $67 = $66;
   HEAP32[$67>>2] = $63;
   _init_block_value($6);
   _init_block_value($5);
   _fill_block_with_xor($3,$4,$6);
   _fill_block_with_xor($3,$6,$5);
  }
  $68 = (($5) + ($54<<3)|0);
  $69 = $68;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($2) + ($$0<<3)|0);
  $76 = $75;
  $77 = $76;
  HEAP32[$77>>2] = $71;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = $74;
  $80 = (($$0) + 1)|0;
  $$0 = $80;
 }
 STACKTOP = sp;return;
}
function _fill_block_with_xor($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 2048|0;
 $3 = sp_a + 1024|0;
 $4 = sp_a;
 _copy_block_98($3,$1);
 _xor_block_99($3,$0);
 _copy_block_98($4,$3);
 _xor_block_99($4,$2);
 $$0 = 0;
 while(1) {
  $exitcond1 = ($$0|0)==(8);
  if ($exitcond1) {
   $$1 = 0;
   break;
  }
  $5 = $$0 << 4;
  $6 = (($3) + ($5<<3)|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = $5 | 4;
  $14 = (($3) + ($13<<3)|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_fBlaMka($9,$12,$17,$20)|0);
  $22 = tempRet0;
  $23 = $5 | 12;
  $24 = (($3) + ($23<<3)|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = $27 ^ $21;
  $32 = $30 ^ $22;
  $33 = (_rotr64_100($31,$32,32)|0);
  $34 = tempRet0;
  $35 = $5 | 8;
  $36 = (($3) + ($35<<3)|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (_fBlaMka($39,$42,$33,$34)|0);
  $44 = tempRet0;
  $45 = $17 ^ $43;
  $46 = $20 ^ $44;
  $47 = (_rotr64_100($45,$46,24)|0);
  $48 = tempRet0;
  $49 = (_fBlaMka($21,$22,$47,$48)|0);
  $50 = tempRet0;
  $51 = $6;
  $52 = $51;
  HEAP32[$52>>2] = $49;
  $53 = (($51) + 4)|0;
  $54 = $53;
  HEAP32[$54>>2] = $50;
  $55 = $33 ^ $49;
  $56 = $34 ^ $50;
  $57 = (_rotr64_100($55,$56,16)|0);
  $58 = tempRet0;
  $59 = $24;
  $60 = $59;
  HEAP32[$60>>2] = $57;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = $58;
  $63 = (_fBlaMka($43,$44,$57,$58)|0);
  $64 = tempRet0;
  $65 = $36;
  $66 = $65;
  HEAP32[$66>>2] = $63;
  $67 = (($65) + 4)|0;
  $68 = $67;
  HEAP32[$68>>2] = $64;
  $69 = $47 ^ $63;
  $70 = $48 ^ $64;
  $71 = (_rotr64_100($69,$70,63)|0);
  $72 = tempRet0;
  $73 = $14;
  $74 = $73;
  HEAP32[$74>>2] = $71;
  $75 = (($73) + 4)|0;
  $76 = $75;
  HEAP32[$76>>2] = $72;
  $77 = $5 | 1;
  $78 = (($3) + ($77<<3)|0);
  $79 = $78;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + 4)|0;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = $5 | 5;
  $86 = (($3) + ($85<<3)|0);
  $87 = $86;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = (_fBlaMka($81,$84,$89,$92)|0);
  $94 = tempRet0;
  $95 = $5 | 13;
  $96 = (($3) + ($95<<3)|0);
  $97 = $96;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  $103 = $99 ^ $93;
  $104 = $102 ^ $94;
  $105 = (_rotr64_100($103,$104,32)|0);
  $106 = tempRet0;
  $107 = $5 | 9;
  $108 = (($3) + ($107<<3)|0);
  $109 = $108;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (_fBlaMka($111,$114,$105,$106)|0);
  $116 = tempRet0;
  $117 = $89 ^ $115;
  $118 = $92 ^ $116;
  $119 = (_rotr64_100($117,$118,24)|0);
  $120 = tempRet0;
  $121 = (_fBlaMka($93,$94,$119,$120)|0);
  $122 = tempRet0;
  $123 = $105 ^ $121;
  $124 = $106 ^ $122;
  $125 = (_rotr64_100($123,$124,16)|0);
  $126 = tempRet0;
  $127 = $96;
  $128 = $127;
  HEAP32[$128>>2] = $125;
  $129 = (($127) + 4)|0;
  $130 = $129;
  HEAP32[$130>>2] = $126;
  $131 = (_fBlaMka($115,$116,$125,$126)|0);
  $132 = tempRet0;
  $133 = $108;
  $134 = $133;
  HEAP32[$134>>2] = $131;
  $135 = (($133) + 4)|0;
  $136 = $135;
  HEAP32[$136>>2] = $132;
  $137 = $119 ^ $131;
  $138 = $120 ^ $132;
  $139 = (_rotr64_100($137,$138,63)|0);
  $140 = tempRet0;
  $141 = $5 | 2;
  $142 = (($3) + ($141<<3)|0);
  $143 = $142;
  $144 = $143;
  $145 = HEAP32[$144>>2]|0;
  $146 = (($143) + 4)|0;
  $147 = $146;
  $148 = HEAP32[$147>>2]|0;
  $149 = $5 | 6;
  $150 = (($3) + ($149<<3)|0);
  $151 = $150;
  $152 = $151;
  $153 = HEAP32[$152>>2]|0;
  $154 = (($151) + 4)|0;
  $155 = $154;
  $156 = HEAP32[$155>>2]|0;
  $157 = (_fBlaMka($145,$148,$153,$156)|0);
  $158 = tempRet0;
  $159 = $5 | 14;
  $160 = (($3) + ($159<<3)|0);
  $161 = $160;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = (($161) + 4)|0;
  $165 = $164;
  $166 = HEAP32[$165>>2]|0;
  $167 = $163 ^ $157;
  $168 = $166 ^ $158;
  $169 = (_rotr64_100($167,$168,32)|0);
  $170 = tempRet0;
  $171 = $5 | 10;
  $172 = (($3) + ($171<<3)|0);
  $173 = $172;
  $174 = $173;
  $175 = HEAP32[$174>>2]|0;
  $176 = (($173) + 4)|0;
  $177 = $176;
  $178 = HEAP32[$177>>2]|0;
  $179 = (_fBlaMka($175,$178,$169,$170)|0);
  $180 = tempRet0;
  $181 = $153 ^ $179;
  $182 = $156 ^ $180;
  $183 = (_rotr64_100($181,$182,24)|0);
  $184 = tempRet0;
  $185 = (_fBlaMka($157,$158,$183,$184)|0);
  $186 = tempRet0;
  $187 = $169 ^ $185;
  $188 = $170 ^ $186;
  $189 = (_rotr64_100($187,$188,16)|0);
  $190 = tempRet0;
  $191 = $160;
  $192 = $191;
  HEAP32[$192>>2] = $189;
  $193 = (($191) + 4)|0;
  $194 = $193;
  HEAP32[$194>>2] = $190;
  $195 = (_fBlaMka($179,$180,$189,$190)|0);
  $196 = tempRet0;
  $197 = $183 ^ $195;
  $198 = $184 ^ $196;
  $199 = (_rotr64_100($197,$198,63)|0);
  $200 = tempRet0;
  $201 = $5 | 3;
  $202 = (($3) + ($201<<3)|0);
  $203 = $202;
  $204 = $203;
  $205 = HEAP32[$204>>2]|0;
  $206 = (($203) + 4)|0;
  $207 = $206;
  $208 = HEAP32[$207>>2]|0;
  $209 = $5 | 7;
  $210 = (($3) + ($209<<3)|0);
  $211 = $210;
  $212 = $211;
  $213 = HEAP32[$212>>2]|0;
  $214 = (($211) + 4)|0;
  $215 = $214;
  $216 = HEAP32[$215>>2]|0;
  $217 = (_fBlaMka($205,$208,$213,$216)|0);
  $218 = tempRet0;
  $219 = $5 | 15;
  $220 = (($3) + ($219<<3)|0);
  $221 = $220;
  $222 = $221;
  $223 = HEAP32[$222>>2]|0;
  $224 = (($221) + 4)|0;
  $225 = $224;
  $226 = HEAP32[$225>>2]|0;
  $227 = $223 ^ $217;
  $228 = $226 ^ $218;
  $229 = (_rotr64_100($227,$228,32)|0);
  $230 = tempRet0;
  $231 = $5 | 11;
  $232 = (($3) + ($231<<3)|0);
  $233 = $232;
  $234 = $233;
  $235 = HEAP32[$234>>2]|0;
  $236 = (($233) + 4)|0;
  $237 = $236;
  $238 = HEAP32[$237>>2]|0;
  $239 = (_fBlaMka($235,$238,$229,$230)|0);
  $240 = tempRet0;
  $241 = $213 ^ $239;
  $242 = $216 ^ $240;
  $243 = (_rotr64_100($241,$242,24)|0);
  $244 = tempRet0;
  $245 = (_fBlaMka($217,$218,$243,$244)|0);
  $246 = tempRet0;
  $247 = $229 ^ $245;
  $248 = $230 ^ $246;
  $249 = (_rotr64_100($247,$248,16)|0);
  $250 = tempRet0;
  $251 = (_fBlaMka($239,$240,$249,$250)|0);
  $252 = tempRet0;
  $253 = $243 ^ $251;
  $254 = $244 ^ $252;
  $255 = (_rotr64_100($253,$254,63)|0);
  $256 = tempRet0;
  $257 = $6;
  $258 = $257;
  $259 = HEAP32[$258>>2]|0;
  $260 = (($257) + 4)|0;
  $261 = $260;
  $262 = HEAP32[$261>>2]|0;
  $263 = (_fBlaMka($259,$262,$139,$140)|0);
  $264 = tempRet0;
  $265 = $249 ^ $263;
  $266 = $250 ^ $264;
  $267 = (_rotr64_100($265,$266,32)|0);
  $268 = tempRet0;
  $269 = (_fBlaMka($195,$196,$267,$268)|0);
  $270 = tempRet0;
  $271 = $139 ^ $269;
  $272 = $140 ^ $270;
  $273 = (_rotr64_100($271,$272,24)|0);
  $274 = tempRet0;
  $275 = (_fBlaMka($263,$264,$273,$274)|0);
  $276 = tempRet0;
  $277 = $6;
  $278 = $277;
  HEAP32[$278>>2] = $275;
  $279 = (($277) + 4)|0;
  $280 = $279;
  HEAP32[$280>>2] = $276;
  $281 = $267 ^ $275;
  $282 = $268 ^ $276;
  $283 = (_rotr64_100($281,$282,16)|0);
  $284 = tempRet0;
  $285 = $220;
  $286 = $285;
  HEAP32[$286>>2] = $283;
  $287 = (($285) + 4)|0;
  $288 = $287;
  HEAP32[$288>>2] = $284;
  $289 = (_fBlaMka($269,$270,$283,$284)|0);
  $290 = tempRet0;
  $291 = $172;
  $292 = $291;
  HEAP32[$292>>2] = $289;
  $293 = (($291) + 4)|0;
  $294 = $293;
  HEAP32[$294>>2] = $290;
  $295 = $273 ^ $289;
  $296 = $274 ^ $290;
  $297 = (_rotr64_100($295,$296,63)|0);
  $298 = tempRet0;
  $299 = $86;
  $300 = $299;
  HEAP32[$300>>2] = $297;
  $301 = (($299) + 4)|0;
  $302 = $301;
  HEAP32[$302>>2] = $298;
  $303 = (_fBlaMka($121,$122,$199,$200)|0);
  $304 = tempRet0;
  $305 = $24;
  $306 = $305;
  $307 = HEAP32[$306>>2]|0;
  $308 = (($305) + 4)|0;
  $309 = $308;
  $310 = HEAP32[$309>>2]|0;
  $311 = $307 ^ $303;
  $312 = $310 ^ $304;
  $313 = (_rotr64_100($311,$312,32)|0);
  $314 = tempRet0;
  $315 = (_fBlaMka($251,$252,$313,$314)|0);
  $316 = tempRet0;
  $317 = $199 ^ $315;
  $318 = $200 ^ $316;
  $319 = (_rotr64_100($317,$318,24)|0);
  $320 = tempRet0;
  $321 = (_fBlaMka($303,$304,$319,$320)|0);
  $322 = tempRet0;
  $323 = $78;
  $324 = $323;
  HEAP32[$324>>2] = $321;
  $325 = (($323) + 4)|0;
  $326 = $325;
  HEAP32[$326>>2] = $322;
  $327 = $313 ^ $321;
  $328 = $314 ^ $322;
  $329 = (_rotr64_100($327,$328,16)|0);
  $330 = tempRet0;
  $331 = $24;
  $332 = $331;
  HEAP32[$332>>2] = $329;
  $333 = (($331) + 4)|0;
  $334 = $333;
  HEAP32[$334>>2] = $330;
  $335 = (_fBlaMka($315,$316,$329,$330)|0);
  $336 = tempRet0;
  $337 = $232;
  $338 = $337;
  HEAP32[$338>>2] = $335;
  $339 = (($337) + 4)|0;
  $340 = $339;
  HEAP32[$340>>2] = $336;
  $341 = $319 ^ $335;
  $342 = $320 ^ $336;
  $343 = (_rotr64_100($341,$342,63)|0);
  $344 = tempRet0;
  $345 = $150;
  $346 = $345;
  HEAP32[$346>>2] = $343;
  $347 = (($345) + 4)|0;
  $348 = $347;
  HEAP32[$348>>2] = $344;
  $349 = (_fBlaMka($185,$186,$255,$256)|0);
  $350 = tempRet0;
  $351 = $96;
  $352 = $351;
  $353 = HEAP32[$352>>2]|0;
  $354 = (($351) + 4)|0;
  $355 = $354;
  $356 = HEAP32[$355>>2]|0;
  $357 = $353 ^ $349;
  $358 = $356 ^ $350;
  $359 = (_rotr64_100($357,$358,32)|0);
  $360 = tempRet0;
  $361 = $36;
  $362 = $361;
  $363 = HEAP32[$362>>2]|0;
  $364 = (($361) + 4)|0;
  $365 = $364;
  $366 = HEAP32[$365>>2]|0;
  $367 = (_fBlaMka($363,$366,$359,$360)|0);
  $368 = tempRet0;
  $369 = $255 ^ $367;
  $370 = $256 ^ $368;
  $371 = (_rotr64_100($369,$370,24)|0);
  $372 = tempRet0;
  $373 = (_fBlaMka($349,$350,$371,$372)|0);
  $374 = tempRet0;
  $375 = $142;
  $376 = $375;
  HEAP32[$376>>2] = $373;
  $377 = (($375) + 4)|0;
  $378 = $377;
  HEAP32[$378>>2] = $374;
  $379 = $359 ^ $373;
  $380 = $360 ^ $374;
  $381 = (_rotr64_100($379,$380,16)|0);
  $382 = tempRet0;
  $383 = $96;
  $384 = $383;
  HEAP32[$384>>2] = $381;
  $385 = (($383) + 4)|0;
  $386 = $385;
  HEAP32[$386>>2] = $382;
  $387 = (_fBlaMka($367,$368,$381,$382)|0);
  $388 = tempRet0;
  $389 = $36;
  $390 = $389;
  HEAP32[$390>>2] = $387;
  $391 = (($389) + 4)|0;
  $392 = $391;
  HEAP32[$392>>2] = $388;
  $393 = $371 ^ $387;
  $394 = $372 ^ $388;
  $395 = (_rotr64_100($393,$394,63)|0);
  $396 = tempRet0;
  $397 = $210;
  $398 = $397;
  HEAP32[$398>>2] = $395;
  $399 = (($397) + 4)|0;
  $400 = $399;
  HEAP32[$400>>2] = $396;
  $401 = $14;
  $402 = $401;
  $403 = HEAP32[$402>>2]|0;
  $404 = (($401) + 4)|0;
  $405 = $404;
  $406 = HEAP32[$405>>2]|0;
  $407 = (_fBlaMka($245,$246,$403,$406)|0);
  $408 = tempRet0;
  $409 = $160;
  $410 = $409;
  $411 = HEAP32[$410>>2]|0;
  $412 = (($409) + 4)|0;
  $413 = $412;
  $414 = HEAP32[$413>>2]|0;
  $415 = $411 ^ $407;
  $416 = $414 ^ $408;
  $417 = (_rotr64_100($415,$416,32)|0);
  $418 = tempRet0;
  $419 = $108;
  $420 = $419;
  $421 = HEAP32[$420>>2]|0;
  $422 = (($419) + 4)|0;
  $423 = $422;
  $424 = HEAP32[$423>>2]|0;
  $425 = (_fBlaMka($421,$424,$417,$418)|0);
  $426 = tempRet0;
  $427 = $403 ^ $425;
  $428 = $406 ^ $426;
  $429 = (_rotr64_100($427,$428,24)|0);
  $430 = tempRet0;
  $431 = (_fBlaMka($407,$408,$429,$430)|0);
  $432 = tempRet0;
  $433 = $202;
  $434 = $433;
  HEAP32[$434>>2] = $431;
  $435 = (($433) + 4)|0;
  $436 = $435;
  HEAP32[$436>>2] = $432;
  $437 = $417 ^ $431;
  $438 = $418 ^ $432;
  $439 = (_rotr64_100($437,$438,16)|0);
  $440 = tempRet0;
  $441 = $160;
  $442 = $441;
  HEAP32[$442>>2] = $439;
  $443 = (($441) + 4)|0;
  $444 = $443;
  HEAP32[$444>>2] = $440;
  $445 = (_fBlaMka($425,$426,$439,$440)|0);
  $446 = tempRet0;
  $447 = $108;
  $448 = $447;
  HEAP32[$448>>2] = $445;
  $449 = (($447) + 4)|0;
  $450 = $449;
  HEAP32[$450>>2] = $446;
  $451 = $429 ^ $445;
  $452 = $430 ^ $446;
  $453 = (_rotr64_100($451,$452,63)|0);
  $454 = tempRet0;
  $455 = $14;
  $456 = $455;
  HEAP32[$456>>2] = $453;
  $457 = (($455) + 4)|0;
  $458 = $457;
  HEAP32[$458>>2] = $454;
  $459 = (($$0) + 1)|0;
  $$0 = $459;
 }
 while(1) {
  $exitcond = ($$1|0)==(8);
  if ($exitcond) {
   break;
  }
  $460 = $$1 << 1;
  $461 = (($3) + ($460<<3)|0);
  $462 = $461;
  $463 = $462;
  $464 = HEAP32[$463>>2]|0;
  $465 = (($462) + 4)|0;
  $466 = $465;
  $467 = HEAP32[$466>>2]|0;
  $468 = (($460) + 32)|0;
  $469 = (($3) + ($468<<3)|0);
  $470 = $469;
  $471 = $470;
  $472 = HEAP32[$471>>2]|0;
  $473 = (($470) + 4)|0;
  $474 = $473;
  $475 = HEAP32[$474>>2]|0;
  $476 = (_fBlaMka($464,$467,$472,$475)|0);
  $477 = tempRet0;
  $478 = (($460) + 96)|0;
  $479 = (($3) + ($478<<3)|0);
  $480 = $479;
  $481 = $480;
  $482 = HEAP32[$481>>2]|0;
  $483 = (($480) + 4)|0;
  $484 = $483;
  $485 = HEAP32[$484>>2]|0;
  $486 = $482 ^ $476;
  $487 = $485 ^ $477;
  $488 = (_rotr64_100($486,$487,32)|0);
  $489 = tempRet0;
  $490 = (($460) + 64)|0;
  $491 = (($3) + ($490<<3)|0);
  $492 = $491;
  $493 = $492;
  $494 = HEAP32[$493>>2]|0;
  $495 = (($492) + 4)|0;
  $496 = $495;
  $497 = HEAP32[$496>>2]|0;
  $498 = (_fBlaMka($494,$497,$488,$489)|0);
  $499 = tempRet0;
  $500 = $472 ^ $498;
  $501 = $475 ^ $499;
  $502 = (_rotr64_100($500,$501,24)|0);
  $503 = tempRet0;
  $504 = (_fBlaMka($476,$477,$502,$503)|0);
  $505 = tempRet0;
  $506 = $461;
  $507 = $506;
  HEAP32[$507>>2] = $504;
  $508 = (($506) + 4)|0;
  $509 = $508;
  HEAP32[$509>>2] = $505;
  $510 = $488 ^ $504;
  $511 = $489 ^ $505;
  $512 = (_rotr64_100($510,$511,16)|0);
  $513 = tempRet0;
  $514 = $479;
  $515 = $514;
  HEAP32[$515>>2] = $512;
  $516 = (($514) + 4)|0;
  $517 = $516;
  HEAP32[$517>>2] = $513;
  $518 = (_fBlaMka($498,$499,$512,$513)|0);
  $519 = tempRet0;
  $520 = $491;
  $521 = $520;
  HEAP32[$521>>2] = $518;
  $522 = (($520) + 4)|0;
  $523 = $522;
  HEAP32[$523>>2] = $519;
  $524 = $502 ^ $518;
  $525 = $503 ^ $519;
  $526 = (_rotr64_100($524,$525,63)|0);
  $527 = tempRet0;
  $528 = $469;
  $529 = $528;
  HEAP32[$529>>2] = $526;
  $530 = (($528) + 4)|0;
  $531 = $530;
  HEAP32[$531>>2] = $527;
  $532 = $460 | 1;
  $533 = (($3) + ($532<<3)|0);
  $534 = $533;
  $535 = $534;
  $536 = HEAP32[$535>>2]|0;
  $537 = (($534) + 4)|0;
  $538 = $537;
  $539 = HEAP32[$538>>2]|0;
  $540 = (($460) + 33)|0;
  $541 = (($3) + ($540<<3)|0);
  $542 = $541;
  $543 = $542;
  $544 = HEAP32[$543>>2]|0;
  $545 = (($542) + 4)|0;
  $546 = $545;
  $547 = HEAP32[$546>>2]|0;
  $548 = (_fBlaMka($536,$539,$544,$547)|0);
  $549 = tempRet0;
  $550 = (($460) + 97)|0;
  $551 = (($3) + ($550<<3)|0);
  $552 = $551;
  $553 = $552;
  $554 = HEAP32[$553>>2]|0;
  $555 = (($552) + 4)|0;
  $556 = $555;
  $557 = HEAP32[$556>>2]|0;
  $558 = $554 ^ $548;
  $559 = $557 ^ $549;
  $560 = (_rotr64_100($558,$559,32)|0);
  $561 = tempRet0;
  $562 = (($460) + 65)|0;
  $563 = (($3) + ($562<<3)|0);
  $564 = $563;
  $565 = $564;
  $566 = HEAP32[$565>>2]|0;
  $567 = (($564) + 4)|0;
  $568 = $567;
  $569 = HEAP32[$568>>2]|0;
  $570 = (_fBlaMka($566,$569,$560,$561)|0);
  $571 = tempRet0;
  $572 = $544 ^ $570;
  $573 = $547 ^ $571;
  $574 = (_rotr64_100($572,$573,24)|0);
  $575 = tempRet0;
  $576 = (_fBlaMka($548,$549,$574,$575)|0);
  $577 = tempRet0;
  $578 = $560 ^ $576;
  $579 = $561 ^ $577;
  $580 = (_rotr64_100($578,$579,16)|0);
  $581 = tempRet0;
  $582 = $551;
  $583 = $582;
  HEAP32[$583>>2] = $580;
  $584 = (($582) + 4)|0;
  $585 = $584;
  HEAP32[$585>>2] = $581;
  $586 = (_fBlaMka($570,$571,$580,$581)|0);
  $587 = tempRet0;
  $588 = $563;
  $589 = $588;
  HEAP32[$589>>2] = $586;
  $590 = (($588) + 4)|0;
  $591 = $590;
  HEAP32[$591>>2] = $587;
  $592 = $574 ^ $586;
  $593 = $575 ^ $587;
  $594 = (_rotr64_100($592,$593,63)|0);
  $595 = tempRet0;
  $596 = (($460) + 16)|0;
  $597 = (($3) + ($596<<3)|0);
  $598 = $597;
  $599 = $598;
  $600 = HEAP32[$599>>2]|0;
  $601 = (($598) + 4)|0;
  $602 = $601;
  $603 = HEAP32[$602>>2]|0;
  $604 = (($460) + 48)|0;
  $605 = (($3) + ($604<<3)|0);
  $606 = $605;
  $607 = $606;
  $608 = HEAP32[$607>>2]|0;
  $609 = (($606) + 4)|0;
  $610 = $609;
  $611 = HEAP32[$610>>2]|0;
  $612 = (_fBlaMka($600,$603,$608,$611)|0);
  $613 = tempRet0;
  $614 = (($460) + 112)|0;
  $615 = (($3) + ($614<<3)|0);
  $616 = $615;
  $617 = $616;
  $618 = HEAP32[$617>>2]|0;
  $619 = (($616) + 4)|0;
  $620 = $619;
  $621 = HEAP32[$620>>2]|0;
  $622 = $618 ^ $612;
  $623 = $621 ^ $613;
  $624 = (_rotr64_100($622,$623,32)|0);
  $625 = tempRet0;
  $626 = (($460) + 80)|0;
  $627 = (($3) + ($626<<3)|0);
  $628 = $627;
  $629 = $628;
  $630 = HEAP32[$629>>2]|0;
  $631 = (($628) + 4)|0;
  $632 = $631;
  $633 = HEAP32[$632>>2]|0;
  $634 = (_fBlaMka($630,$633,$624,$625)|0);
  $635 = tempRet0;
  $636 = $608 ^ $634;
  $637 = $611 ^ $635;
  $638 = (_rotr64_100($636,$637,24)|0);
  $639 = tempRet0;
  $640 = (_fBlaMka($612,$613,$638,$639)|0);
  $641 = tempRet0;
  $642 = $624 ^ $640;
  $643 = $625 ^ $641;
  $644 = (_rotr64_100($642,$643,16)|0);
  $645 = tempRet0;
  $646 = $615;
  $647 = $646;
  HEAP32[$647>>2] = $644;
  $648 = (($646) + 4)|0;
  $649 = $648;
  HEAP32[$649>>2] = $645;
  $650 = (_fBlaMka($634,$635,$644,$645)|0);
  $651 = tempRet0;
  $652 = $638 ^ $650;
  $653 = $639 ^ $651;
  $654 = (_rotr64_100($652,$653,63)|0);
  $655 = tempRet0;
  $656 = (($460) + 17)|0;
  $657 = (($3) + ($656<<3)|0);
  $658 = $657;
  $659 = $658;
  $660 = HEAP32[$659>>2]|0;
  $661 = (($658) + 4)|0;
  $662 = $661;
  $663 = HEAP32[$662>>2]|0;
  $664 = (($460) + 49)|0;
  $665 = (($3) + ($664<<3)|0);
  $666 = $665;
  $667 = $666;
  $668 = HEAP32[$667>>2]|0;
  $669 = (($666) + 4)|0;
  $670 = $669;
  $671 = HEAP32[$670>>2]|0;
  $672 = (_fBlaMka($660,$663,$668,$671)|0);
  $673 = tempRet0;
  $674 = (($460) + 113)|0;
  $675 = (($3) + ($674<<3)|0);
  $676 = $675;
  $677 = $676;
  $678 = HEAP32[$677>>2]|0;
  $679 = (($676) + 4)|0;
  $680 = $679;
  $681 = HEAP32[$680>>2]|0;
  $682 = $678 ^ $672;
  $683 = $681 ^ $673;
  $684 = (_rotr64_100($682,$683,32)|0);
  $685 = tempRet0;
  $686 = (($460) + 81)|0;
  $687 = (($3) + ($686<<3)|0);
  $688 = $687;
  $689 = $688;
  $690 = HEAP32[$689>>2]|0;
  $691 = (($688) + 4)|0;
  $692 = $691;
  $693 = HEAP32[$692>>2]|0;
  $694 = (_fBlaMka($690,$693,$684,$685)|0);
  $695 = tempRet0;
  $696 = $668 ^ $694;
  $697 = $671 ^ $695;
  $698 = (_rotr64_100($696,$697,24)|0);
  $699 = tempRet0;
  $700 = (_fBlaMka($672,$673,$698,$699)|0);
  $701 = tempRet0;
  $702 = $684 ^ $700;
  $703 = $685 ^ $701;
  $704 = (_rotr64_100($702,$703,16)|0);
  $705 = tempRet0;
  $706 = (_fBlaMka($694,$695,$704,$705)|0);
  $707 = tempRet0;
  $708 = $698 ^ $706;
  $709 = $699 ^ $707;
  $710 = (_rotr64_100($708,$709,63)|0);
  $711 = tempRet0;
  $712 = $461;
  $713 = $712;
  $714 = HEAP32[$713>>2]|0;
  $715 = (($712) + 4)|0;
  $716 = $715;
  $717 = HEAP32[$716>>2]|0;
  $718 = (_fBlaMka($714,$717,$594,$595)|0);
  $719 = tempRet0;
  $720 = $704 ^ $718;
  $721 = $705 ^ $719;
  $722 = (_rotr64_100($720,$721,32)|0);
  $723 = tempRet0;
  $724 = (_fBlaMka($650,$651,$722,$723)|0);
  $725 = tempRet0;
  $726 = $594 ^ $724;
  $727 = $595 ^ $725;
  $728 = (_rotr64_100($726,$727,24)|0);
  $729 = tempRet0;
  $730 = (_fBlaMka($718,$719,$728,$729)|0);
  $731 = tempRet0;
  $732 = $461;
  $733 = $732;
  HEAP32[$733>>2] = $730;
  $734 = (($732) + 4)|0;
  $735 = $734;
  HEAP32[$735>>2] = $731;
  $736 = $722 ^ $730;
  $737 = $723 ^ $731;
  $738 = (_rotr64_100($736,$737,16)|0);
  $739 = tempRet0;
  $740 = $675;
  $741 = $740;
  HEAP32[$741>>2] = $738;
  $742 = (($740) + 4)|0;
  $743 = $742;
  HEAP32[$743>>2] = $739;
  $744 = (_fBlaMka($724,$725,$738,$739)|0);
  $745 = tempRet0;
  $746 = $627;
  $747 = $746;
  HEAP32[$747>>2] = $744;
  $748 = (($746) + 4)|0;
  $749 = $748;
  HEAP32[$749>>2] = $745;
  $750 = $728 ^ $744;
  $751 = $729 ^ $745;
  $752 = (_rotr64_100($750,$751,63)|0);
  $753 = tempRet0;
  $754 = $541;
  $755 = $754;
  HEAP32[$755>>2] = $752;
  $756 = (($754) + 4)|0;
  $757 = $756;
  HEAP32[$757>>2] = $753;
  $758 = (_fBlaMka($576,$577,$654,$655)|0);
  $759 = tempRet0;
  $760 = $479;
  $761 = $760;
  $762 = HEAP32[$761>>2]|0;
  $763 = (($760) + 4)|0;
  $764 = $763;
  $765 = HEAP32[$764>>2]|0;
  $766 = $762 ^ $758;
  $767 = $765 ^ $759;
  $768 = (_rotr64_100($766,$767,32)|0);
  $769 = tempRet0;
  $770 = (_fBlaMka($706,$707,$768,$769)|0);
  $771 = tempRet0;
  $772 = $654 ^ $770;
  $773 = $655 ^ $771;
  $774 = (_rotr64_100($772,$773,24)|0);
  $775 = tempRet0;
  $776 = (_fBlaMka($758,$759,$774,$775)|0);
  $777 = tempRet0;
  $778 = $533;
  $779 = $778;
  HEAP32[$779>>2] = $776;
  $780 = (($778) + 4)|0;
  $781 = $780;
  HEAP32[$781>>2] = $777;
  $782 = $768 ^ $776;
  $783 = $769 ^ $777;
  $784 = (_rotr64_100($782,$783,16)|0);
  $785 = tempRet0;
  $786 = $479;
  $787 = $786;
  HEAP32[$787>>2] = $784;
  $788 = (($786) + 4)|0;
  $789 = $788;
  HEAP32[$789>>2] = $785;
  $790 = (_fBlaMka($770,$771,$784,$785)|0);
  $791 = tempRet0;
  $792 = $687;
  $793 = $792;
  HEAP32[$793>>2] = $790;
  $794 = (($792) + 4)|0;
  $795 = $794;
  HEAP32[$795>>2] = $791;
  $796 = $774 ^ $790;
  $797 = $775 ^ $791;
  $798 = (_rotr64_100($796,$797,63)|0);
  $799 = tempRet0;
  $800 = $605;
  $801 = $800;
  HEAP32[$801>>2] = $798;
  $802 = (($800) + 4)|0;
  $803 = $802;
  HEAP32[$803>>2] = $799;
  $804 = (_fBlaMka($640,$641,$710,$711)|0);
  $805 = tempRet0;
  $806 = $551;
  $807 = $806;
  $808 = HEAP32[$807>>2]|0;
  $809 = (($806) + 4)|0;
  $810 = $809;
  $811 = HEAP32[$810>>2]|0;
  $812 = $808 ^ $804;
  $813 = $811 ^ $805;
  $814 = (_rotr64_100($812,$813,32)|0);
  $815 = tempRet0;
  $816 = $491;
  $817 = $816;
  $818 = HEAP32[$817>>2]|0;
  $819 = (($816) + 4)|0;
  $820 = $819;
  $821 = HEAP32[$820>>2]|0;
  $822 = (_fBlaMka($818,$821,$814,$815)|0);
  $823 = tempRet0;
  $824 = $710 ^ $822;
  $825 = $711 ^ $823;
  $826 = (_rotr64_100($824,$825,24)|0);
  $827 = tempRet0;
  $828 = (_fBlaMka($804,$805,$826,$827)|0);
  $829 = tempRet0;
  $830 = $597;
  $831 = $830;
  HEAP32[$831>>2] = $828;
  $832 = (($830) + 4)|0;
  $833 = $832;
  HEAP32[$833>>2] = $829;
  $834 = $814 ^ $828;
  $835 = $815 ^ $829;
  $836 = (_rotr64_100($834,$835,16)|0);
  $837 = tempRet0;
  $838 = $551;
  $839 = $838;
  HEAP32[$839>>2] = $836;
  $840 = (($838) + 4)|0;
  $841 = $840;
  HEAP32[$841>>2] = $837;
  $842 = (_fBlaMka($822,$823,$836,$837)|0);
  $843 = tempRet0;
  $844 = $491;
  $845 = $844;
  HEAP32[$845>>2] = $842;
  $846 = (($844) + 4)|0;
  $847 = $846;
  HEAP32[$847>>2] = $843;
  $848 = $826 ^ $842;
  $849 = $827 ^ $843;
  $850 = (_rotr64_100($848,$849,63)|0);
  $851 = tempRet0;
  $852 = $665;
  $853 = $852;
  HEAP32[$853>>2] = $850;
  $854 = (($852) + 4)|0;
  $855 = $854;
  HEAP32[$855>>2] = $851;
  $856 = $469;
  $857 = $856;
  $858 = HEAP32[$857>>2]|0;
  $859 = (($856) + 4)|0;
  $860 = $859;
  $861 = HEAP32[$860>>2]|0;
  $862 = (_fBlaMka($700,$701,$858,$861)|0);
  $863 = tempRet0;
  $864 = $615;
  $865 = $864;
  $866 = HEAP32[$865>>2]|0;
  $867 = (($864) + 4)|0;
  $868 = $867;
  $869 = HEAP32[$868>>2]|0;
  $870 = $866 ^ $862;
  $871 = $869 ^ $863;
  $872 = (_rotr64_100($870,$871,32)|0);
  $873 = tempRet0;
  $874 = $563;
  $875 = $874;
  $876 = HEAP32[$875>>2]|0;
  $877 = (($874) + 4)|0;
  $878 = $877;
  $879 = HEAP32[$878>>2]|0;
  $880 = (_fBlaMka($876,$879,$872,$873)|0);
  $881 = tempRet0;
  $882 = $858 ^ $880;
  $883 = $861 ^ $881;
  $884 = (_rotr64_100($882,$883,24)|0);
  $885 = tempRet0;
  $886 = (_fBlaMka($862,$863,$884,$885)|0);
  $887 = tempRet0;
  $888 = $657;
  $889 = $888;
  HEAP32[$889>>2] = $886;
  $890 = (($888) + 4)|0;
  $891 = $890;
  HEAP32[$891>>2] = $887;
  $892 = $872 ^ $886;
  $893 = $873 ^ $887;
  $894 = (_rotr64_100($892,$893,16)|0);
  $895 = tempRet0;
  $896 = $615;
  $897 = $896;
  HEAP32[$897>>2] = $894;
  $898 = (($896) + 4)|0;
  $899 = $898;
  HEAP32[$899>>2] = $895;
  $900 = (_fBlaMka($880,$881,$894,$895)|0);
  $901 = tempRet0;
  $902 = $563;
  $903 = $902;
  HEAP32[$903>>2] = $900;
  $904 = (($902) + 4)|0;
  $905 = $904;
  HEAP32[$905>>2] = $901;
  $906 = $884 ^ $900;
  $907 = $885 ^ $901;
  $908 = (_rotr64_100($906,$907,63)|0);
  $909 = tempRet0;
  $910 = $469;
  $911 = $910;
  HEAP32[$911>>2] = $908;
  $912 = (($910) + 4)|0;
  $913 = $912;
  HEAP32[$913>>2] = $909;
  $914 = (($$1) + 1)|0;
  $$1 = $914;
 }
 _copy_block_98($2,$4);
 _xor_block_99($2,$3);
 STACKTOP = sp;return;
}
function _fill_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 2048|0;
 $3 = sp_a + 1024|0;
 $4 = sp_a;
 _copy_block_98($3,$1);
 _xor_block_99($3,$0);
 _copy_block_98($4,$3);
 $$0 = 0;
 while(1) {
  $exitcond1 = ($$0|0)==(8);
  if ($exitcond1) {
   $$1 = 0;
   break;
  }
  $5 = $$0 << 4;
  $6 = (($3) + ($5<<3)|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = $5 | 4;
  $14 = (($3) + ($13<<3)|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_fBlaMka($9,$12,$17,$20)|0);
  $22 = tempRet0;
  $23 = $5 | 12;
  $24 = (($3) + ($23<<3)|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = $27 ^ $21;
  $32 = $30 ^ $22;
  $33 = (_rotr64_100($31,$32,32)|0);
  $34 = tempRet0;
  $35 = $5 | 8;
  $36 = (($3) + ($35<<3)|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (_fBlaMka($39,$42,$33,$34)|0);
  $44 = tempRet0;
  $45 = $17 ^ $43;
  $46 = $20 ^ $44;
  $47 = (_rotr64_100($45,$46,24)|0);
  $48 = tempRet0;
  $49 = (_fBlaMka($21,$22,$47,$48)|0);
  $50 = tempRet0;
  $51 = $6;
  $52 = $51;
  HEAP32[$52>>2] = $49;
  $53 = (($51) + 4)|0;
  $54 = $53;
  HEAP32[$54>>2] = $50;
  $55 = $33 ^ $49;
  $56 = $34 ^ $50;
  $57 = (_rotr64_100($55,$56,16)|0);
  $58 = tempRet0;
  $59 = $24;
  $60 = $59;
  HEAP32[$60>>2] = $57;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = $58;
  $63 = (_fBlaMka($43,$44,$57,$58)|0);
  $64 = tempRet0;
  $65 = $36;
  $66 = $65;
  HEAP32[$66>>2] = $63;
  $67 = (($65) + 4)|0;
  $68 = $67;
  HEAP32[$68>>2] = $64;
  $69 = $47 ^ $63;
  $70 = $48 ^ $64;
  $71 = (_rotr64_100($69,$70,63)|0);
  $72 = tempRet0;
  $73 = $14;
  $74 = $73;
  HEAP32[$74>>2] = $71;
  $75 = (($73) + 4)|0;
  $76 = $75;
  HEAP32[$76>>2] = $72;
  $77 = $5 | 1;
  $78 = (($3) + ($77<<3)|0);
  $79 = $78;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + 4)|0;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = $5 | 5;
  $86 = (($3) + ($85<<3)|0);
  $87 = $86;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = (_fBlaMka($81,$84,$89,$92)|0);
  $94 = tempRet0;
  $95 = $5 | 13;
  $96 = (($3) + ($95<<3)|0);
  $97 = $96;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  $103 = $99 ^ $93;
  $104 = $102 ^ $94;
  $105 = (_rotr64_100($103,$104,32)|0);
  $106 = tempRet0;
  $107 = $5 | 9;
  $108 = (($3) + ($107<<3)|0);
  $109 = $108;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (_fBlaMka($111,$114,$105,$106)|0);
  $116 = tempRet0;
  $117 = $89 ^ $115;
  $118 = $92 ^ $116;
  $119 = (_rotr64_100($117,$118,24)|0);
  $120 = tempRet0;
  $121 = (_fBlaMka($93,$94,$119,$120)|0);
  $122 = tempRet0;
  $123 = $105 ^ $121;
  $124 = $106 ^ $122;
  $125 = (_rotr64_100($123,$124,16)|0);
  $126 = tempRet0;
  $127 = $96;
  $128 = $127;
  HEAP32[$128>>2] = $125;
  $129 = (($127) + 4)|0;
  $130 = $129;
  HEAP32[$130>>2] = $126;
  $131 = (_fBlaMka($115,$116,$125,$126)|0);
  $132 = tempRet0;
  $133 = $108;
  $134 = $133;
  HEAP32[$134>>2] = $131;
  $135 = (($133) + 4)|0;
  $136 = $135;
  HEAP32[$136>>2] = $132;
  $137 = $119 ^ $131;
  $138 = $120 ^ $132;
  $139 = (_rotr64_100($137,$138,63)|0);
  $140 = tempRet0;
  $141 = $5 | 2;
  $142 = (($3) + ($141<<3)|0);
  $143 = $142;
  $144 = $143;
  $145 = HEAP32[$144>>2]|0;
  $146 = (($143) + 4)|0;
  $147 = $146;
  $148 = HEAP32[$147>>2]|0;
  $149 = $5 | 6;
  $150 = (($3) + ($149<<3)|0);
  $151 = $150;
  $152 = $151;
  $153 = HEAP32[$152>>2]|0;
  $154 = (($151) + 4)|0;
  $155 = $154;
  $156 = HEAP32[$155>>2]|0;
  $157 = (_fBlaMka($145,$148,$153,$156)|0);
  $158 = tempRet0;
  $159 = $5 | 14;
  $160 = (($3) + ($159<<3)|0);
  $161 = $160;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = (($161) + 4)|0;
  $165 = $164;
  $166 = HEAP32[$165>>2]|0;
  $167 = $163 ^ $157;
  $168 = $166 ^ $158;
  $169 = (_rotr64_100($167,$168,32)|0);
  $170 = tempRet0;
  $171 = $5 | 10;
  $172 = (($3) + ($171<<3)|0);
  $173 = $172;
  $174 = $173;
  $175 = HEAP32[$174>>2]|0;
  $176 = (($173) + 4)|0;
  $177 = $176;
  $178 = HEAP32[$177>>2]|0;
  $179 = (_fBlaMka($175,$178,$169,$170)|0);
  $180 = tempRet0;
  $181 = $153 ^ $179;
  $182 = $156 ^ $180;
  $183 = (_rotr64_100($181,$182,24)|0);
  $184 = tempRet0;
  $185 = (_fBlaMka($157,$158,$183,$184)|0);
  $186 = tempRet0;
  $187 = $169 ^ $185;
  $188 = $170 ^ $186;
  $189 = (_rotr64_100($187,$188,16)|0);
  $190 = tempRet0;
  $191 = $160;
  $192 = $191;
  HEAP32[$192>>2] = $189;
  $193 = (($191) + 4)|0;
  $194 = $193;
  HEAP32[$194>>2] = $190;
  $195 = (_fBlaMka($179,$180,$189,$190)|0);
  $196 = tempRet0;
  $197 = $183 ^ $195;
  $198 = $184 ^ $196;
  $199 = (_rotr64_100($197,$198,63)|0);
  $200 = tempRet0;
  $201 = $5 | 3;
  $202 = (($3) + ($201<<3)|0);
  $203 = $202;
  $204 = $203;
  $205 = HEAP32[$204>>2]|0;
  $206 = (($203) + 4)|0;
  $207 = $206;
  $208 = HEAP32[$207>>2]|0;
  $209 = $5 | 7;
  $210 = (($3) + ($209<<3)|0);
  $211 = $210;
  $212 = $211;
  $213 = HEAP32[$212>>2]|0;
  $214 = (($211) + 4)|0;
  $215 = $214;
  $216 = HEAP32[$215>>2]|0;
  $217 = (_fBlaMka($205,$208,$213,$216)|0);
  $218 = tempRet0;
  $219 = $5 | 15;
  $220 = (($3) + ($219<<3)|0);
  $221 = $220;
  $222 = $221;
  $223 = HEAP32[$222>>2]|0;
  $224 = (($221) + 4)|0;
  $225 = $224;
  $226 = HEAP32[$225>>2]|0;
  $227 = $223 ^ $217;
  $228 = $226 ^ $218;
  $229 = (_rotr64_100($227,$228,32)|0);
  $230 = tempRet0;
  $231 = $5 | 11;
  $232 = (($3) + ($231<<3)|0);
  $233 = $232;
  $234 = $233;
  $235 = HEAP32[$234>>2]|0;
  $236 = (($233) + 4)|0;
  $237 = $236;
  $238 = HEAP32[$237>>2]|0;
  $239 = (_fBlaMka($235,$238,$229,$230)|0);
  $240 = tempRet0;
  $241 = $213 ^ $239;
  $242 = $216 ^ $240;
  $243 = (_rotr64_100($241,$242,24)|0);
  $244 = tempRet0;
  $245 = (_fBlaMka($217,$218,$243,$244)|0);
  $246 = tempRet0;
  $247 = $229 ^ $245;
  $248 = $230 ^ $246;
  $249 = (_rotr64_100($247,$248,16)|0);
  $250 = tempRet0;
  $251 = (_fBlaMka($239,$240,$249,$250)|0);
  $252 = tempRet0;
  $253 = $243 ^ $251;
  $254 = $244 ^ $252;
  $255 = (_rotr64_100($253,$254,63)|0);
  $256 = tempRet0;
  $257 = $6;
  $258 = $257;
  $259 = HEAP32[$258>>2]|0;
  $260 = (($257) + 4)|0;
  $261 = $260;
  $262 = HEAP32[$261>>2]|0;
  $263 = (_fBlaMka($259,$262,$139,$140)|0);
  $264 = tempRet0;
  $265 = $249 ^ $263;
  $266 = $250 ^ $264;
  $267 = (_rotr64_100($265,$266,32)|0);
  $268 = tempRet0;
  $269 = (_fBlaMka($195,$196,$267,$268)|0);
  $270 = tempRet0;
  $271 = $139 ^ $269;
  $272 = $140 ^ $270;
  $273 = (_rotr64_100($271,$272,24)|0);
  $274 = tempRet0;
  $275 = (_fBlaMka($263,$264,$273,$274)|0);
  $276 = tempRet0;
  $277 = $6;
  $278 = $277;
  HEAP32[$278>>2] = $275;
  $279 = (($277) + 4)|0;
  $280 = $279;
  HEAP32[$280>>2] = $276;
  $281 = $267 ^ $275;
  $282 = $268 ^ $276;
  $283 = (_rotr64_100($281,$282,16)|0);
  $284 = tempRet0;
  $285 = $220;
  $286 = $285;
  HEAP32[$286>>2] = $283;
  $287 = (($285) + 4)|0;
  $288 = $287;
  HEAP32[$288>>2] = $284;
  $289 = (_fBlaMka($269,$270,$283,$284)|0);
  $290 = tempRet0;
  $291 = $172;
  $292 = $291;
  HEAP32[$292>>2] = $289;
  $293 = (($291) + 4)|0;
  $294 = $293;
  HEAP32[$294>>2] = $290;
  $295 = $273 ^ $289;
  $296 = $274 ^ $290;
  $297 = (_rotr64_100($295,$296,63)|0);
  $298 = tempRet0;
  $299 = $86;
  $300 = $299;
  HEAP32[$300>>2] = $297;
  $301 = (($299) + 4)|0;
  $302 = $301;
  HEAP32[$302>>2] = $298;
  $303 = (_fBlaMka($121,$122,$199,$200)|0);
  $304 = tempRet0;
  $305 = $24;
  $306 = $305;
  $307 = HEAP32[$306>>2]|0;
  $308 = (($305) + 4)|0;
  $309 = $308;
  $310 = HEAP32[$309>>2]|0;
  $311 = $307 ^ $303;
  $312 = $310 ^ $304;
  $313 = (_rotr64_100($311,$312,32)|0);
  $314 = tempRet0;
  $315 = (_fBlaMka($251,$252,$313,$314)|0);
  $316 = tempRet0;
  $317 = $199 ^ $315;
  $318 = $200 ^ $316;
  $319 = (_rotr64_100($317,$318,24)|0);
  $320 = tempRet0;
  $321 = (_fBlaMka($303,$304,$319,$320)|0);
  $322 = tempRet0;
  $323 = $78;
  $324 = $323;
  HEAP32[$324>>2] = $321;
  $325 = (($323) + 4)|0;
  $326 = $325;
  HEAP32[$326>>2] = $322;
  $327 = $313 ^ $321;
  $328 = $314 ^ $322;
  $329 = (_rotr64_100($327,$328,16)|0);
  $330 = tempRet0;
  $331 = $24;
  $332 = $331;
  HEAP32[$332>>2] = $329;
  $333 = (($331) + 4)|0;
  $334 = $333;
  HEAP32[$334>>2] = $330;
  $335 = (_fBlaMka($315,$316,$329,$330)|0);
  $336 = tempRet0;
  $337 = $232;
  $338 = $337;
  HEAP32[$338>>2] = $335;
  $339 = (($337) + 4)|0;
  $340 = $339;
  HEAP32[$340>>2] = $336;
  $341 = $319 ^ $335;
  $342 = $320 ^ $336;
  $343 = (_rotr64_100($341,$342,63)|0);
  $344 = tempRet0;
  $345 = $150;
  $346 = $345;
  HEAP32[$346>>2] = $343;
  $347 = (($345) + 4)|0;
  $348 = $347;
  HEAP32[$348>>2] = $344;
  $349 = (_fBlaMka($185,$186,$255,$256)|0);
  $350 = tempRet0;
  $351 = $96;
  $352 = $351;
  $353 = HEAP32[$352>>2]|0;
  $354 = (($351) + 4)|0;
  $355 = $354;
  $356 = HEAP32[$355>>2]|0;
  $357 = $353 ^ $349;
  $358 = $356 ^ $350;
  $359 = (_rotr64_100($357,$358,32)|0);
  $360 = tempRet0;
  $361 = $36;
  $362 = $361;
  $363 = HEAP32[$362>>2]|0;
  $364 = (($361) + 4)|0;
  $365 = $364;
  $366 = HEAP32[$365>>2]|0;
  $367 = (_fBlaMka($363,$366,$359,$360)|0);
  $368 = tempRet0;
  $369 = $255 ^ $367;
  $370 = $256 ^ $368;
  $371 = (_rotr64_100($369,$370,24)|0);
  $372 = tempRet0;
  $373 = (_fBlaMka($349,$350,$371,$372)|0);
  $374 = tempRet0;
  $375 = $142;
  $376 = $375;
  HEAP32[$376>>2] = $373;
  $377 = (($375) + 4)|0;
  $378 = $377;
  HEAP32[$378>>2] = $374;
  $379 = $359 ^ $373;
  $380 = $360 ^ $374;
  $381 = (_rotr64_100($379,$380,16)|0);
  $382 = tempRet0;
  $383 = $96;
  $384 = $383;
  HEAP32[$384>>2] = $381;
  $385 = (($383) + 4)|0;
  $386 = $385;
  HEAP32[$386>>2] = $382;
  $387 = (_fBlaMka($367,$368,$381,$382)|0);
  $388 = tempRet0;
  $389 = $36;
  $390 = $389;
  HEAP32[$390>>2] = $387;
  $391 = (($389) + 4)|0;
  $392 = $391;
  HEAP32[$392>>2] = $388;
  $393 = $371 ^ $387;
  $394 = $372 ^ $388;
  $395 = (_rotr64_100($393,$394,63)|0);
  $396 = tempRet0;
  $397 = $210;
  $398 = $397;
  HEAP32[$398>>2] = $395;
  $399 = (($397) + 4)|0;
  $400 = $399;
  HEAP32[$400>>2] = $396;
  $401 = $14;
  $402 = $401;
  $403 = HEAP32[$402>>2]|0;
  $404 = (($401) + 4)|0;
  $405 = $404;
  $406 = HEAP32[$405>>2]|0;
  $407 = (_fBlaMka($245,$246,$403,$406)|0);
  $408 = tempRet0;
  $409 = $160;
  $410 = $409;
  $411 = HEAP32[$410>>2]|0;
  $412 = (($409) + 4)|0;
  $413 = $412;
  $414 = HEAP32[$413>>2]|0;
  $415 = $411 ^ $407;
  $416 = $414 ^ $408;
  $417 = (_rotr64_100($415,$416,32)|0);
  $418 = tempRet0;
  $419 = $108;
  $420 = $419;
  $421 = HEAP32[$420>>2]|0;
  $422 = (($419) + 4)|0;
  $423 = $422;
  $424 = HEAP32[$423>>2]|0;
  $425 = (_fBlaMka($421,$424,$417,$418)|0);
  $426 = tempRet0;
  $427 = $403 ^ $425;
  $428 = $406 ^ $426;
  $429 = (_rotr64_100($427,$428,24)|0);
  $430 = tempRet0;
  $431 = (_fBlaMka($407,$408,$429,$430)|0);
  $432 = tempRet0;
  $433 = $202;
  $434 = $433;
  HEAP32[$434>>2] = $431;
  $435 = (($433) + 4)|0;
  $436 = $435;
  HEAP32[$436>>2] = $432;
  $437 = $417 ^ $431;
  $438 = $418 ^ $432;
  $439 = (_rotr64_100($437,$438,16)|0);
  $440 = tempRet0;
  $441 = $160;
  $442 = $441;
  HEAP32[$442>>2] = $439;
  $443 = (($441) + 4)|0;
  $444 = $443;
  HEAP32[$444>>2] = $440;
  $445 = (_fBlaMka($425,$426,$439,$440)|0);
  $446 = tempRet0;
  $447 = $108;
  $448 = $447;
  HEAP32[$448>>2] = $445;
  $449 = (($447) + 4)|0;
  $450 = $449;
  HEAP32[$450>>2] = $446;
  $451 = $429 ^ $445;
  $452 = $430 ^ $446;
  $453 = (_rotr64_100($451,$452,63)|0);
  $454 = tempRet0;
  $455 = $14;
  $456 = $455;
  HEAP32[$456>>2] = $453;
  $457 = (($455) + 4)|0;
  $458 = $457;
  HEAP32[$458>>2] = $454;
  $459 = (($$0) + 1)|0;
  $$0 = $459;
 }
 while(1) {
  $exitcond = ($$1|0)==(8);
  if ($exitcond) {
   break;
  }
  $460 = $$1 << 1;
  $461 = (($3) + ($460<<3)|0);
  $462 = $461;
  $463 = $462;
  $464 = HEAP32[$463>>2]|0;
  $465 = (($462) + 4)|0;
  $466 = $465;
  $467 = HEAP32[$466>>2]|0;
  $468 = (($460) + 32)|0;
  $469 = (($3) + ($468<<3)|0);
  $470 = $469;
  $471 = $470;
  $472 = HEAP32[$471>>2]|0;
  $473 = (($470) + 4)|0;
  $474 = $473;
  $475 = HEAP32[$474>>2]|0;
  $476 = (_fBlaMka($464,$467,$472,$475)|0);
  $477 = tempRet0;
  $478 = (($460) + 96)|0;
  $479 = (($3) + ($478<<3)|0);
  $480 = $479;
  $481 = $480;
  $482 = HEAP32[$481>>2]|0;
  $483 = (($480) + 4)|0;
  $484 = $483;
  $485 = HEAP32[$484>>2]|0;
  $486 = $482 ^ $476;
  $487 = $485 ^ $477;
  $488 = (_rotr64_100($486,$487,32)|0);
  $489 = tempRet0;
  $490 = (($460) + 64)|0;
  $491 = (($3) + ($490<<3)|0);
  $492 = $491;
  $493 = $492;
  $494 = HEAP32[$493>>2]|0;
  $495 = (($492) + 4)|0;
  $496 = $495;
  $497 = HEAP32[$496>>2]|0;
  $498 = (_fBlaMka($494,$497,$488,$489)|0);
  $499 = tempRet0;
  $500 = $472 ^ $498;
  $501 = $475 ^ $499;
  $502 = (_rotr64_100($500,$501,24)|0);
  $503 = tempRet0;
  $504 = (_fBlaMka($476,$477,$502,$503)|0);
  $505 = tempRet0;
  $506 = $461;
  $507 = $506;
  HEAP32[$507>>2] = $504;
  $508 = (($506) + 4)|0;
  $509 = $508;
  HEAP32[$509>>2] = $505;
  $510 = $488 ^ $504;
  $511 = $489 ^ $505;
  $512 = (_rotr64_100($510,$511,16)|0);
  $513 = tempRet0;
  $514 = $479;
  $515 = $514;
  HEAP32[$515>>2] = $512;
  $516 = (($514) + 4)|0;
  $517 = $516;
  HEAP32[$517>>2] = $513;
  $518 = (_fBlaMka($498,$499,$512,$513)|0);
  $519 = tempRet0;
  $520 = $491;
  $521 = $520;
  HEAP32[$521>>2] = $518;
  $522 = (($520) + 4)|0;
  $523 = $522;
  HEAP32[$523>>2] = $519;
  $524 = $502 ^ $518;
  $525 = $503 ^ $519;
  $526 = (_rotr64_100($524,$525,63)|0);
  $527 = tempRet0;
  $528 = $469;
  $529 = $528;
  HEAP32[$529>>2] = $526;
  $530 = (($528) + 4)|0;
  $531 = $530;
  HEAP32[$531>>2] = $527;
  $532 = $460 | 1;
  $533 = (($3) + ($532<<3)|0);
  $534 = $533;
  $535 = $534;
  $536 = HEAP32[$535>>2]|0;
  $537 = (($534) + 4)|0;
  $538 = $537;
  $539 = HEAP32[$538>>2]|0;
  $540 = (($460) + 33)|0;
  $541 = (($3) + ($540<<3)|0);
  $542 = $541;
  $543 = $542;
  $544 = HEAP32[$543>>2]|0;
  $545 = (($542) + 4)|0;
  $546 = $545;
  $547 = HEAP32[$546>>2]|0;
  $548 = (_fBlaMka($536,$539,$544,$547)|0);
  $549 = tempRet0;
  $550 = (($460) + 97)|0;
  $551 = (($3) + ($550<<3)|0);
  $552 = $551;
  $553 = $552;
  $554 = HEAP32[$553>>2]|0;
  $555 = (($552) + 4)|0;
  $556 = $555;
  $557 = HEAP32[$556>>2]|0;
  $558 = $554 ^ $548;
  $559 = $557 ^ $549;
  $560 = (_rotr64_100($558,$559,32)|0);
  $561 = tempRet0;
  $562 = (($460) + 65)|0;
  $563 = (($3) + ($562<<3)|0);
  $564 = $563;
  $565 = $564;
  $566 = HEAP32[$565>>2]|0;
  $567 = (($564) + 4)|0;
  $568 = $567;
  $569 = HEAP32[$568>>2]|0;
  $570 = (_fBlaMka($566,$569,$560,$561)|0);
  $571 = tempRet0;
  $572 = $544 ^ $570;
  $573 = $547 ^ $571;
  $574 = (_rotr64_100($572,$573,24)|0);
  $575 = tempRet0;
  $576 = (_fBlaMka($548,$549,$574,$575)|0);
  $577 = tempRet0;
  $578 = $560 ^ $576;
  $579 = $561 ^ $577;
  $580 = (_rotr64_100($578,$579,16)|0);
  $581 = tempRet0;
  $582 = $551;
  $583 = $582;
  HEAP32[$583>>2] = $580;
  $584 = (($582) + 4)|0;
  $585 = $584;
  HEAP32[$585>>2] = $581;
  $586 = (_fBlaMka($570,$571,$580,$581)|0);
  $587 = tempRet0;
  $588 = $563;
  $589 = $588;
  HEAP32[$589>>2] = $586;
  $590 = (($588) + 4)|0;
  $591 = $590;
  HEAP32[$591>>2] = $587;
  $592 = $574 ^ $586;
  $593 = $575 ^ $587;
  $594 = (_rotr64_100($592,$593,63)|0);
  $595 = tempRet0;
  $596 = (($460) + 16)|0;
  $597 = (($3) + ($596<<3)|0);
  $598 = $597;
  $599 = $598;
  $600 = HEAP32[$599>>2]|0;
  $601 = (($598) + 4)|0;
  $602 = $601;
  $603 = HEAP32[$602>>2]|0;
  $604 = (($460) + 48)|0;
  $605 = (($3) + ($604<<3)|0);
  $606 = $605;
  $607 = $606;
  $608 = HEAP32[$607>>2]|0;
  $609 = (($606) + 4)|0;
  $610 = $609;
  $611 = HEAP32[$610>>2]|0;
  $612 = (_fBlaMka($600,$603,$608,$611)|0);
  $613 = tempRet0;
  $614 = (($460) + 112)|0;
  $615 = (($3) + ($614<<3)|0);
  $616 = $615;
  $617 = $616;
  $618 = HEAP32[$617>>2]|0;
  $619 = (($616) + 4)|0;
  $620 = $619;
  $621 = HEAP32[$620>>2]|0;
  $622 = $618 ^ $612;
  $623 = $621 ^ $613;
  $624 = (_rotr64_100($622,$623,32)|0);
  $625 = tempRet0;
  $626 = (($460) + 80)|0;
  $627 = (($3) + ($626<<3)|0);
  $628 = $627;
  $629 = $628;
  $630 = HEAP32[$629>>2]|0;
  $631 = (($628) + 4)|0;
  $632 = $631;
  $633 = HEAP32[$632>>2]|0;
  $634 = (_fBlaMka($630,$633,$624,$625)|0);
  $635 = tempRet0;
  $636 = $608 ^ $634;
  $637 = $611 ^ $635;
  $638 = (_rotr64_100($636,$637,24)|0);
  $639 = tempRet0;
  $640 = (_fBlaMka($612,$613,$638,$639)|0);
  $641 = tempRet0;
  $642 = $624 ^ $640;
  $643 = $625 ^ $641;
  $644 = (_rotr64_100($642,$643,16)|0);
  $645 = tempRet0;
  $646 = $615;
  $647 = $646;
  HEAP32[$647>>2] = $644;
  $648 = (($646) + 4)|0;
  $649 = $648;
  HEAP32[$649>>2] = $645;
  $650 = (_fBlaMka($634,$635,$644,$645)|0);
  $651 = tempRet0;
  $652 = $638 ^ $650;
  $653 = $639 ^ $651;
  $654 = (_rotr64_100($652,$653,63)|0);
  $655 = tempRet0;
  $656 = (($460) + 17)|0;
  $657 = (($3) + ($656<<3)|0);
  $658 = $657;
  $659 = $658;
  $660 = HEAP32[$659>>2]|0;
  $661 = (($658) + 4)|0;
  $662 = $661;
  $663 = HEAP32[$662>>2]|0;
  $664 = (($460) + 49)|0;
  $665 = (($3) + ($664<<3)|0);
  $666 = $665;
  $667 = $666;
  $668 = HEAP32[$667>>2]|0;
  $669 = (($666) + 4)|0;
  $670 = $669;
  $671 = HEAP32[$670>>2]|0;
  $672 = (_fBlaMka($660,$663,$668,$671)|0);
  $673 = tempRet0;
  $674 = (($460) + 113)|0;
  $675 = (($3) + ($674<<3)|0);
  $676 = $675;
  $677 = $676;
  $678 = HEAP32[$677>>2]|0;
  $679 = (($676) + 4)|0;
  $680 = $679;
  $681 = HEAP32[$680>>2]|0;
  $682 = $678 ^ $672;
  $683 = $681 ^ $673;
  $684 = (_rotr64_100($682,$683,32)|0);
  $685 = tempRet0;
  $686 = (($460) + 81)|0;
  $687 = (($3) + ($686<<3)|0);
  $688 = $687;
  $689 = $688;
  $690 = HEAP32[$689>>2]|0;
  $691 = (($688) + 4)|0;
  $692 = $691;
  $693 = HEAP32[$692>>2]|0;
  $694 = (_fBlaMka($690,$693,$684,$685)|0);
  $695 = tempRet0;
  $696 = $668 ^ $694;
  $697 = $671 ^ $695;
  $698 = (_rotr64_100($696,$697,24)|0);
  $699 = tempRet0;
  $700 = (_fBlaMka($672,$673,$698,$699)|0);
  $701 = tempRet0;
  $702 = $684 ^ $700;
  $703 = $685 ^ $701;
  $704 = (_rotr64_100($702,$703,16)|0);
  $705 = tempRet0;
  $706 = (_fBlaMka($694,$695,$704,$705)|0);
  $707 = tempRet0;
  $708 = $698 ^ $706;
  $709 = $699 ^ $707;
  $710 = (_rotr64_100($708,$709,63)|0);
  $711 = tempRet0;
  $712 = $461;
  $713 = $712;
  $714 = HEAP32[$713>>2]|0;
  $715 = (($712) + 4)|0;
  $716 = $715;
  $717 = HEAP32[$716>>2]|0;
  $718 = (_fBlaMka($714,$717,$594,$595)|0);
  $719 = tempRet0;
  $720 = $704 ^ $718;
  $721 = $705 ^ $719;
  $722 = (_rotr64_100($720,$721,32)|0);
  $723 = tempRet0;
  $724 = (_fBlaMka($650,$651,$722,$723)|0);
  $725 = tempRet0;
  $726 = $594 ^ $724;
  $727 = $595 ^ $725;
  $728 = (_rotr64_100($726,$727,24)|0);
  $729 = tempRet0;
  $730 = (_fBlaMka($718,$719,$728,$729)|0);
  $731 = tempRet0;
  $732 = $461;
  $733 = $732;
  HEAP32[$733>>2] = $730;
  $734 = (($732) + 4)|0;
  $735 = $734;
  HEAP32[$735>>2] = $731;
  $736 = $722 ^ $730;
  $737 = $723 ^ $731;
  $738 = (_rotr64_100($736,$737,16)|0);
  $739 = tempRet0;
  $740 = $675;
  $741 = $740;
  HEAP32[$741>>2] = $738;
  $742 = (($740) + 4)|0;
  $743 = $742;
  HEAP32[$743>>2] = $739;
  $744 = (_fBlaMka($724,$725,$738,$739)|0);
  $745 = tempRet0;
  $746 = $627;
  $747 = $746;
  HEAP32[$747>>2] = $744;
  $748 = (($746) + 4)|0;
  $749 = $748;
  HEAP32[$749>>2] = $745;
  $750 = $728 ^ $744;
  $751 = $729 ^ $745;
  $752 = (_rotr64_100($750,$751,63)|0);
  $753 = tempRet0;
  $754 = $541;
  $755 = $754;
  HEAP32[$755>>2] = $752;
  $756 = (($754) + 4)|0;
  $757 = $756;
  HEAP32[$757>>2] = $753;
  $758 = (_fBlaMka($576,$577,$654,$655)|0);
  $759 = tempRet0;
  $760 = $479;
  $761 = $760;
  $762 = HEAP32[$761>>2]|0;
  $763 = (($760) + 4)|0;
  $764 = $763;
  $765 = HEAP32[$764>>2]|0;
  $766 = $762 ^ $758;
  $767 = $765 ^ $759;
  $768 = (_rotr64_100($766,$767,32)|0);
  $769 = tempRet0;
  $770 = (_fBlaMka($706,$707,$768,$769)|0);
  $771 = tempRet0;
  $772 = $654 ^ $770;
  $773 = $655 ^ $771;
  $774 = (_rotr64_100($772,$773,24)|0);
  $775 = tempRet0;
  $776 = (_fBlaMka($758,$759,$774,$775)|0);
  $777 = tempRet0;
  $778 = $533;
  $779 = $778;
  HEAP32[$779>>2] = $776;
  $780 = (($778) + 4)|0;
  $781 = $780;
  HEAP32[$781>>2] = $777;
  $782 = $768 ^ $776;
  $783 = $769 ^ $777;
  $784 = (_rotr64_100($782,$783,16)|0);
  $785 = tempRet0;
  $786 = $479;
  $787 = $786;
  HEAP32[$787>>2] = $784;
  $788 = (($786) + 4)|0;
  $789 = $788;
  HEAP32[$789>>2] = $785;
  $790 = (_fBlaMka($770,$771,$784,$785)|0);
  $791 = tempRet0;
  $792 = $687;
  $793 = $792;
  HEAP32[$793>>2] = $790;
  $794 = (($792) + 4)|0;
  $795 = $794;
  HEAP32[$795>>2] = $791;
  $796 = $774 ^ $790;
  $797 = $775 ^ $791;
  $798 = (_rotr64_100($796,$797,63)|0);
  $799 = tempRet0;
  $800 = $605;
  $801 = $800;
  HEAP32[$801>>2] = $798;
  $802 = (($800) + 4)|0;
  $803 = $802;
  HEAP32[$803>>2] = $799;
  $804 = (_fBlaMka($640,$641,$710,$711)|0);
  $805 = tempRet0;
  $806 = $551;
  $807 = $806;
  $808 = HEAP32[$807>>2]|0;
  $809 = (($806) + 4)|0;
  $810 = $809;
  $811 = HEAP32[$810>>2]|0;
  $812 = $808 ^ $804;
  $813 = $811 ^ $805;
  $814 = (_rotr64_100($812,$813,32)|0);
  $815 = tempRet0;
  $816 = $491;
  $817 = $816;
  $818 = HEAP32[$817>>2]|0;
  $819 = (($816) + 4)|0;
  $820 = $819;
  $821 = HEAP32[$820>>2]|0;
  $822 = (_fBlaMka($818,$821,$814,$815)|0);
  $823 = tempRet0;
  $824 = $710 ^ $822;
  $825 = $711 ^ $823;
  $826 = (_rotr64_100($824,$825,24)|0);
  $827 = tempRet0;
  $828 = (_fBlaMka($804,$805,$826,$827)|0);
  $829 = tempRet0;
  $830 = $597;
  $831 = $830;
  HEAP32[$831>>2] = $828;
  $832 = (($830) + 4)|0;
  $833 = $832;
  HEAP32[$833>>2] = $829;
  $834 = $814 ^ $828;
  $835 = $815 ^ $829;
  $836 = (_rotr64_100($834,$835,16)|0);
  $837 = tempRet0;
  $838 = $551;
  $839 = $838;
  HEAP32[$839>>2] = $836;
  $840 = (($838) + 4)|0;
  $841 = $840;
  HEAP32[$841>>2] = $837;
  $842 = (_fBlaMka($822,$823,$836,$837)|0);
  $843 = tempRet0;
  $844 = $491;
  $845 = $844;
  HEAP32[$845>>2] = $842;
  $846 = (($844) + 4)|0;
  $847 = $846;
  HEAP32[$847>>2] = $843;
  $848 = $826 ^ $842;
  $849 = $827 ^ $843;
  $850 = (_rotr64_100($848,$849,63)|0);
  $851 = tempRet0;
  $852 = $665;
  $853 = $852;
  HEAP32[$853>>2] = $850;
  $854 = (($852) + 4)|0;
  $855 = $854;
  HEAP32[$855>>2] = $851;
  $856 = $469;
  $857 = $856;
  $858 = HEAP32[$857>>2]|0;
  $859 = (($856) + 4)|0;
  $860 = $859;
  $861 = HEAP32[$860>>2]|0;
  $862 = (_fBlaMka($700,$701,$858,$861)|0);
  $863 = tempRet0;
  $864 = $615;
  $865 = $864;
  $866 = HEAP32[$865>>2]|0;
  $867 = (($864) + 4)|0;
  $868 = $867;
  $869 = HEAP32[$868>>2]|0;
  $870 = $866 ^ $862;
  $871 = $869 ^ $863;
  $872 = (_rotr64_100($870,$871,32)|0);
  $873 = tempRet0;
  $874 = $563;
  $875 = $874;
  $876 = HEAP32[$875>>2]|0;
  $877 = (($874) + 4)|0;
  $878 = $877;
  $879 = HEAP32[$878>>2]|0;
  $880 = (_fBlaMka($876,$879,$872,$873)|0);
  $881 = tempRet0;
  $882 = $858 ^ $880;
  $883 = $861 ^ $881;
  $884 = (_rotr64_100($882,$883,24)|0);
  $885 = tempRet0;
  $886 = (_fBlaMka($862,$863,$884,$885)|0);
  $887 = tempRet0;
  $888 = $657;
  $889 = $888;
  HEAP32[$889>>2] = $886;
  $890 = (($888) + 4)|0;
  $891 = $890;
  HEAP32[$891>>2] = $887;
  $892 = $872 ^ $886;
  $893 = $873 ^ $887;
  $894 = (_rotr64_100($892,$893,16)|0);
  $895 = tempRet0;
  $896 = $615;
  $897 = $896;
  HEAP32[$897>>2] = $894;
  $898 = (($896) + 4)|0;
  $899 = $898;
  HEAP32[$899>>2] = $895;
  $900 = (_fBlaMka($880,$881,$894,$895)|0);
  $901 = tempRet0;
  $902 = $563;
  $903 = $902;
  HEAP32[$903>>2] = $900;
  $904 = (($902) + 4)|0;
  $905 = $904;
  HEAP32[$905>>2] = $901;
  $906 = $884 ^ $900;
  $907 = $885 ^ $901;
  $908 = (_rotr64_100($906,$907,63)|0);
  $909 = tempRet0;
  $910 = $469;
  $911 = $910;
  HEAP32[$911>>2] = $908;
  $912 = (($910) + 4)|0;
  $913 = $912;
  HEAP32[$913>>2] = $909;
  $914 = (($$1) + 1)|0;
  $$1 = $914;
 }
 _copy_block_98($2,$4);
 _xor_block_99($2,$3);
 STACKTOP = sp;return;
}
function _copy_block_98($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _memcpy(($0|0),($1|0),1024)|0;
 return;
}
function _xor_block_99($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(128);
  if ($exitcond) {
   break;
  }
  $2 = (($1) + ($$0<<3)|0);
  $3 = $2;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($0) + ($$0<<3)|0);
  $10 = $9;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = $12 ^ $5;
  $17 = $15 ^ $8;
  $18 = $9;
  $19 = $18;
  HEAP32[$19>>2] = $16;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = $17;
  $22 = (($$0) + 1)|0;
  $$0 = $22;
 }
 return;
}
function _fBlaMka($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (___muldi3(($0|0),0,($2|0),0)|0);
 $5 = tempRet0;
 $6 = (_i64Add(($0|0),($1|0),($2|0),($3|0))|0);
 $7 = tempRet0;
 $8 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $9 = tempRet0;
 $10 = (_i64Add(($6|0),($7|0),($8|0),($9|0))|0);
 $11 = tempRet0;
 tempRet0 = ($11);
 return ($10|0);
}
function _rotr64_100($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_bitshift64Lshr(($0|0),($1|0),($2|0))|0);
 $4 = tempRet0;
 $5 = (64 - ($2))|0;
 $6 = (_bitshift64Shl(($0|0),($1|0),($5|0))|0);
 $7 = tempRet0;
 $8 = $3 | $6;
 $9 = $4 | $7;
 tempRet0 = ($9);
 return ($8|0);
}
function _init_block_value($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _memset(($0|0),0,1024)|0;
 return;
}
function _argon2_ctx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 48|0;
 $2 = sp_a;
 $3 = (_validate_inputs($0)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $$off = (($1) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  $$0 = -26;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 3;
 $10 = ($6>>>0)<($9>>>0);
 $$ = $10 ? $9 : $6;
 $11 = $8 << 2;
 $12 = (($$>>>0) / ($11>>>0))&-1;
 $13 = Math_imul($12, $11)|0;
 HEAP32[$2>>2] = 0;
 $14 = ((($0)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($2)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($2)) + 12|0);
 HEAP32[$17>>2] = $13;
 $18 = ((($2)) + 16|0);
 HEAP32[$18>>2] = $12;
 $19 = $12 << 2;
 $20 = ((($2)) + 20|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($2)) + 24|0);
 HEAP32[$21>>2] = $8;
 $22 = ((($0)) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($2)) + 28|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($2)) + 32|0);
 HEAP32[$25>>2] = $1;
 $26 = (_initialize($2,$0)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 }
 _fill_memory_blocks($2);
 _finalize($0,$2);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _argon2_hash($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $12 = sp_a;
 $13 = (_malloc($8)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$0 = -22;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$12>>2] = $13;
 $15 = ((($12)) + 4|0);
 HEAP32[$15>>2] = $8;
 $16 = ((($12)) + 8|0);
 HEAP32[$16>>2] = $3;
 $17 = ((($12)) + 12|0);
 HEAP32[$17>>2] = $4;
 $18 = ((($12)) + 16|0);
 HEAP32[$18>>2] = $5;
 $19 = ((($12)) + 20|0);
 HEAP32[$19>>2] = $6;
 $20 = ((($12)) + 24|0);
 $21 = ((($12)) + 40|0);
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;
 HEAP32[$21>>2] = $0;
 $22 = ((($12)) + 44|0);
 HEAP32[$22>>2] = $1;
 $23 = ((($12)) + 48|0);
 HEAP32[$23>>2] = $2;
 $24 = ((($12)) + 52|0);
 HEAP32[$24>>2] = $2;
 $25 = ((($12)) + 56|0);
 HEAP32[$25>>2] = 4;
 $26 = (_argon2_ctx($12,$11)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  _sodium_memzero($13,$8);
  _free($13);
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = ($7|0)==(0|0);
 if (!($28)) {
  _memcpy(($7|0),($13|0),($8|0))|0;
 }
 $29 = ($9|0)==(0|0);
 $30 = ($10|0)==(0);
 $or$cond = $29 | $30;
 if (!($or$cond)) {
  $31 = (_encode_string($9,$10,$12,$11)|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   _sodium_memzero($13,$8);
   _sodium_memzero($9,$10);
   _free($13);
   $$0 = -31;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _sodium_memzero($13,$8);
 _free($13);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _argon2i_hash_encoded($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_argon2_hash($0,$1,1,$2,$3,$4,16,0,32,$5,128,1)|0);
 return ($6|0);
}
function _argon2i_hash_raw($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = (_argon2_hash($0,$1,1,$2,$3,$4,16,$5,$6,0,0,1)|0);
 return ($7|0);
}
function _argon2id_hash_encoded($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_argon2_hash($0,$1,1,$2,$3,$4,16,0,32,$5,128,2)|0);
 return ($6|0);
}
function _argon2id_hash_raw($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = (_argon2_hash($0,$1,1,$2,$3,$4,16,$5,$6,0,0,2)|0);
 return ($7|0);
}
function _argon2_verify($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp_a;
 dest=$4; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = (_strlen($0)|0);
 $6 = ((($4)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($4)) + 20|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($4)) + 4|0);
 HEAP32[$8>>2] = $5;
 $9 = (_malloc($5)|0);
 $10 = ((($4)) + 32|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$7>>2]|0;
 $12 = (_malloc($11)|0);
 $13 = ((($4)) + 16|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$8>>2]|0;
 $15 = (_malloc($14)|0);
 HEAP32[$4>>2] = $15;
 $16 = ($15|0)==(0|0);
 $17 = ($12|0)==(0|0);
 $or$cond = $16 | $17;
 if ($or$cond) {
  $19 = $9;
 } else {
  $18 = ($9|0)==(0|0);
  if ($18) {
   $19 = 0;
  } else {
   $22 = (_malloc($14)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    _free($9);
    $24 = HEAP32[$13>>2]|0;
    _free($24);
    $25 = HEAP32[$4>>2]|0;
    _free($25);
    $$0 = -22;
    STACKTOP = sp;return ($$0|0);
   }
   $26 = (_decode_string($4,$0,$3)|0);
   $27 = ($26|0)==(0);
   if (!($27)) {
    $28 = HEAP32[$10>>2]|0;
    _free($28);
    $29 = HEAP32[$13>>2]|0;
    _free($29);
    $30 = HEAP32[$4>>2]|0;
    _free($30);
    _free($22);
    $$0 = $26;
    STACKTOP = sp;return ($$0|0);
   }
   $31 = ((($4)) + 40|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($4)) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($4)) + 52|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = HEAP32[$13>>2]|0;
   $38 = HEAP32[$7>>2]|0;
   $39 = HEAP32[$8>>2]|0;
   $40 = (_argon2_hash($32,$34,$36,$1,$2,$37,$38,$22,$39,0,0,$3)|0);
   $41 = HEAP32[$10>>2]|0;
   _free($41);
   $42 = HEAP32[$13>>2]|0;
   _free($42);
   $43 = ($40|0)==(0);
   if ($43) {
    $44 = HEAP32[$4>>2]|0;
    $45 = HEAP32[$8>>2]|0;
    $46 = (_sodium_memcmp($22,$44,$45)|0);
    $47 = ($46|0)==(0);
    if ($47) {
     $$01 = 0;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    $$01 = -35;
   }
   _free($22);
   $48 = HEAP32[$4>>2]|0;
   _free($48);
   $$0 = $$01;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _free($19);
 $20 = HEAP32[$13>>2]|0;
 _free($20);
 $21 = HEAP32[$4>>2]|0;
 _free($21);
 $$0 = -22;
 STACKTOP = sp;return ($$0|0);
}
function _argon2i_verify($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_argon2_verify($0,$1,$2,1)|0);
 return ($3|0);
}
function _argon2id_verify($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_argon2_verify($0,$1,$2,2)|0);
 return ($3|0);
}
function _blake2b_long($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$in = 0, $$02 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 528|0;
 $4 = sp_a;
 $5 = sp_a + 384|0;
 $6 = sp_a + 456|0;
 $7 = sp_a + 392|0;
 HEAP32[$5>>2] = 0;
 _store32_le_103($5,$1);
 $8 = ($1>>>0)<(65);
 L1: do {
  if ($8) {
   $9 = (_crypto_generichash_blake2b_init($4,0,0,$1)|0);
   $10 = ($9|0)<(0);
   if (!($10)) {
    (_crypto_generichash_blake2b_update($4,$5,4,0)|0);
    (_crypto_generichash_blake2b_update($4,$2,$3,0)|0);
    (_crypto_generichash_blake2b_final($4,$0,$1)|0);
   }
  } else {
   $11 = (_crypto_generichash_blake2b_init($4,0,0,64)|0);
   $12 = ($11|0)<(0);
   if (!($12)) {
    (_crypto_generichash_blake2b_update($4,$5,4,0)|0);
    (_crypto_generichash_blake2b_update($4,$2,$3,0)|0);
    $13 = (_crypto_generichash_blake2b_final($4,$6,64)|0);
    $14 = ($13|0)<(0);
    if (!($14)) {
     dest=$0; src=$6; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $$0$in = $1;$$pn = $0;
     while(1) {
      $$0 = (($$0$in) + -32)|0;
      $$02 = ((($$pn)) + 32|0);
      $15 = ($$0>>>0)>(64);
      dest=$7; src=$6; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      if (!($15)) {
       break;
      }
      $16 = (_crypto_generichash_blake2b($6,64,$7,64,0,0,0)|0);
      $17 = ($16|0)<(0);
      if ($17) {
       break L1;
      }
      dest=$$02; src=$6; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      $$0$in = $$0;$$pn = $$02;
     }
     $18 = (_crypto_generichash_blake2b($6,$$0,$7,64,0,0,0)|0);
     $19 = ($18|0)<(0);
     if (!($19)) {
      _memcpy(($$02|0),($6|0),($$0|0))|0;
     }
    }
   }
  }
 } while(0);
 _sodium_memzero($4,384);
 STACKTOP = sp;return;
}
function _store32_le_103($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 return;
}
function _crypto_pwhash_argon2i_alg_argon2i13() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 1;
}
function _crypto_pwhash_argon2i_bytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_pwhash_argon2i_bytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_argon2i_passwd_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 0;
}
function _crypto_pwhash_argon2i_passwd_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_argon2i_saltbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_pwhash_argon2i_strbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 128;
}
function _crypto_pwhash_argon2i_strprefix() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34239|0);
}
function _crypto_pwhash_argon2i_opslimit_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 3;
}
function _crypto_pwhash_argon2i_opslimit_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_argon2i_memlimit_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8192;
}
function _crypto_pwhash_argon2i_memlimit_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -2147483648;
}
function _crypto_pwhash_argon2i_opslimit_interactive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 4;
}
function _crypto_pwhash_argon2i_memlimit_interactive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 33554432;
}
function _crypto_pwhash_argon2i_opslimit_moderate() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 6;
}
function _crypto_pwhash_argon2i_memlimit_moderate() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 134217728;
}
function _crypto_pwhash_argon2i_opslimit_sensitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_pwhash_argon2i_memlimit_sensitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 536870912;
}
function _crypto_pwhash_argon2i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$sink = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $cond = 0, $not$ = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond4$not = 0, $or$cond5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _memset(($0|0),0,($1|0))|0;
 $11 = $9 >>> 10;
 $12 = $1 | $4;
 $13 = $2 | $5;
 $14 = $12 | $7;
 $15 = $13 | $8;
 $16 = ($15>>>0)>(0);
 $17 = ($14>>>0)>(4294967295);
 $18 = ($15|0)==(0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 $21 = ($9>>>0)>(2147484671);
 $or$cond2 = $20 | $21;
 if ($or$cond2) {
  $$sink = 27;
  HEAP32[(33256)>>2] = $$sink;
  return -1;
 }
 $22 = ($2>>>0)<(0);
 $23 = ($1>>>0)<(16);
 $24 = ($2|0)==(0);
 $25 = $24 & $23;
 $26 = $22 | $25;
 $27 = ($8>>>0)<(0);
 $28 = ($7>>>0)<(3);
 $29 = ($8|0)==(0);
 $30 = $29 & $28;
 $31 = $27 | $30;
 $or$cond3 = $26 | $31;
 $32 = ($9>>>0)<(8192);
 $or$cond4 = $or$cond3 | $32;
 $or$cond4$not = $or$cond4 ^ 1;
 $cond = ($10|0)==(1);
 $or$cond5 = $cond & $or$cond4$not;
 if ($or$cond5) {
  $33 = (_argon2i_hash_raw($7,$11,$3,$4,$6,$0,$1)|0);
  $not$ = ($33|0)!=(0);
  $$ = $not$ << 31 >> 31;
  return ($$|0);
 } else {
  $$sink = 22;
  HEAP32[(33256)>>2] = $$sink;
  return -1;
 }
 return (0)|0;
}
function _crypto_pwhash_argon2i_str($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0;
 var $or$cond1 = 0, $or$cond2 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $7 = sp_a;
 dest=$0; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $8 = $6 >>> 10;
 $9 = $2 | $4;
 $10 = $3 | $5;
 $11 = ($10>>>0)>(0);
 $12 = ($9>>>0)>(4294967295);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = ($6>>>0)>(2147484671);
 $or$cond1 = $15 | $16;
 if ($or$cond1) {
  $$sink = 27;
  HEAP32[(33256)>>2] = $$sink;
  STACKTOP = sp;return -1;
 }
 $17 = ($5>>>0)<(0);
 $18 = ($4>>>0)<(3);
 $19 = ($5|0)==(0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $22 = ($6>>>0)<(8192);
 $or$cond2 = $21 | $22;
 if ($or$cond2) {
  $$sink = 22;
  HEAP32[(33256)>>2] = $$sink;
  STACKTOP = sp;return -1;
 } else {
  _randombytes_buf($7,16);
  $23 = (_argon2i_hash_encoded($4,$8,$1,$2,$7,$0)|0);
  $not$ = ($23|0)!=(0);
  $$ = $not$ << 31 >> 31;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function _crypto_pwhash_argon2i_str_verify($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)>(0);
 $5 = ($2>>>0)>(4294967295);
 $6 = ($3|0)==(0);
 $7 = $6 & $5;
 $8 = $4 | $7;
 L1: do {
  if ($8) {
   HEAP32[(33256)>>2] = 27;
   $$0 = -1;
  } else {
   $9 = (_argon2i_verify($0,$1,$2)|0);
   switch ($9|0) {
   case 0:  {
    $$0 = 0;
    break L1;
    break;
   }
   case -35:  {
    HEAP32[(33256)>>2] = 22;
    $$0 = -1;
    break L1;
    break;
   }
   default: {
    $$0 = -1;
    break L1;
   }
   }
  }
 } while(0);
 return ($$0|0);
}
function _crypto_pwhash_argon2i_str_needs_rehash($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (__needs_rehash($0,$1,$2,$3,1)|0);
 return ($4|0);
}
function __needs_rehash($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp_a;
 $6 = (_strlen($0)|0);
 $7 = $3 >>> 10;
 $8 = ($2>>>0)>(0);
 $9 = ($1>>>0)>(4294967295);
 $10 = ($2|0)==(0);
 $11 = $10 & $9;
 $12 = $8 | $11;
 $13 = ($6>>>0)>(127);
 $or$cond = $12 | $13;
 if ($or$cond) {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$5; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $14 = (_malloc($6)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ((($14)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 3;
 $19 = ($18|0)==(0);
 if (!($19)) {
  _memset(($14|0),0,($6|0))|0;
 }
 $20 = ((($5)) + 16|0);
 HEAP32[$20>>2] = $14;
 $21 = ((($5)) + 8|0);
 HEAP32[$21>>2] = $14;
 HEAP32[$5>>2] = $14;
 $22 = ((($5)) + 20|0);
 HEAP32[$22>>2] = $6;
 $23 = ((($5)) + 12|0);
 HEAP32[$23>>2] = $6;
 $24 = ((($5)) + 4|0);
 HEAP32[$24>>2] = $6;
 $25 = ((($5)) + 24|0);
 ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;HEAP32[$25+12>>2]=0|0;
 $26 = (_decode_string($5,$0,$4)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = ((($5)) + 40|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==($1|0);
  if ($30) {
   $31 = ((($5)) + 44|0);
   $32 = HEAP32[$31>>2]|0;
   $not$ = ($32|0)!=($7|0);
   $$2 = $not$&1;
   $$1 = $$2;
  } else {
   $$1 = 1;
  }
 } else {
  HEAP32[(33256)>>2] = 22;
  $$1 = -1;
 }
 _free($14);
 $$0 = $$1;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_pwhash_argon2id_str_needs_rehash($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (__needs_rehash($0,$1,$2,$3,2)|0);
 return ($4|0);
}
function _crypto_pwhash_argon2id_alg_argon2id13() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 2;
}
function _crypto_pwhash_argon2id_bytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_pwhash_argon2id_bytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_argon2id_passwd_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 0;
}
function _crypto_pwhash_argon2id_passwd_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_argon2id_saltbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_pwhash_argon2id_strbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 128;
}
function _crypto_pwhash_argon2id_strprefix() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34249|0);
}
function _crypto_pwhash_argon2id_opslimit_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 1;
}
function _crypto_pwhash_argon2id_opslimit_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_argon2id_memlimit_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8192;
}
function _crypto_pwhash_argon2id_memlimit_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -2147483648;
}
function _crypto_pwhash_argon2id_opslimit_interactive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 2;
}
function _crypto_pwhash_argon2id_memlimit_interactive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 67108864;
}
function _crypto_pwhash_argon2id_opslimit_moderate() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 3;
}
function _crypto_pwhash_argon2id_memlimit_moderate() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 268435456;
}
function _crypto_pwhash_argon2id_opslimit_sensitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 4;
}
function _crypto_pwhash_argon2id_memlimit_sensitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 1073741824;
}
function _crypto_pwhash_argon2id($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$sink = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $cond = 0, $not$ = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond4$not = 0, $or$cond5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _memset(($0|0),0,($1|0))|0;
 $11 = $9 >>> 10;
 $12 = $1 | $4;
 $13 = $2 | $5;
 $14 = $12 | $7;
 $15 = $13 | $8;
 $16 = ($15>>>0)>(0);
 $17 = ($14>>>0)>(4294967295);
 $18 = ($15|0)==(0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 $21 = ($9>>>0)>(2147484671);
 $or$cond2 = $20 | $21;
 if ($or$cond2) {
  $$sink = 27;
  HEAP32[(33256)>>2] = $$sink;
  return -1;
 }
 $22 = ($2>>>0)<(0);
 $23 = ($1>>>0)<(16);
 $24 = ($2|0)==(0);
 $25 = $24 & $23;
 $26 = $22 | $25;
 $27 = ($8>>>0)<(0);
 $28 = ($7>>>0)<(3);
 $29 = ($8|0)==(0);
 $30 = $29 & $28;
 $31 = $27 | $30;
 $or$cond3 = $26 | $31;
 $32 = ($9>>>0)<(8192);
 $or$cond4 = $or$cond3 | $32;
 $or$cond4$not = $or$cond4 ^ 1;
 $cond = ($10|0)==(2);
 $or$cond5 = $cond & $or$cond4$not;
 if ($or$cond5) {
  $33 = (_argon2id_hash_raw($7,$11,$3,$4,$6,$0,$1)|0);
  $not$ = ($33|0)!=(0);
  $$ = $not$ << 31 >> 31;
  return ($$|0);
 } else {
  $$sink = 22;
  HEAP32[(33256)>>2] = $$sink;
  return -1;
 }
 return (0)|0;
}
function _crypto_pwhash_argon2id_str($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0;
 var $or$cond1 = 0, $or$cond2 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $7 = sp_a;
 dest=$0; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $8 = $6 >>> 10;
 $9 = $2 | $4;
 $10 = $3 | $5;
 $11 = ($10>>>0)>(0);
 $12 = ($9>>>0)>(4294967295);
 $13 = ($10|0)==(0);
 $14 = $13 & $12;
 $15 = $11 | $14;
 $16 = ($6>>>0)>(2147484671);
 $or$cond1 = $15 | $16;
 if ($or$cond1) {
  $$sink = 27;
  HEAP32[(33256)>>2] = $$sink;
  STACKTOP = sp;return -1;
 }
 $17 = ($5>>>0)<(0);
 $18 = ($4>>>0)<(3);
 $19 = ($5|0)==(0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $22 = ($6>>>0)<(8192);
 $or$cond2 = $21 | $22;
 if ($or$cond2) {
  $$sink = 22;
  HEAP32[(33256)>>2] = $$sink;
  STACKTOP = sp;return -1;
 } else {
  _randombytes_buf($7,16);
  $23 = (_argon2id_hash_encoded($4,$8,$1,$2,$7,$0)|0);
  $not$ = ($23|0)!=(0);
  $$ = $not$ << 31 >> 31;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function _crypto_pwhash_argon2id_str_verify($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)>(0);
 $5 = ($2>>>0)>(4294967295);
 $6 = ($3|0)==(0);
 $7 = $6 & $5;
 $8 = $4 | $7;
 L1: do {
  if ($8) {
   HEAP32[(33256)>>2] = 27;
   $$0 = -1;
  } else {
   $9 = (_argon2id_verify($0,$1,$2)|0);
   switch ($9|0) {
   case 0:  {
    $$0 = 0;
    break L1;
    break;
   }
   case -35:  {
    HEAP32[(33256)>>2] = 22;
    $$0 = -1;
    break L1;
    break;
   }
   default: {
    $$0 = -1;
    break L1;
   }
   }
  }
 } while(0);
 return ($$0|0);
}
function _crypto_pwhash_alg_argon2i13() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 1;
}
function _crypto_pwhash_alg_argon2id13() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 2;
}
function _crypto_pwhash_alg_default() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 1;
}
function _crypto_pwhash_bytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_pwhash_bytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_passwd_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 0;
}
function _crypto_pwhash_passwd_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_saltbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_pwhash_strbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 128;
}
function _crypto_pwhash_strprefix() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34239|0);
}
function _crypto_pwhash_opslimit_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 3;
}
function _crypto_pwhash_opslimit_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_memlimit_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8192;
}
function _crypto_pwhash_memlimit_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -2147483648;
}
function _crypto_pwhash_opslimit_interactive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 4;
}
function _crypto_pwhash_memlimit_interactive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 33554432;
}
function _crypto_pwhash_opslimit_moderate() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 6;
}
function _crypto_pwhash_memlimit_moderate() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 134217728;
}
function _crypto_pwhash_opslimit_sensitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_pwhash_memlimit_sensitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 536870912;
}
function _crypto_pwhash($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $11 = 0, $12 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 switch ($10|0) {
 case 1:  {
  $11 = (_crypto_pwhash_argon2i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,1)|0);
  $$0 = $11;
  return ($$0|0);
  break;
 }
 case 2:  {
  $12 = (_crypto_pwhash_argon2id($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,2)|0);
  $$0 = $12;
  return ($$0|0);
  break;
 }
 default: {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _crypto_pwhash_str($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = (_crypto_pwhash_argon2i_str($0,$1,$2,$3,$4,$5,$6)|0);
 return ($7|0);
}
function _crypto_pwhash_str_alg($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 switch ($7|0) {
 case 1:  {
  $8 = (_crypto_pwhash_argon2i_str($0,$1,$2,$3,$4,$5,$6)|0);
  $$0 = $8;
  return ($$0|0);
  break;
 }
 case 2:  {
  $9 = (_crypto_pwhash_argon2id_str($0,$1,$2,$3,$4,$5,$6)|0);
  $$0 = $9;
  return ($$0|0);
  break;
 }
 default: {
  _sodium_misuse();
  // unreachable;
 }
 }
 return (0)|0;
}
function _crypto_pwhash_str_verify($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (_strncmp($0,34249,10)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_crypto_pwhash_argon2id_str_verify($0,$1,$2,$3)|0);
  $$0 = $6;
  return ($$0|0);
 }
 $7 = (_strncmp($0,34239,9)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (_crypto_pwhash_argon2i_str_verify($0,$1,$2,$3)|0);
  $$0 = $9;
  return ($$0|0);
 } else {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _crypto_pwhash_str_needs_rehash($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (_strncmp($0,34249,10)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_crypto_pwhash_argon2id_str_needs_rehash($0,$1,$2,$3)|0);
  $$0 = $6;
  return ($$0|0);
 }
 $7 = (_strncmp($0,34239,9)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (_crypto_pwhash_argon2i_str_needs_rehash($0,$1,$2,$3)|0);
  $$0 = $9;
  return ($$0|0);
 } else {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _crypto_pwhash_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34260|0);
}
function _crypto_scalarmult_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34268|0);
}
function _crypto_scalarmult_base($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_scalarmult_curve25519_base($0,$1)|0);
 return ($2|0);
}
function _crypto_scalarmult($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_crypto_scalarmult_curve25519($0,$1,$2)|0);
 return ($3|0);
}
function _crypto_scalarmult_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_scalarmult_scalarbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_scalarmult_curve25519($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$ = 0, $$0$2 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $3 = 0;
 $4 = (_crypto_scalarmult_curve25519_ref10($0,$1,$2)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$01 = 0;
 } else {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $exitcond = ($$01|0)==(32);
  if ($exitcond) {
   break;
  }
  $6 = (($0) + ($$01)|0);
  $7 = HEAP8[$6>>0]|0;
  $$0$ = $3;
  $8 = $$0$ | $7;
  $3 = $8;
  $9 = (($$01) + 1)|0;
  $$01 = $9;
 }
 $$0$2 = $3;
 $10 = $$0$2&255;
 $11 = (($10) + 511)|0;
 $12 = $11 >>> 8;
 $13 = $12 & 1;
 $14 = (0 - ($13))|0;
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_scalarmult_curve25519_base($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_scalarmult_curve25519_ref10_base($0,$1)|0);
 return ($2|0);
}
function _crypto_scalarmult_curve25519_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_scalarmult_curve25519_scalarbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_secretbox_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_secretbox_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_secretbox_zerobytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_secretbox_boxzerobytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_secretbox_macbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_secretbox_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34279|0);
}
function _crypto_secretbox($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_secretbox_xsalsa20poly1305($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_secretbox_open($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_secretbox_xsalsa20poly1305_open($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_secretbox_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_secretbox_detached($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 352|0;
 $7 = sp_a;
 $8 = sp_a + 288|0;
 $9 = sp_a + 256|0;
 (_crypto_core_hsalsa20($9,$5,$6,0)|0);
 $10 = ($0>>>0)>($2>>>0);
 if ($10) {
  $11 = $0;
  $12 = $2;
  $13 = (($11) - ($12))|0;
  $14 = (0)<($4>>>0);
  $15 = ($13>>>0)<($3>>>0);
  $16 = (0)==($4|0);
  $17 = $16 & $15;
  $18 = $14 | $17;
  if ($18) {
   label = 5;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $19 = ($2>>>0)>($0>>>0);
  if ($19) {
   $20 = $2;
   $21 = $0;
   $22 = (($20) - ($21))|0;
   $23 = (0)<($4>>>0);
   $24 = ($22>>>0)<($3>>>0);
   $25 = (0)==($4|0);
   $26 = $25 & $24;
   $27 = $23 | $26;
   if ($27) {
    label = 5;
   } else {
    $$02 = $2;
   }
  } else {
   $$02 = $2;
  }
 }
 if ((label|0) == 5) {
  _memmove(($0|0),($2|0),($3|0))|0;
  $$02 = $0;
 }
 dest=$8; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $28 = ($4>>>0)<(0);
 $29 = ($3>>>0)<(32);
 $30 = ($4|0)==(0);
 $31 = $30 & $29;
 $32 = $28 | $31;
 $33 = $32 ? $3 : 32;
 $34 = $32 ? $4 : 0;
 $36 = 0;$38 = 0;
 while(1) {
  $35 = ($36>>>0)<($34>>>0);
  $37 = ($38>>>0)<($33>>>0);
  $39 = ($36|0)==($34|0);
  $40 = $39 & $37;
  $41 = $35 | $40;
  if (!($41)) {
   break;
  }
  $42 = (($$02) + ($38)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = (_i64Add(($38|0),($36|0),32,0)|0);
  $45 = tempRet0;
  $46 = (($8) + ($44)|0);
  HEAP8[$46>>0] = $43;
  $47 = (_i64Add(($38|0),($36|0),1,0)|0);
  $48 = tempRet0;
  $36 = $48;$38 = $47;
 }
 $49 = (_i64Add(($33|0),($34|0),32,0)|0);
 $50 = tempRet0;
 $51 = ((($5)) + 16|0);
 (_crypto_stream_salsa20_xor($8,$8,$49,$50,$51,$9)|0);
 (_crypto_onetimeauth_poly1305_init($7,$8)|0);
 $53 = 0;$55 = 0;
 while(1) {
  $52 = ($53>>>0)<($34>>>0);
  $54 = ($55>>>0)<($33>>>0);
  $56 = ($53|0)==($34|0);
  $57 = $56 & $54;
  $58 = $52 | $57;
  if (!($58)) {
   break;
  }
  $59 = (_i64Add(($55|0),($53|0),32,0)|0);
  $60 = tempRet0;
  $61 = (($8) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = (($0) + ($55)|0);
  HEAP8[$63>>0] = $62;
  $64 = (_i64Add(($55|0),($53|0),1,0)|0);
  $65 = tempRet0;
  $53 = $65;$55 = $64;
 }
 _sodium_memzero($8,64);
 $66 = ($4>>>0)>(0);
 $67 = ($3>>>0)>(32);
 $68 = ($4|0)==(0);
 $69 = $68 & $67;
 $70 = $66 | $69;
 if (!($70)) {
  _sodium_memzero($9,32);
  (_crypto_onetimeauth_poly1305_update($7,$0,$3,$4)|0);
  (_crypto_onetimeauth_poly1305_final($7,$1)|0);
  _sodium_memzero($7,256);
  STACKTOP = sp;return 0;
 }
 $71 = (($0) + ($33)|0);
 $72 = (($$02) + ($33)|0);
 $73 = (_i64Subtract(($3|0),($4|0),($33|0),($34|0))|0);
 $74 = tempRet0;
 (_crypto_stream_salsa20_xor_ic($71,$72,$73,$74,$51,1,0,$9)|0);
 _sodium_memzero($9,32);
 (_crypto_onetimeauth_poly1305_update($7,$0,$3,$4)|0);
 (_crypto_onetimeauth_poly1305_final($7,$1)|0);
 _sodium_memzero($7,256);
 STACKTOP = sp;return 0;
}
function _crypto_secretbox_easy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)>(0);
 $7 = ($2>>>0)>(4294967279);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  _sodium_misuse();
  // unreachable;
 } else {
  $11 = ((($0)) + 16|0);
  (_crypto_secretbox_detached($11,$0,$1,$2,$3,$4,$5)|0);
  return 0;
 }
 return (0)|0;
}
function _crypto_secretbox_open_detached($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 96|0;
 $7 = sp_a + 32|0;
 $8 = sp_a;
 (_crypto_core_hsalsa20($8,$5,$6,0)|0);
 $9 = ((($5)) + 16|0);
 (_crypto_stream_salsa20($7,32,0,$9,$8)|0);
 $10 = (_crypto_onetimeauth_poly1305_verify($2,$1,$3,$4,$7)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  _sodium_memzero($8,32);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($0|0)==(0|0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($1>>>0)<($0>>>0);
 if ($13) {
  label = 6;
 } else {
  $14 = $1;
  $15 = $0;
  $16 = (($14) - ($15))|0;
  $17 = (0)<($4>>>0);
  $18 = ($16>>>0)<($3>>>0);
  $19 = (0)==($4|0);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if ($21) {
   label = 8;
  } else {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $22 = ($0>>>0)<($1>>>0);
  if ($22) {
   $$02 = $1;
  } else {
   $23 = $0;
   $24 = $1;
   $25 = (($23) - ($24))|0;
   $26 = (0)<($4>>>0);
   $27 = ($25>>>0)<($3>>>0);
   $28 = (0)==($4|0);
   $29 = $28 & $27;
   $30 = $26 | $29;
   if ($30) {
    label = 8;
   } else {
    $$02 = $1;
   }
  }
 }
 if ((label|0) == 8) {
  _memmove(($0|0),($1|0),($3|0))|0;
  $$02 = $0;
 }
 $31 = ($4>>>0)<(0);
 $32 = ($3>>>0)<(32);
 $33 = ($4|0)==(0);
 $34 = $33 & $32;
 $35 = $31 | $34;
 $36 = $35 ? $3 : 32;
 $37 = $35 ? $4 : 0;
 $39 = 0;$41 = 0;
 while(1) {
  $38 = ($39>>>0)<($37>>>0);
  $40 = ($41>>>0)<($36>>>0);
  $42 = ($39|0)==($37|0);
  $43 = $42 & $40;
  $44 = $38 | $43;
  if (!($44)) {
   break;
  }
  $45 = (($$02) + ($41)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = (_i64Add(($41|0),($39|0),32,0)|0);
  $48 = tempRet0;
  $49 = (($7) + ($47)|0);
  HEAP8[$49>>0] = $46;
  $50 = (_i64Add(($41|0),($39|0),1,0)|0);
  $51 = tempRet0;
  $39 = $51;$41 = $50;
 }
 $52 = (_i64Add(($36|0),($37|0),32,0)|0);
 $53 = tempRet0;
 (_crypto_stream_salsa20_xor($7,$7,$52,$53,$9,$8)|0);
 $55 = 0;$57 = 0;
 while(1) {
  $54 = ($55>>>0)<($37>>>0);
  $56 = ($57>>>0)<($36>>>0);
  $58 = ($55|0)==($37|0);
  $59 = $58 & $56;
  $60 = $54 | $59;
  if (!($60)) {
   break;
  }
  $61 = (_i64Add(($57|0),($55|0),32,0)|0);
  $62 = tempRet0;
  $63 = (($7) + ($61)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = (($0) + ($57)|0);
  HEAP8[$65>>0] = $64;
  $66 = (_i64Add(($57|0),($55|0),1,0)|0);
  $67 = tempRet0;
  $55 = $67;$57 = $66;
 }
 $68 = ($4>>>0)>(0);
 $69 = ($3>>>0)>(32);
 $70 = ($4|0)==(0);
 $71 = $70 & $69;
 $72 = $68 | $71;
 if ($72) {
  $73 = (($0) + ($36)|0);
  $74 = (($$02) + ($36)|0);
  $75 = (_i64Subtract(($3|0),($4|0),($36|0),($37|0))|0);
  $76 = tempRet0;
  (_crypto_stream_salsa20_xor_ic($73,$74,$75,$76,$9,1,0,$8)|0);
 }
 _sodium_memzero($8,32);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_secretbox_open_easy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)<(0);
 $7 = ($2>>>0)<(16);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $$0 = -1;
  return ($$0|0);
 }
 $11 = ((($1)) + 16|0);
 $12 = (_i64Add(($2|0),($3|0),-16,-1)|0);
 $13 = tempRet0;
 $14 = (_crypto_secretbox_open_detached($0,$11,$1,$12,$13,$4,$5)|0);
 $$0 = $14;
 return ($$0|0);
}
function _crypto_secretbox_xsalsa20poly1305($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)<(0);
 $7 = ($2>>>0)<(32);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $$0 = -1;
  return ($$0|0);
 }
 (_crypto_stream_xsalsa20_xor($0,$1,$2,$3,$4,$5)|0);
 $11 = ((($0)) + 16|0);
 $12 = ((($0)) + 32|0);
 $13 = (_i64Add(($2|0),($3|0),-32,-1)|0);
 $14 = tempRet0;
 (_crypto_onetimeauth_poly1305($11,$12,$13,$14,$0)|0);
 $$01 = 0;
 while(1) {
  $exitcond = ($$01|0)==(16);
  if ($exitcond) {
   $$0 = 0;
   break;
  }
  $15 = (($0) + ($$01)|0);
  HEAP8[$15>>0] = 0;
  $16 = (($$01) + 1)|0;
  $$01 = $16;
 }
 return ($$0|0);
}
function _crypto_secretbox_xsalsa20poly1305_open($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp_a;
 $7 = ($3>>>0)<(0);
 $8 = ($2>>>0)<(32);
 $9 = ($3|0)==(0);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if ($11) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_crypto_stream_xsalsa20($6,32,0,$4,$5)|0);
 $12 = ((($1)) + 16|0);
 $13 = ((($1)) + 32|0);
 $14 = (_i64Add(($2|0),($3|0),-32,-1)|0);
 $15 = tempRet0;
 $16 = (_crypto_onetimeauth_poly1305_verify($12,$13,$14,$15,$6)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_crypto_stream_xsalsa20_xor($0,$1,$2,$3,$4,$5)|0);
 $$01 = 0;
 while(1) {
  $exitcond = ($$01|0)==(32);
  if ($exitcond) {
   $$0 = 0;
   break;
  }
  $18 = (($0) + ($$01)|0);
  HEAP8[$18>>0] = 0;
  $19 = (($$01) + 1)|0;
  $$01 = $19;
 }
 STACKTOP = sp;return ($$0|0);
}
function _crypto_secretbox_xsalsa20poly1305_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_secretbox_xsalsa20poly1305_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_secretbox_xsalsa20poly1305_zerobytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_secretbox_xsalsa20poly1305_boxzerobytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_secretbox_xsalsa20poly1305_macbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_secretbox_xsalsa20poly1305_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_secretstream_xchacha20poly1305_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_secretstream_xchacha20poly1305_init_push($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 var sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($1,24);
 (_crypto_core_hchacha20($0,$1,$2,0)|0);
 $3 = ((($0)) + 32|0);
 HEAP8[$3>>0]=0&255;HEAP8[$3+1>>0]=(0>>8)&255;HEAP8[$3+2>>0]=(0>>16)&255;HEAP8[$3+3>>0]=0>>24;
 $4 = ((($0)) + 36|0);
 $5 = ((($1)) + 16|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8)|(HEAPU8[$10+2>>0]<<16)|(HEAPU8[$10+3>>0]<<24);
 $12 = $4;
 $13 = $12;
 HEAP8[$13>>0]=$8&255;HEAP8[$13+1>>0]=($8>>8)&255;HEAP8[$13+2>>0]=($8>>16)&255;HEAP8[$13+3>>0]=$8>>24;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP8[$15>>0]=$11&255;HEAP8[$15+1>>0]=($11>>8)&255;HEAP8[$15+2>>0]=($11>>16)&255;HEAP8[$15+3>>0]=$11>>24;
 $16 = ((($0)) + 44|0);
 $17 = $16;
 $18 = $17;
 HEAP8[$18>>0]=0&255;HEAP8[$18+1>>0]=(0>>8)&255;HEAP8[$18+2>>0]=(0>>16)&255;HEAP8[$18+3>>0]=0>>24;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP8[$20>>0]=0&255;HEAP8[$20+1>>0]=(0>>8)&255;HEAP8[$20+2>>0]=(0>>16)&255;HEAP8[$20+3>>0]=0>>24;
 return 0;
}
function _crypto_secretstream_xchacha20poly1305_init_pull($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 var sp_a = 0;
 sp = STACKTOP;
 (_crypto_core_hchacha20($0,$1,$2,0)|0);
 $3 = ((($0)) + 32|0);
 HEAP8[$3>>0]=0&255;HEAP8[$3+1>>0]=(0>>8)&255;HEAP8[$3+2>>0]=(0>>16)&255;HEAP8[$3+3>>0]=0>>24;
 $4 = ((($0)) + 36|0);
 $5 = ((($1)) + 16|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8)|(HEAPU8[$10+2>>0]<<16)|(HEAPU8[$10+3>>0]<<24);
 $12 = $4;
 $13 = $12;
 HEAP8[$13>>0]=$8&255;HEAP8[$13+1>>0]=($8>>8)&255;HEAP8[$13+2>>0]=($8>>16)&255;HEAP8[$13+3>>0]=$8>>24;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP8[$15>>0]=$11&255;HEAP8[$15+1>>0]=($11>>8)&255;HEAP8[$15+2>>0]=($11>>16)&255;HEAP8[$15+3>>0]=$11>>24;
 $16 = ((($0)) + 44|0);
 $17 = $16;
 $18 = $17;
 HEAP8[$18>>0]=0&255;HEAP8[$18+1>>0]=(0>>8)&255;HEAP8[$18+2>>0]=(0>>16)&255;HEAP8[$18+3>>0]=0>>24;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP8[$20>>0]=0&255;HEAP8[$20+1>>0]=(0>>8)&255;HEAP8[$20+2>>0]=(0>>16)&255;HEAP8[$20+3>>0]=0>>24;
 return 0;
}
function _crypto_secretstream_xchacha20poly1305_rekey($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond2 = 0, $exitcond3 = 0, $exitcond4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp_a;
 $$0 = 0;
 while(1) {
  $exitcond4 = ($$0|0)==(32);
  if ($exitcond4) {
   break;
  }
  $3 = (($0) + ($$0)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = (($1) + ($$0)|0);
  HEAP8[$5>>0] = $4;
  $6 = (($$0) + 1)|0;
  $$0 = $6;
 }
 $2 = ((($0)) + 36|0);
 $$1 = 0;
 while(1) {
  $exitcond3 = ($$1|0)==(8);
  if ($exitcond3) {
   break;
  }
  $7 = (($2) + ($$1)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = (($$1) + 32)|0;
  $10 = (($1) + ($9)|0);
  HEAP8[$10>>0] = $8;
  $11 = (($$1) + 1)|0;
  $$1 = $11;
 }
 $12 = ((($0)) + 32|0);
 (_crypto_stream_chacha20_ietf_xor($1,$1,40,0,$12,$0)|0);
 $$2 = 0;
 while(1) {
  $exitcond2 = ($$2|0)==(32);
  if ($exitcond2) {
   $$3 = 0;
   break;
  }
  $13 = (($1) + ($$2)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = (($0) + ($$2)|0);
  HEAP8[$15>>0] = $14;
  $16 = (($$2) + 1)|0;
  $$2 = $16;
 }
 while(1) {
  $exitcond = ($$3|0)==(8);
  if ($exitcond) {
   break;
  }
  $17 = (($$3) + 32)|0;
  $18 = (($1) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = (($2) + ($$3)|0);
  HEAP8[$20>>0] = $19;
  $21 = (($$3) + 1)|0;
  $$3 = $21;
 }
 HEAP8[$12>>0]=0&255;HEAP8[$12+1>>0]=(0>>8)&255;HEAP8[$12+2>>0]=(0>>16)&255;HEAP8[$12+3>>0]=0>>24;
 STACKTOP = sp;return;
}
function _crypto_secretstream_xchacha20poly1305_push($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 336|0;
 $10 = sp_a;
 $11 = sp_a + 264|0;
 $12 = sp_a + 256|0;
 $13 = ($2|0)==(0|0);
 if (!($13)) {
  $14 = $2;
  $15 = $14;
  HEAP32[$15>>2] = 0;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = 0;
 }
 $18 = ($5>>>0)>(0);
 $19 = ($4>>>0)>(4294967295);
 $20 = ($5|0)==(0);
 $21 = $20 & $19;
 $22 = $18 | $21;
 if ($22) {
  _sodium_misuse();
  // unreachable;
 }
 $23 = ((($0)) + 32|0);
 (_crypto_stream_chacha20_ietf($11,64,0,$23,$0)|0);
 (_crypto_onetimeauth_poly1305_init($10,$11)|0);
 _sodium_memzero($11,64);
 (_crypto_onetimeauth_poly1305_update($10,$6,$7,$8)|0);
 $24 = (_i64Subtract(0,0,($7|0),($8|0))|0);
 $25 = tempRet0;
 $26 = $24 & 15;
 (_crypto_onetimeauth_poly1305_update($10,35992,$26,0)|0);
 $27 = ((($11)) + 1|0);
 dest=$27; stop=dest+63|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP8[$11>>0] = $9;
 (_crypto_stream_chacha20_ietf_xor_ic($11,$11,64,0,$23,1,$0)|0);
 (_crypto_onetimeauth_poly1305_update($10,$11,64,0)|0);
 $28 = HEAP8[$11>>0]|0;
 HEAP8[$1>>0] = $28;
 $29 = ((($1)) + 1|0);
 (_crypto_stream_chacha20_ietf_xor_ic($29,$3,$4,$5,$23,2,$0)|0);
 (_crypto_onetimeauth_poly1305_update($10,$29,$4,$5)|0);
 $30 = $4 & 15;
 (_crypto_onetimeauth_poly1305_update($10,35992,$30,0)|0);
 _store64_le_129($12,$7,$8);
 (_crypto_onetimeauth_poly1305_update($10,$12,8,0)|0);
 $31 = (_i64Add(($4|0),($5|0),64,0)|0);
 $32 = tempRet0;
 _store64_le_129($12,$31,$32);
 (_crypto_onetimeauth_poly1305_update($10,$12,8,0)|0);
 $33 = (($29) + ($4)|0);
 (_crypto_onetimeauth_poly1305_final($10,$33)|0);
 _sodium_memzero($10,256);
 $34 = ((($0)) + 36|0);
 _xor_buf($34,$33);
 _sodium_increment($23);
 $35 = $9 & 2;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $37 = (_sodium_is_zero($23)|0);
  $38 = ($37|0)==(0);
  if (!($38)) {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  _crypto_secretstream_xchacha20poly1305_rekey($0);
 }
 if ($13) {
  STACKTOP = sp;return 0;
 }
 $39 = (_i64Add(($4|0),($5|0),17,0)|0);
 $40 = tempRet0;
 $41 = $2;
 $42 = $41;
 HEAP32[$42>>2] = $39;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $40;
 STACKTOP = sp;return 0;
}
function _store64_le_129($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 HEAP8[$4>>0]=$1&255;HEAP8[$4+1>>0]=($1>>8)&255;HEAP8[$4+2>>0]=($1>>16)&255;HEAP8[$4+3>>0]=$1>>24;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP8[$6>>0]=$2&255;HEAP8[$6+1>>0]=($2>>8)&255;HEAP8[$6+2>>0]=($2>>16)&255;HEAP8[$6+3>>0]=$2>>24;
 return;
}
function _xor_buf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(8);
  if ($exitcond) {
   break;
  }
  $2 = (($1) + ($$0)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = (($0) + ($$0)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 ^ $3;
  HEAP8[$4>>0] = $6;
  $7 = (($$0) + 1)|0;
  $$0 = $7;
 }
 return;
}
function _crypto_secretstream_xchacha20poly1305_pull($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 352|0;
 $10 = sp_a;
 $11 = sp_a + 280|0;
 $12 = sp_a + 272|0;
 $13 = sp_a + 256|0;
 $14 = ($2|0)==(0|0);
 if (!($14)) {
  $15 = $2;
  $16 = $15;
  HEAP32[$16>>2] = 0;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = 0;
 }
 $19 = ($3|0)==(0|0);
 if (!($19)) {
  HEAP8[$3>>0] = -1;
 }
 $20 = ($6>>>0)<(0);
 $21 = ($5>>>0)<(17);
 $22 = ($6|0)==(0);
 $23 = $22 & $21;
 $24 = $20 | $23;
 if ($24) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (_i64Add(($5|0),($6|0),-17,-1)|0);
 $26 = tempRet0;
 $27 = ($26>>>0)>(0);
 $28 = ($25>>>0)>(4294967295);
 $29 = ($26|0)==(0);
 $30 = $29 & $28;
 $31 = $27 | $30;
 if ($31) {
  _sodium_misuse();
  // unreachable;
 }
 $32 = ((($0)) + 32|0);
 (_crypto_stream_chacha20_ietf($11,64,0,$32,$0)|0);
 (_crypto_onetimeauth_poly1305_init($10,$11)|0);
 _sodium_memzero($11,64);
 (_crypto_onetimeauth_poly1305_update($10,$7,$8,$9)|0);
 $33 = (_i64Subtract(0,0,($8|0),($9|0))|0);
 $34 = tempRet0;
 $35 = $33 & 15;
 (_crypto_onetimeauth_poly1305_update($10,35992,$35,0)|0);
 $36 = ((($11)) + 1|0);
 dest=$36; stop=dest+63|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $37 = HEAP8[$4>>0]|0;
 HEAP8[$11>>0] = $37;
 (_crypto_stream_chacha20_ietf_xor_ic($11,$11,64,0,$32,1,$0)|0);
 $38 = HEAP8[$11>>0]|0;
 $39 = HEAP8[$4>>0]|0;
 HEAP8[$11>>0] = $39;
 (_crypto_onetimeauth_poly1305_update($10,$11,64,0)|0);
 $40 = ((($4)) + 1|0);
 (_crypto_onetimeauth_poly1305_update($10,$40,$25,$26)|0);
 $41 = (_i64Add(($5|0),($6|0),15,0)|0);
 $42 = tempRet0;
 $43 = $41 & 15;
 (_crypto_onetimeauth_poly1305_update($10,35992,$43,0)|0);
 _store64_le_129($12,$8,$9);
 (_crypto_onetimeauth_poly1305_update($10,$12,8,0)|0);
 $44 = (_i64Add(($5|0),($6|0),47,0)|0);
 $45 = tempRet0;
 _store64_le_129($12,$44,$45);
 (_crypto_onetimeauth_poly1305_update($10,$12,8,0)|0);
 (_crypto_onetimeauth_poly1305_final($10,$13)|0);
 _sodium_memzero($10,256);
 $46 = (($40) + ($25)|0);
 $47 = (_sodium_memcmp($13,$46,16)|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  _sodium_memzero($13,16);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_crypto_stream_chacha20_ietf_xor_ic($1,$40,$25,$26,$32,2,$0)|0);
 $49 = ((($0)) + 36|0);
 _xor_buf($49,$13);
 _sodium_increment($32);
 $50 = $38 & 2;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $52 = (_sodium_is_zero($32)|0);
  $53 = ($52|0)==(0);
  if (!($53)) {
   label = 12;
  }
 } else {
  label = 12;
 }
 if ((label|0) == 12) {
  _crypto_secretstream_xchacha20poly1305_rekey($0);
 }
 if (!($14)) {
  $54 = $2;
  $55 = $54;
  HEAP32[$55>>2] = $25;
  $56 = (($54) + 4)|0;
  $57 = $56;
  HEAP32[$57>>2] = $26;
 }
 if ($19) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$3>>0] = $38;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_secretstream_xchacha20poly1305_statebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 52;
}
function _crypto_secretstream_xchacha20poly1305_abytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 17;
}
function _crypto_secretstream_xchacha20poly1305_headerbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_secretstream_xchacha20poly1305_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_secretstream_xchacha20poly1305_messagebytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_secretstream_xchacha20poly1305_tag_message() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 0;
}
function _crypto_secretstream_xchacha20poly1305_tag_push() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 1;
}
function _crypto_secretstream_xchacha20poly1305_tag_rekey() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 2;
}
function _crypto_secretstream_xchacha20poly1305_tag_final() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 3;
}
function _crypto_shorthash_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_shorthash_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_shorthash_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34296|0);
}
function _crypto_shorthash($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_shorthash_siphash24($0,$1,$2,$3,$4)|0);
 return 0;
}
function _crypto_shorthash_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,16);
 return;
}
function _crypto_shorthash_siphash24_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_shorthash_siphash24_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_shorthash_siphash24($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$01 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $trunc$clear = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_load64_le_133($4)|0);
 $6 = tempRet0;
 $7 = ((($4)) + 8|0);
 $8 = (_load64_le_133($7)|0);
 $9 = tempRet0;
 $10 = (($1) + ($2)|0);
 $11 = $2 & 7;
 $12 = (0 - ($11))|0;
 $13 = (($10) + ($12)|0);
 $14 = $8 ^ 2037671283;
 $15 = $9 ^ 1952801890;
 $16 = $5 ^ 1852142177;
 $17 = $6 ^ 1819895653;
 $18 = $8 ^ 1852075885;
 $19 = $9 ^ 1685025377;
 $20 = $5 ^ 1886610805;
 $21 = $6 ^ 1936682341;
 $$01 = $1;$26 = $14;$28 = $15;$29 = $20;$30 = $21;$31 = $18;$32 = $19;$41 = $16;$42 = $17;
 while(1) {
  $22 = ($$01|0)==($13|0);
  if ($22) {
   break;
  }
  $23 = (_load64_le_133($$01)|0);
  $24 = tempRet0;
  $25 = $26 ^ $23;
  $27 = $28 ^ $24;
  $33 = (_i64Add(($29|0),($30|0),($31|0),($32|0))|0);
  $34 = tempRet0;
  $35 = (_rotl64($31,$32,13)|0);
  $36 = tempRet0;
  $37 = $35 ^ $33;
  $38 = $36 ^ $34;
  $39 = (_rotl64($33,$34,32)|0);
  $40 = tempRet0;
  $43 = (_i64Add(($41|0),($42|0),($25|0),($27|0))|0);
  $44 = tempRet0;
  $45 = (_rotl64($25,$27,16)|0);
  $46 = tempRet0;
  $47 = $45 ^ $43;
  $48 = $46 ^ $44;
  $49 = (_i64Add(($39|0),($40|0),($47|0),($48|0))|0);
  $50 = tempRet0;
  $51 = (_rotl64($47,$48,21)|0);
  $52 = tempRet0;
  $53 = $51 ^ $49;
  $54 = $52 ^ $50;
  $55 = (_i64Add(($43|0),($44|0),($37|0),($38|0))|0);
  $56 = tempRet0;
  $57 = (_rotl64($37,$38,17)|0);
  $58 = tempRet0;
  $59 = $57 ^ $55;
  $60 = $58 ^ $56;
  $61 = (_rotl64($55,$56,32)|0);
  $62 = tempRet0;
  $63 = (_i64Add(($49|0),($50|0),($59|0),($60|0))|0);
  $64 = tempRet0;
  $65 = (_rotl64($59,$60,13)|0);
  $66 = tempRet0;
  $67 = $65 ^ $63;
  $68 = $66 ^ $64;
  $69 = (_rotl64($63,$64,32)|0);
  $70 = tempRet0;
  $71 = (_i64Add(($61|0),($62|0),($53|0),($54|0))|0);
  $72 = tempRet0;
  $73 = (_rotl64($53,$54,16)|0);
  $74 = tempRet0;
  $75 = $73 ^ $71;
  $76 = $74 ^ $72;
  $77 = (_i64Add(($69|0),($70|0),($75|0),($76|0))|0);
  $78 = tempRet0;
  $79 = (_rotl64($75,$76,21)|0);
  $80 = tempRet0;
  $81 = $79 ^ $77;
  $82 = $80 ^ $78;
  $83 = (_i64Add(($71|0),($72|0),($67|0),($68|0))|0);
  $84 = tempRet0;
  $85 = (_rotl64($67,$68,17)|0);
  $86 = tempRet0;
  $87 = $85 ^ $83;
  $88 = $86 ^ $84;
  $89 = (_rotl64($83,$84,32)|0);
  $90 = tempRet0;
  $91 = $77 ^ $23;
  $92 = $78 ^ $24;
  $93 = ((($$01)) + 8|0);
  $$01 = $93;$26 = $81;$28 = $82;$29 = $91;$30 = $92;$31 = $87;$32 = $88;$41 = $89;$42 = $90;
 }
 $94 = (_bitshift64Shl(($2|0),($3|0),56)|0);
 $95 = tempRet0;
 $96 = $2&255;
 $trunc$clear = $96 & 7;
 switch ($trunc$clear<<24>>24) {
 case 7:  {
  $97 = ((($13)) + 6|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = (_bitshift64Shl(($99|0),0,48)|0);
  $101 = tempRet0;
  $102 = $94 | $100;
  $103 = $95 | $101;
  $110 = $102;$112 = $103;
  label = 6;
  break;
 }
 case 6:  {
  $110 = $94;$112 = $95;
  label = 6;
  break;
 }
 case 5:  {
  $117 = $95;$330 = $94;
  label = 7;
  break;
 }
 case 4:  {
  $124 = $94;$126 = $95;
  label = 8;
  break;
 }
 case 3:  {
  $133 = $94;$135 = $95;
  label = 9;
  break;
 }
 case 2:  {
  $142 = $94;$144 = $95;
  label = 10;
  break;
 }
 case 1:  {
  $148 = $94;$331 = $95;
  label = 11;
  break;
 }
 default: {
  $150 = $94;$152 = $95;
 }
 }
 if ((label|0) == 6) {
  $104 = ((($13)) + 5|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = (_bitshift64Shl(($106|0),0,40)|0);
  $108 = tempRet0;
  $109 = $110 | $107;
  $111 = $112 | $108;
  $117 = $111;$330 = $109;
  label = 7;
 }
 if ((label|0) == 7) {
  $113 = ((($13)) + 4|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114&255;
  $116 = $117 | $115;
  $124 = $330;$126 = $116;
  label = 8;
 }
 if ((label|0) == 8) {
  $118 = ((($13)) + 3|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = (_bitshift64Shl(($120|0),0,24)|0);
  $122 = tempRet0;
  $123 = $124 | $121;
  $125 = $126 | $122;
  $133 = $123;$135 = $125;
  label = 9;
 }
 if ((label|0) == 9) {
  $127 = ((($13)) + 2|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&255;
  $130 = (_bitshift64Shl(($129|0),0,16)|0);
  $131 = tempRet0;
  $132 = $133 | $130;
  $134 = $135 | $131;
  $142 = $132;$144 = $134;
  label = 10;
 }
 if ((label|0) == 10) {
  $136 = ((($13)) + 1|0);
  $137 = HEAP8[$136>>0]|0;
  $138 = $137&255;
  $139 = (_bitshift64Shl(($138|0),0,8)|0);
  $140 = tempRet0;
  $141 = $142 | $139;
  $143 = $144 | $140;
  $148 = $141;$331 = $143;
  label = 11;
 }
 if ((label|0) == 11) {
  $145 = HEAP8[$13>>0]|0;
  $146 = $145&255;
  $147 = $148 | $146;
  $150 = $147;$152 = $331;
 }
 $149 = $26 ^ $150;
 $151 = $28 ^ $152;
 $153 = (_i64Add(($29|0),($30|0),($31|0),($32|0))|0);
 $154 = tempRet0;
 $155 = (_rotl64($31,$32,13)|0);
 $156 = tempRet0;
 $157 = $155 ^ $153;
 $158 = $156 ^ $154;
 $159 = (_rotl64($153,$154,32)|0);
 $160 = tempRet0;
 $161 = (_i64Add(($41|0),($42|0),($149|0),($151|0))|0);
 $162 = tempRet0;
 $163 = (_rotl64($149,$151,16)|0);
 $164 = tempRet0;
 $165 = $163 ^ $161;
 $166 = $164 ^ $162;
 $167 = (_i64Add(($159|0),($160|0),($165|0),($166|0))|0);
 $168 = tempRet0;
 $169 = (_rotl64($165,$166,21)|0);
 $170 = tempRet0;
 $171 = $169 ^ $167;
 $172 = $170 ^ $168;
 $173 = (_i64Add(($161|0),($162|0),($157|0),($158|0))|0);
 $174 = tempRet0;
 $175 = (_rotl64($157,$158,17)|0);
 $176 = tempRet0;
 $177 = $175 ^ $173;
 $178 = $176 ^ $174;
 $179 = (_rotl64($173,$174,32)|0);
 $180 = tempRet0;
 $181 = (_i64Add(($167|0),($168|0),($177|0),($178|0))|0);
 $182 = tempRet0;
 $183 = (_rotl64($177,$178,13)|0);
 $184 = tempRet0;
 $185 = $183 ^ $181;
 $186 = $184 ^ $182;
 $187 = (_rotl64($181,$182,32)|0);
 $188 = tempRet0;
 $189 = (_i64Add(($179|0),($180|0),($171|0),($172|0))|0);
 $190 = tempRet0;
 $191 = (_rotl64($171,$172,16)|0);
 $192 = tempRet0;
 $193 = $191 ^ $189;
 $194 = $192 ^ $190;
 $195 = (_i64Add(($187|0),($188|0),($193|0),($194|0))|0);
 $196 = tempRet0;
 $197 = (_rotl64($193,$194,21)|0);
 $198 = tempRet0;
 $199 = $197 ^ $195;
 $200 = $198 ^ $196;
 $201 = (_i64Add(($189|0),($190|0),($185|0),($186|0))|0);
 $202 = tempRet0;
 $203 = (_rotl64($185,$186,17)|0);
 $204 = tempRet0;
 $205 = $203 ^ $201;
 $206 = $204 ^ $202;
 $207 = (_rotl64($201,$202,32)|0);
 $208 = tempRet0;
 $209 = $207 ^ 255;
 $210 = $195 ^ $150;
 $211 = $196 ^ $152;
 $212 = (_i64Add(($210|0),($211|0),($205|0),($206|0))|0);
 $213 = tempRet0;
 $214 = (_rotl64($205,$206,13)|0);
 $215 = tempRet0;
 $216 = $214 ^ $212;
 $217 = $215 ^ $213;
 $218 = (_rotl64($212,$213,32)|0);
 $219 = tempRet0;
 $220 = (_i64Add(($209|0),($208|0),($199|0),($200|0))|0);
 $221 = tempRet0;
 $222 = (_rotl64($199,$200,16)|0);
 $223 = tempRet0;
 $224 = $222 ^ $220;
 $225 = $223 ^ $221;
 $226 = (_i64Add(($218|0),($219|0),($224|0),($225|0))|0);
 $227 = tempRet0;
 $228 = (_rotl64($224,$225,21)|0);
 $229 = tempRet0;
 $230 = $228 ^ $226;
 $231 = $229 ^ $227;
 $232 = (_i64Add(($220|0),($221|0),($216|0),($217|0))|0);
 $233 = tempRet0;
 $234 = (_rotl64($216,$217,17)|0);
 $235 = tempRet0;
 $236 = $234 ^ $232;
 $237 = $235 ^ $233;
 $238 = (_rotl64($232,$233,32)|0);
 $239 = tempRet0;
 $240 = (_i64Add(($226|0),($227|0),($236|0),($237|0))|0);
 $241 = tempRet0;
 $242 = (_rotl64($236,$237,13)|0);
 $243 = tempRet0;
 $244 = $242 ^ $240;
 $245 = $243 ^ $241;
 $246 = (_rotl64($240,$241,32)|0);
 $247 = tempRet0;
 $248 = (_i64Add(($238|0),($239|0),($230|0),($231|0))|0);
 $249 = tempRet0;
 $250 = (_rotl64($230,$231,16)|0);
 $251 = tempRet0;
 $252 = $250 ^ $248;
 $253 = $251 ^ $249;
 $254 = (_i64Add(($246|0),($247|0),($252|0),($253|0))|0);
 $255 = tempRet0;
 $256 = (_rotl64($252,$253,21)|0);
 $257 = tempRet0;
 $258 = $256 ^ $254;
 $259 = $257 ^ $255;
 $260 = (_i64Add(($248|0),($249|0),($244|0),($245|0))|0);
 $261 = tempRet0;
 $262 = (_rotl64($244,$245,17)|0);
 $263 = tempRet0;
 $264 = $262 ^ $260;
 $265 = $263 ^ $261;
 $266 = (_rotl64($260,$261,32)|0);
 $267 = tempRet0;
 $268 = (_i64Add(($254|0),($255|0),($264|0),($265|0))|0);
 $269 = tempRet0;
 $270 = (_rotl64($264,$265,13)|0);
 $271 = tempRet0;
 $272 = $270 ^ $268;
 $273 = $271 ^ $269;
 $274 = (_rotl64($268,$269,32)|0);
 $275 = tempRet0;
 $276 = (_i64Add(($266|0),($267|0),($258|0),($259|0))|0);
 $277 = tempRet0;
 $278 = (_rotl64($258,$259,16)|0);
 $279 = tempRet0;
 $280 = $278 ^ $276;
 $281 = $279 ^ $277;
 $282 = (_i64Add(($274|0),($275|0),($280|0),($281|0))|0);
 $283 = tempRet0;
 $284 = (_rotl64($280,$281,21)|0);
 $285 = tempRet0;
 $286 = $284 ^ $282;
 $287 = $285 ^ $283;
 $288 = (_i64Add(($276|0),($277|0),($272|0),($273|0))|0);
 $289 = tempRet0;
 $290 = (_rotl64($272,$273,17)|0);
 $291 = tempRet0;
 $292 = $290 ^ $288;
 $293 = $291 ^ $289;
 $294 = (_rotl64($288,$289,32)|0);
 $295 = tempRet0;
 $296 = (_i64Add(($282|0),($283|0),($292|0),($293|0))|0);
 $297 = tempRet0;
 $298 = (_rotl64($292,$293,13)|0);
 $299 = tempRet0;
 $300 = $298 ^ $296;
 $301 = $299 ^ $297;
 $302 = (_rotl64($296,$297,32)|0);
 $303 = tempRet0;
 $304 = (_i64Add(($294|0),($295|0),($286|0),($287|0))|0);
 $305 = tempRet0;
 $306 = (_rotl64($286,$287,16)|0);
 $307 = tempRet0;
 $308 = $306 ^ $304;
 $309 = $307 ^ $305;
 $310 = (_i64Add(($302|0),($303|0),($308|0),($309|0))|0);
 $311 = tempRet0;
 $312 = (_i64Add(($304|0),($305|0),($300|0),($301|0))|0);
 $313 = tempRet0;
 $314 = (_rotl64($312,$313,32)|0);
 $315 = tempRet0;
 $316 = (_rotl64($300,$301,17)|0);
 $317 = tempRet0;
 $318 = $316 ^ $312;
 $319 = $317 ^ $313;
 $320 = (_rotl64($308,$309,21)|0);
 $321 = tempRet0;
 $322 = $320 ^ $310;
 $323 = $321 ^ $311;
 $324 = $310 ^ $318;
 $325 = $311 ^ $319;
 $326 = $324 ^ $314;
 $327 = $325 ^ $315;
 $328 = $326 ^ $322;
 $329 = $327 ^ $323;
 _store64_le_134($0,$328,$329);
 return 0;
}
function _load64_le_133($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 tempRet0 = ($6);
 return ($3|0);
}
function _rotl64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_bitshift64Shl(($0|0),($1|0),($2|0))|0);
 $4 = tempRet0;
 $5 = (64 - ($2))|0;
 $6 = (_bitshift64Lshr(($0|0),($1|0),($5|0))|0);
 $7 = tempRet0;
 $8 = $3 | $6;
 $9 = $4 | $7;
 tempRet0 = ($9);
 return ($8|0);
}
function _store64_le_134($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 HEAP8[$4>>0]=$1&255;HEAP8[$4+1>>0]=($1>>8)&255;HEAP8[$4+2>>0]=($1>>16)&255;HEAP8[$4+3>>0]=$1>>24;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP8[$6>>0]=$2&255;HEAP8[$6+1>>0]=($2>>8)&255;HEAP8[$6+2>>0]=($2>>16)&255;HEAP8[$6+3>>0]=$2>>24;
 return;
}
function _crypto_sign_statebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 208;
}
function _crypto_sign_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_sign_seedbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_sign_publickeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_sign_secretkeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_sign_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34306|0);
}
function _crypto_sign_seed_keypair($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_sign_ed25519_seed_keypair($0,$1,$2)|0);
 return 0;
}
function _crypto_sign_keypair($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_sign_ed25519_keypair($0,$1)|0);
 return ($2|0);
}
function _crypto_sign($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_sign_ed25519($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_sign_open($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_sign_ed25519_open($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_sign_detached($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_sign_ed25519_detached($0,$1,$2,$3,$4,$5)|0);
 return 0;
}
function _crypto_sign_verify_detached($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_crypto_sign_ed25519_verify_detached($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_sign_init($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_sign_ed25519ph_init($0)|0);
 return 0;
}
function _crypto_sign_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (_crypto_sign_ed25519ph_update($0,$1,$2,$3)|0);
 return ($4|0);
}
function _crypto_sign_final_create($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_sign_ed25519ph_final_create($0,$1,$2,$3)|0);
 return 0;
}
function _crypto_sign_final_verify($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_crypto_sign_ed25519ph_final_verify($0,$1,$2)|0);
 return ($3|0);
}
function _crypto_sign_ed25519ph_statebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 208;
}
function _crypto_sign_ed25519_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_sign_ed25519_seedbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_sign_ed25519_publickeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_sign_ed25519_secretkeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_sign_ed25519_sk_to_seed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _memmove(($0|0),($1|0),32)|0;
 return 0;
}
function _crypto_sign_ed25519_sk_to_pk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 32|0);
 _memmove(($0|0),($2|0),32)|0;
 return 0;
}
function _crypto_sign_ed25519ph_init($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_hash_sha512_init($0)|0);
 return 0;
}
function _crypto_sign_ed25519ph_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = (_crypto_hash_sha512_update($0,$1,$2,$3)|0);
 return ($4|0);
}
function _crypto_sign_ed25519ph_final_create($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp_a;
 (_crypto_hash_sha512_final($0,$4)|0);
 __crypto_sign_ed25519_detached($1,$2,$4,64,0,$3,1);
 STACKTOP = sp;return 0;
}
function _crypto_sign_ed25519ph_final_verify($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp_a;
 (_crypto_hash_sha512_final($0,$3)|0);
 $4 = (__crypto_sign_ed25519_verify_detached($1,$3,64,0,$2,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _crypto_sign_ed25519_seed_keypair($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 160|0;
 $3 = sp_a;
 (_crypto_hash_sha512($1,$2,32,0)|0);
 $4 = HEAP8[$1>>0]|0;
 $5 = $4 & -8;
 HEAP8[$1>>0] = $5;
 $6 = ((($1)) + 31|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 & 63;
 $9 = $8 | 64;
 HEAP8[$6>>0] = $9;
 _crypto_core_curve25519_ref10_ge_scalarmult_base($3,$1);
 _crypto_core_curve25519_ref10_ge_p3_tobytes($0,$3);
 _memmove(($1|0),($2|0),32)|0;
 $10 = ((($1)) + 32|0);
 _memmove(($10|0),($0|0),32)|0;
 STACKTOP = sp;return 0;
}
function _crypto_sign_ed25519_keypair($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp_a;
 _randombytes_buf($2,32);
 (_crypto_sign_ed25519_seed_keypair($0,$1,$2)|0);
 _sodium_memzero($2,32);
 STACKTOP = sp;return 0;
}
function _crypto_sign_ed25519_pk_to_curve25519($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 400|0;
 $2 = sp_a + 240|0;
 $3 = sp_a + 80|0;
 $4 = sp_a + 40|0;
 $5 = sp_a;
 $6 = (__crypto_sign_ed25519_small_order($1)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_crypto_core_curve25519_ref10_ge_frombytes_negate_vartime($2,$1)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _crypto_core_curve25519_ref10_ge_mul_l($3,$2);
 $10 = (_crypto_core_curve25519_ref10_fe_isnonzero($3)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _crypto_core_curve25519_ref10_fe_1($5);
 $12 = ((($2)) + 40|0);
 _crypto_core_curve25519_ref10_fe_sub($5,$5,$12);
 _crypto_core_curve25519_ref10_fe_invert($5,$5);
 _crypto_core_curve25519_ref10_fe_1($4);
 _crypto_core_curve25519_ref10_fe_add($4,$4,$12);
 _crypto_core_curve25519_ref10_fe_mul($4,$4,$5);
 _crypto_core_curve25519_ref10_fe_tobytes($0,$4);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_sign_ed25519_sk_to_curve25519($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $2 = sp_a;
 (_crypto_hash_sha512($2,$1,32,0)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & -8;
 HEAP8[$2>>0] = $4;
 $5 = ((($2)) + 31|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 63;
 $8 = $7 | 64;
 HEAP8[$5>>0] = $8;
 dest=$0; src=$2; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _sodium_memzero($2,64);
 STACKTOP = sp;return 0;
}
function __crypto_sign_ed25519_small_order($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$02 = 0;
 while(1) {
  $1 = ($$02>>>0)<(12);
  if ($1) {
   $$01 = 0;$$03 = 0;
  } else {
   $$0 = 0;
   label = 7;
   break;
  }
  while(1) {
   $exitcond = ($$03|0)==(32);
   if ($exitcond) {
    break;
   }
   $2 = (($0) + ($$03)|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ((16 + ($$02<<5)|0) + ($$03)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $3 ^ $5;
   $7 = $$01 | $6;
   $8 = (($$03) + 1)|0;
   $$01 = $7;$$03 = $8;
  }
  $9 = ($$01<<24>>24)==(0);
  if ($9) {
   $$0 = 1;
   label = 7;
   break;
  }
  $10 = (($$02) + 1)|0;
  $$02 = $10;
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 return (0)|0;
}
function __crypto_sign_ed25519_verify_detached($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 592|0;
 $6 = sp_a;
 $7 = sp_a + 520|0;
 $8 = sp_a + 488|0;
 $9 = sp_a + 328|0;
 $10 = sp_a + 208|0;
 $11 = ((($0)) + 32|0);
 $12 = (_crypto_sign_check_S_lt_L($11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (__crypto_sign_ed25519_small_order($0)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (_crypto_core_curve25519_ref10_ge_frombytes_negate_vartime($9,$4)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$01 = 0;$$02 = 0;
 } else {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $exitcond = ($$02|0)==(32);
  if ($exitcond) {
   break;
  }
  $18 = (($4) + ($$02)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $$01 | $19;
  $21 = (($$02) + 1)|0;
  $$01 = $20;$$02 = $21;
 }
 $22 = ($$01<<24>>24)==(0);
 if ($22) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 __crypto_sign_ed25519_ref10_hinit($6,$5);
 (_crypto_hash_sha512_update($6,$0,32,0)|0);
 (_crypto_hash_sha512_update($6,$4,32,0)|0);
 (_crypto_hash_sha512_update($6,$1,$2,$3)|0);
 (_crypto_hash_sha512_final($6,$7)|0);
 _crypto_core_curve25519_ref10_sc_reduce($7);
 _crypto_core_curve25519_ref10_ge_double_scalarmult_vartime($10,$7,$9,$11);
 _crypto_core_curve25519_ref10_ge_tobytes($8,$10);
 $23 = (_crypto_verify_32($8,$0)|0);
 $24 = ($8|0)==($0|0);
 $25 = $24 ? -1 : $23;
 $26 = (_sodium_memcmp($0,$8,32)|0);
 $27 = $25 | $26;
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_sign_check_S_lt_L($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 32;$$01 = 0;$$02 = 1;
 while(1) {
  $1 = (($$0) + -1)|0;
  $2 = (($0) + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (34314 + ($1)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (($4) - ($7))|0;
  $9 = $8 >>> 8;
  $10 = $$02 & 255;
  $11 = $9 & $10;
  $12 = $$01 & 255;
  $13 = $12 | $11;
  $14 = $3 ^ $6;
  $15 = $14&255;
  $16 = (($15) + 65535)|0;
  $17 = $16 >>> 8;
  $18 = $10 & $17;
  $19 = ($1|0)==(0);
  if ($19) {
   break;
  } else {
   $$0 = $1;$$01 = $13;$$02 = $18;
  }
 }
 $20 = ($13|0)==(0);
 $21 = $20 << 31 >> 31;
 return ($21|0);
}
function _crypto_sign_ed25519_verify_detached($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (__crypto_sign_ed25519_verify_detached($0,$1,$2,$3,$4,0)|0);
 return ($5|0);
}
function _crypto_sign_ed25519_open($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = ($4>>>0)<(0);
 $7 = ($3>>>0)<(64);
 $8 = ($4|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 do {
  if (!($10)) {
   $11 = (_i64Add(($3|0),($4|0),-64,-1)|0);
   $12 = tempRet0;
   $13 = ($12>>>0)>(0);
   $14 = ($11>>>0)>(4294967231);
   $15 = ($12|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   if (!($17)) {
    $18 = ((($2)) + 64|0);
    $19 = (_crypto_sign_ed25519_verify_detached($2,$18,$11,$12,$5)|0);
    $20 = ($19|0)==(0);
    if (!($20)) {
     _memset(($0|0),0,($11|0))|0;
     break;
    }
    $21 = ($1|0)==(0|0);
    if (!($21)) {
     $22 = $1;
     $23 = $22;
     HEAP32[$23>>2] = $11;
     $24 = (($22) + 4)|0;
     $25 = $24;
     HEAP32[$25>>2] = $12;
    }
    _memmove(($0|0),($18|0),($11|0))|0;
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 $26 = ($1|0)==(0|0);
 if ($26) {
  $$0 = -1;
  return ($$0|0);
 }
 $27 = $1;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function __crypto_sign_ed25519_ref10_hinit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_hash_sha512_init($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 (_crypto_hash_sha512_update($0,34346,34,0)|0);
 return;
}
function __crypto_sign_ed25519_detached($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 560|0;
 $7 = sp_a;
 $8 = sp_a + 496|0;
 $9 = sp_a + 432|0;
 $10 = sp_a + 368|0;
 $11 = sp_a + 208|0;
 (_crypto_hash_sha512($8,$5,32,0)|0);
 $12 = HEAP8[$8>>0]|0;
 $13 = $12 & -8;
 HEAP8[$8>>0] = $13;
 $14 = ((($8)) + 31|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & 63;
 $17 = $16 | 64;
 HEAP8[$14>>0] = $17;
 __crypto_sign_ed25519_ref10_hinit($7,$6);
 $18 = ((($8)) + 32|0);
 (_crypto_hash_sha512_update($7,$18,32,0)|0);
 (_crypto_hash_sha512_update($7,$2,$3,$4)|0);
 (_crypto_hash_sha512_final($7,$9)|0);
 $19 = ((($0)) + 32|0);
 $20 = ((($5)) + 32|0);
 _memmove(($19|0),($20|0),32)|0;
 _crypto_core_curve25519_ref10_sc_reduce($9);
 _crypto_core_curve25519_ref10_ge_scalarmult_base($11,$9);
 _crypto_core_curve25519_ref10_ge_p3_tobytes($0,$11);
 __crypto_sign_ed25519_ref10_hinit($7,$6);
 (_crypto_hash_sha512_update($7,$0,64,0)|0);
 (_crypto_hash_sha512_update($7,$2,$3,$4)|0);
 (_crypto_hash_sha512_final($7,$10)|0);
 _crypto_core_curve25519_ref10_sc_reduce($10);
 _crypto_core_curve25519_ref10_sc_muladd($19,$10,$8,$9);
 _sodium_memzero($8,64);
 $21 = ($1|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = $22;
 HEAP32[$23>>2] = 64;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_detached($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 __crypto_sign_ed25519_detached($0,$1,$2,$3,$4,$5,0);
 return 0;
}
function _crypto_sign_ed25519($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp_a;
 $7 = ((($0)) + 64|0);
 _memmove(($7|0),($2|0),($3|0))|0;
 (_crypto_sign_ed25519_detached($0,$6,$7,$3,$4,$5)|0);
 $8 = $6;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==(64);
 $15 = ($13|0)==(0);
 $16 = $14 & $15;
 $17 = ($1|0)==(0|0);
 if ($16) {
  if ($17) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $24 = (_i64Add(($3|0),($4|0),64,0)|0);
  $25 = tempRet0;
  $26 = $1;
  $27 = $26;
  HEAP32[$27>>2] = $24;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $25;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  if (!($17)) {
   $18 = $1;
   $19 = $18;
   HEAP32[$19>>2] = 0;
   $20 = (($18) + 4)|0;
   $21 = $20;
   HEAP32[$21>>2] = 0;
  }
  $22 = (_i64Add(($3|0),($4|0),64,0)|0);
  $23 = tempRet0;
  _memset(($0|0),0,($22|0))|0;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _crypto_stream_chacha20_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_stream_chacha20_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_stream_chacha20_ietf_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_stream_chacha20_ietf_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 12;
}
function _crypto_stream_chacha20($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_stream_ref($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_stream_chacha20_ietf($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_stream_ietf_ref($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_stream_chacha20_xor_ic($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $8 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $8 = (_stream_ref_xor_ic($0,$1,$2,$3,$4,$5,$6,$7)|0);
 return ($8|0);
}
function _crypto_stream_chacha20_ietf_xor_ic($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = (_stream_ietf_ref_xor_ic($0,$1,$2,$3,$4,$5,$6)|0);
 return ($7|0);
}
function _crypto_stream_chacha20_xor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_stream_ref_xor_ic($0,$1,$2,$3,$4,0,0,$5)|0);
 return ($6|0);
}
function _crypto_stream_chacha20_ietf_xor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_stream_ietf_ref_xor_ic($0,$1,$2,$3,$4,0,$5)|0);
 return ($6|0);
}
function _crypto_stream_chacha20_ietf_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_stream_chacha20_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _stream_ref($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp_a;
 $6 = ($1|0)==(0);
 $7 = ($2|0)==(0);
 $8 = $6 & $7;
 if ($8) {
  STACKTOP = sp;return 0;
 }
 _chacha_keysetup($5,$4);
 _chacha_ivsetup($5,$3,0);
 _memset(($0|0),0,($1|0))|0;
 _chacha20_encrypt_bytes($5,$0,$0,$1,$2);
 _sodium_memzero($5,64);
 STACKTOP = sp;return 0;
}
function _stream_ietf_ref($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp_a;
 $6 = ($1|0)==(0);
 $7 = ($2|0)==(0);
 $8 = $6 & $7;
 if ($8) {
  STACKTOP = sp;return 0;
 }
 _chacha_keysetup($5,$4);
 _chacha_ietf_ivsetup($5,$3,0);
 _memset(($0|0),0,($1|0))|0;
 _chacha20_encrypt_bytes($5,$0,$0,$1,$2);
 _sodium_memzero($5,64);
 STACKTOP = sp;return 0;
}
function _stream_ref_xor_ic($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 80|0;
 $8 = sp_a;
 $9 = sp_a + 64|0;
 $10 = ($2|0)==(0);
 $11 = ($3|0)==(0);
 $12 = $10 & $11;
 if ($12) {
  STACKTOP = sp;return 0;
 }
 _store32_le_177($9,$5);
 $13 = ((($9)) + 4|0);
 _store32_le_177($13,$6);
 _chacha_keysetup($8,$7);
 _chacha_ivsetup($8,$4,$9);
 _chacha20_encrypt_bytes($8,$1,$0,$2,$3);
 _sodium_memzero($8,64);
 STACKTOP = sp;return 0;
}
function _stream_ietf_ref_xor_ic($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 80|0;
 $7 = sp_a;
 $8 = sp_a + 64|0;
 $9 = ($2|0)==(0);
 $10 = ($3|0)==(0);
 $11 = $9 & $10;
 if ($11) {
  STACKTOP = sp;return 0;
 }
 _store32_le_177($8,$5);
 _chacha_keysetup($7,$6);
 _chacha_ietf_ivsetup($7,$4,$8);
 _chacha20_encrypt_bytes($7,$1,$0,$2,$3);
 _sodium_memzero($7,64);
 STACKTOP = sp;return 0;
}
function _store32_le_177($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 return;
}
function _chacha_keysetup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 1634760805;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 857760878;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 2036477234;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 1797285236;
 $5 = (_load32_le_179($1)|0);
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($1)) + 4|0);
 $8 = (_load32_le_179($7)|0);
 $9 = ((($0)) + 20|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($1)) + 8|0);
 $11 = (_load32_le_179($10)|0);
 $12 = ((($0)) + 24|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($1)) + 12|0);
 $14 = (_load32_le_179($13)|0);
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($1)) + 16|0);
 $17 = (_load32_le_179($16)|0);
 $18 = ((($0)) + 32|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($1)) + 20|0);
 $20 = (_load32_le_179($19)|0);
 $21 = ((($0)) + 36|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($1)) + 24|0);
 $23 = (_load32_le_179($22)|0);
 $24 = ((($0)) + 40|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($1)) + 28|0);
 $26 = (_load32_le_179($25)|0);
 $27 = ((($0)) + 44|0);
 HEAP32[$27>>2] = $26;
 return;
}
function _chacha_ietf_ivsetup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $6 = 0;
 } else {
  $4 = (_load32_le_179($2)|0);
  $6 = $4;
 }
 $5 = ((($0)) + 48|0);
 HEAP32[$5>>2] = $6;
 $7 = (_load32_le_179($1)|0);
 $8 = ((($0)) + 52|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 4|0);
 $10 = (_load32_le_179($9)|0);
 $11 = ((($0)) + 56|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($1)) + 8|0);
 $13 = (_load32_le_179($12)|0);
 $14 = ((($0)) + 60|0);
 HEAP32[$14>>2] = $13;
 return;
}
function _chacha20_encrypt_bytes($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$$024 = 0, $$0 = 0, $$01 = 0, $$010 = 0, $$011 = 0, $$012 = 0, $$013 = 0, $$014 = 0, $$015 = 0, $$016 = 0, $$017 = 0, $$018 = 0, $$019 = 0, $$020 = 0, $$021 = 0, $$022 = 0, $$024 = 0, $$026 = 0, $$03 = 0, $$06 = 0;
 var $$07 = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$12 = 0, $$123 = 0, $$14 = 0, $$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp_a;
 $6 = ($3|0)==(0);
 $7 = ($4|0)==(0);
 $8 = $6 & $7;
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ($4>>>0)>(0);
 $10 = ($3>>>0)>(4294967295);
 $11 = ($4|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 if ($13) {
  _sodium_misuse();
  // unreachable;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($0)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($0)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($0)) + 44|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($0)) + 48|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 52|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 56|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 60|0);
 $44 = HEAP32[$43>>2]|0;
 $$01 = $1;$$022 = 0;$$024 = $40;$$026 = $38;$$03 = $2;$46 = $4;$48 = $3;
 while(1) {
  $45 = ($46>>>0)<(0);
  $47 = ($48>>>0)<(64);
  $49 = ($46|0)==(0);
  $50 = $49 & $47;
  $51 = $45 | $50;
  L9: do {
   if ($51) {
    dest=$5; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$0 = 0;
    while(1) {
     $52 = (0)<($46>>>0);
     $53 = ($$0>>>0)<($48>>>0);
     $54 = (0)==($46|0);
     $55 = $54 & $53;
     $56 = $52 | $55;
     if (!($56)) {
      $$12 = $5;$$123 = $$03;$$14 = $5;
      break L9;
     }
     $57 = (($$01) + ($$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = (($5) + ($$0)|0);
     HEAP8[$59>>0] = $58;
     $60 = (($$0) + 1)|0;
     $$0 = $60;
    }
   } else {
    $$12 = $$01;$$123 = $$022;$$14 = $$03;
   }
  } while(0);
  $$010 = $22;$$011 = $24;$$012 = $26;$$013 = $28;$$014 = $30;$$015 = $32;$$016 = $34;$$017 = $36;$$018 = $$026;$$019 = $$024;$$020 = $42;$$021 = $44;$$06 = $14;$$07 = $16;$$08 = $18;$$09 = $20;$$1 = 20;
  while(1) {
   $61 = ($$1|0)==(0);
   if ($61) {
    break;
   }
   $62 = (($$06) + ($$010))|0;
   $63 = $$018 ^ $62;
   $64 = (_rotl32_178($63,16)|0);
   $65 = (($$014) + ($64))|0;
   $66 = $$010 ^ $65;
   $67 = (_rotl32_178($66,12)|0);
   $68 = (($62) + ($67))|0;
   $69 = $64 ^ $68;
   $70 = (_rotl32_178($69,8)|0);
   $71 = (($65) + ($70))|0;
   $72 = $67 ^ $71;
   $73 = (_rotl32_178($72,7)|0);
   $74 = (($$07) + ($$011))|0;
   $75 = $$019 ^ $74;
   $76 = (_rotl32_178($75,16)|0);
   $77 = (($$015) + ($76))|0;
   $78 = $$011 ^ $77;
   $79 = (_rotl32_178($78,12)|0);
   $80 = (($74) + ($79))|0;
   $81 = $76 ^ $80;
   $82 = (_rotl32_178($81,8)|0);
   $83 = (($77) + ($82))|0;
   $84 = $79 ^ $83;
   $85 = (_rotl32_178($84,7)|0);
   $86 = (($$08) + ($$012))|0;
   $87 = $$020 ^ $86;
   $88 = (_rotl32_178($87,16)|0);
   $89 = (($$016) + ($88))|0;
   $90 = $$012 ^ $89;
   $91 = (_rotl32_178($90,12)|0);
   $92 = (($86) + ($91))|0;
   $93 = $88 ^ $92;
   $94 = (_rotl32_178($93,8)|0);
   $95 = (($89) + ($94))|0;
   $96 = $91 ^ $95;
   $97 = (_rotl32_178($96,7)|0);
   $98 = (($$09) + ($$013))|0;
   $99 = $$021 ^ $98;
   $100 = (_rotl32_178($99,16)|0);
   $101 = (($$017) + ($100))|0;
   $102 = $$013 ^ $101;
   $103 = (_rotl32_178($102,12)|0);
   $104 = (($98) + ($103))|0;
   $105 = $100 ^ $104;
   $106 = (_rotl32_178($105,8)|0);
   $107 = (($101) + ($106))|0;
   $108 = $103 ^ $107;
   $109 = (_rotl32_178($108,7)|0);
   $110 = (($68) + ($85))|0;
   $111 = $106 ^ $110;
   $112 = (_rotl32_178($111,16)|0);
   $113 = (($95) + ($112))|0;
   $114 = $85 ^ $113;
   $115 = (_rotl32_178($114,12)|0);
   $116 = (($110) + ($115))|0;
   $117 = $112 ^ $116;
   $118 = (_rotl32_178($117,8)|0);
   $119 = (($113) + ($118))|0;
   $120 = (($80) + ($97))|0;
   $121 = $70 ^ $120;
   $122 = (_rotl32_178($121,16)|0);
   $123 = (($107) + ($122))|0;
   $124 = $97 ^ $123;
   $125 = (_rotl32_178($124,12)|0);
   $126 = (($120) + ($125))|0;
   $127 = $122 ^ $126;
   $128 = (_rotl32_178($127,8)|0);
   $129 = (($123) + ($128))|0;
   $130 = (($92) + ($109))|0;
   $131 = $82 ^ $130;
   $132 = (_rotl32_178($131,16)|0);
   $133 = (($71) + ($132))|0;
   $134 = $109 ^ $133;
   $135 = (_rotl32_178($134,12)|0);
   $136 = (($130) + ($135))|0;
   $137 = $132 ^ $136;
   $138 = (_rotl32_178($137,8)|0);
   $139 = (($133) + ($138))|0;
   $140 = (($104) + ($73))|0;
   $141 = $94 ^ $140;
   $142 = (_rotl32_178($141,16)|0);
   $143 = (($83) + ($142))|0;
   $144 = $73 ^ $143;
   $145 = (_rotl32_178($144,12)|0);
   $146 = (($140) + ($145))|0;
   $147 = $142 ^ $146;
   $148 = (_rotl32_178($147,8)|0);
   $149 = (($143) + ($148))|0;
   $150 = $145 ^ $149;
   $151 = (_rotl32_178($150,7)|0);
   $152 = $135 ^ $139;
   $153 = (_rotl32_178($152,7)|0);
   $154 = $125 ^ $129;
   $155 = (_rotl32_178($154,7)|0);
   $156 = $115 ^ $119;
   $157 = (_rotl32_178($156,7)|0);
   $158 = (($$1) + -2)|0;
   $$010 = $151;$$011 = $157;$$012 = $155;$$013 = $153;$$014 = $139;$$015 = $149;$$016 = $119;$$017 = $129;$$018 = $128;$$019 = $138;$$020 = $148;$$021 = $118;$$06 = $116;$$07 = $126;$$08 = $136;$$09 = $146;$$1 = $158;
  }
  $159 = (($$06) + ($14))|0;
  $160 = (($$07) + ($16))|0;
  $161 = (($$08) + ($18))|0;
  $162 = (($$09) + ($20))|0;
  $163 = (($$010) + ($22))|0;
  $164 = (($$011) + ($24))|0;
  $165 = (($$012) + ($26))|0;
  $166 = (($$013) + ($28))|0;
  $167 = (($$014) + ($30))|0;
  $168 = (($$015) + ($32))|0;
  $169 = (($$016) + ($34))|0;
  $170 = (($$017) + ($36))|0;
  $171 = (($$018) + ($$026))|0;
  $172 = (($$019) + ($$024))|0;
  $173 = (($$020) + ($42))|0;
  $174 = (($$021) + ($44))|0;
  $175 = (_load32_le_179($$12)|0);
  $176 = $159 ^ $175;
  $177 = ((($$12)) + 4|0);
  $178 = (_load32_le_179($177)|0);
  $179 = $160 ^ $178;
  $180 = ((($$12)) + 8|0);
  $181 = (_load32_le_179($180)|0);
  $182 = $161 ^ $181;
  $183 = ((($$12)) + 12|0);
  $184 = (_load32_le_179($183)|0);
  $185 = $162 ^ $184;
  $186 = ((($$12)) + 16|0);
  $187 = (_load32_le_179($186)|0);
  $188 = $163 ^ $187;
  $189 = ((($$12)) + 20|0);
  $190 = (_load32_le_179($189)|0);
  $191 = $164 ^ $190;
  $192 = ((($$12)) + 24|0);
  $193 = (_load32_le_179($192)|0);
  $194 = $165 ^ $193;
  $195 = ((($$12)) + 28|0);
  $196 = (_load32_le_179($195)|0);
  $197 = $166 ^ $196;
  $198 = ((($$12)) + 32|0);
  $199 = (_load32_le_179($198)|0);
  $200 = $167 ^ $199;
  $201 = ((($$12)) + 36|0);
  $202 = (_load32_le_179($201)|0);
  $203 = $168 ^ $202;
  $204 = ((($$12)) + 40|0);
  $205 = (_load32_le_179($204)|0);
  $206 = $169 ^ $205;
  $207 = ((($$12)) + 44|0);
  $208 = (_load32_le_179($207)|0);
  $209 = $170 ^ $208;
  $210 = ((($$12)) + 48|0);
  $211 = (_load32_le_179($210)|0);
  $212 = $171 ^ $211;
  $213 = ((($$12)) + 52|0);
  $214 = (_load32_le_179($213)|0);
  $215 = $172 ^ $214;
  $216 = ((($$12)) + 56|0);
  $217 = (_load32_le_179($216)|0);
  $218 = $173 ^ $217;
  $219 = ((($$12)) + 60|0);
  $220 = (_load32_le_179($219)|0);
  $221 = $174 ^ $220;
  $222 = (($$026) + 1)|0;
  $223 = ($222|0)==(0);
  $224 = $223&1;
  $$$024 = (($$024) + ($224))|0;
  _store32_le_177($$14,$176);
  $225 = ((($$14)) + 4|0);
  _store32_le_177($225,$179);
  $226 = ((($$14)) + 8|0);
  _store32_le_177($226,$182);
  $227 = ((($$14)) + 12|0);
  _store32_le_177($227,$185);
  $228 = ((($$14)) + 16|0);
  _store32_le_177($228,$188);
  $229 = ((($$14)) + 20|0);
  _store32_le_177($229,$191);
  $230 = ((($$14)) + 24|0);
  _store32_le_177($230,$194);
  $231 = ((($$14)) + 28|0);
  _store32_le_177($231,$197);
  $232 = ((($$14)) + 32|0);
  _store32_le_177($232,$200);
  $233 = ((($$14)) + 36|0);
  _store32_le_177($233,$203);
  $234 = ((($$14)) + 40|0);
  _store32_le_177($234,$206);
  $235 = ((($$14)) + 44|0);
  _store32_le_177($235,$209);
  $236 = ((($$14)) + 48|0);
  _store32_le_177($236,$212);
  $237 = ((($$14)) + 52|0);
  _store32_le_177($237,$215);
  $238 = ((($$14)) + 56|0);
  _store32_le_177($238,$218);
  $239 = ((($$14)) + 60|0);
  _store32_le_177($239,$221);
  $240 = ($46>>>0)<(0);
  $241 = ($48>>>0)<(65);
  $242 = ($46|0)==(0);
  $243 = $242 & $241;
  $244 = $240 | $243;
  if ($244) {
   break;
  }
  $252 = (_i64Add(($48|0),($46|0),-64,-1)|0);
  $253 = tempRet0;
  $254 = ((($$14)) + 64|0);
  $255 = ((($$12)) + 64|0);
  $$01 = $255;$$022 = $$123;$$024 = $$$024;$$026 = $222;$$03 = $254;$46 = $253;$48 = $252;
 }
 $245 = ($48|0)==(64);
 $246 = ($46|0)==(0);
 $247 = $245 & $246;
 L21: do {
  if (!($247)) {
   $$2 = 0;
   while(1) {
    $exitcond = ($$2|0)==($48|0);
    if ($exitcond) {
     break L21;
    }
    $248 = (($$14) + ($$2)|0);
    $249 = HEAP8[$248>>0]|0;
    $250 = (($$123) + ($$2)|0);
    HEAP8[$250>>0] = $249;
    $251 = (($$2) + 1)|0;
    $$2 = $251;
   }
  }
 } while(0);
 HEAP32[$37>>2] = $222;
 HEAP32[$39>>2] = $$$024;
 STACKTOP = sp;return;
}
function _rotl32_178($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $0 << $1;
 $3 = (32 - ($1))|0;
 $4 = $0 >>> $3;
 $5 = $2 | $4;
 return ($5|0);
}
function _load32_le_179($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 return ($1|0);
}
function _chacha_ivsetup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = ((($0)) + 48|0);
  HEAP32[$4>>2] = 0;
  $10 = 0;
 } else {
  $5 = (_load32_le_179($2)|0);
  $6 = ((($0)) + 48|0);
  HEAP32[$6>>2] = $5;
  $7 = ((($2)) + 4|0);
  $8 = (_load32_le_179($7)|0);
  $10 = $8;
 }
 $9 = ((($0)) + 52|0);
 HEAP32[$9>>2] = $10;
 $11 = (_load32_le_179($1)|0);
 $12 = ((($0)) + 56|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($1)) + 4|0);
 $14 = (_load32_le_179($13)|0);
 $15 = ((($0)) + 60|0);
 HEAP32[$15>>2] = $14;
 return;
}
function _crypto_stream_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_stream_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_stream_primitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34380|0);
}
function _crypto_stream($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_crypto_stream_xsalsa20($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_stream_xor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_stream_xsalsa20_xor($0,$1,$2,$3,$4,$5)|0);
 return ($6|0);
}
function _crypto_stream_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_stream_salsa20_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_stream_salsa20_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_stream_salsa20($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_stream_ref_233($0,$1,$2,$3,$4)|0);
 return ($5|0);
}
function _crypto_stream_salsa20_xor_ic($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $8 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $8 = (_stream_ref_xor_ic_234($0,$1,$2,$3,$4,$5,$6,$7)|0);
 return ($8|0);
}
function _crypto_stream_salsa20_xor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_stream_ref_xor_ic_234($0,$1,$2,$3,$4,0,0,$5)|0);
 return ($6|0);
}
function _crypto_stream_salsa20_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_stream_xsalsa20($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp_a;
 (_crypto_core_hsalsa20($5,$3,$4,0)|0);
 $6 = ((($3)) + 16|0);
 $7 = (_crypto_stream_salsa20($0,$1,$2,$6,$5)|0);
 _sodium_memzero($5,32);
 STACKTOP = sp;return ($7|0);
}
function _crypto_stream_xsalsa20_xor_ic($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $8 = sp_a;
 (_crypto_core_hsalsa20($8,$4,$7,0)|0);
 $9 = ((($4)) + 16|0);
 $10 = (_crypto_stream_salsa20_xor_ic($0,$1,$2,$3,$9,$5,$6,$8)|0);
 _sodium_memzero($8,32);
 STACKTOP = sp;return ($10|0);
}
function _crypto_stream_xsalsa20_xor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_stream_xsalsa20_xor_ic($0,$1,$2,$3,$4,0,0,$5)|0);
 return ($6|0);
}
function _crypto_stream_xsalsa20_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_stream_xsalsa20_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_stream_xsalsa20_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_verify_16_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_verify_32_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_verify_64_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 64;
}
function _crypto_verify_16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_verify_n($0,$1,16)|0);
 return ($2|0);
}
function _crypto_verify_n($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$ = 0, $$0$1 = 0, $$0$2 = 0, $$0$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $$0 = 0;
 while(1) {
  $6 = ($$0|0)<($2|0);
  if (!($6)) {
   break;
  }
  $$0$3 = $3;
  $7 = (($$0$3) + ($$0)|0);
  $8 = HEAP8[$7>>0]|0;
  $$0$2 = $4;
  $9 = (($$0$2) + ($$0)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $8 ^ $10;
  $12 = $11&255;
  $$0$ = $5;
  $13 = $$0$ | $12;
  $5 = $13;
  $14 = (($$0) + 1)|0;
  $$0 = $14;
 }
 $$0$1 = $5;
 $15 = (($$0$1) + 511)|0;
 $16 = $15 >>> 8;
 $17 = $16 & 1;
 $18 = (($17) + -1)|0;
 STACKTOP = sp;return ($18|0);
}
function _crypto_verify_32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_verify_n($0,$1,32)|0);
 return ($2|0);
}
function _crypto_verify_64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (_crypto_verify_n($0,$1,64)|0);
 return ($2|0);
}
function _randombytes_implementation_name() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (34389|0);
}
function _randombytes_random() {
 var $0 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $0 = _emscripten_asm_const_i(0)|0;
 return ($0|0);
}
function _randombytes_stir() {
 var $0 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $0 = _emscripten_asm_const_i(1)|0;
 return;
}
function _randombytes_uniform($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(2);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (0 - ($0))|0;
 $3 = (($2>>>0) % ($0>>>0))&-1;
 while(1) {
  $4 = (_randombytes_random()|0);
  $5 = ($4>>>0)<($3>>>0);
  if (!($5)) {
   break;
  }
 }
 $6 = (($4>>>0) % ($0>>>0))&-1;
 $$0 = $6;
 return ($$0|0);
}
function _randombytes_buf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==($1|0);
  if ($exitcond) {
   break;
  }
  $2 = (_randombytes_random()|0);
  $3 = $2&255;
  $4 = (($0) + ($$0)|0);
  HEAP8[$4>>0] = $3;
  $5 = (($$0) + 1)|0;
  $$0 = $5;
 }
 return;
}
function _randombytes_buf_deterministic($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_stream_chacha20_ietf($0,$1,0,35147,$2)|0);
 return;
}
function _randombytes_seedbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _randombytes_close() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 0;
}
function _randombytes($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)<(1);
 $4 = ($1>>>0)<(0);
 $5 = ($2|0)==(1);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  _randombytes_buf($0,$1);
  return;
 } else {
  ___assert_fail((35159|0),(35179|0),204,(35205|0));
  // unreachable;
 }
}
function _sodium_bin2hex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$mask = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)<(2147483647);
 $5 = $3 << 1;
 $6 = ($5>>>0)<($1>>>0);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $$0 = 0;
 } else {
  _sodium_misuse();
  // unreachable;
 }
 while(1) {
  $exitcond = ($$0|0)==($3|0);
  if ($exitcond) {
   break;
  }
  $7 = (($2) + ($$0)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 & 15;
  $10 = $9&255;
  $11 = $8&255;
  $12 = $11 >>> 4;
  $13 = (($10) + 65526)|0;
  $14 = $10 << 8;
  $15 = (($14) + 22272)|0;
  $$mask = $13 & 55552;
  $16 = (($15) + ($$mask))|0;
  $17 = (($12) + 87)|0;
  $18 = (($12) + 65526)|0;
  $19 = $18 >>> 8;
  $20 = $19 & 217;
  $21 = (($17) + ($20))|0;
  $22 = $21&255;
  $23 = $$0 << 1;
  $24 = (($0) + ($23)|0);
  HEAP8[$24>>0] = $22;
  $25 = $16 >>> 8;
  $26 = $25&255;
  $27 = $23 | 1;
  $28 = (($0) + ($27)|0);
  HEAP8[$28>>0] = $26;
  $29 = (($$0) + 1)|0;
  $$0 = $29;
 }
 $30 = $3 << 1;
 $31 = (($0) + ($30)|0);
 HEAP8[$31>>0] = 0;
 return ($0|0);
}
function _sodium_hex2bin($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$ph = 0, $$01$ph = 0, $$02 = 0, $$04 = 0, $$04$ph = 0, $$06$ph = 0, $$1 = 0, $$1312 = 0, $$1315 = 0, $$1511 = 0, $$1514 = 0, $$17 = 0, $$28 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = ($4|0)==(0|0);
 $$0$ph = 0;$$01$ph = 0;$$04$ph = 0;$$06$ph = 0;
 L1: while(1) {
  $8 = ($$0$ph<<24>>24)==(0);
  $$04 = $$04$ph;
  while(1) {
   $9 = ($$04>>>0)<($3>>>0);
   if (!($9)) {
    $$02 = 0;
    label = 15;
    break L1;
   }
   $10 = (($2) + ($$04)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 ^ 48;
   $13 = $12&255;
   $14 = (($13) + 65526)|0;
   $15 = $14 >>> 8;
   $16 = $11 & -33;
   $17 = $16&255;
   $18 = (($17) + 201)|0;
   $19 = $18 & 255;
   $20 = (($19) + 65526)|0;
   $21 = (($19) + 65520)|0;
   $22 = $20 ^ $21;
   $23 = $22 >>> 8;
   $24 = $15 | $23;
   $25 = $24 & 255;
   $26 = ($25|0)==(0);
   if (!($26)) {
    break;
   }
   if ($7) {
    $$02 = 0;
    label = 15;
    break L1;
   }
   if (!($8)) {
    label = 16;
    break L1;
   }
   $27 = $11&255;
   $28 = (_strchr($4,$27)|0);
   $29 = ($28|0)==(0|0);
   if ($29) {
    $$1312 = 0;$$1511 = $$04;$$28 = $$06$ph;
    break L1;
   }
   $30 = (($$04) + 1)|0;
   $$04 = $30;
  }
  $31 = $15 & $13;
  $32 = $23 & $18;
  $33 = $31 | $32;
  $34 = ($$06$ph>>>0)<($1>>>0);
  if (!($34)) {
   label = 10;
   break;
  }
  if ($8) {
   $35 = $33 << 4;
   $36 = $35&255;
   $$1 = $36;$$17 = $$06$ph;
  } else {
   $37 = $$01$ph&255;
   $38 = $37 | $33;
   $39 = $38&255;
   $40 = (($$06$ph) + 1)|0;
   $41 = (($0) + ($$06$ph)|0);
   HEAP8[$41>>0] = $39;
   $$1 = $$01$ph;$$17 = $40;
  }
  $42 = $$0$ph ^ -1;
  $43 = (($$04) + 1)|0;
  $$0$ph = $42;$$01$ph = $$1;$$04$ph = $43;$$06$ph = $$17;
 }
 if ((label|0) == 10) {
  HEAP32[(33256)>>2] = 34;
  $$02 = -1;
  label = 15;
 }
 if ((label|0) == 15) {
  if ($8) {
   $45 = ($$02|0)==(0);
   if ($45) {
    $$1312 = 0;$$1511 = $$04;$$28 = $$06$ph;
   } else {
    $$1315 = $$02;$$1514 = $$04;
    label = 18;
   }
  } else {
   label = 16;
  }
 }
 if ((label|0) == 16) {
  $44 = (($$04) + -1)|0;
  HEAP32[(33256)>>2] = 22;
  $$1315 = -1;$$1514 = $44;
  label = 18;
 }
 if ((label|0) == 18) {
  $$1312 = $$1315;$$1511 = $$1514;$$28 = 0;
 }
 $46 = ($6|0)==(0|0);
 if ($46) {
  $48 = ($$1511|0)==($3|0);
  if ($48) {
   $$3 = $$1312;
  } else {
   HEAP32[(33256)>>2] = 22;
   $$3 = -1;
  }
 } else {
  $47 = (($2) + ($$1511)|0);
  HEAP32[$6>>2] = $47;
  $$3 = $$1312;
 }
 $49 = ($5|0)==(0|0);
 if ($49) {
  return ($$3|0);
 }
 HEAP32[$5>>2] = $$28;
 return ($$3|0);
}
function _sodium_base64_encoded_len($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$masked = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _sodium_base64_check_variant($1);
 $2 = (($0>>>0) / 3)&-1;
 $3 = $2 << 2;
 $4 = (($0>>>0) % 3)&-1;
 $5 = $4 >>> 1;
 $$masked = $4 & 1;
 $6 = $$masked | $5;
 $7 = $1 >>> 1;
 $8 = $7 & 1;
 $9 = (0 - ($8))|0;
 $10 = $4 ^ 3;
 $11 = $10 & $9;
 $12 = (4 - ($11))|0;
 $13 = (0 - ($6))|0;
 $14 = $12 & $13;
 $15 = (($3) + ($14))|0;
 $16 = (($15) + 1)|0;
 return ($16|0);
}
function _sodium_base64_check_variant($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0 & -7;
 $2 = ($1|0)==(1);
 if ($2) {
  return;
 } else {
  _sodium_misuse();
  // unreachable;
 }
}
function _sodium_bin2base64($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$07 = 0, $$1 = 0, $$12 = 0, $$14 = 0, $$16 = 0, $$18 = 0, $$29 = 0, $$3 = 0, $$310 = 0, $$4 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond15 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _sodium_base64_check_variant($4);
 $5 = (($3>>>0) / 3)&-1;
 $6 = Math_imul($5, -3)|0;
 $7 = (($6) + ($3))|0;
 $8 = $5 << 2;
 $9 = ($7|0)==(0);
 do {
  if ($9) {
   $$16 = $8;
  } else {
   $10 = $4 & 2;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = (($8) + 4)|0;
    $$16 = $12;
    break;
   } else {
    $13 = $7 >>> 1;
    $14 = (($13) + 2)|0;
    $15 = (($8) + ($14))|0;
    $$16 = $15;
    break;
   }
  }
 } while(0);
 $16 = ($$16>>>0)<($1>>>0);
 if (!($16)) {
  _sodium_misuse();
  // unreachable;
 }
 $17 = $4 & 4;
 $18 = ($17|0)==(0);
 if ($18) {
  $$1 = 0;$$12 = 0;$$29 = 0;$$3 = 0;
  while(1) {
   $exitcond = ($$12|0)==($3|0);
   if ($exitcond) {
    break;
   }
   $43 = $$1 << 8;
   $44 = (($2) + ($$12)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = $43 | $46;
   $48 = (($$29) + 8)|0;
   $$310 = $48;$$4 = $$3;
   while(1) {
    $49 = ($$310>>>0)>(5);
    if (!($49)) {
     break;
    }
    $50 = (($$310) + -6)|0;
    $51 = $47 >>> $50;
    $52 = $51 & 63;
    $53 = (_b64_byte_to_char($52)|0);
    $54 = $53&255;
    $55 = (($$4) + 1)|0;
    $56 = (($0) + ($$4)|0);
    HEAP8[$56>>0] = $54;
    $$310 = $50;$$4 = $55;
   }
   $42 = (($$12) + 1)|0;
   $$1 = $47;$$12 = $42;$$29 = $$310;$$3 = $$4;
  }
  $57 = ($$29|0)==(0);
  if ($57) {
   $$6 = $$3;
  } else {
   $58 = (6 - ($$29))|0;
   $59 = $$1 << $58;
   $60 = $59 & 63;
   $61 = (_b64_byte_to_char($60)|0);
   $62 = $61&255;
   $63 = (($$3) + 1)|0;
   $64 = (($0) + ($$3)|0);
   HEAP8[$64>>0] = $62;
   $$6 = $63;
  }
 } else {
  $$0 = 0;$$01 = 0;$$03 = 0;$$07 = 0;
  while(1) {
   $exitcond15 = ($$01|0)==($3|0);
   if ($exitcond15) {
    break;
   }
   $20 = $$0 << 8;
   $21 = (($2) + ($$01)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $20 | $23;
   $25 = (($$07) + 8)|0;
   $$14 = $$03;$$18 = $25;
   while(1) {
    $26 = ($$18>>>0)>(5);
    if (!($26)) {
     break;
    }
    $27 = (($$18) + -6)|0;
    $28 = $24 >>> $27;
    $29 = $28 & 63;
    $30 = (_b64_byte_to_urlsafe_char($29)|0);
    $31 = $30&255;
    $32 = (($$14) + 1)|0;
    $33 = (($0) + ($$14)|0);
    HEAP8[$33>>0] = $31;
    $$14 = $32;$$18 = $27;
   }
   $19 = (($$01) + 1)|0;
   $$0 = $24;$$01 = $19;$$03 = $$14;$$07 = $$18;
  }
  $34 = ($$07|0)==(0);
  if ($34) {
   $$6 = $$03;
  } else {
   $35 = (6 - ($$07))|0;
   $36 = $$0 << $35;
   $37 = $36 & 63;
   $38 = (_b64_byte_to_urlsafe_char($37)|0);
   $39 = $38&255;
   $40 = (($$03) + 1)|0;
   $41 = (($0) + ($$03)|0);
   HEAP8[$41>>0] = $39;
   $$6 = $40;
  }
 }
 $65 = ($$6>>>0)>($$16>>>0);
 if ($65) {
  ___assert_fail((35217|0),(35236|0),230,(35252|0));
  // unreachable;
 } else {
  $$7 = $$6;
 }
 while(1) {
  $66 = ($$7>>>0)<($$16>>>0);
  if (!($66)) {
   $$8 = $$7;
   break;
  }
  $67 = (($$7) + 1)|0;
  $68 = (($0) + ($$7)|0);
  HEAP8[$68>>0] = 61;
  $$7 = $67;
 }
 while(1) {
  $69 = (($$8) + 1)|0;
  $70 = (($0) + ($$8)|0);
  HEAP8[$70>>0] = 0;
  $71 = ($69>>>0)<($1>>>0);
  if ($71) {
   $$8 = $69;
  } else {
   break;
  }
 }
 return ($0|0);
}
function _b64_byte_to_urlsafe_char($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = (($0) + 65510)|0;
 $2 = $1 >>> 8;
 $3 = $2 & 255;
 $4 = (($0) + 65)|0;
 $5 = $3 & $4;
 $6 = $3 ^ 255;
 $7 = (($0) + 65484)|0;
 $8 = $7 >>> 8;
 $9 = $8 & $6;
 $10 = (($0) + 71)|0;
 $11 = $9 & $10;
 $12 = $5 | $11;
 $13 = $8 & 255;
 $14 = $13 ^ 255;
 $15 = (($0) + 65474)|0;
 $16 = $15 >>> 8;
 $17 = $16 & $14;
 $18 = (($0) + -4)|0;
 $19 = $17 & $18;
 $20 = $12 | $19;
 $21 = $0 ^ 62;
 $22 = (0 - ($21))|0;
 $23 = $22 >>> 8;
 $24 = $23 & 45;
 $25 = $24 ^ 45;
 $26 = $20 | $25;
 $27 = $0 ^ 63;
 $28 = (0 - ($27))|0;
 $29 = $28 >>> 8;
 $30 = $29 & 95;
 $31 = $30 ^ 95;
 $32 = $26 | $31;
 return ($32|0);
}
function _b64_byte_to_char($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = (($0) + 65510)|0;
 $2 = $1 >>> 8;
 $3 = $2 & 255;
 $4 = (($0) + 65)|0;
 $5 = $3 & $4;
 $6 = $3 ^ 255;
 $7 = (($0) + 65484)|0;
 $8 = $7 >>> 8;
 $9 = $8 & $6;
 $10 = (($0) + 71)|0;
 $11 = $9 & $10;
 $12 = $5 | $11;
 $13 = $8 & 255;
 $14 = $13 ^ 255;
 $15 = (($0) + 65474)|0;
 $16 = $15 >>> 8;
 $17 = $16 & $14;
 $18 = (($0) + -4)|0;
 $19 = $17 & $18;
 $20 = $12 | $19;
 $21 = $0 ^ 62;
 $22 = (0 - ($21))|0;
 $23 = $22 >>> 8;
 $24 = $23 & 43;
 $25 = $24 ^ 43;
 $26 = $20 | $25;
 $27 = $0 ^ 63;
 $28 = (0 - ($27))|0;
 $29 = $28 >>> 8;
 $30 = $29 & 47;
 $31 = $30 ^ 47;
 $32 = $26 | $31;
 return ($32|0);
}
function _sodium_base642bin($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$01$ph = 0, $$02 = 0, $$04$ph = 0, $$07$ph = 0, $$1 = 0, $$15 = 0, $$18 = 0, $$210 = 0, $$26 = 0, $$29 = 0, $$4 = 0, $$lcssa2224 = 0, $$mux33 = 0, $$not = 0, $$promoted = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $8 = sp_a;
 HEAP32[$8>>2] = 0;
 _sodium_base64_check_variant($7);
 $9 = $7 & 4;
 $10 = ($9|0)==(0);
 $11 = ($4|0)==(0|0);
 $$01$ph = 0;$$04$ph = 0;$$07$ph = 0;$$lcssa2224 = 0;
 L1: while(1) {
  $13 = $$lcssa2224;
  while(1) {
   $12 = ($13>>>0)<($3>>>0);
   if (!($12)) {
    label = 16;
    break L1;
   }
   $14 = (($2) + ($13)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   if ($10) {
    $18 = (_b64_char_to_byte($16)|0);
    $$0 = $18;
   } else {
    $17 = (_b64_urlsafe_char_to_byte($16)|0);
    $$0 = $17;
   }
   $19 = ($$0|0)==(255);
   if (!($19)) {
    break;
   }
   if ($11) {
    label = 16;
    break L1;
   }
   $20 = $15 << 24 >> 24;
   $21 = (_strchr($4,$20)|0);
   $22 = ($21|0)==(0|0);
   if ($22) {
    label = 16;
    break L1;
   }
   $23 = (($13) + 1)|0;
   $13 = $23;
  }
  $24 = $$01$ph << 6;
  $25 = (($24) + ($$0))|0;
  $26 = (($$07$ph) + 6)|0;
  $27 = ($26>>>0)>(7);
  if ($27) {
   $28 = (($$07$ph) + -2)|0;
   $29 = ($$04$ph>>>0)<($1>>>0);
   if (!($29)) {
    label = 13;
    break;
   }
   $30 = $25 >>> $28;
   $31 = $30&255;
   $32 = (($$04$ph) + 1)|0;
   $33 = (($0) + ($$04$ph)|0);
   HEAP8[$33>>0] = $31;
   $$15 = $32;$$18 = $28;
  } else {
   $$15 = $$04$ph;$$18 = $26;
  }
  $34 = (($13) + 1)|0;
  $$01$ph = $25;$$04$ph = $$15;$$07$ph = $$18;$$lcssa2224 = $34;
 }
 if ((label|0) == 13) {
  HEAP32[$8>>2] = $13;
  HEAP32[(33256)>>2] = 34;
  $$02 = -1;$$1 = $25;$$29 = $28;
 }
 else if ((label|0) == 16) {
  HEAP32[$8>>2] = $13;
  $$02 = 0;$$1 = $$01$ph;$$29 = $$07$ph;
 }
 $35 = ($$29>>>0)>(4);
 do {
  if ($35) {
   $$210 = -1;$$26 = 0;
  } else {
   $36 = 1 << $$29;
   $37 = (($36) + -1)|0;
   $38 = $$1 & $37;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ($$02|0)==(0);
    if ($40) {
     $41 = $7 & 2;
     $42 = ($41|0)==(0);
     if ($42) {
      $43 = $$29 >>> 1;
      $44 = (__sodium_base642bin_skip_padding($2,$3,$8,$4,$43)|0);
      $$not = ($44|0)!=(0);
      $brmerge = $$not | $11;
      $$mux33 = $$not ? 0 : $$04$ph;
      if ($brmerge) {
       $$210 = $44;$$26 = $$mux33;
       break;
      }
     } else {
      if ($11) {
       $$210 = 0;$$26 = $$04$ph;
       break;
      }
     }
     $$promoted = HEAP32[$8>>2]|0;
     $46 = $$promoted;
     while(1) {
      $45 = ($46>>>0)<($3>>>0);
      if (!($45)) {
       break;
      }
      $47 = (($2) + ($46)|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $48 << 24 >> 24;
      $50 = (_strchr($4,$49)|0);
      $51 = ($50|0)==(0|0);
      if ($51) {
       break;
      }
      $52 = (($46) + 1)|0;
      $46 = $52;
     }
     HEAP32[$8>>2] = $46;
     $$210 = 0;$$26 = $$04$ph;
    } else {
     $$210 = $$02;$$26 = 0;
    }
   } else {
    $$210 = -1;$$26 = 0;
   }
  }
 } while(0);
 $53 = ($6|0)==(0|0);
 $54 = HEAP32[$8>>2]|0;
 if ($53) {
  $56 = ($54|0)==($3|0);
  if ($56) {
   $$4 = $$210;
  } else {
   HEAP32[(33256)>>2] = 22;
   $$4 = -1;
  }
 } else {
  $55 = (($2) + ($54)|0);
  HEAP32[$6>>2] = $55;
  $$4 = $$210;
 }
 $57 = ($5|0)==(0|0);
 if ($57) {
  STACKTOP = sp;return ($$4|0);
 }
 HEAP32[$5>>2] = $$26;
 STACKTOP = sp;return ($$4|0);
}
function _b64_urlsafe_char_to_byte($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = (($0) + 65471)|0;
 $2 = $1 >>> 8;
 $3 = $2 ^ 255;
 $4 = (90 - ($0))|0;
 $5 = $4 >>> 8;
 $6 = $5 & 255;
 $7 = $6 ^ 255;
 $8 = $3 & $7;
 $9 = (($0) + -65)|0;
 $10 = $8 & $9;
 $11 = (($0) + 65439)|0;
 $12 = $11 >>> 8;
 $13 = $12 ^ 255;
 $14 = (122 - ($0))|0;
 $15 = $14 >>> 8;
 $16 = $15 & 255;
 $17 = $16 ^ 255;
 $18 = $13 & $17;
 $19 = (($0) + -71)|0;
 $20 = $18 & $19;
 $21 = $10 | $20;
 $22 = (($0) + 65488)|0;
 $23 = $22 >>> 8;
 $24 = $23 ^ 255;
 $25 = (57 - ($0))|0;
 $26 = $25 >>> 8;
 $27 = $26 & 255;
 $28 = $27 ^ 255;
 $29 = $24 & $28;
 $30 = (($0) + 4)|0;
 $31 = $29 & $30;
 $32 = $21 | $31;
 $33 = $0 ^ 45;
 $34 = (0 - ($33))|0;
 $35 = $34 >>> 8;
 $36 = $35 & 62;
 $37 = $36 ^ 62;
 $38 = $32 | $37;
 $39 = $0 ^ 95;
 $40 = (0 - ($39))|0;
 $41 = $40 >>> 8;
 $42 = $41 & 63;
 $43 = $42 ^ 63;
 $44 = $38 | $43;
 $45 = (0 - ($44))|0;
 $46 = $45 >>> 8;
 $47 = $46 & 255;
 $48 = $47 ^ 255;
 $49 = $0 ^ 65;
 $50 = (0 - ($49))|0;
 $51 = $50 >>> 8;
 $52 = $51 & $48;
 $53 = $44 | $52;
 return ($53|0);
}
function _b64_char_to_byte($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = (($0) + 65471)|0;
 $2 = $1 >>> 8;
 $3 = $2 ^ 255;
 $4 = (90 - ($0))|0;
 $5 = $4 >>> 8;
 $6 = $5 & 255;
 $7 = $6 ^ 255;
 $8 = $3 & $7;
 $9 = (($0) + -65)|0;
 $10 = $8 & $9;
 $11 = (($0) + 65439)|0;
 $12 = $11 >>> 8;
 $13 = $12 ^ 255;
 $14 = (122 - ($0))|0;
 $15 = $14 >>> 8;
 $16 = $15 & 255;
 $17 = $16 ^ 255;
 $18 = $13 & $17;
 $19 = (($0) + -71)|0;
 $20 = $18 & $19;
 $21 = $10 | $20;
 $22 = (($0) + 65488)|0;
 $23 = $22 >>> 8;
 $24 = $23 ^ 255;
 $25 = (57 - ($0))|0;
 $26 = $25 >>> 8;
 $27 = $26 & 255;
 $28 = $27 ^ 255;
 $29 = $24 & $28;
 $30 = (($0) + 4)|0;
 $31 = $29 & $30;
 $32 = $21 | $31;
 $33 = $0 ^ 43;
 $34 = (0 - ($33))|0;
 $35 = $34 >>> 8;
 $36 = $35 & 62;
 $37 = $36 ^ 62;
 $38 = $32 | $37;
 $39 = $0 ^ 47;
 $40 = (0 - ($39))|0;
 $41 = $40 >>> 8;
 $42 = $41 & 63;
 $43 = $42 ^ 63;
 $44 = $38 | $43;
 $45 = (0 - ($44))|0;
 $46 = $45 >>> 8;
 $47 = $46 & 255;
 $48 = $47 ^ 255;
 $49 = $0 ^ 65;
 $50 = (0 - ($49))|0;
 $51 = $50 >>> 8;
 $52 = $51 & $48;
 $53 = $44 | $52;
 return ($53|0);
}
function __sodium_base642bin_skip_padding($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = ($3|0)==(0|0);
 $$01 = $4;
 while(1) {
  $6 = ($$01|0)==(0);
  if ($6) {
   $$0 = 0;
   label = 10;
   break;
  }
  $7 = HEAP32[$2>>2]|0;
  $8 = ($7>>>0)<($1>>>0);
  if (!($8)) {
   $$sink = 34;
   break;
  }
  $9 = (($0) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($10<<24>>24)==(61);
  if ($12) {
   $13 = (($$01) + -1)|0;
   $$1 = $13;
  } else {
   if ($5) {
    $$sink = 22;
    break;
   }
   $14 = (_strchr($3,$11)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$sink = 22;
    break;
   } else {
    $$1 = $$01;
   }
  }
  $16 = (($7) + 1)|0;
  HEAP32[$2>>2] = $16;
  $$01 = $$1;
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 HEAP32[(33256)>>2] = $$sink;
 $$0 = -1;
 return ($$0|0);
}
function _sodium_init() {
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $0 = HEAP32[8840]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 1;
  return ($$0|0);
 }
 __sodium_runtime_get_cpu_features();
 _randombytes_stir();
 __sodium_alloc_init();
 HEAP32[8840] = 1;
 $$0 = 0;
 return ($$0|0);
}
function _sodium_misuse() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __sodium_runtime_get_cpu_features() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (__sodium_runtime_intel_cpu_features()|0);
 return;
}
function __sodium_runtime_intel_cpu_features() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp_a;
 __cpuid($0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = -1;
 } else {
  __cpuid($0);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function __cpuid($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return;
}
function _sodium_memzero($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$ = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $2 = $0;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==($1|0);
  if ($exitcond) {
   break;
  }
  $$0$ = $2;
  $3 = (($$0) + 1)|0;
  $4 = (($$0$) + ($$0)|0);
  HEAP8[$4>>0] = 0;
  $$0 = $3;
 }
 STACKTOP = sp;return;
}
function _sodium_memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$ = 0, $$0$1 = 0, $$0$2 = 0, $$0$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==($2|0);
  if ($exitcond) {
   break;
  }
  $$0$3 = $3;
  $6 = (($$0$3) + ($$0)|0);
  $7 = HEAP8[$6>>0]|0;
  $$0$2 = $4;
  $8 = (($$0$2) + ($$0)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $7 ^ $9;
  $$0$ = $5;
  $11 = $$0$ | $10;
  $5 = $11;
  $12 = (($$0) + 1)|0;
  $$0 = $12;
 }
 $$0$1 = $5;
 $13 = $$0$1&255;
 $14 = (($13) + 511)|0;
 $15 = $14 >>> 8;
 $16 = $15 & 1;
 $17 = (($16) + -1)|0;
 STACKTOP = sp;return ($17|0);
}
function _sodium_is_zero($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$ = 0, $$0$1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $1 = 0;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $2 = (($0) + ($$0)|0);
  $3 = HEAP8[$2>>0]|0;
  $$0$ = $1;
  $4 = $$0$ | $3;
  $1 = $4;
  $5 = (($$0) + 1)|0;
  $$0 = $5;
 }
 $$0$1 = $1;
 $6 = $$0$1&255;
 $7 = (($6) + 511)|0;
 $8 = $7 >>> 8;
 $9 = $8 & 1;
 STACKTOP = sp;return ($9|0);
}
function _sodium_increment($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 1;$$01 = 0;
 while(1) {
  $exitcond = ($$01|0)==(4);
  if ($exitcond) {
   break;
  }
  $1 = (($0) + ($$01)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = (($$0) + ($3))|0;
  $5 = $4&255;
  HEAP8[$1>>0] = $5;
  $6 = $4 >>> 8;
  $7 = (($$01) + 1)|0;
  $$0 = $6;$$01 = $7;
 }
 return;
}
function __sodium_alloc_init() {
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $0 = (_sysconf(30)|0);
 $1 = ($0|0)>(0);
 if ($1) {
  HEAP32[8841] = $0;
  $3 = $0;
 } else {
  $$pr = HEAP32[8841]|0;
  $3 = $$pr;
 }
 $2 = ($3>>>0)<(16);
 if ($2) {
  _sodium_misuse();
  // unreachable;
 } else {
  _randombytes_buf(36008,16);
  return;
 }
}
function _sodium_pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$ = 0, $$0$3 = 0, $$01 = 0, $$02 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $6 = ($3|0)==(0);
 if ($6) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($3) + -1)|0;
 $8 = $7 & $3;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $7 & $2;
  $$pn = $10;
 } else {
  $11 = (($2>>>0) % ($3>>>0))&-1;
  $$pn = $11;
 }
 $$01 = (($7) - ($$pn))|0;
 $12 = $2 ^ -1;
 $13 = ($$01>>>0)<($12>>>0);
 if (!($13)) {
  _sodium_misuse();
  // unreachable;
 }
 $14 = (($$01) + ($2))|0;
 $15 = ($14>>>0)<($4>>>0);
 if (!($15)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($1) + ($14)|0);
 $17 = ($0|0)==(0|0);
 if (!($17)) {
  $18 = (($14) + 1)|0;
  HEAP32[$0>>2] = $18;
 }
 $5 = 0;
 $$02 = 0;
 while(1) {
  $exitcond = ($$02|0)==($3|0);
  if ($exitcond) {
   $$0 = 0;
   break;
  }
  $19 = $$02 ^ $$01;
  $20 = (($19) + 65535)|0;
  $21 = $20 >>> 8;
  $22 = (0 - ($$02))|0;
  $23 = (($16) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $$0$ = $5;
  $25 = $24 & $$0$;
  $26 = $25&255;
  $27 = $21 & 128;
  $28 = $26 | $27;
  $29 = $28&255;
  HEAP8[$23>>0] = $29;
  $$0$3 = $5;
  $30 = $$0$3&255;
  $31 = $30 | $21;
  $32 = $31&255;
  $5 = $32;
  $33 = (($$02) + 1)|0;
  $$02 = $33;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sodium_unpad($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$ = 0, $$0$4 = 0, $$0$5 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $4 = 0;
 $5 = (($3) + -1)|0;
 $6 = ($5>>>0)<($2>>>0);
 if (!($6)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($2) + -1)|0;
 $8 = (($1) + ($7)|0);
 $$01 = 0;$$02 = 0;$$03 = 0;
 while(1) {
  $exitcond = ($$01|0)==($3|0);
  if ($exitcond) {
   break;
  }
  $9 = (0 - ($$01))|0;
  $10 = (($8) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $$03&255;
  $13 = (($12) + 511)|0;
  $$0$ = $4;
  $14 = (($$0$) + 511)|0;
  $15 = $13 & $14;
  $16 = $11 ^ -128;
  $17 = $16&255;
  $18 = (($17) + 511)|0;
  $19 = $15 & $18;
  $20 = $19 >>> 8;
  $$not = $20 | -2;
  $21 = $$not ^ 1;
  $22 = (($21) + 1)|0;
  $23 = $$01 & $22;
  $$0$4 = $4;
  $24 = $$0$4 | $23;
  $4 = $24;
  $25 = $$02&255;
  $26 = $20 & 1;
  $27 = $25 | $26;
  $28 = $27&255;
  $29 = $$03 | $11;
  $30 = (($$01) + 1)|0;
  $$01 = $30;$$02 = $28;$$03 = $29;
 }
 $$0$5 = $4;
 $31 = (($7) - ($$0$5))|0;
 HEAP32[$0>>2] = $31;
 $32 = $$02&255;
 $33 = (($32) + -1)|0;
 $$0 = $33;
 STACKTOP = sp;return ($$0|0);
}
function _sodium_version_string() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (35270|0);
}
function _sodium_library_version_major() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 9;
}
function _sodium_library_version_minor() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 6;
}
function _sodium_library_minimal() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 0;
}
function _crypto_scalarmult_curve25519_ref10($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 320|0;
 $3 = sp_a + 280|0;
 $4 = sp_a + 240|0;
 $5 = sp_a + 200|0;
 $6 = sp_a + 160|0;
 $7 = sp_a + 120|0;
 $8 = sp_a + 80|0;
 $9 = sp_a + 40|0;
 $10 = sp_a;
 $$02 = 0;
 while(1) {
  $exitcond = ($$02|0)==(32);
  if ($exitcond) {
   break;
  }
  $11 = (($1) + ($$02)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = (($3) + ($$02)|0);
  HEAP8[$13>>0] = $12;
  $14 = (($$02) + 1)|0;
  $$02 = $14;
 }
 $15 = HEAP8[$3>>0]|0;
 $16 = $15 & -8;
 HEAP8[$3>>0] = $16;
 $17 = ((($3)) + 31|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 & 63;
 $20 = $19 | 64;
 HEAP8[$17>>0] = $20;
 _crypto_core_curve25519_ref10_fe_frombytes($4,$2);
 _crypto_core_curve25519_ref10_fe_1($5);
 _crypto_core_curve25519_ref10_fe_0($6);
 _crypto_core_curve25519_ref10_fe_copy($7,$4);
 _crypto_core_curve25519_ref10_fe_1($8);
 $$0 = 0;$$01 = 254;
 while(1) {
  $21 = ($$01|0)>(-1);
  if (!($21)) {
   break;
  }
  $22 = (($$01|0) / 8)&-1;
  $23 = (($3) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $$01 & 7;
  $27 = $25 >>> $26;
  $28 = $27 & 1;
  $29 = $$0 ^ $28;
  _fe_cswap($5,$7,$29);
  _fe_cswap($6,$8,$29);
  _crypto_core_curve25519_ref10_fe_sub($9,$7,$8);
  _crypto_core_curve25519_ref10_fe_sub($10,$5,$6);
  _crypto_core_curve25519_ref10_fe_add($5,$5,$6);
  _crypto_core_curve25519_ref10_fe_add($6,$7,$8);
  _crypto_core_curve25519_ref10_fe_mul($8,$9,$5);
  _crypto_core_curve25519_ref10_fe_mul($6,$6,$10);
  _crypto_core_curve25519_ref10_fe_sq($9,$10);
  _crypto_core_curve25519_ref10_fe_sq($10,$5);
  _crypto_core_curve25519_ref10_fe_add($7,$8,$6);
  _crypto_core_curve25519_ref10_fe_sub($6,$8,$6);
  _crypto_core_curve25519_ref10_fe_mul($5,$10,$9);
  _crypto_core_curve25519_ref10_fe_sub($10,$10,$9);
  _crypto_core_curve25519_ref10_fe_sq($6,$6);
  _fe_mul121666($8,$10);
  _crypto_core_curve25519_ref10_fe_sq($7,$7);
  _crypto_core_curve25519_ref10_fe_add($9,$9,$8);
  _crypto_core_curve25519_ref10_fe_mul($8,$4,$6);
  _crypto_core_curve25519_ref10_fe_mul($6,$10,$9);
  $30 = (($$01) + -1)|0;
  $$0 = $28;$$01 = $30;
 }
 _fe_cswap($5,$7,$$0);
 _fe_cswap($6,$8,$$0);
 _crypto_core_curve25519_ref10_fe_invert($6,$6);
 _crypto_core_curve25519_ref10_fe_mul($5,$5,$6);
 _crypto_core_curve25519_ref10_fe_tobytes($0,$5);
 STACKTOP = sp;return 0;
}
function _crypto_scalarmult_curve25519_ref10_base($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 240|0;
 $2 = sp_a + 200|0;
 $3 = sp_a + 40|0;
 $4 = sp_a;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(32);
  if ($exitcond) {
   break;
  }
  $5 = (($1) + ($$0)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = (($2) + ($$0)|0);
  HEAP8[$7>>0] = $6;
  $8 = (($$0) + 1)|0;
  $$0 = $8;
 }
 $9 = HEAP8[$2>>0]|0;
 $10 = $9 & -8;
 HEAP8[$2>>0] = $10;
 $11 = ((($2)) + 31|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 & 63;
 $14 = $13 | 64;
 HEAP8[$11>>0] = $14;
 _crypto_core_curve25519_ref10_ge_scalarmult_base($3,$2);
 $15 = ((($3)) + 40|0);
 $16 = ((($3)) + 80|0);
 _edwards_to_montgomery($4,$15,$16);
 _crypto_core_curve25519_ref10_fe_tobytes($0,$4);
 STACKTOP = sp;return 0;
}
function _edwards_to_montgomery($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 80|0;
 $3 = sp_a + 40|0;
 $4 = sp_a;
 _crypto_core_curve25519_ref10_fe_add($3,$2,$1);
 _crypto_core_curve25519_ref10_fe_sub($4,$2,$1);
 _crypto_core_curve25519_ref10_fe_invert($4,$4);
 _crypto_core_curve25519_ref10_fe_mul($0,$3,$4);
 STACKTOP = sp;return;
}
function _fe_cswap($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0;
 var sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$1>>2]|0;
 $23 = ((($1)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($1)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($1)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($1)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($1)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($1)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($1)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $3 ^ $22;
 $42 = $5 ^ $24;
 $43 = $7 ^ $26;
 $44 = $9 ^ $28;
 $45 = $11 ^ $30;
 $46 = $13 ^ $32;
 $47 = $15 ^ $34;
 $48 = $17 ^ $36;
 $49 = $19 ^ $38;
 $50 = $21 ^ $40;
 $51 = (0 - ($2))|0;
 $52 = $41 & $51;
 $53 = $42 & $51;
 $54 = $43 & $51;
 $55 = $44 & $51;
 $56 = $45 & $51;
 $57 = $46 & $51;
 $58 = $47 & $51;
 $59 = $48 & $51;
 $60 = $49 & $51;
 $61 = $50 & $51;
 $62 = $3 ^ $52;
 HEAP32[$0>>2] = $62;
 $63 = $5 ^ $53;
 HEAP32[$4>>2] = $63;
 $64 = $7 ^ $54;
 HEAP32[$6>>2] = $64;
 $65 = $9 ^ $55;
 HEAP32[$8>>2] = $65;
 $66 = $11 ^ $56;
 HEAP32[$10>>2] = $66;
 $67 = $13 ^ $57;
 HEAP32[$12>>2] = $67;
 $68 = $15 ^ $58;
 HEAP32[$14>>2] = $68;
 $69 = $17 ^ $59;
 HEAP32[$16>>2] = $69;
 $70 = $19 ^ $60;
 HEAP32[$18>>2] = $70;
 $71 = $21 ^ $61;
 HEAP32[$20>>2] = $71;
 $72 = $22 ^ $52;
 HEAP32[$1>>2] = $72;
 $73 = $24 ^ $53;
 HEAP32[$23>>2] = $73;
 $74 = $26 ^ $54;
 HEAP32[$25>>2] = $74;
 $75 = $28 ^ $55;
 HEAP32[$27>>2] = $75;
 $76 = $30 ^ $56;
 HEAP32[$29>>2] = $76;
 $77 = $32 ^ $57;
 HEAP32[$31>>2] = $77;
 $78 = $34 ^ $58;
 HEAP32[$33>>2] = $78;
 $79 = $36 ^ $59;
 HEAP32[$35>>2] = $79;
 $80 = $38 ^ $60;
 HEAP32[$37>>2] = $80;
 $81 = $40 ^ $61;
 HEAP32[$39>>2] = $81;
 return;
}
function _fe_mul121666($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($1)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($2|0)<(0);
 $22 = $21 << 31 >> 31;
 $23 = (___muldi3(($2|0),($22|0),121666,0)|0);
 $24 = tempRet0;
 $25 = ($4|0)<(0);
 $26 = $25 << 31 >> 31;
 $27 = (___muldi3(($4|0),($26|0),121666,0)|0);
 $28 = tempRet0;
 $29 = ($6|0)<(0);
 $30 = $29 << 31 >> 31;
 $31 = (___muldi3(($6|0),($30|0),121666,0)|0);
 $32 = tempRet0;
 $33 = ($8|0)<(0);
 $34 = $33 << 31 >> 31;
 $35 = (___muldi3(($8|0),($34|0),121666,0)|0);
 $36 = tempRet0;
 $37 = ($10|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = (___muldi3(($10|0),($38|0),121666,0)|0);
 $40 = tempRet0;
 $41 = ($12|0)<(0);
 $42 = $41 << 31 >> 31;
 $43 = (___muldi3(($12|0),($42|0),121666,0)|0);
 $44 = tempRet0;
 $45 = ($14|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (___muldi3(($14|0),($46|0),121666,0)|0);
 $48 = tempRet0;
 $49 = ($16|0)<(0);
 $50 = $49 << 31 >> 31;
 $51 = (___muldi3(($16|0),($50|0),121666,0)|0);
 $52 = tempRet0;
 $53 = ($18|0)<(0);
 $54 = $53 << 31 >> 31;
 $55 = (___muldi3(($18|0),($54|0),121666,0)|0);
 $56 = tempRet0;
 $57 = ($20|0)<(0);
 $58 = $57 << 31 >> 31;
 $59 = (___muldi3(($20|0),($58|0),121666,0)|0);
 $60 = tempRet0;
 $61 = (_i64Add(($59|0),($60|0),16777216,0)|0);
 $62 = tempRet0;
 $63 = (_bitshift64Ashr(($61|0),($62|0),25)|0);
 $64 = tempRet0;
 $65 = (___muldi3(($63|0),($64|0),19,0)|0);
 $66 = tempRet0;
 $67 = (_i64Add(($23|0),($24|0),($65|0),($66|0))|0);
 $68 = tempRet0;
 $69 = (_bitshift64Shl(($63|0),($64|0),25)|0);
 $70 = tempRet0;
 $71 = (_i64Subtract(($59|0),($60|0),($69|0),($70|0))|0);
 $72 = tempRet0;
 $73 = (_i64Add(($27|0),($28|0),16777216,0)|0);
 $74 = tempRet0;
 $75 = (_bitshift64Ashr(($73|0),($74|0),25)|0);
 $76 = tempRet0;
 $77 = (_i64Add(($31|0),($32|0),($75|0),($76|0))|0);
 $78 = tempRet0;
 $79 = (_bitshift64Shl(($75|0),($76|0),25)|0);
 $80 = tempRet0;
 $81 = (_i64Subtract(($27|0),($28|0),($79|0),($80|0))|0);
 $82 = tempRet0;
 $83 = (_i64Add(($35|0),($36|0),16777216,0)|0);
 $84 = tempRet0;
 $85 = (_bitshift64Ashr(($83|0),($84|0),25)|0);
 $86 = tempRet0;
 $87 = (_i64Add(($39|0),($40|0),($85|0),($86|0))|0);
 $88 = tempRet0;
 $89 = (_bitshift64Shl(($85|0),($86|0),25)|0);
 $90 = tempRet0;
 $91 = (_i64Subtract(($35|0),($36|0),($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = (_i64Add(($43|0),($44|0),16777216,0)|0);
 $94 = tempRet0;
 $95 = (_bitshift64Ashr(($93|0),($94|0),25)|0);
 $96 = tempRet0;
 $97 = (_i64Add(($47|0),($48|0),($95|0),($96|0))|0);
 $98 = tempRet0;
 $99 = (_bitshift64Shl(($95|0),($96|0),25)|0);
 $100 = tempRet0;
 $101 = (_i64Subtract(($43|0),($44|0),($99|0),($100|0))|0);
 $102 = tempRet0;
 $103 = (_i64Add(($51|0),($52|0),16777216,0)|0);
 $104 = tempRet0;
 $105 = (_bitshift64Ashr(($103|0),($104|0),25)|0);
 $106 = tempRet0;
 $107 = (_i64Add(($55|0),($56|0),($105|0),($106|0))|0);
 $108 = tempRet0;
 $109 = (_bitshift64Shl(($105|0),($106|0),25)|0);
 $110 = tempRet0;
 $111 = (_i64Subtract(($51|0),($52|0),($109|0),($110|0))|0);
 $112 = tempRet0;
 $113 = (_i64Add(($67|0),($68|0),33554432,0)|0);
 $114 = tempRet0;
 $115 = (_bitshift64Ashr(($113|0),($114|0),26)|0);
 $116 = tempRet0;
 $117 = (_i64Add(($81|0),($82|0),($115|0),($116|0))|0);
 $118 = tempRet0;
 $119 = (_bitshift64Shl(($115|0),($116|0),26)|0);
 $120 = tempRet0;
 $121 = (_i64Subtract(($67|0),($68|0),($119|0),($120|0))|0);
 $122 = tempRet0;
 $123 = (_i64Add(($77|0),($78|0),33554432,0)|0);
 $124 = tempRet0;
 $125 = (_bitshift64Ashr(($123|0),($124|0),26)|0);
 $126 = tempRet0;
 $127 = (_i64Add(($91|0),($92|0),($125|0),($126|0))|0);
 $128 = tempRet0;
 $129 = (_bitshift64Shl(($125|0),($126|0),26)|0);
 $130 = tempRet0;
 $131 = (_i64Subtract(($77|0),($78|0),($129|0),($130|0))|0);
 $132 = tempRet0;
 $133 = (_i64Add(($87|0),($88|0),33554432,0)|0);
 $134 = tempRet0;
 $135 = (_bitshift64Ashr(($133|0),($134|0),26)|0);
 $136 = tempRet0;
 $137 = (_i64Add(($101|0),($102|0),($135|0),($136|0))|0);
 $138 = tempRet0;
 $139 = (_bitshift64Shl(($135|0),($136|0),26)|0);
 $140 = tempRet0;
 $141 = (_i64Subtract(($87|0),($88|0),($139|0),($140|0))|0);
 $142 = tempRet0;
 $143 = (_i64Add(($97|0),($98|0),33554432,0)|0);
 $144 = tempRet0;
 $145 = (_bitshift64Ashr(($143|0),($144|0),26)|0);
 $146 = tempRet0;
 $147 = (_i64Add(($111|0),($112|0),($145|0),($146|0))|0);
 $148 = tempRet0;
 $149 = (_bitshift64Shl(($145|0),($146|0),26)|0);
 $150 = tempRet0;
 $151 = (_i64Subtract(($97|0),($98|0),($149|0),($150|0))|0);
 $152 = tempRet0;
 $153 = (_i64Add(($107|0),($108|0),33554432,0)|0);
 $154 = tempRet0;
 $155 = (_bitshift64Ashr(($153|0),($154|0),26)|0);
 $156 = tempRet0;
 $157 = (_i64Add(($71|0),($72|0),($155|0),($156|0))|0);
 $158 = tempRet0;
 $159 = (_bitshift64Shl(($155|0),($156|0),26)|0);
 $160 = tempRet0;
 $161 = (_i64Subtract(($107|0),($108|0),($159|0),($160|0))|0);
 $162 = tempRet0;
 HEAP32[$0>>2] = $121;
 $163 = ((($0)) + 4|0);
 HEAP32[$163>>2] = $117;
 $164 = ((($0)) + 8|0);
 HEAP32[$164>>2] = $131;
 $165 = ((($0)) + 12|0);
 HEAP32[$165>>2] = $127;
 $166 = ((($0)) + 16|0);
 HEAP32[$166>>2] = $141;
 $167 = ((($0)) + 20|0);
 HEAP32[$167>>2] = $137;
 $168 = ((($0)) + 24|0);
 HEAP32[$168>>2] = $151;
 $169 = ((($0)) + 28|0);
 HEAP32[$169>>2] = $147;
 $170 = ((($0)) + 32|0);
 HEAP32[$170>>2] = $161;
 $171 = ((($0)) + 36|0);
 HEAP32[$171>>2] = $157;
 return;
}
function _stream_ref_233($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$01 = 0, $$03 = 0, $$04 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $exitcond8 = 0, $exitcond9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 112|0;
 $5 = sp_a + 96|0;
 $6 = sp_a + 32|0;
 $7 = sp_a;
 $8 = ($1|0)==(0);
 $9 = ($2|0)==(0);
 $10 = $8 & $9;
 if ($10) {
  STACKTOP = sp;return 0;
 } else {
  $$04 = 0;
 }
 while(1) {
  $exitcond11 = ($$04|0)==(32);
  if ($exitcond11) {
   $$1 = 0;
   break;
  }
  $11 = (($4) + ($$04)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = (($7) + ($$04)|0);
  HEAP8[$13>>0] = $12;
  $14 = (($$04) + 1)|0;
  $$04 = $14;
 }
 while(1) {
  $exitcond10 = ($$1|0)==(8);
  if ($exitcond10) {
   $$2 = 8;
   break;
  }
  $15 = (($3) + ($$1)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = (($5) + ($$1)|0);
  HEAP8[$17>>0] = $16;
  $18 = (($$1) + 1)|0;
  $$1 = $18;
 }
 while(1) {
  $exitcond9 = ($$2|0)==(16);
  if ($exitcond9) {
   break;
  }
  $19 = (($5) + ($$2)|0);
  HEAP8[$19>>0] = 0;
  $20 = (($$2) + 1)|0;
  $$2 = $20;
 }
 $$01 = $0;$22 = $2;$24 = $1;
 while(1) {
  $21 = ($22>>>0)>(0);
  $23 = ($24>>>0)>(63);
  $25 = ($22|0)==(0);
  $26 = $25 & $23;
  $27 = $21 | $26;
  if (!($27)) {
   break;
  }
  (_crypto_core_salsa20($$01,$5,$7,0)|0);
  $$03 = 1;$$3 = 8;
  while(1) {
   $exitcond8 = ($$3|0)==(16);
   if ($exitcond8) {
    break;
   }
   $28 = (($5) + ($$3)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = (($$03) + ($30))|0;
   $32 = $31&255;
   HEAP8[$28>>0] = $32;
   $33 = $31 >>> 8;
   $34 = (($$3) + 1)|0;
   $$03 = $33;$$3 = $34;
  }
  $35 = (_i64Add(($24|0),($22|0),-64,-1)|0);
  $36 = tempRet0;
  $37 = ((($$01)) + 64|0);
  $$01 = $37;$22 = $36;$24 = $35;
 }
 $38 = ($24|0)==(0);
 $39 = ($22|0)==(0);
 $40 = $38 & $39;
 L21: do {
  if (!($40)) {
   (_crypto_core_salsa20($6,$5,$7,0)|0);
   $$4 = 0;
   while(1) {
    $exitcond = ($$4|0)==($24|0);
    if ($exitcond) {
     break L21;
    }
    $41 = (($6) + ($$4)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = (($$01) + ($$4)|0);
    HEAP8[$43>>0] = $42;
    $44 = (($$4) + 1)|0;
    $$4 = $44;
   }
  }
 } while(0);
 _sodium_memzero($6,64);
 _sodium_memzero($7,32);
 STACKTOP = sp;return 0;
}
function _stream_ref_xor_ic_234($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$01 = 0, $$02 = 0, $$04 = 0, $$06 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond11 = 0, $exitcond12 = 0, $exitcond14 = 0, $exitcond15 = 0, $exitcond16 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 112|0;
 $8 = sp_a + 96|0;
 $9 = sp_a + 32|0;
 $10 = sp_a;
 $11 = ($2|0)==(0);
 $12 = ($3|0)==(0);
 $13 = $11 & $12;
 if ($13) {
  STACKTOP = sp;return 0;
 } else {
  $$06 = 0;
 }
 while(1) {
  $exitcond16 = ($$06|0)==(32);
  if ($exitcond16) {
   $$1 = 0;
   break;
  }
  $14 = (($7) + ($$06)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = (($10) + ($$06)|0);
  HEAP8[$16>>0] = $15;
  $17 = (($$06) + 1)|0;
  $$06 = $17;
 }
 while(1) {
  $exitcond15 = ($$1|0)==(8);
  if ($exitcond15) {
   $$2 = 8;$23 = $5;$25 = $6;
   break;
  }
  $18 = (($4) + ($$1)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = (($8) + ($$1)|0);
  HEAP8[$20>>0] = $19;
  $21 = (($$1) + 1)|0;
  $$1 = $21;
 }
 while(1) {
  $exitcond14 = ($$2|0)==(16);
  if ($exitcond14) {
   break;
  }
  $22 = $23&255;
  $24 = (($8) + ($$2)|0);
  HEAP8[$24>>0] = $22;
  $26 = (_bitshift64Lshr(($23|0),($25|0),8)|0);
  $27 = tempRet0;
  $28 = (($$2) + 1)|0;
  $$2 = $28;$23 = $26;$25 = $27;
 }
 $$01 = $0;$$02 = $1;$30 = $3;$32 = $2;
 while(1) {
  $29 = ($30>>>0)>(0);
  $31 = ($32>>>0)>(63);
  $33 = ($30|0)==(0);
  $34 = $33 & $31;
  $35 = $29 | $34;
  if (!($35)) {
   break;
  }
  (_crypto_core_salsa20($9,$8,$10,0)|0);
  $$3 = 0;
  while(1) {
   $exitcond11 = ($$3|0)==(64);
   if ($exitcond11) {
    $$04 = 1;$$4 = 8;
    break;
   }
   $36 = (($$02) + ($$3)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = (($9) + ($$3)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $37 ^ $39;
   $41 = (($$01) + ($$3)|0);
   HEAP8[$41>>0] = $40;
   $42 = (($$3) + 1)|0;
   $$3 = $42;
  }
  while(1) {
   $exitcond12 = ($$4|0)==(16);
   if ($exitcond12) {
    break;
   }
   $43 = (($8) + ($$4)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = (($$04) + ($45))|0;
   $47 = $46&255;
   HEAP8[$43>>0] = $47;
   $48 = $46 >>> 8;
   $49 = (($$4) + 1)|0;
   $$04 = $48;$$4 = $49;
  }
  $50 = (_i64Add(($32|0),($30|0),-64,-1)|0);
  $51 = tempRet0;
  $52 = ((($$01)) + 64|0);
  $53 = ((($$02)) + 64|0);
  $$01 = $52;$$02 = $53;$30 = $51;$32 = $50;
 }
 $54 = ($32|0)==(0);
 $55 = ($30|0)==(0);
 $56 = $54 & $55;
 L24: do {
  if (!($56)) {
   (_crypto_core_salsa20($9,$8,$10,0)|0);
   $$5 = 0;
   while(1) {
    $exitcond = ($$5|0)==($32|0);
    if ($exitcond) {
     break L24;
    }
    $57 = (($$02) + ($$5)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = (($9) + ($$5)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $58 ^ $60;
    $62 = (($$01) + ($$5)|0);
    HEAP8[$62>>0] = $61;
    $63 = (($$5) + 1)|0;
    $$5 = $63;
   }
  }
 } while(0);
 _sodium_memzero($9,64);
 _sodium_memzero($10,32);
 STACKTOP = sp;return 0;
}
function _crypto_box_curve25519xchacha20poly1305_seed_keypair($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp_a;
 (_crypto_hash_sha512($3,$2,32,0)|0);
 dest=$1; src=$3; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _sodium_memzero($3,64);
 $4 = (_crypto_scalarmult_curve25519_base($0,$1)|0);
 STACKTOP = sp;return ($4|0);
}
function _crypto_box_curve25519xchacha20poly1305_keypair($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($1,32);
 $2 = (_crypto_scalarmult_curve25519_base($0,$1)|0);
 return ($2|0);
}
function _crypto_box_curve25519xchacha20poly1305_beforenm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp_a;
 $4 = (_crypto_scalarmult_curve25519($3,$2,$1)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_crypto_core_hchacha20($0,36024,$3,0)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_curve25519xchacha20poly1305_detached_afternm($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 (_crypto_secretbox_xchacha20poly1305_detached($0,$1,$2,$3,$4,$5,$6)|0);
 return 0;
}
function _crypto_box_curve25519xchacha20poly1305_detached($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $10 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $8 = sp_a;
 $9 = (_crypto_box_curve25519xchacha20poly1305_beforenm($8,$6,$7)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_crypto_box_curve25519xchacha20poly1305_detached_afternm($0,$1,$2,$3,$4,$5,$8)|0);
 _sodium_memzero($8,32);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_curve25519xchacha20poly1305_easy_afternm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)>(0);
 $7 = ($2>>>0)>(4294967279);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  _sodium_misuse();
  // unreachable;
 } else {
  $11 = ((($0)) + 16|0);
  (_crypto_box_curve25519xchacha20poly1305_detached_afternm($11,$0,$1,$2,$3,$4,$5)|0);
  return 0;
 }
 return (0)|0;
}
function _crypto_box_curve25519xchacha20poly1305_easy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = ($3>>>0)>(0);
 $8 = ($2>>>0)>(4294967279);
 $9 = ($3|0)==(0);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if ($11) {
  _sodium_misuse();
  // unreachable;
 } else {
  $12 = ((($0)) + 16|0);
  $13 = (_crypto_box_curve25519xchacha20poly1305_detached($12,$0,$1,$2,$3,$4,$5,$6)|0);
  return ($13|0);
 }
 return (0)|0;
}
function _crypto_box_curve25519xchacha20poly1305_open_detached_afternm($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = (_crypto_secretbox_xchacha20poly1305_open_detached($0,$1,$2,$3,$4,$5,$6)|0);
 return ($7|0);
}
function _crypto_box_curve25519xchacha20poly1305_open_detached($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $10 = 0, $11 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $8 = sp_a;
 $9 = (_crypto_box_curve25519xchacha20poly1305_beforenm($8,$6,$7)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_crypto_box_curve25519xchacha20poly1305_open_detached_afternm($0,$1,$2,$3,$4,$5,$8)|0);
 _sodium_memzero($8,32);
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_curve25519xchacha20poly1305_open_easy_afternm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)<(0);
 $7 = ($2>>>0)<(16);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $$0 = -1;
  return ($$0|0);
 }
 $11 = ((($1)) + 16|0);
 $12 = (_i64Add(($2|0),($3|0),-16,-1)|0);
 $13 = tempRet0;
 $14 = (_crypto_box_curve25519xchacha20poly1305_open_detached_afternm($0,$11,$1,$12,$13,$4,$5)|0);
 $$0 = $14;
 return ($$0|0);
}
function _crypto_box_curve25519xchacha20poly1305_open_easy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $7 = ($3>>>0)<(0);
 $8 = ($2>>>0)<(16);
 $9 = ($3|0)==(0);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if ($11) {
  $$0 = -1;
  return ($$0|0);
 }
 $12 = ((($1)) + 16|0);
 $13 = (_i64Add(($2|0),($3|0),-16,-1)|0);
 $14 = tempRet0;
 $15 = (_crypto_box_curve25519xchacha20poly1305_open_detached($0,$12,$1,$13,$14,$4,$5,$6)|0);
 $$0 = $15;
 return ($$0|0);
}
function _crypto_box_curve25519xchacha20poly1305_seedbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_curve25519xchacha20poly1305_publickeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_curve25519xchacha20poly1305_secretkeybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_curve25519xchacha20poly1305_beforenmbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_box_curve25519xchacha20poly1305_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_box_curve25519xchacha20poly1305_macbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_box_curve25519xchacha20poly1305_seal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 96|0;
 $5 = sp_a + 64|0;
 $6 = sp_a + 32|0;
 $7 = sp_a;
 $8 = (_crypto_box_curve25519xchacha20poly1305_keypair($6,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$0; src=$6; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 __crypto_box_curve25519xchacha20poly1305_seal_nonce($5,$6,$4);
 $10 = ((($0)) + 32|0);
 $11 = (_crypto_box_curve25519xchacha20poly1305_easy($10,$1,$2,$3,$5,$4,$7)|0);
 _sodium_memzero($7,32);
 _sodium_memzero($6,32);
 _sodium_memzero($5,24);
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function __crypto_box_curve25519xchacha20poly1305_seal_nonce($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 384|0;
 $3 = sp_a;
 (_crypto_generichash_init($3,0,0,24)|0);
 (_crypto_generichash_update($3,$1,32,0)|0);
 (_crypto_generichash_update($3,$2,32,0)|0);
 (_crypto_generichash_final($3,$0,24)|0);
 STACKTOP = sp;return;
}
function _crypto_box_curve25519xchacha20poly1305_seal_open($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp_a;
 $7 = ($3>>>0)<(0);
 $8 = ($2>>>0)<(48);
 $9 = ($3|0)==(0);
 $10 = $9 & $8;
 $11 = $7 | $10;
 if ($11) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 __crypto_box_curve25519xchacha20poly1305_seal_nonce($6,$1,$4);
 $12 = ((($1)) + 32|0);
 $13 = (_i64Add(($2|0),($3|0),-32,-1)|0);
 $14 = tempRet0;
 $15 = (_crypto_box_curve25519xchacha20poly1305_open_easy($0,$12,$13,$14,$6,$1,$5)|0);
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_box_curve25519xchacha20poly1305_sealbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 48;
}
function _escrypt_parse_setting($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = HEAP8[$0>>0]|0;
 $5 = ($4<<24>>24)==(36);
 if (!($5)) {
  return (0|0);
 }
 $6 = ((($0)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(55);
 if (!($8)) {
  return (0|0);
 }
 $9 = ((($0)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(36);
 if (!($11)) {
  return (0|0);
 }
 $12 = ((($0)) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (_decode64_one($1,$13)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  return (0|0);
 }
 $16 = ((($0)) + 4|0);
 $17 = (_decode64_uint32($2,$16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  return (0|0);
 } else {
  $19 = (_decode64_uint32($3,$17)|0);
  return ($19|0);
 }
 return (0)|0;
}
function _decode64_one($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $storemerge = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $1&255;
 $3 = (_strchr(35277,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = (($5) - (35277))|0;
 $storemerge = $4 ? 0 : $6;
 $$0 = $4 << 31 >> 31;
 HEAP32[$0>>2] = $storemerge;
 return ($$0|0);
}
function _decode64_uint32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp_a;
 $$01 = 0;$$02 = 0;$$03 = $1;
 while(1) {
  $3 = ($$02>>>0)<(30);
  if (!($3)) {
   $$0 = $$03;$storemerge = $$01;
   break;
  }
  $4 = HEAP8[$$03>>0]|0;
  $5 = (_decode64_one($2,$4)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = 0;$storemerge = 0;
   break;
  }
  $7 = HEAP32[$2>>2]|0;
  $8 = $7 << $$02;
  $9 = $$01 | $8;
  $10 = ((($$03)) + 1|0);
  $11 = (($$02) + 6)|0;
  $$01 = $9;$$02 = $11;$$03 = $10;
 }
 HEAP32[$0>>2] = $storemerge;
 STACKTOP = sp;return ($$0|0);
}
function _escrypt_r($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, label = 0;
 var sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 48|0;
 $5 = sp_a + 16|0;
 $6 = sp_a + 8|0;
 $7 = sp_a + 4|0;
 $8 = sp_a;
 $9 = (_escrypt_parse_setting($3,$6,$7,$8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$6>>2]|0;
 $12 = (_bitshift64Shl(1,0,($11|0))|0);
 $13 = tempRet0;
 $14 = $9;
 $15 = $3;
 $16 = (($14) - ($15))|0;
 $17 = (_strrchr($9)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $21 = (_strlen($9)|0);
  $$01 = $21;
 } else {
  $19 = $17;
  $20 = (($19) - ($14))|0;
  $$01 = $20;
 }
 $22 = (($16) + ($$01))|0;
 $23 = (($22) + 45)|0;
 $24 = ($23>>>0)>(102);
 $25 = ($23>>>0)<($$01>>>0);
 $or$cond = $24 | $25;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = HEAP32[$7>>2]|0;
 $27 = HEAP32[$8>>2]|0;
 $28 = (_escrypt_kdf_nosse($0,$1,$2,$9,$$01,$12,$13,$26,$27,$5,32)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($4|0),($3|0),($22|0))|0;
 $30 = (($4) + ($22)|0);
 $31 = ((($30)) + 1|0);
 HEAP8[$30>>0] = 36;
 $32 = $31;
 $33 = $4;
 $34 = (($33) - ($32))|0;
 $35 = (($34) + 102)|0;
 $36 = (_encode64($31,$35,$5,32)|0);
 _sodium_memzero($5,32);
 $37 = ($36|0)!=(0|0);
 $38 = ((($4)) + 102|0);
 $39 = ($36>>>0)<($38>>>0);
 $or$cond2 = $37 & $39;
 if (!($or$cond2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$36>>0] = 0;
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _encode64($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$01 = $0;$$02 = $1;$$05 = 0;
 while(1) {
  $4 = ($$05>>>0)<($3>>>0);
  if ($4) {
   $$03 = 0;$$04 = 0;$$1 = $$05;
  } else {
   $$0 = $$01;
   label = 6;
   break;
  }
  while(1) {
   $5 = (($$1) + 1)|0;
   $6 = (($2) + ($$1)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = $8 << $$03;
   $10 = $$04 | $9;
   $11 = (($$03) + 8)|0;
   $12 = ($11>>>0)<(24);
   $13 = ($5>>>0)<($3>>>0);
   $or$cond = $12 & $13;
   if ($or$cond) {
    $$03 = $11;$$04 = $10;$$1 = $5;
   } else {
    break;
   }
  }
  $14 = (_encode64_uint32($$01,$$02,$10,$11)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = 0;
   label = 6;
   break;
  }
  $16 = $14;
  $17 = $$01;
  $18 = (($17) - ($16))|0;
  $19 = (($$02) + ($18))|0;
  $$01 = $14;$$02 = $19;$$05 = $5;
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _encode64_uint32($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$01 = $0;$$02 = $1;$$03 = $2;$$04 = 0;
 while(1) {
  $4 = ($$04>>>0)<($3>>>0);
  if (!($4)) {
   $$0 = $$01;
   label = 5;
   break;
  }
  $5 = ($$02|0)==(0);
  if ($5) {
   $$0 = 0;
   label = 5;
   break;
  }
  $6 = $$03 & 63;
  $7 = (35277 + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  HEAP8[$$01>>0] = $8;
  $9 = $$03 >>> 6;
  $10 = (($$02) + -1)|0;
  $11 = ((($$01)) + 1|0);
  $12 = (($$04) + 6)|0;
  $$01 = $11;$$02 = $10;$$03 = $9;$$04 = $12;
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _escrypt_gensalt_r($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = ($0>>>0)>(63);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (___muldi3(($1|0),0,($2|0),0)|0);
 $7 = tempRet0;
 $8 = ($7>>>0)>(0);
 $9 = ($6>>>0)>(1073741823);
 $10 = ($7|0)==(0);
 $11 = $10 & $9;
 $12 = $8 | $11;
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ((($4)) + 1|0);
 HEAP8[$4>>0] = 36;
 $14 = ((($4)) + 2|0);
 HEAP8[$13>>0] = 55;
 $15 = ((($4)) + 3|0);
 HEAP8[$14>>0] = 36;
 $16 = (35277 + ($0)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ((($4)) + 4|0);
 HEAP8[$15>>0] = $17;
 $19 = (_encode64_uint32($18,54,$1,30)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = $19;
 $22 = $4;
 $23 = (($22) - ($21))|0;
 $24 = (($23) + 58)|0;
 $25 = (_encode64_uint32($19,$24,$2,30)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  $$0 = 0;
  return ($$0|0);
 }
 $27 = $25;
 $28 = (($22) - ($27))|0;
 $29 = (($28) + 58)|0;
 $30 = (_encode64($25,$29,$3,32)|0);
 $31 = ($30|0)!=(0|0);
 $32 = ((($4)) + 58|0);
 $33 = ($30>>>0)<($32>>>0);
 $or$cond = $31 & $33;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP8[$30>>0] = 0;
 $$0 = $4;
 return ($$0|0);
}
function _crypto_pwhash_scryptsalsa208sha256_ll($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $10 = sp_a;
 _escrypt_init_local($10);
 $11 = (_escrypt_kdf_nosse($10,$0,$1,$2,$3,$4,$5,$6,$7,$8,$9)|0);
 _escrypt_free_local($10);
 STACKTOP = sp;return ($11|0);
}
function _alloc_region($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $$pr = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp_a;
 $3 = (_posix_memalign($2,$1)|0);
 HEAP32[(33256)>>2] = $3;
 $4 = ($3|0)==(0);
 if ($4) {
  $$pr = HEAP32[$2>>2]|0;
  $$cast = $$pr;
  HEAP32[$0>>2] = $$cast;
  $6 = ((($0)) + 4|0);
  HEAP32[$6>>2] = $$pr;
  $7 = ($$pr|0)==(0|0);
  if (!($7)) {
   $10 = $$pr;$9 = $1;
   $8 = ((($0)) + 8|0);
   HEAP32[$8>>2] = $9;
   STACKTOP = sp;return ($10|0);
  }
 } else {
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  $5 = ((($0)) + 4|0);
  HEAP32[$5>>2] = 0;
 }
 $10 = 0;$9 = 0;
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = $9;
 STACKTOP = sp;return ($10|0);
}
function _free_region($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 _init_region($0);
 return;
}
function _init_region($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _escrypt_init_local($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _init_region($0);
 return;
}
function _escrypt_free_local($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _free_region($0);
 return;
}
function _PBKDF2_SHA256($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$03 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, src = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 496|0;
 $6 = sp_a + 208|0;
 $7 = sp_a;
 $8 = sp_a + 480|0;
 $9 = sp_a + 448|0;
 $10 = sp_a + 416|0;
 (_crypto_auth_hmacsha256_init($6,$0,$1)|0);
 (_crypto_auth_hmacsha256_update($6,$2,$3,0)|0);
 $$03 = 0;
 while(1) {
  $11 = $$03 << 5;
  $12 = ($11>>>0)<($5>>>0);
  if (!($12)) {
   break;
  }
  $13 = (($$03) + 1)|0;
  _store32_be_240($8,$13);
  _memcpy(($7|0),($6|0),208)|0;
  (_crypto_auth_hmacsha256_update($7,$8,4,0)|0);
  (_crypto_auth_hmacsha256_final($7,$9)|0);
  dest=$10; src=$9; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $14 = (($5) - ($11))|0;
  $15 = ($14>>>0)<(32);
  $$0 = $15 ? $14 : 32;
  $16 = (($4) + ($11)|0);
  _memcpy(($16|0),($10|0),($$0|0))|0;
  $$03 = $13;
 }
 _sodium_memzero($6,208);
 STACKTOP = sp;return;
}
function _store32_be_240($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $1&255;
 $3 = ((($0)) + 3|0);
 HEAP8[$3>>0] = $2;
 $4 = $1 >>> 8;
 $5 = $4&255;
 $6 = ((($0)) + 2|0);
 HEAP8[$6>>0] = $5;
 $7 = $1 >>> 16;
 $8 = $7&255;
 $9 = ((($0)) + 1|0);
 HEAP8[$9>>0] = $8;
 $10 = $1 >>> 24;
 $11 = $10&255;
 HEAP8[$0>>0] = $11;
 return;
}
function _crypto_pwhash_scryptsalsa208sha256_bytes_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_pwhash_scryptsalsa208sha256_bytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_scryptsalsa208sha256_passwd_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 0;
}
function _crypto_pwhash_scryptsalsa208sha256_passwd_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_scryptsalsa208sha256_saltbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_pwhash_scryptsalsa208sha256_strbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 102;
}
function _crypto_pwhash_scryptsalsa208sha256_strprefix() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (35342|0);
}
function _crypto_pwhash_scryptsalsa208sha256_opslimit_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32768;
}
function _crypto_pwhash_scryptsalsa208sha256_opslimit_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_scryptsalsa208sha256_memlimit_min() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16777216;
}
function _crypto_pwhash_scryptsalsa208sha256_memlimit_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 524288;
}
function _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16777216;
}
function _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 33554432;
}
function _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 1073741824;
}
function _crypto_pwhash_scryptsalsa208sha256($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $10 = sp_a + 8|0;
 $11 = sp_a + 4|0;
 $12 = sp_a;
 _memset(($0|0),0,($1|0))|0;
 $13 = $4 | $1;
 $14 = $5 | $2;
 $15 = ($14>>>0)>(0);
 $16 = ($13>>>0)>(4294967295);
 $17 = ($14|0)==(0);
 $18 = $17 & $16;
 $19 = $15 | $18;
 if ($19) {
  HEAP32[(33256)>>2] = 27;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ($2>>>0)<(0);
 $21 = ($1>>>0)<(16);
 $22 = ($2|0)==(0);
 $23 = $22 & $21;
 $24 = $20 | $23;
 if ($24) {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  _pickparams($7,$8,$9,$10,$11,$12);
  $25 = HEAP32[$10>>2]|0;
  $26 = (_bitshift64Shl(1,0,($25|0))|0);
  $27 = tempRet0;
  $28 = HEAP32[$12>>2]|0;
  $29 = HEAP32[$11>>2]|0;
  $30 = (_crypto_pwhash_scryptsalsa208sha256_ll($3,$4,$6,32,$26,$27,$28,$29,$0,$1)|0);
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _pickparams($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = ($1>>>0)>(0);
 $7 = ($0>>>0)>(32768);
 $8 = ($1|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 $11 = $10 ? $0 : 32768;
 $12 = $10 ? $1 : 0;
 HEAP32[$5>>2] = 8;
 $13 = $2 >>> 5;
 $14 = ($12>>>0)<(0);
 $15 = ($11>>>0)<($13>>>0);
 $16 = ($12|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if (!($18)) {
  $34 = $2 >>> 11;
  $storemerge = 1;
  while(1) {
   $35 = ($storemerge>>>0)>(62);
   $36 = (_bitshift64Shl(1,0,($storemerge|0))|0);
   $37 = tempRet0;
   $38 = ($37>>>0)>(0);
   $39 = ($36>>>0)>($34>>>0);
   $40 = ($37|0)==(0);
   $41 = $40 & $39;
   $42 = $38 | $41;
   $or$cond = $35 | $42;
   if ($or$cond) {
    break;
   }
   $43 = (($storemerge) + 1)|0;
   $storemerge = $43;
  }
  HEAP32[$3>>2] = $storemerge;
  $44 = (_bitshift64Lshr(($11|0),($12|0),2)|0);
  $45 = tempRet0;
  $46 = (_bitshift64Lshr(($44|0),($45|0),($storemerge|0))|0);
  $47 = tempRet0;
  $48 = ($47>>>0)<(0);
  $49 = ($46>>>0)<(1073741823);
  $50 = ($47|0)==(0);
  $51 = $50 & $49;
  $52 = $48 | $51;
  $53 = $52 ? $46 : 1073741823;
  $52 ? $47 : 0;
  $54 = HEAP32[$5>>2]|0;
  $55 = (($53>>>0) / ($54>>>0))&-1;
  HEAP32[$4>>2] = $55;
  return;
 }
 HEAP32[$4>>2] = 1;
 $19 = HEAP32[$5>>2]|0;
 $20 = $19 << 2;
 $21 = (___udivdi3(($11|0),($12|0),($20|0),0)|0);
 $22 = tempRet0;
 $23 = (_bitshift64Lshr(($21|0),($22|0),1)|0);
 $24 = tempRet0;
 $storemerge1 = 1;
 while(1) {
  $25 = ($storemerge1>>>0)<(63);
  if (!($25)) {
   break;
  }
  $26 = (_bitshift64Shl(1,0,($storemerge1|0))|0);
  $27 = tempRet0;
  $28 = ($27>>>0)>($24>>>0);
  $29 = ($26>>>0)>($23>>>0);
  $30 = ($27|0)==($24|0);
  $31 = $30 & $29;
  $32 = $28 | $31;
  if ($32) {
   break;
  }
  $33 = (($storemerge1) + 1)|0;
  $storemerge1 = $33;
 }
 HEAP32[$3>>2] = $storemerge1;
 return;
}
function _crypto_pwhash_scryptsalsa208sha256_str($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 128|0;
 $7 = sp_a + 88|0;
 $8 = sp_a + 24|0;
 $9 = sp_a + 12|0;
 $10 = sp_a + 8|0;
 $11 = sp_a + 4|0;
 $12 = sp_a;
 dest=$0; stop=dest+102|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $13 = ($3>>>0)>(0);
 $14 = ($2>>>0)>(4294967295);
 $15 = ($3|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if ($17) {
  $$sink = 27;
 } else {
  _pickparams($4,$5,$6,$10,$11,$12);
  _randombytes_buf($7,32);
  $18 = HEAP32[$10>>2]|0;
  $19 = HEAP32[$12>>2]|0;
  $20 = HEAP32[$11>>2]|0;
  $21 = (_escrypt_gensalt_r($18,$19,$20,$7,$8)|0);
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$sink = 22;
  } else {
   _escrypt_init_local($9);
   $23 = (_escrypt_r($9,$1,$2,$8,$0)|0);
   $24 = ($23|0)==(0|0);
   _escrypt_free_local($9);
   if ($24) {
    $$sink = 22;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 HEAP32[(33256)>>2] = $$sink;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_pwhash_scryptsalsa208sha256_str_verify($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp_a + 12|0;
 $5 = sp_a;
 $6 = (_memchr($0)|0);
 $7 = ((($0)) + 101|0);
 $8 = ($6|0)==($7|0);
 if (!($8)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _escrypt_init_local($5);
 dest=$4; stop=dest+102|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $9 = (_escrypt_r($5,$1,$2,$0,$4)|0);
 $10 = ($9|0)==(0|0);
 _escrypt_free_local($5);
 if ($10) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_sodium_memcmp($4,$0,102)|0);
 _sodium_memzero($4,102);
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_pwhash_scryptsalsa208sha256_str_needs_rehash($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $not$ = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp_a + 20|0;
 $5 = sp_a + 16|0;
 $6 = sp_a + 12|0;
 $7 = sp_a + 8|0;
 $8 = sp_a + 4|0;
 $9 = sp_a;
 _pickparams($1,$2,$3,$4,$6,$8);
 $10 = (_memchr($0)|0);
 $11 = ((($0)) + 101|0);
 $12 = ($10|0)==($11|0);
 if (!($12)) {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (_escrypt_parse_setting($0,$5,$9,$7)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$4>>2]|0;
 $16 = HEAP32[$5>>2]|0;
 $17 = ($15|0)==($16|0);
 if (!($17)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP32[$8>>2]|0;
 $19 = HEAP32[$9>>2]|0;
 $20 = ($18|0)==($19|0);
 if ($20) {
  $21 = HEAP32[$6>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $not$ = ($21|0)!=($22|0);
  $$ = $not$&1;
  STACKTOP = sp;return ($$|0);
 } else {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _escrypt_kdf_nosse($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$01 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $exitcond = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $11 = (___muldi3(($7|0),0,($8|0),0)|0);
 $12 = tempRet0;
 $13 = ($12>>>0)>(0);
 $14 = ($11>>>0)>(1073741823);
 $15 = ($12|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if ($17) {
  HEAP32[(33256)>>2] = 27;
  $$0 = -1;
  return ($$0|0);
 }
 $18 = ($6>>>0)>(0);
 $19 = ($5>>>0)>(4294967295);
 $20 = ($6|0)==(0);
 $21 = $20 & $19;
 $22 = $18 | $21;
 if ($22) {
  HEAP32[(33256)>>2] = 27;
  $$0 = -1;
  return ($$0|0);
 }
 $23 = (_i64Add(($5|0),($6|0),-1,-1)|0);
 $24 = tempRet0;
 $25 = $23 & $5;
 $26 = $24 & $6;
 $27 = ($25|0)!=(0);
 $28 = ($26|0)!=(0);
 $29 = $27 | $28;
 $30 = ($6>>>0)<(0);
 $31 = ($5>>>0)<(2);
 $32 = ($6|0)==(0);
 $33 = $32 & $31;
 $34 = $30 | $33;
 $or$cond = $29 | $34;
 if ($or$cond) {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  return ($$0|0);
 }
 $35 = ($7|0)==(0);
 $36 = ($8|0)==(0);
 $or$cond2 = $35 | $36;
 if ($or$cond2) {
  HEAP32[(33256)>>2] = 22;
  $$0 = -1;
  return ($$0|0);
 }
 $37 = (33554431 / ($8>>>0))&-1;
 $38 = ($37>>>0)<($7>>>0);
 $39 = ($7>>>0)>(16777215);
 $or$cond3 = $38 | $39;
 if (!($or$cond3)) {
  $40 = (33554431 / ($7>>>0))&-1;
  $41 = (0)<($6>>>0);
  $42 = ($40>>>0)<($5>>>0);
  $43 = (0)==($6|0);
  $44 = $43 & $42;
  $45 = $41 | $44;
  if (!($45)) {
   $46 = $7 << 7;
   $47 = Math_imul($46, $8)|0;
   $48 = Math_imul($46, $5)|0;
   $49 = (($47) + ($48))|0;
   $50 = ($49>>>0)<($48>>>0);
   if ($50) {
    HEAP32[(33256)>>2] = 12;
    $$0 = -1;
    return ($$0|0);
   }
   $51 = $7 << 8;
   $52 = $51 | 64;
   $53 = (($49) + ($52))|0;
   $54 = ($53>>>0)<($52>>>0);
   if ($54) {
    HEAP32[(33256)>>2] = 12;
    $$0 = -1;
    return ($$0|0);
   }
   $55 = ((($0)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56>>>0)<($53>>>0);
   if ($57) {
    _free_region($0);
    $58 = (_alloc_region($0,$53)|0);
    $59 = ($58|0)==(0|0);
    if ($59) {
     $$0 = -1;
     return ($$0|0);
    }
   }
   $60 = ((($0)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($47)|0);
   $63 = (($62) + ($48)|0);
   _PBKDF2_SHA256($1,$2,$3,$4,$61,$47);
   $$01 = 0;
   while(1) {
    $exitcond = ($$01|0)==($8|0);
    if ($exitcond) {
     break;
    }
    $64 = $$01 << 7;
    $65 = Math_imul($64, $7)|0;
    $66 = (($61) + ($65)|0);
    _smix($66,$7,$5,$6,$62,$63);
    $67 = (($$01) + 1)|0;
    $$01 = $67;
   }
   _PBKDF2_SHA256($1,$2,$61,$47,$9,$10);
   $$0 = 0;
   return ($$0|0);
  }
 }
 HEAP32[(33256)>>2] = 12;
 $$0 = -1;
 return ($$0|0);
}
function _smix($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond5 = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = $1 << 5;
 $7 = $1 << 6;
 $$0 = 0;
 while(1) {
  $exitcond5 = ($$0|0)==($6|0);
  if ($exitcond5) {
   break;
  }
  $11 = $$0 << 2;
  $12 = (($0) + ($11)|0);
  $13 = (_load32_le_244($12)|0);
  $14 = (($5) + ($$0<<2)|0);
  HEAP32[$14>>2] = $13;
  $15 = (($$0) + 1)|0;
  $$0 = $15;
 }
 $8 = (($5) + ($6<<2)|0);
 $9 = (($5) + ($7<<2)|0);
 $10 = $1 << 7;
 $17 = 0;$19 = 0;
 while(1) {
  $16 = ($17>>>0)<($3>>>0);
  $18 = ($19>>>0)<($2>>>0);
  $20 = ($17|0)==($3|0);
  $21 = $20 & $18;
  $22 = $16 | $21;
  if (!($22)) {
   break;
  }
  $25 = (___muldi3(($19|0),($17|0),($6|0),0)|0);
  $26 = tempRet0;
  $27 = (($4) + ($25<<2)|0);
  _blkcpy($27,$5,$10);
  _blockmix_salsa8($5,$8,$9,$1);
  $28 = $19 | 1;
  $29 = (___muldi3(($28|0),($17|0),($6|0),0)|0);
  $30 = tempRet0;
  $31 = (($4) + ($29<<2)|0);
  _blkcpy($31,$8,$10);
  _blockmix_salsa8($8,$5,$9,$1);
  $32 = (_i64Add(($19|0),($17|0),2,0)|0);
  $33 = tempRet0;
  $17 = $33;$19 = $32;
 }
 $23 = (_i64Add(($2|0),($3|0),-1,-1)|0);
 $24 = tempRet0;
 $35 = 0;$37 = 0;
 while(1) {
  $34 = ($35>>>0)<($3>>>0);
  $36 = ($37>>>0)<($2>>>0);
  $38 = ($35|0)==($3|0);
  $39 = $38 & $36;
  $40 = $34 | $39;
  if (!($40)) {
   $$1 = 0;
   break;
  }
  $41 = (_integerify($5,$1)|0);
  $42 = tempRet0;
  $43 = $41 & $23;
  $44 = $42 & $24;
  $45 = (___muldi3(($43|0),($44|0),($6|0),0)|0);
  $46 = tempRet0;
  $47 = (($4) + ($45<<2)|0);
  _blkxor($5,$47,$10);
  _blockmix_salsa8($5,$8,$9,$1);
  $48 = (_integerify($8,$1)|0);
  $49 = tempRet0;
  $50 = $48 & $23;
  $51 = $49 & $24;
  $52 = (___muldi3(($50|0),($51|0),($6|0),0)|0);
  $53 = tempRet0;
  $54 = (($4) + ($52<<2)|0);
  _blkxor($8,$54,$10);
  _blockmix_salsa8($8,$5,$9,$1);
  $55 = (_i64Add(($37|0),($35|0),2,0)|0);
  $56 = tempRet0;
  $35 = $56;$37 = $55;
 }
 while(1) {
  $exitcond = ($$1|0)==($6|0);
  if ($exitcond) {
   break;
  }
  $57 = $$1 << 2;
  $58 = (($0) + ($57)|0);
  $59 = (($5) + ($$1<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  _store32_le_245($58,$60);
  $61 = (($$1) + 1)|0;
  $$1 = $61;
 }
 return;
}
function _load32_le_244($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 return ($1|0);
}
function _blkcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $2 >>> 2;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==($3|0);
  if ($exitcond) {
   break;
  }
  $4 = (($1) + ($$0<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($0) + ($$0<<2)|0);
  HEAP32[$6>>2] = $5;
  $7 = (($$0) + 1)|0;
  $$0 = $7;
 }
 return;
}
function _blockmix_salsa8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $4 = $3 << 5;
 $5 = (($4) + -16)|0;
 $6 = (($0) + ($5<<2)|0);
 _blkcpy_64($2,$6);
 $7 = $3 << 1;
 $8 = $3 << 4;
 $$0 = 0;
 while(1) {
  $9 = ($$0>>>0)<($7>>>0);
  if (!($9)) {
   break;
  }
  $10 = $$0 << 4;
  $11 = (($0) + ($10<<2)|0);
  _blkxor_64($2,$11);
  _salsa20_8($2);
  $12 = $$0 << 3;
  $13 = (($1) + ($12<<2)|0);
  _blkcpy_64($13,$2);
  $14 = $10 | 16;
  $15 = (($0) + ($14<<2)|0);
  _blkxor_64($2,$15);
  _salsa20_8($2);
  $16 = (($12) + ($8))|0;
  $17 = (($1) + ($16<<2)|0);
  _blkcpy_64($17,$2);
  $18 = (($$0) + 2)|0;
  $$0 = $18;
 }
 return;
}
function _integerify($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = $1 << 7;
 $4 = (($3) + -64)|0;
 $5 = (($2) + ($4))|0;
 $6 = $5;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 tempRet0 = ($8);
 return ($9|0);
}
function _blkxor($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $2 >>> 2;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==($3|0);
  if ($exitcond) {
   break;
  }
  $4 = (($1) + ($$0<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($0) + ($$0<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 ^ $5;
  HEAP32[$6>>2] = $8;
  $9 = (($$0) + 1)|0;
  $$0 = $9;
 }
 return;
}
function _store32_le_245($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 return;
}
function _blkcpy_64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(16);
  if ($exitcond) {
   break;
  }
  $2 = (($1) + ($$0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($0) + ($$0<<2)|0);
  HEAP32[$4>>2] = $3;
  $5 = (($$0) + 1)|0;
  $$0 = $5;
 }
 return;
}
function _blkxor_64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(16);
  if ($exitcond) {
   break;
  }
  $2 = (($1) + ($$0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($0) + ($$0<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 ^ $3;
  HEAP32[$4>>2] = $6;
  $7 = (($$0) + 1)|0;
  $$0 = $7;
 }
 return;
}
function _salsa20_8($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 64|0;
 $1 = sp_a;
 _blkcpy_64($1,$0);
 $2 = ((($1)) + 48|0);
 $3 = ((($1)) + 16|0);
 $4 = ((($1)) + 32|0);
 $5 = ((($1)) + 20|0);
 $6 = ((($1)) + 4|0);
 $7 = ((($1)) + 36|0);
 $8 = ((($1)) + 52|0);
 $9 = ((($1)) + 40|0);
 $10 = ((($1)) + 24|0);
 $11 = ((($1)) + 56|0);
 $12 = ((($1)) + 8|0);
 $13 = ((($1)) + 60|0);
 $14 = ((($1)) + 44|0);
 $15 = ((($1)) + 12|0);
 $16 = ((($1)) + 28|0);
 $$0 = 0;
 while(1) {
  $17 = ($$0>>>0)<(8);
  if (!($17)) {
   $$1 = 0;
   break;
  }
  $18 = HEAP32[$1>>2]|0;
  $19 = HEAP32[$2>>2]|0;
  $20 = (($18) + ($19))|0;
  $21 = $20 << 7;
  $22 = $20 >>> 25;
  $23 = $21 | $22;
  $24 = HEAP32[$3>>2]|0;
  $25 = $24 ^ $23;
  HEAP32[$3>>2] = $25;
  $26 = (($25) + ($18))|0;
  $27 = $26 << 9;
  $28 = $26 >>> 23;
  $29 = $27 | $28;
  $30 = HEAP32[$4>>2]|0;
  $31 = $30 ^ $29;
  HEAP32[$4>>2] = $31;
  $32 = (($31) + ($25))|0;
  $33 = $32 << 13;
  $34 = $32 >>> 19;
  $35 = $33 | $34;
  $36 = $19 ^ $35;
  HEAP32[$2>>2] = $36;
  $37 = (($36) + ($31))|0;
  $38 = $37 << 18;
  $39 = $37 >>> 14;
  $40 = $38 | $39;
  $41 = $18 ^ $40;
  HEAP32[$1>>2] = $41;
  $42 = HEAP32[$5>>2]|0;
  $43 = HEAP32[$6>>2]|0;
  $44 = (($42) + ($43))|0;
  $45 = $44 << 7;
  $46 = $44 >>> 25;
  $47 = $45 | $46;
  $48 = HEAP32[$7>>2]|0;
  $49 = $48 ^ $47;
  HEAP32[$7>>2] = $49;
  $50 = (($49) + ($42))|0;
  $51 = $50 << 9;
  $52 = $50 >>> 23;
  $53 = $51 | $52;
  $54 = HEAP32[$8>>2]|0;
  $55 = $54 ^ $53;
  HEAP32[$8>>2] = $55;
  $56 = (($55) + ($49))|0;
  $57 = $56 << 13;
  $58 = $56 >>> 19;
  $59 = $57 | $58;
  $60 = $43 ^ $59;
  $61 = (($60) + ($55))|0;
  $62 = $61 << 18;
  $63 = $61 >>> 14;
  $64 = $62 | $63;
  $65 = $42 ^ $64;
  HEAP32[$5>>2] = $65;
  $66 = HEAP32[$9>>2]|0;
  $67 = HEAP32[$10>>2]|0;
  $68 = (($66) + ($67))|0;
  $69 = $68 << 7;
  $70 = $68 >>> 25;
  $71 = $69 | $70;
  $72 = HEAP32[$11>>2]|0;
  $73 = $72 ^ $71;
  HEAP32[$11>>2] = $73;
  $74 = (($73) + ($66))|0;
  $75 = $74 << 9;
  $76 = $74 >>> 23;
  $77 = $75 | $76;
  $78 = HEAP32[$12>>2]|0;
  $79 = $78 ^ $77;
  $80 = (($79) + ($73))|0;
  $81 = $80 << 13;
  $82 = $80 >>> 19;
  $83 = $81 | $82;
  $84 = $67 ^ $83;
  $85 = (($84) + ($79))|0;
  $86 = $85 << 18;
  $87 = $85 >>> 14;
  $88 = $86 | $87;
  $89 = $66 ^ $88;
  HEAP32[$9>>2] = $89;
  $90 = HEAP32[$13>>2]|0;
  $91 = HEAP32[$14>>2]|0;
  $92 = (($90) + ($91))|0;
  $93 = $92 << 7;
  $94 = $92 >>> 25;
  $95 = $93 | $94;
  $96 = HEAP32[$15>>2]|0;
  $97 = $96 ^ $95;
  $98 = (($97) + ($90))|0;
  $99 = $98 << 9;
  $100 = $98 >>> 23;
  $101 = $99 | $100;
  $102 = HEAP32[$16>>2]|0;
  $103 = $102 ^ $101;
  $104 = (($103) + ($97))|0;
  $105 = $104 << 13;
  $106 = $104 >>> 19;
  $107 = $105 | $106;
  $108 = $91 ^ $107;
  $109 = (($108) + ($103))|0;
  $110 = $109 << 18;
  $111 = $109 >>> 14;
  $112 = $110 | $111;
  $113 = $90 ^ $112;
  HEAP32[$13>>2] = $113;
  $114 = (($41) + ($97))|0;
  $115 = $114 << 7;
  $116 = $114 >>> 25;
  $117 = $115 | $116;
  $118 = $60 ^ $117;
  HEAP32[$6>>2] = $118;
  $119 = (($118) + ($41))|0;
  $120 = $119 << 9;
  $121 = $119 >>> 23;
  $122 = $120 | $121;
  $123 = $79 ^ $122;
  HEAP32[$12>>2] = $123;
  $124 = (($123) + ($118))|0;
  $125 = $124 << 13;
  $126 = $124 >>> 19;
  $127 = $125 | $126;
  $128 = $97 ^ $127;
  HEAP32[$15>>2] = $128;
  $129 = (($128) + ($123))|0;
  $130 = $129 << 18;
  $131 = $129 >>> 14;
  $132 = $130 | $131;
  $133 = HEAP32[$1>>2]|0;
  $134 = $133 ^ $132;
  HEAP32[$1>>2] = $134;
  $135 = HEAP32[$3>>2]|0;
  $136 = (($65) + ($135))|0;
  $137 = $136 << 7;
  $138 = $136 >>> 25;
  $139 = $137 | $138;
  $140 = $84 ^ $139;
  HEAP32[$10>>2] = $140;
  $141 = (($140) + ($65))|0;
  $142 = $141 << 9;
  $143 = $141 >>> 23;
  $144 = $142 | $143;
  $145 = $103 ^ $144;
  HEAP32[$16>>2] = $145;
  $146 = (($145) + ($140))|0;
  $147 = $146 << 13;
  $148 = $146 >>> 19;
  $149 = $147 | $148;
  $150 = $135 ^ $149;
  HEAP32[$3>>2] = $150;
  $151 = (($150) + ($145))|0;
  $152 = $151 << 18;
  $153 = $151 >>> 14;
  $154 = $152 | $153;
  $155 = HEAP32[$5>>2]|0;
  $156 = $155 ^ $154;
  HEAP32[$5>>2] = $156;
  $157 = HEAP32[$7>>2]|0;
  $158 = (($89) + ($157))|0;
  $159 = $158 << 7;
  $160 = $158 >>> 25;
  $161 = $159 | $160;
  $162 = $108 ^ $161;
  HEAP32[$14>>2] = $162;
  $163 = (($162) + ($89))|0;
  $164 = $163 << 9;
  $165 = $163 >>> 23;
  $166 = $164 | $165;
  $167 = HEAP32[$4>>2]|0;
  $168 = $167 ^ $166;
  HEAP32[$4>>2] = $168;
  $169 = (($168) + ($162))|0;
  $170 = $169 << 13;
  $171 = $169 >>> 19;
  $172 = $170 | $171;
  $173 = $157 ^ $172;
  HEAP32[$7>>2] = $173;
  $174 = (($173) + ($168))|0;
  $175 = $174 << 18;
  $176 = $174 >>> 14;
  $177 = $175 | $176;
  $178 = HEAP32[$9>>2]|0;
  $179 = $178 ^ $177;
  HEAP32[$9>>2] = $179;
  $180 = HEAP32[$11>>2]|0;
  $181 = (($113) + ($180))|0;
  $182 = $181 << 7;
  $183 = $181 >>> 25;
  $184 = $182 | $183;
  $185 = HEAP32[$2>>2]|0;
  $186 = $185 ^ $184;
  HEAP32[$2>>2] = $186;
  $187 = (($186) + ($113))|0;
  $188 = $187 << 9;
  $189 = $187 >>> 23;
  $190 = $188 | $189;
  $191 = HEAP32[$8>>2]|0;
  $192 = $191 ^ $190;
  HEAP32[$8>>2] = $192;
  $193 = (($192) + ($186))|0;
  $194 = $193 << 13;
  $195 = $193 >>> 19;
  $196 = $194 | $195;
  $197 = $180 ^ $196;
  HEAP32[$11>>2] = $197;
  $198 = (($197) + ($192))|0;
  $199 = $198 << 18;
  $200 = $198 >>> 14;
  $201 = $199 | $200;
  $202 = HEAP32[$13>>2]|0;
  $203 = $202 ^ $201;
  HEAP32[$13>>2] = $203;
  $204 = (($$0) + 2)|0;
  $$0 = $204;
 }
 while(1) {
  $exitcond = ($$1|0)==(16);
  if ($exitcond) {
   break;
  }
  $205 = (($1) + ($$1<<2)|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = (($0) + ($$1<<2)|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = (($208) + ($206))|0;
  HEAP32[$207>>2] = $209;
  $210 = (($$1) + 1)|0;
  $$1 = $210;
 }
 STACKTOP = sp;return;
}
function _crypto_secretbox_xchacha20poly1305_detached($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, sp_a = 0, stop = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 352|0;
 $7 = sp_a;
 $8 = sp_a + 288|0;
 $9 = sp_a + 256|0;
 (_crypto_core_hchacha20($9,$5,$6,0)|0);
 $10 = ($0>>>0)>($2>>>0);
 if ($10) {
  $11 = $0;
  $12 = $2;
  $13 = (($11) - ($12))|0;
  $14 = (0)<($4>>>0);
  $15 = ($13>>>0)<($3>>>0);
  $16 = (0)==($4|0);
  $17 = $16 & $15;
  $18 = $14 | $17;
  if ($18) {
   label = 5;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $19 = ($2>>>0)>($0>>>0);
  if ($19) {
   $20 = $2;
   $21 = $0;
   $22 = (($20) - ($21))|0;
   $23 = (0)<($4>>>0);
   $24 = ($22>>>0)<($3>>>0);
   $25 = (0)==($4|0);
   $26 = $25 & $24;
   $27 = $23 | $26;
   if ($27) {
    label = 5;
   } else {
    $$02 = $2;
   }
  } else {
   $$02 = $2;
  }
 }
 if ((label|0) == 5) {
  _memmove(($0|0),($2|0),($3|0))|0;
  $$02 = $0;
 }
 dest=$8; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $28 = ($4>>>0)<(0);
 $29 = ($3>>>0)<(32);
 $30 = ($4|0)==(0);
 $31 = $30 & $29;
 $32 = $28 | $31;
 $33 = $32 ? $3 : 32;
 $34 = $32 ? $4 : 0;
 $36 = 0;$38 = 0;
 while(1) {
  $35 = ($36>>>0)<($34>>>0);
  $37 = ($38>>>0)<($33>>>0);
  $39 = ($36|0)==($34|0);
  $40 = $39 & $37;
  $41 = $35 | $40;
  if (!($41)) {
   break;
  }
  $42 = (($$02) + ($38)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = (_i64Add(($38|0),($36|0),32,0)|0);
  $45 = tempRet0;
  $46 = (($8) + ($44)|0);
  HEAP8[$46>>0] = $43;
  $47 = (_i64Add(($38|0),($36|0),1,0)|0);
  $48 = tempRet0;
  $36 = $48;$38 = $47;
 }
 $49 = (_i64Add(($33|0),($34|0),32,0)|0);
 $50 = tempRet0;
 $51 = ((($5)) + 16|0);
 (_crypto_stream_chacha20_xor($8,$8,$49,$50,$51,$9)|0);
 (_crypto_onetimeauth_poly1305_init($7,$8)|0);
 $53 = 0;$55 = 0;
 while(1) {
  $52 = ($53>>>0)<($34>>>0);
  $54 = ($55>>>0)<($33>>>0);
  $56 = ($53|0)==($34|0);
  $57 = $56 & $54;
  $58 = $52 | $57;
  if (!($58)) {
   break;
  }
  $59 = (_i64Add(($55|0),($53|0),32,0)|0);
  $60 = tempRet0;
  $61 = (($8) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = (($0) + ($55)|0);
  HEAP8[$63>>0] = $62;
  $64 = (_i64Add(($55|0),($53|0),1,0)|0);
  $65 = tempRet0;
  $53 = $65;$55 = $64;
 }
 _sodium_memzero($8,64);
 $66 = ($4>>>0)>(0);
 $67 = ($3>>>0)>(32);
 $68 = ($4|0)==(0);
 $69 = $68 & $67;
 $70 = $66 | $69;
 if (!($70)) {
  _sodium_memzero($9,32);
  (_crypto_onetimeauth_poly1305_update($7,$0,$3,$4)|0);
  (_crypto_onetimeauth_poly1305_final($7,$1)|0);
  _sodium_memzero($7,256);
  STACKTOP = sp;return 0;
 }
 $71 = (($0) + ($33)|0);
 $72 = (($$02) + ($33)|0);
 $73 = (_i64Subtract(($3|0),($4|0),($33|0),($34|0))|0);
 $74 = tempRet0;
 (_crypto_stream_chacha20_xor_ic($71,$72,$73,$74,$51,1,0,$9)|0);
 _sodium_memzero($9,32);
 (_crypto_onetimeauth_poly1305_update($7,$0,$3,$4)|0);
 (_crypto_onetimeauth_poly1305_final($7,$1)|0);
 _sodium_memzero($7,256);
 STACKTOP = sp;return 0;
}
function _crypto_secretbox_xchacha20poly1305_easy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)>(0);
 $7 = ($2>>>0)>(4294967279);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  _sodium_misuse();
  // unreachable;
 } else {
  $11 = ((($0)) + 16|0);
  (_crypto_secretbox_xchacha20poly1305_detached($11,$0,$1,$2,$3,$4,$5)|0);
  return 0;
 }
 return (0)|0;
}
function _crypto_secretbox_xchacha20poly1305_open_detached($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 96|0;
 $7 = sp_a + 32|0;
 $8 = sp_a;
 (_crypto_core_hchacha20($8,$5,$6,0)|0);
 $9 = ((($5)) + 16|0);
 (_crypto_stream_chacha20($7,32,0,$9,$8)|0);
 $10 = (_crypto_onetimeauth_poly1305_verify($2,$1,$3,$4,$7)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  _sodium_memzero($8,32);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($0|0)==(0|0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($1>>>0)<($0>>>0);
 if ($13) {
  label = 6;
 } else {
  $14 = $1;
  $15 = $0;
  $16 = (($14) - ($15))|0;
  $17 = (0)<($4>>>0);
  $18 = ($16>>>0)<($3>>>0);
  $19 = (0)==($4|0);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if ($21) {
   label = 8;
  } else {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $22 = ($0>>>0)<($1>>>0);
  if ($22) {
   $$02 = $1;
  } else {
   $23 = $0;
   $24 = $1;
   $25 = (($23) - ($24))|0;
   $26 = (0)<($4>>>0);
   $27 = ($25>>>0)<($3>>>0);
   $28 = (0)==($4|0);
   $29 = $28 & $27;
   $30 = $26 | $29;
   if ($30) {
    label = 8;
   } else {
    $$02 = $1;
   }
  }
 }
 if ((label|0) == 8) {
  _memmove(($0|0),($1|0),($3|0))|0;
  $$02 = $0;
 }
 $31 = ($4>>>0)<(0);
 $32 = ($3>>>0)<(32);
 $33 = ($4|0)==(0);
 $34 = $33 & $32;
 $35 = $31 | $34;
 $36 = $35 ? $3 : 32;
 $37 = $35 ? $4 : 0;
 $39 = 0;$41 = 0;
 while(1) {
  $38 = ($39>>>0)<($37>>>0);
  $40 = ($41>>>0)<($36>>>0);
  $42 = ($39|0)==($37|0);
  $43 = $42 & $40;
  $44 = $38 | $43;
  if (!($44)) {
   break;
  }
  $45 = (($$02) + ($41)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = (_i64Add(($41|0),($39|0),32,0)|0);
  $48 = tempRet0;
  $49 = (($7) + ($47)|0);
  HEAP8[$49>>0] = $46;
  $50 = (_i64Add(($41|0),($39|0),1,0)|0);
  $51 = tempRet0;
  $39 = $51;$41 = $50;
 }
 $52 = (_i64Add(($36|0),($37|0),32,0)|0);
 $53 = tempRet0;
 (_crypto_stream_chacha20_xor($7,$7,$52,$53,$9,$8)|0);
 $55 = 0;$57 = 0;
 while(1) {
  $54 = ($55>>>0)<($37>>>0);
  $56 = ($57>>>0)<($36>>>0);
  $58 = ($55|0)==($37|0);
  $59 = $58 & $56;
  $60 = $54 | $59;
  if (!($60)) {
   break;
  }
  $61 = (_i64Add(($57|0),($55|0),32,0)|0);
  $62 = tempRet0;
  $63 = (($7) + ($61)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = (($0) + ($57)|0);
  HEAP8[$65>>0] = $64;
  $66 = (_i64Add(($57|0),($55|0),1,0)|0);
  $67 = tempRet0;
  $55 = $67;$57 = $66;
 }
 $68 = ($4>>>0)>(0);
 $69 = ($3>>>0)>(32);
 $70 = ($4|0)==(0);
 $71 = $70 & $69;
 $72 = $68 | $71;
 if ($72) {
  $73 = (($0) + ($36)|0);
  $74 = (($$02) + ($36)|0);
  $75 = (_i64Subtract(($3|0),($4|0),($36|0),($37|0))|0);
  $76 = tempRet0;
  (_crypto_stream_chacha20_xor_ic($73,$74,$75,$76,$9,1,0,$8)|0);
 }
 _sodium_memzero($8,32);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _crypto_secretbox_xchacha20poly1305_open_easy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = ($3>>>0)<(0);
 $7 = ($2>>>0)<(16);
 $8 = ($3|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $$0 = -1;
  return ($$0|0);
 }
 $11 = ((($1)) + 16|0);
 $12 = (_i64Add(($2|0),($3|0),-16,-1)|0);
 $13 = tempRet0;
 $14 = (_crypto_secretbox_xchacha20poly1305_open_detached($0,$11,$1,$12,$13,$4,$5)|0);
 $$0 = $14;
 return ($$0|0);
}
function _crypto_secretbox_xchacha20poly1305_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_secretbox_xchacha20poly1305_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_secretbox_xchacha20poly1305_macbytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_shorthash_siphashx24_bytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_shorthash_siphashx24_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 16;
}
function _crypto_shorthash_siphashx24($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$01 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $trunc$clear = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $5 = (_load64_le_250($4)|0);
 $6 = tempRet0;
 $7 = ((($4)) + 8|0);
 $8 = (_load64_le_250($7)|0);
 $9 = tempRet0;
 $10 = (($1) + ($2)|0);
 $11 = $2 & 7;
 $12 = (0 - ($11))|0;
 $13 = (($10) + ($12)|0);
 $14 = $8 ^ 2037671283;
 $15 = $9 ^ 1952801890;
 $16 = $5 ^ 1852142177;
 $17 = $6 ^ 1819895653;
 $18 = $8 ^ 1852075907;
 $19 = $9 ^ 1685025377;
 $20 = $5 ^ 1886610805;
 $21 = $6 ^ 1936682341;
 $$01 = $1;$26 = $14;$28 = $15;$29 = $20;$30 = $21;$31 = $18;$32 = $19;$41 = $16;$42 = $17;
 while(1) {
  $22 = ($$01|0)==($13|0);
  if ($22) {
   break;
  }
  $23 = (_load64_le_250($$01)|0);
  $24 = tempRet0;
  $25 = $26 ^ $23;
  $27 = $28 ^ $24;
  $33 = (_i64Add(($29|0),($30|0),($31|0),($32|0))|0);
  $34 = tempRet0;
  $35 = (_rotl64_251($31,$32,13)|0);
  $36 = tempRet0;
  $37 = $35 ^ $33;
  $38 = $36 ^ $34;
  $39 = (_rotl64_251($33,$34,32)|0);
  $40 = tempRet0;
  $43 = (_i64Add(($41|0),($42|0),($25|0),($27|0))|0);
  $44 = tempRet0;
  $45 = (_rotl64_251($25,$27,16)|0);
  $46 = tempRet0;
  $47 = $45 ^ $43;
  $48 = $46 ^ $44;
  $49 = (_i64Add(($39|0),($40|0),($47|0),($48|0))|0);
  $50 = tempRet0;
  $51 = (_rotl64_251($47,$48,21)|0);
  $52 = tempRet0;
  $53 = $51 ^ $49;
  $54 = $52 ^ $50;
  $55 = (_i64Add(($43|0),($44|0),($37|0),($38|0))|0);
  $56 = tempRet0;
  $57 = (_rotl64_251($37,$38,17)|0);
  $58 = tempRet0;
  $59 = $57 ^ $55;
  $60 = $58 ^ $56;
  $61 = (_rotl64_251($55,$56,32)|0);
  $62 = tempRet0;
  $63 = (_i64Add(($49|0),($50|0),($59|0),($60|0))|0);
  $64 = tempRet0;
  $65 = (_rotl64_251($59,$60,13)|0);
  $66 = tempRet0;
  $67 = $65 ^ $63;
  $68 = $66 ^ $64;
  $69 = (_rotl64_251($63,$64,32)|0);
  $70 = tempRet0;
  $71 = (_i64Add(($61|0),($62|0),($53|0),($54|0))|0);
  $72 = tempRet0;
  $73 = (_rotl64_251($53,$54,16)|0);
  $74 = tempRet0;
  $75 = $73 ^ $71;
  $76 = $74 ^ $72;
  $77 = (_i64Add(($69|0),($70|0),($75|0),($76|0))|0);
  $78 = tempRet0;
  $79 = (_rotl64_251($75,$76,21)|0);
  $80 = tempRet0;
  $81 = $79 ^ $77;
  $82 = $80 ^ $78;
  $83 = (_i64Add(($71|0),($72|0),($67|0),($68|0))|0);
  $84 = tempRet0;
  $85 = (_rotl64_251($67,$68,17)|0);
  $86 = tempRet0;
  $87 = $85 ^ $83;
  $88 = $86 ^ $84;
  $89 = (_rotl64_251($83,$84,32)|0);
  $90 = tempRet0;
  $91 = $77 ^ $23;
  $92 = $78 ^ $24;
  $93 = ((($$01)) + 8|0);
  $$01 = $93;$26 = $81;$28 = $82;$29 = $91;$30 = $92;$31 = $87;$32 = $88;$41 = $89;$42 = $90;
 }
 $94 = (_bitshift64Shl(($2|0),($3|0),56)|0);
 $95 = tempRet0;
 $96 = $2&255;
 $trunc$clear = $96 & 7;
 switch ($trunc$clear<<24>>24) {
 case 7:  {
  $97 = ((($13)) + 6|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = (_bitshift64Shl(($99|0),0,48)|0);
  $101 = tempRet0;
  $102 = $94 | $100;
  $103 = $95 | $101;
  $110 = $102;$112 = $103;
  label = 6;
  break;
 }
 case 6:  {
  $110 = $94;$112 = $95;
  label = 6;
  break;
 }
 case 5:  {
  $117 = $95;$450 = $94;
  label = 7;
  break;
 }
 case 4:  {
  $124 = $94;$126 = $95;
  label = 8;
  break;
 }
 case 3:  {
  $133 = $94;$135 = $95;
  label = 9;
  break;
 }
 case 2:  {
  $142 = $94;$144 = $95;
  label = 10;
  break;
 }
 case 1:  {
  $148 = $94;$451 = $95;
  label = 11;
  break;
 }
 default: {
  $150 = $94;$152 = $95;
 }
 }
 if ((label|0) == 6) {
  $104 = ((($13)) + 5|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = (_bitshift64Shl(($106|0),0,40)|0);
  $108 = tempRet0;
  $109 = $110 | $107;
  $111 = $112 | $108;
  $117 = $111;$450 = $109;
  label = 7;
 }
 if ((label|0) == 7) {
  $113 = ((($13)) + 4|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114&255;
  $116 = $117 | $115;
  $124 = $450;$126 = $116;
  label = 8;
 }
 if ((label|0) == 8) {
  $118 = ((($13)) + 3|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = (_bitshift64Shl(($120|0),0,24)|0);
  $122 = tempRet0;
  $123 = $124 | $121;
  $125 = $126 | $122;
  $133 = $123;$135 = $125;
  label = 9;
 }
 if ((label|0) == 9) {
  $127 = ((($13)) + 2|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&255;
  $130 = (_bitshift64Shl(($129|0),0,16)|0);
  $131 = tempRet0;
  $132 = $133 | $130;
  $134 = $135 | $131;
  $142 = $132;$144 = $134;
  label = 10;
 }
 if ((label|0) == 10) {
  $136 = ((($13)) + 1|0);
  $137 = HEAP8[$136>>0]|0;
  $138 = $137&255;
  $139 = (_bitshift64Shl(($138|0),0,8)|0);
  $140 = tempRet0;
  $141 = $142 | $139;
  $143 = $144 | $140;
  $148 = $141;$451 = $143;
  label = 11;
 }
 if ((label|0) == 11) {
  $145 = HEAP8[$13>>0]|0;
  $146 = $145&255;
  $147 = $148 | $146;
  $150 = $147;$152 = $451;
 }
 $149 = $26 ^ $150;
 $151 = $28 ^ $152;
 $153 = (_i64Add(($29|0),($30|0),($31|0),($32|0))|0);
 $154 = tempRet0;
 $155 = (_rotl64_251($31,$32,13)|0);
 $156 = tempRet0;
 $157 = $155 ^ $153;
 $158 = $156 ^ $154;
 $159 = (_rotl64_251($153,$154,32)|0);
 $160 = tempRet0;
 $161 = (_i64Add(($41|0),($42|0),($149|0),($151|0))|0);
 $162 = tempRet0;
 $163 = (_rotl64_251($149,$151,16)|0);
 $164 = tempRet0;
 $165 = $163 ^ $161;
 $166 = $164 ^ $162;
 $167 = (_i64Add(($159|0),($160|0),($165|0),($166|0))|0);
 $168 = tempRet0;
 $169 = (_rotl64_251($165,$166,21)|0);
 $170 = tempRet0;
 $171 = $169 ^ $167;
 $172 = $170 ^ $168;
 $173 = (_i64Add(($161|0),($162|0),($157|0),($158|0))|0);
 $174 = tempRet0;
 $175 = (_rotl64_251($157,$158,17)|0);
 $176 = tempRet0;
 $177 = $175 ^ $173;
 $178 = $176 ^ $174;
 $179 = (_rotl64_251($173,$174,32)|0);
 $180 = tempRet0;
 $181 = (_i64Add(($167|0),($168|0),($177|0),($178|0))|0);
 $182 = tempRet0;
 $183 = (_rotl64_251($177,$178,13)|0);
 $184 = tempRet0;
 $185 = $183 ^ $181;
 $186 = $184 ^ $182;
 $187 = (_rotl64_251($181,$182,32)|0);
 $188 = tempRet0;
 $189 = (_i64Add(($179|0),($180|0),($171|0),($172|0))|0);
 $190 = tempRet0;
 $191 = (_rotl64_251($171,$172,16)|0);
 $192 = tempRet0;
 $193 = $191 ^ $189;
 $194 = $192 ^ $190;
 $195 = (_i64Add(($187|0),($188|0),($193|0),($194|0))|0);
 $196 = tempRet0;
 $197 = (_rotl64_251($193,$194,21)|0);
 $198 = tempRet0;
 $199 = $197 ^ $195;
 $200 = $198 ^ $196;
 $201 = (_i64Add(($189|0),($190|0),($185|0),($186|0))|0);
 $202 = tempRet0;
 $203 = (_rotl64_251($185,$186,17)|0);
 $204 = tempRet0;
 $205 = $203 ^ $201;
 $206 = $204 ^ $202;
 $207 = (_rotl64_251($201,$202,32)|0);
 $208 = tempRet0;
 $209 = $207 ^ 238;
 $210 = $195 ^ $150;
 $211 = $196 ^ $152;
 $212 = (_i64Add(($210|0),($211|0),($205|0),($206|0))|0);
 $213 = tempRet0;
 $214 = (_rotl64_251($205,$206,13)|0);
 $215 = tempRet0;
 $216 = $214 ^ $212;
 $217 = $215 ^ $213;
 $218 = (_rotl64_251($212,$213,32)|0);
 $219 = tempRet0;
 $220 = (_i64Add(($209|0),($208|0),($199|0),($200|0))|0);
 $221 = tempRet0;
 $222 = (_rotl64_251($199,$200,16)|0);
 $223 = tempRet0;
 $224 = $222 ^ $220;
 $225 = $223 ^ $221;
 $226 = (_i64Add(($218|0),($219|0),($224|0),($225|0))|0);
 $227 = tempRet0;
 $228 = (_rotl64_251($224,$225,21)|0);
 $229 = tempRet0;
 $230 = $228 ^ $226;
 $231 = $229 ^ $227;
 $232 = (_i64Add(($220|0),($221|0),($216|0),($217|0))|0);
 $233 = tempRet0;
 $234 = (_rotl64_251($216,$217,17)|0);
 $235 = tempRet0;
 $236 = $234 ^ $232;
 $237 = $235 ^ $233;
 $238 = (_rotl64_251($232,$233,32)|0);
 $239 = tempRet0;
 $240 = (_i64Add(($226|0),($227|0),($236|0),($237|0))|0);
 $241 = tempRet0;
 $242 = (_rotl64_251($236,$237,13)|0);
 $243 = tempRet0;
 $244 = $242 ^ $240;
 $245 = $243 ^ $241;
 $246 = (_rotl64_251($240,$241,32)|0);
 $247 = tempRet0;
 $248 = (_i64Add(($238|0),($239|0),($230|0),($231|0))|0);
 $249 = tempRet0;
 $250 = (_rotl64_251($230,$231,16)|0);
 $251 = tempRet0;
 $252 = $250 ^ $248;
 $253 = $251 ^ $249;
 $254 = (_i64Add(($246|0),($247|0),($252|0),($253|0))|0);
 $255 = tempRet0;
 $256 = (_rotl64_251($252,$253,21)|0);
 $257 = tempRet0;
 $258 = $256 ^ $254;
 $259 = $257 ^ $255;
 $260 = (_i64Add(($248|0),($249|0),($244|0),($245|0))|0);
 $261 = tempRet0;
 $262 = (_rotl64_251($244,$245,17)|0);
 $263 = tempRet0;
 $264 = $262 ^ $260;
 $265 = $263 ^ $261;
 $266 = (_rotl64_251($260,$261,32)|0);
 $267 = tempRet0;
 $268 = (_i64Add(($254|0),($255|0),($264|0),($265|0))|0);
 $269 = tempRet0;
 $270 = (_rotl64_251($264,$265,13)|0);
 $271 = tempRet0;
 $272 = $270 ^ $268;
 $273 = $271 ^ $269;
 $274 = (_rotl64_251($268,$269,32)|0);
 $275 = tempRet0;
 $276 = (_i64Add(($266|0),($267|0),($258|0),($259|0))|0);
 $277 = tempRet0;
 $278 = (_rotl64_251($258,$259,16)|0);
 $279 = tempRet0;
 $280 = $278 ^ $276;
 $281 = $279 ^ $277;
 $282 = (_i64Add(($274|0),($275|0),($280|0),($281|0))|0);
 $283 = tempRet0;
 $284 = (_rotl64_251($280,$281,21)|0);
 $285 = tempRet0;
 $286 = $284 ^ $282;
 $287 = $285 ^ $283;
 $288 = (_i64Add(($276|0),($277|0),($272|0),($273|0))|0);
 $289 = tempRet0;
 $290 = (_rotl64_251($272,$273,17)|0);
 $291 = tempRet0;
 $292 = $290 ^ $288;
 $293 = $291 ^ $289;
 $294 = (_rotl64_251($288,$289,32)|0);
 $295 = tempRet0;
 $296 = (_i64Add(($282|0),($283|0),($292|0),($293|0))|0);
 $297 = tempRet0;
 $298 = (_rotl64_251($292,$293,13)|0);
 $299 = tempRet0;
 $300 = $298 ^ $296;
 $301 = $299 ^ $297;
 $302 = (_rotl64_251($296,$297,32)|0);
 $303 = tempRet0;
 $304 = (_i64Add(($294|0),($295|0),($286|0),($287|0))|0);
 $305 = tempRet0;
 $306 = (_rotl64_251($286,$287,16)|0);
 $307 = tempRet0;
 $308 = $306 ^ $304;
 $309 = $307 ^ $305;
 $310 = (_i64Add(($302|0),($303|0),($308|0),($309|0))|0);
 $311 = tempRet0;
 $312 = (_rotl64_251($308,$309,21)|0);
 $313 = tempRet0;
 $314 = $312 ^ $310;
 $315 = $313 ^ $311;
 $316 = (_i64Add(($304|0),($305|0),($300|0),($301|0))|0);
 $317 = tempRet0;
 $318 = (_rotl64_251($300,$301,17)|0);
 $319 = tempRet0;
 $320 = $318 ^ $316;
 $321 = $319 ^ $317;
 $322 = (_rotl64_251($316,$317,32)|0);
 $323 = tempRet0;
 $324 = $310 ^ $320;
 $325 = $311 ^ $321;
 $326 = $324 ^ $322;
 $327 = $325 ^ $323;
 $328 = $326 ^ $314;
 $329 = $327 ^ $315;
 _store64_le_252($0,$328,$329);
 $330 = $320 ^ 221;
 $331 = (_i64Add(($310|0),($311|0),($330|0),($321|0))|0);
 $332 = tempRet0;
 $333 = (_rotl64_251($330,$321,13)|0);
 $334 = tempRet0;
 $335 = $333 ^ $331;
 $336 = $334 ^ $332;
 $337 = (_rotl64_251($331,$332,32)|0);
 $338 = tempRet0;
 $339 = (_i64Add(($322|0),($323|0),($314|0),($315|0))|0);
 $340 = tempRet0;
 $341 = (_rotl64_251($314,$315,16)|0);
 $342 = tempRet0;
 $343 = $341 ^ $339;
 $344 = $342 ^ $340;
 $345 = (_i64Add(($337|0),($338|0),($343|0),($344|0))|0);
 $346 = tempRet0;
 $347 = (_rotl64_251($343,$344,21)|0);
 $348 = tempRet0;
 $349 = $347 ^ $345;
 $350 = $348 ^ $346;
 $351 = (_i64Add(($339|0),($340|0),($335|0),($336|0))|0);
 $352 = tempRet0;
 $353 = (_rotl64_251($335,$336,17)|0);
 $354 = tempRet0;
 $355 = $353 ^ $351;
 $356 = $354 ^ $352;
 $357 = (_rotl64_251($351,$352,32)|0);
 $358 = tempRet0;
 $359 = (_i64Add(($345|0),($346|0),($355|0),($356|0))|0);
 $360 = tempRet0;
 $361 = (_rotl64_251($355,$356,13)|0);
 $362 = tempRet0;
 $363 = $361 ^ $359;
 $364 = $362 ^ $360;
 $365 = (_rotl64_251($359,$360,32)|0);
 $366 = tempRet0;
 $367 = (_i64Add(($357|0),($358|0),($349|0),($350|0))|0);
 $368 = tempRet0;
 $369 = (_rotl64_251($349,$350,16)|0);
 $370 = tempRet0;
 $371 = $369 ^ $367;
 $372 = $370 ^ $368;
 $373 = (_i64Add(($365|0),($366|0),($371|0),($372|0))|0);
 $374 = tempRet0;
 $375 = (_rotl64_251($371,$372,21)|0);
 $376 = tempRet0;
 $377 = $375 ^ $373;
 $378 = $376 ^ $374;
 $379 = (_i64Add(($367|0),($368|0),($363|0),($364|0))|0);
 $380 = tempRet0;
 $381 = (_rotl64_251($363,$364,17)|0);
 $382 = tempRet0;
 $383 = $381 ^ $379;
 $384 = $382 ^ $380;
 $385 = (_rotl64_251($379,$380,32)|0);
 $386 = tempRet0;
 $387 = (_i64Add(($373|0),($374|0),($383|0),($384|0))|0);
 $388 = tempRet0;
 $389 = (_rotl64_251($383,$384,13)|0);
 $390 = tempRet0;
 $391 = $389 ^ $387;
 $392 = $390 ^ $388;
 $393 = (_rotl64_251($387,$388,32)|0);
 $394 = tempRet0;
 $395 = (_i64Add(($385|0),($386|0),($377|0),($378|0))|0);
 $396 = tempRet0;
 $397 = (_rotl64_251($377,$378,16)|0);
 $398 = tempRet0;
 $399 = $397 ^ $395;
 $400 = $398 ^ $396;
 $401 = (_i64Add(($393|0),($394|0),($399|0),($400|0))|0);
 $402 = tempRet0;
 $403 = (_rotl64_251($399,$400,21)|0);
 $404 = tempRet0;
 $405 = $403 ^ $401;
 $406 = $404 ^ $402;
 $407 = (_i64Add(($395|0),($396|0),($391|0),($392|0))|0);
 $408 = tempRet0;
 $409 = (_rotl64_251($391,$392,17)|0);
 $410 = tempRet0;
 $411 = $409 ^ $407;
 $412 = $410 ^ $408;
 $413 = (_rotl64_251($407,$408,32)|0);
 $414 = tempRet0;
 $415 = (_i64Add(($401|0),($402|0),($411|0),($412|0))|0);
 $416 = tempRet0;
 $417 = (_rotl64_251($411,$412,13)|0);
 $418 = tempRet0;
 $419 = $417 ^ $415;
 $420 = $418 ^ $416;
 $421 = (_rotl64_251($415,$416,32)|0);
 $422 = tempRet0;
 $423 = (_i64Add(($413|0),($414|0),($405|0),($406|0))|0);
 $424 = tempRet0;
 $425 = (_rotl64_251($405,$406,16)|0);
 $426 = tempRet0;
 $427 = $425 ^ $423;
 $428 = $426 ^ $424;
 $429 = (_i64Add(($421|0),($422|0),($427|0),($428|0))|0);
 $430 = tempRet0;
 $431 = (_i64Add(($423|0),($424|0),($419|0),($420|0))|0);
 $432 = tempRet0;
 $433 = (_rotl64_251($431,$432,32)|0);
 $434 = tempRet0;
 $435 = (_rotl64_251($419,$420,17)|0);
 $436 = tempRet0;
 $437 = $435 ^ $431;
 $438 = $436 ^ $432;
 $439 = (_rotl64_251($427,$428,21)|0);
 $440 = tempRet0;
 $441 = $439 ^ $429;
 $442 = $440 ^ $430;
 $443 = $429 ^ $437;
 $444 = $430 ^ $438;
 $445 = $443 ^ $433;
 $446 = $444 ^ $434;
 $447 = $445 ^ $441;
 $448 = $446 ^ $442;
 $449 = ((($0)) + 8|0);
 _store64_le_252($449,$447,$448);
 return 0;
}
function _load64_le_250($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 tempRet0 = ($6);
 return ($3|0);
}
function _rotl64_251($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = (_bitshift64Shl(($0|0),($1|0),($2|0))|0);
 $4 = tempRet0;
 $5 = (64 - ($2))|0;
 $6 = (_bitshift64Lshr(($0|0),($1|0),($5|0))|0);
 $7 = tempRet0;
 $8 = $3 | $6;
 $9 = $4 | $7;
 tempRet0 = ($9);
 return ($8|0);
}
function _store64_le_252($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 HEAP8[$4>>0]=$1&255;HEAP8[$4+1>>0]=($1>>8)&255;HEAP8[$4+2>>0]=($1>>16)&255;HEAP8[$4+3>>0]=$1>>24;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP8[$6>>0]=$2&255;HEAP8[$6+1>>0]=($2>>8)&255;HEAP8[$6+2>>0]=($2>>16)&255;HEAP8[$6+3>>0]=$2>>24;
 return;
}
function _crypto_stream_salsa2012($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$01 = 0, $$03 = 0, $$04 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $exitcond8 = 0, $exitcond9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 112|0;
 $5 = sp_a + 96|0;
 $6 = sp_a + 32|0;
 $7 = sp_a;
 $8 = ($1|0)==(0);
 $9 = ($2|0)==(0);
 $10 = $8 & $9;
 if ($10) {
  STACKTOP = sp;return 0;
 } else {
  $$04 = 0;
 }
 while(1) {
  $exitcond11 = ($$04|0)==(32);
  if ($exitcond11) {
   $$1 = 0;
   break;
  }
  $11 = (($4) + ($$04)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = (($7) + ($$04)|0);
  HEAP8[$13>>0] = $12;
  $14 = (($$04) + 1)|0;
  $$04 = $14;
 }
 while(1) {
  $exitcond10 = ($$1|0)==(8);
  if ($exitcond10) {
   $$2 = 8;
   break;
  }
  $15 = (($3) + ($$1)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = (($5) + ($$1)|0);
  HEAP8[$17>>0] = $16;
  $18 = (($$1) + 1)|0;
  $$1 = $18;
 }
 while(1) {
  $exitcond9 = ($$2|0)==(16);
  if ($exitcond9) {
   break;
  }
  $19 = (($5) + ($$2)|0);
  HEAP8[$19>>0] = 0;
  $20 = (($$2) + 1)|0;
  $$2 = $20;
 }
 $$01 = $0;$22 = $2;$24 = $1;
 while(1) {
  $21 = ($22>>>0)>(0);
  $23 = ($24>>>0)>(63);
  $25 = ($22|0)==(0);
  $26 = $25 & $23;
  $27 = $21 | $26;
  if (!($27)) {
   break;
  }
  (_crypto_core_salsa2012($$01,$5,$7,0)|0);
  $$03 = 1;$$3 = 8;
  while(1) {
   $exitcond8 = ($$3|0)==(16);
   if ($exitcond8) {
    break;
   }
   $28 = (($5) + ($$3)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = (($$03) + ($30))|0;
   $32 = $31&255;
   HEAP8[$28>>0] = $32;
   $33 = $31 >>> 8;
   $34 = (($$3) + 1)|0;
   $$03 = $33;$$3 = $34;
  }
  $35 = (_i64Add(($24|0),($22|0),-64,-1)|0);
  $36 = tempRet0;
  $37 = ((($$01)) + 64|0);
  $$01 = $37;$22 = $36;$24 = $35;
 }
 $38 = ($24|0)==(0);
 $39 = ($22|0)==(0);
 $40 = $38 & $39;
 L21: do {
  if (!($40)) {
   (_crypto_core_salsa2012($6,$5,$7,0)|0);
   $$4 = 0;
   while(1) {
    $exitcond = ($$4|0)==($24|0);
    if ($exitcond) {
     break L21;
    }
    $41 = (($6) + ($$4)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = (($$01) + ($$4)|0);
    HEAP8[$43>>0] = $42;
    $44 = (($$4) + 1)|0;
    $$4 = $44;
   }
  }
 } while(0);
 _sodium_memzero($6,64);
 _sodium_memzero($7,32);
 STACKTOP = sp;return 0;
}
function _crypto_stream_salsa2012_xor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$01 = 0, $$02 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $exitcond13 = 0, $exitcond14 = 0, $exitcond15 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 112|0;
 $6 = sp_a + 96|0;
 $7 = sp_a + 32|0;
 $8 = sp_a;
 $9 = ($2|0)==(0);
 $10 = ($3|0)==(0);
 $11 = $9 & $10;
 if ($11) {
  STACKTOP = sp;return 0;
 } else {
  $$05 = 0;
 }
 while(1) {
  $exitcond15 = ($$05|0)==(32);
  if ($exitcond15) {
   $$1 = 0;
   break;
  }
  $12 = (($5) + ($$05)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = (($8) + ($$05)|0);
  HEAP8[$14>>0] = $13;
  $15 = (($$05) + 1)|0;
  $$05 = $15;
 }
 while(1) {
  $exitcond14 = ($$1|0)==(8);
  if ($exitcond14) {
   $$2 = 8;
   break;
  }
  $16 = (($4) + ($$1)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = (($6) + ($$1)|0);
  HEAP8[$18>>0] = $17;
  $19 = (($$1) + 1)|0;
  $$1 = $19;
 }
 while(1) {
  $exitcond13 = ($$2|0)==(16);
  if ($exitcond13) {
   break;
  }
  $20 = (($6) + ($$2)|0);
  HEAP8[$20>>0] = 0;
  $21 = (($$2) + 1)|0;
  $$2 = $21;
 }
 $$01 = $0;$$02 = $1;$23 = $3;$25 = $2;
 while(1) {
  $22 = ($23>>>0)>(0);
  $24 = ($25>>>0)>(63);
  $26 = ($23|0)==(0);
  $27 = $26 & $24;
  $28 = $22 | $27;
  if (!($28)) {
   break;
  }
  (_crypto_core_salsa2012($7,$6,$8,0)|0);
  $$3 = 0;
  while(1) {
   $exitcond10 = ($$3|0)==(64);
   if ($exitcond10) {
    $$04 = 1;$$4 = 8;
    break;
   }
   $29 = (($$02) + ($$3)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = (($7) + ($$3)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $30 ^ $32;
   $34 = (($$01) + ($$3)|0);
   HEAP8[$34>>0] = $33;
   $35 = (($$3) + 1)|0;
   $$3 = $35;
  }
  while(1) {
   $exitcond11 = ($$4|0)==(16);
   if ($exitcond11) {
    break;
   }
   $36 = (($6) + ($$4)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = (($$04) + ($38))|0;
   $40 = $39&255;
   HEAP8[$36>>0] = $40;
   $41 = $39 >>> 8;
   $42 = (($$4) + 1)|0;
   $$04 = $41;$$4 = $42;
  }
  $43 = (_i64Add(($25|0),($23|0),-64,-1)|0);
  $44 = tempRet0;
  $45 = ((($$01)) + 64|0);
  $46 = ((($$02)) + 64|0);
  $$01 = $45;$$02 = $46;$23 = $44;$25 = $43;
 }
 $47 = ($25|0)==(0);
 $48 = ($23|0)==(0);
 $49 = $47 & $48;
 L24: do {
  if (!($49)) {
   (_crypto_core_salsa2012($7,$6,$8,0)|0);
   $$5 = 0;
   while(1) {
    $exitcond = ($$5|0)==($25|0);
    if ($exitcond) {
     break L24;
    }
    $50 = (($$02) + ($$5)|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = (($7) + ($$5)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $51 ^ $53;
    $55 = (($$01) + ($$5)|0);
    HEAP8[$55>>0] = $54;
    $56 = (($$5) + 1)|0;
    $$5 = $56;
   }
  }
 } while(0);
 _sodium_memzero($7,64);
 _sodium_memzero($8,32);
 STACKTOP = sp;return 0;
}
function _crypto_stream_salsa2012_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_stream_salsa2012_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_stream_salsa2012_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_stream_salsa208($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$01 = 0, $$03 = 0, $$04 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $exitcond8 = 0, $exitcond9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 112|0;
 $5 = sp_a + 96|0;
 $6 = sp_a + 32|0;
 $7 = sp_a;
 $8 = ($1|0)==(0);
 $9 = ($2|0)==(0);
 $10 = $8 & $9;
 if ($10) {
  STACKTOP = sp;return 0;
 } else {
  $$04 = 0;
 }
 while(1) {
  $exitcond11 = ($$04|0)==(32);
  if ($exitcond11) {
   $$1 = 0;
   break;
  }
  $11 = (($4) + ($$04)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = (($7) + ($$04)|0);
  HEAP8[$13>>0] = $12;
  $14 = (($$04) + 1)|0;
  $$04 = $14;
 }
 while(1) {
  $exitcond10 = ($$1|0)==(8);
  if ($exitcond10) {
   $$2 = 8;
   break;
  }
  $15 = (($3) + ($$1)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = (($5) + ($$1)|0);
  HEAP8[$17>>0] = $16;
  $18 = (($$1) + 1)|0;
  $$1 = $18;
 }
 while(1) {
  $exitcond9 = ($$2|0)==(16);
  if ($exitcond9) {
   break;
  }
  $19 = (($5) + ($$2)|0);
  HEAP8[$19>>0] = 0;
  $20 = (($$2) + 1)|0;
  $$2 = $20;
 }
 $$01 = $0;$22 = $2;$24 = $1;
 while(1) {
  $21 = ($22>>>0)>(0);
  $23 = ($24>>>0)>(63);
  $25 = ($22|0)==(0);
  $26 = $25 & $23;
  $27 = $21 | $26;
  if (!($27)) {
   break;
  }
  (_crypto_core_salsa208($$01,$5,$7,0)|0);
  $$03 = 1;$$3 = 8;
  while(1) {
   $exitcond8 = ($$3|0)==(16);
   if ($exitcond8) {
    break;
   }
   $28 = (($5) + ($$3)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = (($$03) + ($30))|0;
   $32 = $31&255;
   HEAP8[$28>>0] = $32;
   $33 = $31 >>> 8;
   $34 = (($$3) + 1)|0;
   $$03 = $33;$$3 = $34;
  }
  $35 = (_i64Add(($24|0),($22|0),-64,-1)|0);
  $36 = tempRet0;
  $37 = ((($$01)) + 64|0);
  $$01 = $37;$22 = $36;$24 = $35;
 }
 $38 = ($24|0)==(0);
 $39 = ($22|0)==(0);
 $40 = $38 & $39;
 L21: do {
  if (!($40)) {
   (_crypto_core_salsa208($6,$5,$7,0)|0);
   $$4 = 0;
   while(1) {
    $exitcond = ($$4|0)==($24|0);
    if ($exitcond) {
     break L21;
    }
    $41 = (($6) + ($$4)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = (($$01) + ($$4)|0);
    HEAP8[$43>>0] = $42;
    $44 = (($$4) + 1)|0;
    $$4 = $44;
   }
  }
 } while(0);
 _sodium_memzero($6,64);
 _sodium_memzero($7,32);
 STACKTOP = sp;return 0;
}
function _crypto_stream_salsa208_xor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$01 = 0, $$02 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $exitcond13 = 0, $exitcond14 = 0, $exitcond15 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 112|0;
 $6 = sp_a + 96|0;
 $7 = sp_a + 32|0;
 $8 = sp_a;
 $9 = ($2|0)==(0);
 $10 = ($3|0)==(0);
 $11 = $9 & $10;
 if ($11) {
  STACKTOP = sp;return 0;
 } else {
  $$05 = 0;
 }
 while(1) {
  $exitcond15 = ($$05|0)==(32);
  if ($exitcond15) {
   $$1 = 0;
   break;
  }
  $12 = (($5) + ($$05)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = (($8) + ($$05)|0);
  HEAP8[$14>>0] = $13;
  $15 = (($$05) + 1)|0;
  $$05 = $15;
 }
 while(1) {
  $exitcond14 = ($$1|0)==(8);
  if ($exitcond14) {
   $$2 = 8;
   break;
  }
  $16 = (($4) + ($$1)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = (($6) + ($$1)|0);
  HEAP8[$18>>0] = $17;
  $19 = (($$1) + 1)|0;
  $$1 = $19;
 }
 while(1) {
  $exitcond13 = ($$2|0)==(16);
  if ($exitcond13) {
   break;
  }
  $20 = (($6) + ($$2)|0);
  HEAP8[$20>>0] = 0;
  $21 = (($$2) + 1)|0;
  $$2 = $21;
 }
 $$01 = $0;$$02 = $1;$23 = $3;$25 = $2;
 while(1) {
  $22 = ($23>>>0)>(0);
  $24 = ($25>>>0)>(63);
  $26 = ($23|0)==(0);
  $27 = $26 & $24;
  $28 = $22 | $27;
  if (!($28)) {
   break;
  }
  (_crypto_core_salsa208($7,$6,$8,0)|0);
  $$3 = 0;
  while(1) {
   $exitcond10 = ($$3|0)==(64);
   if ($exitcond10) {
    $$04 = 1;$$4 = 8;
    break;
   }
   $29 = (($$02) + ($$3)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = (($7) + ($$3)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $30 ^ $32;
   $34 = (($$01) + ($$3)|0);
   HEAP8[$34>>0] = $33;
   $35 = (($$3) + 1)|0;
   $$3 = $35;
  }
  while(1) {
   $exitcond11 = ($$4|0)==(16);
   if ($exitcond11) {
    break;
   }
   $36 = (($6) + ($$4)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = (($$04) + ($38))|0;
   $40 = $39&255;
   HEAP8[$36>>0] = $40;
   $41 = $39 >>> 8;
   $42 = (($$4) + 1)|0;
   $$04 = $41;$$4 = $42;
  }
  $43 = (_i64Add(($25|0),($23|0),-64,-1)|0);
  $44 = tempRet0;
  $45 = ((($$01)) + 64|0);
  $46 = ((($$02)) + 64|0);
  $$01 = $45;$$02 = $46;$23 = $44;$25 = $43;
 }
 $47 = ($25|0)==(0);
 $48 = ($23|0)==(0);
 $49 = $47 & $48;
 L24: do {
  if (!($49)) {
   (_crypto_core_salsa208($7,$6,$8,0)|0);
   $$5 = 0;
   while(1) {
    $exitcond = ($$5|0)==($25|0);
    if ($exitcond) {
     break L24;
    }
    $50 = (($$02) + ($$5)|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = (($7) + ($$5)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $51 ^ $53;
    $55 = (($$01) + ($$5)|0);
    HEAP8[$55>>0] = $54;
    $56 = (($$5) + 1)|0;
    $$5 = $56;
   }
  }
 } while(0);
 _sodium_memzero($7,64);
 _sodium_memzero($8,32);
 STACKTOP = sp;return 0;
}
function _crypto_stream_salsa208_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_stream_salsa208_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 8;
}
function _crypto_stream_salsa208_messagebytes_max() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return -1;
}
function _crypto_stream_salsa208_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _crypto_stream_xchacha20_keybytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 32;
}
function _crypto_stream_xchacha20_noncebytes() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return 24;
}
function _crypto_stream_xchacha20($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp_a;
 (_crypto_core_hchacha20($5,$3,$4,0)|0);
 $6 = ((($3)) + 16|0);
 $7 = (_crypto_stream_chacha20($0,$1,$2,$6,$5)|0);
 STACKTOP = sp;return ($7|0);
}
function _crypto_stream_xchacha20_xor_ic($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 32|0;
 $8 = sp_a;
 (_crypto_core_hchacha20($8,$4,$7,0)|0);
 $9 = ((($4)) + 16|0);
 $10 = (_crypto_stream_chacha20_xor_ic($0,$1,$2,$3,$9,$5,$6,$8)|0);
 STACKTOP = sp;return ($10|0);
}
function _crypto_stream_xchacha20_xor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $6 = (_crypto_stream_xchacha20_xor_ic($0,$1,$2,$3,$4,0,0,$5)|0);
 return ($6|0);
}
function _crypto_stream_xchacha20_keygen($0) {
 $0 = $0|0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 _randombytes_buf($0,32);
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0;
 var $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0;
 var sp = 0, sp_a = 0;
 sp = STACKTOP;
 sp_a = STACKTOP = (STACKTOP + 63)&-64;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp_a;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[8842]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (35408 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[8842] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(35376)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (35408 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[8842] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(35388)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (35408 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[8842] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(35376)>>2] = $76;
     HEAP32[(35388)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(35372)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (35672 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (35672 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(35372)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(35388)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (35408 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[8842] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(35376)>>2] = $$0173$lcssa$i;
       HEAP32[(35388)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(35372)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (35672 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (35672 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(35376)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (35672 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(35372)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (35408 + ($383<<2)|0);
          $385 = HEAP32[8842]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[8842] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (35672 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(35372)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(35376)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(35388)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(35388)>>2] = $462;
   HEAP32[(35376)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(35376)>>2] = 0;
   HEAP32[(35388)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(35380)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(35380)>>2] = $477;
  $478 = HEAP32[(35392)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(35392)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[8960]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(35848)>>2] = 4096;
  HEAP32[(35844)>>2] = 4096;
  HEAP32[(35852)>>2] = -1;
  HEAP32[(35856)>>2] = -1;
  HEAP32[(35860)>>2] = 0;
  HEAP32[(35812)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[8960] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(35848)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(35808)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(35800)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(35812)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(35392)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (35816);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(35844)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(35800)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(35808)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(35848)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(35812)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(35812)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(35800)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(35800)>>2] = $578;
  $579 = HEAP32[(35804)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(35804)>>2] = $578;
  }
  $581 = HEAP32[(35392)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(35384)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(35384)>>2] = $$748$i;
    }
    HEAP32[(35816)>>2] = $$748$i;
    HEAP32[(35820)>>2] = $$723947$i;
    HEAP32[(35828)>>2] = 0;
    $586 = HEAP32[8960]|0;
    HEAP32[(35404)>>2] = $586;
    HEAP32[(35400)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (35408 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(35392)>>2] = $600;
    HEAP32[(35380)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(35856)>>2]|0;
    HEAP32[(35396)>>2] = $606;
   } else {
    $$024370$i = (35816);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(35380)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(35392)>>2] = $630;
       HEAP32[(35380)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(35856)>>2]|0;
       HEAP32[(35396)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(35384)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(35384)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (35816);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(35380)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(35380)>>2] = $678;
        HEAP32[(35392)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(35388)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(35376)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(35376)>>2] = $684;
         HEAP32[(35388)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[8842]|0;
            $703 = $702 & $701;
            HEAP32[8842] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (35672 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(35372)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(35372)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (35408 + ($762<<2)|0);
         $764 = HEAP32[8842]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[8842] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (35672 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(35372)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(35372)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (35816);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(35392)>>2] = $865;
    HEAP32[(35380)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(35856)>>2]|0;
    HEAP32[(35396)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(35816)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(35816)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(35816)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(35816)+12>>2]|0;
    HEAP32[(35816)>>2] = $$748$i;
    HEAP32[(35820)>>2] = $$723947$i;
    HEAP32[(35828)>>2] = 0;
    HEAP32[(35824)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (35408 + ($887<<2)|0);
      $889 = HEAP32[8842]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[8842] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (35672 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(35372)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(35372)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(35380)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(35380)>>2] = $962;
   $963 = HEAP32[(35392)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(35392)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[(33256)>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(35384)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(35388)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(35376)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[8842]|0;
     $29 = $28 & $27;
     HEAP32[8842] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (35672 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(35372)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(35372)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $86 = ($87>>>0)<($7>>>0);
 if (!($86)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(35392)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(35388)>>2]|0;
  if ($95) {
   $97 = HEAP32[(35380)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(35380)>>2] = $98;
   HEAP32[(35392)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(35388)>>2] = 0;
   HEAP32[(35376)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(35376)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(35376)>>2] = $104;
   HEAP32[(35388)>>2] = $87;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($87) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[8842]|0;
     $120 = $119 & $118;
     HEAP32[8842] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (35672 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(35372)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(35372)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($87) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(35388)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(35376)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($87) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (35408 + ($180<<2)|0);
  $182 = HEAP32[8842]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[8842] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (35672 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(35372)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(35372)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(35400)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(35400)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (35824);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(35400)>>2] = -1;
 return;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $cond5 = 0, $not$ = 0, $not$1 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(35388)>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $74 = ((($2)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75 & 3;
    $77 = ($76|0)==(3);
    if (!($77)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    $78 = (($11) + ($12)|0);
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $75 & -2;
    HEAP32[(35376)>>2] = $12;
    HEAP32[$74>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$78>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[8842]|0;
     $25 = $24 & $23;
     HEAP32[8842] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (35672 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($11|0)==($53|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(35372)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(35372)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $not$1 = ($60|0)!=($11|0);
     $$sink2 = $not$1&1;
     $61 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$61>>2] = $$3;
     $62 = ($$3|0)==(0|0);
     if ($62) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $63 = ((($$3)) + 24|0);
    HEAP32[$63>>2] = $29;
    $64 = ((($11)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $67 = ((($$3)) + 16|0);
     HEAP32[$67>>2] = $65;
     $68 = ((($65)) + 24|0);
     HEAP32[$68>>2] = $$3;
    }
    $69 = ((($64)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $$1 = $11;$$1365 = $12;
    } else {
     $72 = ((($$3)) + 20|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(35392)>>2]|0;
  $87 = ($2|0)==($86|0);
  $88 = HEAP32[(35388)>>2]|0;
  if ($87) {
   $89 = HEAP32[(35380)>>2]|0;
   $90 = (($89) + ($$1365))|0;
   HEAP32[(35380)>>2] = $90;
   HEAP32[(35392)>>2] = $$1;
   $91 = $90 | 1;
   $92 = ((($$1)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = ($$1|0)==($88|0);
   if (!($93)) {
    return;
   }
   HEAP32[(35388)>>2] = 0;
   HEAP32[(35376)>>2] = 0;
   return;
  }
  $94 = ($2|0)==($88|0);
  if ($94) {
   $95 = HEAP32[(35376)>>2]|0;
   $96 = (($95) + ($$1365))|0;
   HEAP32[(35376)>>2] = $96;
   HEAP32[(35388)>>2] = $$1;
   $97 = $96 | 1;
   $98 = ((($$1)) + 4|0);
   HEAP32[$98>>2] = $97;
   $99 = (($$1) + ($96)|0);
   HEAP32[$99>>2] = $96;
   return;
  }
  $100 = $83 & -8;
  $101 = (($100) + ($$1365))|0;
  $102 = $83 >>> 3;
  $103 = ($83>>>0)<(256);
  do {
   if ($103) {
    $104 = ((($2)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($2)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==($105|0);
    if ($108) {
     $109 = 1 << $102;
     $110 = $109 ^ -1;
     $111 = HEAP32[8842]|0;
     $112 = $111 & $110;
     HEAP32[8842] = $112;
     break;
    } else {
     $113 = ((($105)) + 12|0);
     HEAP32[$113>>2] = $107;
     $114 = ((($107)) + 8|0);
     HEAP32[$114>>2] = $105;
     break;
    }
   } else {
    $115 = ((($2)) + 24|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($2)) + 12|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==($2|0);
    do {
     if ($119) {
      $124 = ((($2)) + 16|0);
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(0|0);
      if ($127) {
       $128 = HEAP32[$124>>2]|0;
       $129 = ($128|0)==(0|0);
       if ($129) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $128;$$1384 = $124;
       }
      } else {
       $$1380 = $126;$$1384 = $125;
      }
      while(1) {
       $130 = ((($$1380)) + 20|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ($131|0)==(0|0);
       if (!($132)) {
        $$1380 = $131;$$1384 = $130;
        continue;
       }
       $133 = ((($$1380)) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(0|0);
       if ($135) {
        break;
       } else {
        $$1380 = $134;$$1384 = $133;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $120 = ((($2)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ((($121)) + 12|0);
      HEAP32[$122>>2] = $118;
      $123 = ((($118)) + 8|0);
      HEAP32[$123>>2] = $121;
      $$3382 = $118;
     }
    } while(0);
    $136 = ($116|0)==(0|0);
    if (!($136)) {
     $137 = ((($2)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (35672 + ($138<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($2|0)==($140|0);
     if ($141) {
      HEAP32[$139>>2] = $$3382;
      $cond5 = ($$3382|0)==(0|0);
      if ($cond5) {
       $142 = 1 << $138;
       $143 = $142 ^ -1;
       $144 = HEAP32[(35372)>>2]|0;
       $145 = $144 & $143;
       HEAP32[(35372)>>2] = $145;
       break;
      }
     } else {
      $146 = ((($116)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $not$ = ($147|0)!=($2|0);
      $$sink4 = $not$&1;
      $148 = (((($116)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$148>>2] = $$3382;
      $149 = ($$3382|0)==(0|0);
      if ($149) {
       break;
      }
     }
     $150 = ((($$3382)) + 24|0);
     HEAP32[$150>>2] = $116;
     $151 = ((($2)) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0|0);
     if (!($153)) {
      $154 = ((($$3382)) + 16|0);
      HEAP32[$154>>2] = $152;
      $155 = ((($152)) + 24|0);
      HEAP32[$155>>2] = $$3382;
     }
     $156 = ((($151)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if (!($158)) {
      $159 = ((($$3382)) + 20|0);
      HEAP32[$159>>2] = $157;
      $160 = ((($157)) + 24|0);
      HEAP32[$160>>2] = $$3382;
     }
    }
   }
  } while(0);
  $161 = $101 | 1;
  $162 = ((($$1)) + 4|0);
  HEAP32[$162>>2] = $161;
  $163 = (($$1) + ($101)|0);
  HEAP32[$163>>2] = $101;
  $164 = HEAP32[(35388)>>2]|0;
  $165 = ($$1|0)==($164|0);
  if ($165) {
   HEAP32[(35376)>>2] = $101;
   return;
  } else {
   $$2 = $101;
  }
 } else {
  $166 = $83 & -2;
  HEAP32[$82>>2] = $166;
  $167 = $$1365 | 1;
  $168 = ((($$1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = (($$1) + ($$1365)|0);
  HEAP32[$169>>2] = $$1365;
  $$2 = $$1365;
 }
 $170 = $$2 >>> 3;
 $171 = ($$2>>>0)<(256);
 if ($171) {
  $172 = $170 << 1;
  $173 = (35408 + ($172<<2)|0);
  $174 = HEAP32[8842]|0;
  $175 = 1 << $170;
  $176 = $174 & $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $174 | $175;
   HEAP32[8842] = $178;
   $$pre = ((($173)) + 8|0);
   $$0385 = $173;$$pre$phiZ2D = $$pre;
  } else {
   $179 = ((($173)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $$0385 = $180;$$pre$phiZ2D = $179;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $181 = ((($$0385)) + 12|0);
  HEAP32[$181>>2] = $$1;
  $182 = ((($$1)) + 8|0);
  HEAP32[$182>>2] = $$0385;
  $183 = ((($$1)) + 12|0);
  HEAP32[$183>>2] = $173;
  return;
 }
 $184 = $$2 >>> 8;
 $185 = ($184|0)==(0);
 if ($185) {
  $$0378 = 0;
 } else {
  $186 = ($$2>>>0)>(16777215);
  if ($186) {
   $$0378 = 31;
  } else {
   $187 = (($184) + 1048320)|0;
   $188 = $187 >>> 16;
   $189 = $188 & 8;
   $190 = $184 << $189;
   $191 = (($190) + 520192)|0;
   $192 = $191 >>> 16;
   $193 = $192 & 4;
   $194 = $193 | $189;
   $195 = $190 << $193;
   $196 = (($195) + 245760)|0;
   $197 = $196 >>> 16;
   $198 = $197 & 2;
   $199 = $194 | $198;
   $200 = (14 - ($199))|0;
   $201 = $195 << $198;
   $202 = $201 >>> 15;
   $203 = (($200) + ($202))|0;
   $204 = $203 << 1;
   $205 = (($203) + 7)|0;
   $206 = $$2 >>> $205;
   $207 = $206 & 1;
   $208 = $207 | $204;
   $$0378 = $208;
  }
 }
 $209 = (35672 + ($$0378<<2)|0);
 $210 = ((($$1)) + 28|0);
 HEAP32[$210>>2] = $$0378;
 $211 = ((($$1)) + 16|0);
 $212 = ((($$1)) + 20|0);
 HEAP32[$212>>2] = 0;
 HEAP32[$211>>2] = 0;
 $213 = HEAP32[(35372)>>2]|0;
 $214 = 1 << $$0378;
 $215 = $213 & $214;
 $216 = ($215|0)==(0);
 if ($216) {
  $217 = $213 | $214;
  HEAP32[(35372)>>2] = $217;
  HEAP32[$209>>2] = $$1;
  $218 = ((($$1)) + 24|0);
  HEAP32[$218>>2] = $209;
  $219 = ((($$1)) + 12|0);
  HEAP32[$219>>2] = $$1;
  $220 = ((($$1)) + 8|0);
  HEAP32[$220>>2] = $$1;
  return;
 }
 $221 = HEAP32[$209>>2]|0;
 $222 = ($$0378|0)==(31);
 $223 = $$0378 >>> 1;
 $224 = (25 - ($223))|0;
 $225 = $222 ? 0 : $224;
 $226 = $$2 << $225;
 $$0366 = $226;$$0367 = $221;
 while(1) {
  $227 = ((($$0367)) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 & -8;
  $230 = ($229|0)==($$2|0);
  if ($230) {
   label = 69;
   break;
  }
  $231 = $$0366 >>> 31;
  $232 = (((($$0367)) + 16|0) + ($231<<2)|0);
  $233 = $$0366 << 1;
  $234 = HEAP32[$232>>2]|0;
  $235 = ($234|0)==(0|0);
  if ($235) {
   label = 68;
   break;
  } else {
   $$0366 = $233;$$0367 = $234;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$232>>2] = $$1;
  $236 = ((($$1)) + 24|0);
  HEAP32[$236>>2] = $$0367;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $239 = ((($$0367)) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 12|0);
  HEAP32[$241>>2] = $$1;
  HEAP32[$239>>2] = $$1;
  $242 = ((($$1)) + 8|0);
  HEAP32[$242>>2] = $240;
  $243 = ((($$1)) + 12|0);
  HEAP32[$243>>2] = $$0367;
  $244 = ((($$1)) + 24|0);
  HEAP32[$244>>2] = 0;
  return;
 }
}
function _posix_memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0100$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967168);
 if ($2) {
  $$1 = 12;
  return ($$1|0);
 }
 $3 = ($1|0)==(-128);
 if ($3) {
  HEAP32[(33256)>>2] = 12;
  $$1 = 12;
  return ($$1|0);
 }
 $4 = ($1>>>0)<(11);
 $5 = (($1) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = (($7) + 76)|0;
 $9 = (_malloc($8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$1 = 12;
  return ($$1|0);
 }
 $11 = ((($9)) + -8|0);
 $12 = $9;
 $13 = $12 & 63;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $$0100$i = $11;$61 = $11;
  } else {
   $15 = ((($9)) + 63|0);
   $16 = $15;
   $17 = $16 & -64;
   $18 = $17;
   $19 = ((($18)) + -8|0);
   $20 = $19;
   $21 = $11;
   $22 = (($20) - ($21))|0;
   $23 = ($22>>>0)>(15);
   $24 = ((($18)) + 56|0);
   $25 = $23 ? $19 : $24;
   $26 = $25;
   $27 = (($26) - ($21))|0;
   $28 = ((($9)) + -4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & -8;
   $31 = (($30) - ($27))|0;
   $32 = $29 & 3;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = HEAP32[$11>>2]|0;
    $35 = (($34) + ($27))|0;
    HEAP32[$25>>2] = $35;
    $36 = ((($25)) + 4|0);
    HEAP32[$36>>2] = $31;
    $$0100$i = $25;$61 = $25;
    break;
   } else {
    $37 = ((($25)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38 & 1;
    $40 = $31 | $39;
    $41 = $40 | 2;
    HEAP32[$37>>2] = $41;
    $42 = (($25) + ($31)|0);
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44 | 1;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$28>>2]|0;
    $47 = $46 & 1;
    $48 = $27 | $47;
    $49 = $48 | 2;
    HEAP32[$28>>2] = $49;
    $50 = HEAP32[$37>>2]|0;
    $51 = $50 | 1;
    HEAP32[$37>>2] = $51;
    _dispose_chunk($11,$27);
    $$0100$i = $25;$61 = $25;
    break;
   }
  }
 } while(0);
 $52 = ((($$0100$i)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 & 3;
 $55 = ($54|0)==(0);
 if (!($55)) {
  $56 = $53 & -8;
  $57 = (($7) + 16)|0;
  $58 = ($56>>>0)>($57>>>0);
  if ($58) {
   $59 = (($56) - ($7))|0;
   $60 = (($61) + ($7)|0);
   $62 = $53 & 1;
   $63 = $7 | $62;
   $64 = $63 | 2;
   HEAP32[$52>>2] = $64;
   $65 = ((($60)) + 4|0);
   $66 = $59 | 3;
   HEAP32[$65>>2] = $66;
   $67 = (($60) + ($59)|0);
   $68 = ((($67)) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 | 1;
   HEAP32[$68>>2] = $70;
   _dispose_chunk($60,$59);
  }
 }
 $71 = ((($61)) + 8|0);
 HEAP32[$0>>2] = $71;
 $$1 = 0;
 return ($$1|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 return (35864|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01824 = 0, $$01926 = 0, $$01926$in = 0, $$020 = 0, $$025 = 0, $$lcssa = 0, $$lcssa22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = $4&255;
  $6 = ($4<<24>>24)==(0);
  $7 = HEAP8[$1>>0]|0;
  $8 = $7&255;
  L3: do {
   if ($6) {
    $$lcssa = $8;$$lcssa22 = $5;
   } else {
    $$01824 = $0;$$01926$in = $2;$$025 = $1;$10 = $7;$13 = $4;$22 = $8;$23 = $5;
    while(1) {
     $$01926 = (($$01926$in) + -1)|0;
     $9 = ($10<<24>>24)!=(0);
     $11 = ($$01926|0)!=(0);
     $or$cond = $11 & $9;
     $12 = ($13<<24>>24)==($10<<24>>24);
     $or$cond21 = $12 & $or$cond;
     if (!($or$cond21)) {
      $$lcssa = $22;$$lcssa22 = $23;
      break L3;
     }
     $14 = ((($$01824)) + 1|0);
     $15 = ((($$025)) + 1|0);
     $16 = HEAP8[$14>>0]|0;
     $17 = $16&255;
     $18 = ($16<<24>>24)==(0);
     $19 = HEAP8[$15>>0]|0;
     $20 = $19&255;
     if ($18) {
      $$lcssa = $20;$$lcssa22 = $17;
      break;
     } else {
      $$01824 = $14;$$01926$in = $$01926;$$025 = $15;$10 = $19;$13 = $16;$22 = $20;$23 = $17;
     }
    }
   }
  } while(0);
  $21 = (($$lcssa22) - ($$lcssa))|0;
  $$020 = $21;
 }
 return ($$020|0);
}
function _memchr($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$035$lcssa65 = $0;$$036$lcssa64 = 102;
   label = 5;
  } else {
   $$03555 = $0;$$03654 = 102;
   while(1) {
    $4 = HEAP8[$$03555>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 5;
     break L1;
    }
    $6 = ((($$03555)) + 1|0);
    $7 = (($$03654) + -1)|0;
    $8 = $6;
    $9 = $8 & 3;
    $10 = ($9|0)!=(0);
    $11 = ($7|0)!=(0);
    $or$cond = $11 & $10;
    if ($or$cond) {
     $$03555 = $6;$$03654 = $7;
    } else {
     break;
    }
   }
   if ($11) {
    $$035$lcssa65 = $6;$$036$lcssa64 = $7;
    label = 5;
   } else {
    $$2 = $6;$$3 = 0;
   }
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $12 = HEAP8[$$035$lcssa65>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if ($13) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $14 = ($$036$lcssa64>>>0)>(3);
    do {
     if ($14) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $15 = HEAP32[$$046>>2]|0;
       $16 = (($15) + -16843009)|0;
       $17 = $15 & -2139062144;
       $18 = $17 ^ -2139062144;
       $19 = $18 & $16;
       $20 = ($19|0)==(0);
       if (!($20)) {
        label = 8;
        break;
       }
       $21 = ((($$046)) + 4|0);
       $22 = (($$13745) + -4)|0;
       $23 = ($22>>>0)>(3);
       if ($23) {
        $$046 = $21;$$13745 = $22;
       } else {
        $$0$lcssa = $21;$$137$lcssa = $22;
        label = 10;
        break;
       }
      }
      if ((label|0) == 8) {
       $$140 = $$046;$$23839 = $$13745;
       break;
      }
      else if ((label|0) == 10) {
       $24 = ($$137$lcssa|0)==(0);
       if ($24) {
        $$2 = $$0$lcssa;$$3 = 0;
        break L6;
       } else {
        $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
        break;
       }
      }
     } else {
      $$140 = $$035$lcssa65;$$23839 = $$036$lcssa64;
     }
    } while(0);
    while(1) {
     $25 = HEAP8[$$140>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if ($26) {
      $$2 = $$140;$$3 = $$23839;
      break L6;
     }
     $27 = ((($$140)) + 1|0);
     $28 = (($$23839) + -1)|0;
     $29 = ($28|0)==(0);
     if ($29) {
      $$2 = $27;$$3 = 0;
      break;
     } else {
      $$140 = $27;$$23839 = $28;
     }
    }
   }
  }
 } while(0);
 $30 = ($$3|0)!=(0);
 $31 = $30 ? $$2 : 0;
 return ($31|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strrchr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (___memrchr($0,$2)|0);
 return ($3|0);
}
function ___memrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$09 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, sp_a = 0;
 sp = STACKTOP;
 $$09 = $1;
 while(1) {
  $2 = (($$09) + -1)|0;
  $3 = ($$09|0)==(0);
  if ($3) {
   $$0 = 0;
   break;
  }
  $4 = (($0) + ($2)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(36);
  if ($6) {
   $$0 = $4;
   break;
  } else {
   $$09 = $2;
  }
 }
 return ($$0|0);
}
function runPostSets() {
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

  


// EMSCRIPTEN_END_FUNCS


  return { _crypto_onetimeauth_poly1305_init: _crypto_onetimeauth_poly1305_init, _crypto_hash_sha512_init: _crypto_hash_sha512_init, _crypto_sign_ed25519_pk_to_curve25519: _crypto_sign_ed25519_pk_to_curve25519, _sodium_unpad: _sodium_unpad, _crypto_scalarmult_primitive: _crypto_scalarmult_primitive, _crypto_scalarmult_base: _crypto_scalarmult_base, _crypto_auth_bytes: _crypto_auth_bytes, _crypto_stream_chacha20_keybytes: _crypto_stream_chacha20_keybytes, _crypto_aead_chacha20poly1305_decrypt_detached: _crypto_aead_chacha20poly1305_decrypt_detached, _crypto_kdf_blake2b_bytes_min: _crypto_kdf_blake2b_bytes_min, _crypto_box_curve25519xchacha20poly1305_open_easy_afternm: _crypto_box_curve25519xchacha20poly1305_open_easy_afternm, _crypto_generichash_blake2b_keybytes_max: _crypto_generichash_blake2b_keybytes_max, _crypto_box_beforenmbytes: _crypto_box_beforenmbytes, _crypto_stream_salsa208: _crypto_stream_salsa208, _crypto_sign_ed25519_sk_to_curve25519: _crypto_sign_ed25519_sk_to_curve25519, _crypto_stream_chacha20_ietf_xor_ic: _crypto_stream_chacha20_ietf_xor_ic, _crypto_secretbox_xsalsa20poly1305_open: _crypto_secretbox_xsalsa20poly1305_open, _crypto_box_zerobytes: _crypto_box_zerobytes, _crypto_secretbox_xchacha20poly1305_open_detached: _crypto_secretbox_xchacha20poly1305_open_detached, _crypto_stream_salsa208_keybytes: _crypto_stream_salsa208_keybytes, _crypto_hash_sha512_bytes: _crypto_hash_sha512_bytes, stackSave: stackSave, _crypto_sign_ed25519_publickeybytes: _crypto_sign_ed25519_publickeybytes, _crypto_kx_client_session_keys: _crypto_kx_client_session_keys, _crypto_sign_primitive: _crypto_sign_primitive, _crypto_scalarmult_curve25519_bytes: _crypto_scalarmult_curve25519_bytes, _crypto_scalarmult_curve25519_scalarbytes: _crypto_scalarmult_curve25519_scalarbytes, _crypto_sign_ed25519_bytes: _crypto_sign_ed25519_bytes, _crypto_pwhash_argon2i_str_verify: _crypto_pwhash_argon2i_str_verify, _crypto_box_curve25519xchacha20poly1305_secretkeybytes: _crypto_box_curve25519xchacha20poly1305_secretkeybytes, _crypto_scalarmult_curve25519_base: _crypto_scalarmult_curve25519_base, _crypto_box_curve25519xchacha20poly1305_sealbytes: _crypto_box_curve25519xchacha20poly1305_sealbytes, _crypto_box_detached_afternm: _crypto_box_detached_afternm, _crypto_stream_salsa20_xor_ic: _crypto_stream_salsa20_xor_ic, _crypto_auth_hmacsha256_init: _crypto_auth_hmacsha256_init, _crypto_stream_chacha20_ietf_xor: _crypto_stream_chacha20_ietf_xor, _crypto_auth_hmacsha512256_final: _crypto_auth_hmacsha512256_final, _crypto_pwhash_argon2id_opslimit_sensitive: _crypto_pwhash_argon2id_opslimit_sensitive, setThrew: setThrew, _crypto_pwhash_argon2id_passwd_min: _crypto_pwhash_argon2id_passwd_min, _crypto_secretstream_xchacha20poly1305_keygen: _crypto_secretstream_xchacha20poly1305_keygen, _sodium_library_version_major: _sodium_library_version_major, _crypto_kdf_blake2b_derive_from_key: _crypto_kdf_blake2b_derive_from_key, _crypto_box_curve25519xsalsa20poly1305_keypair: _crypto_box_curve25519xsalsa20poly1305_keypair, _crypto_hash_sha256_init: _crypto_hash_sha256_init, _crypto_stream_xsalsa20_noncebytes: _crypto_stream_xsalsa20_noncebytes, _crypto_generichash_keybytes_max: _crypto_generichash_keybytes_max, _crypto_verify_64: _crypto_verify_64, stackAlloc: stackAlloc, _crypto_box_curve25519xchacha20poly1305_keypair: _crypto_box_curve25519xchacha20poly1305_keypair, _crypto_box_curve25519xsalsa20poly1305_open: _crypto_box_curve25519xsalsa20poly1305_open, _crypto_pwhash_memlimit_sensitive: _crypto_pwhash_memlimit_sensitive, _crypto_box_boxzerobytes: _crypto_box_boxzerobytes, _crypto_kdf_blake2b_keybytes: _crypto_kdf_blake2b_keybytes, _crypto_pwhash_argon2id_str: _crypto_pwhash_argon2id_str, _crypto_hash_sha512_update: _crypto_hash_sha512_update, _crypto_core_hchacha20: _crypto_core_hchacha20, _crypto_pwhash_bytes_min: _crypto_pwhash_bytes_min, _crypto_secretbox_open: _crypto_secretbox_open, _crypto_auth_hmacsha256_final: _crypto_auth_hmacsha256_final, _crypto_verify_16: _crypto_verify_16, _crypto_pwhash_argon2id: _crypto_pwhash_argon2id, _crypto_pwhash_scryptsalsa208sha256_memlimit_max: _crypto_pwhash_scryptsalsa208sha256_memlimit_max, _crypto_pwhash_scryptsalsa208sha256_ll: _crypto_pwhash_scryptsalsa208sha256_ll, _crypto_pwhash_argon2id_memlimit_interactive: _crypto_pwhash_argon2id_memlimit_interactive, _crypto_stream_salsa208_xor: _crypto_stream_salsa208_xor, _crypto_secretbox_xsalsa20poly1305_keygen: _crypto_secretbox_xsalsa20poly1305_keygen, _crypto_pwhash_argon2i_bytes_max: _crypto_pwhash_argon2i_bytes_max, _crypto_box_curve25519xchacha20poly1305_easy_afternm: _crypto_box_curve25519xchacha20poly1305_easy_afternm, _crypto_onetimeauth_poly1305_update: _crypto_onetimeauth_poly1305_update, _crypto_pwhash_memlimit_max: _crypto_pwhash_memlimit_max, _crypto_verify_64_bytes: _crypto_verify_64_bytes, _crypto_onetimeauth_poly1305_keygen: _crypto_onetimeauth_poly1305_keygen, _crypto_generichash_blake2b_keygen: _crypto_generichash_blake2b_keygen, _crypto_pwhash_argon2i_strprefix: _crypto_pwhash_argon2i_strprefix, _crypto_auth_hmacsha256_update: _crypto_auth_hmacsha256_update, _crypto_aead_xchacha20poly1305_ietf_encrypt: _crypto_aead_xchacha20poly1305_ietf_encrypt, _crypto_pwhash_scryptsalsa208sha256_strbytes: _crypto_pwhash_scryptsalsa208sha256_strbytes, _crypto_stream_xsalsa20_keybytes: _crypto_stream_xsalsa20_keybytes, _crypto_generichash_keygen: _crypto_generichash_keygen, _crypto_pwhash_argon2i_str: _crypto_pwhash_argon2i_str, _crypto_pwhash_argon2id_bytes_max: _crypto_pwhash_argon2id_bytes_max, _crypto_box_sealbytes: _crypto_box_sealbytes, _crypto_core_hchacha20_constbytes: _crypto_core_hchacha20_constbytes, _crypto_secretbox_boxzerobytes: _crypto_secretbox_boxzerobytes, _crypto_aead_chacha20poly1305_ietf_keygen: _crypto_aead_chacha20poly1305_ietf_keygen, _crypto_stream_chacha20: _crypto_stream_chacha20, _crypto_box_open_afternm: _crypto_box_open_afternm, _sodium_bin2base64: _sodium_bin2base64, _crypto_pwhash_opslimit_moderate: _crypto_pwhash_opslimit_moderate, _crypto_box_macbytes: _crypto_box_macbytes, _crypto_shorthash_bytes: _crypto_shorthash_bytes, _crypto_pwhash_argon2id_saltbytes: _crypto_pwhash_argon2id_saltbytes, _crypto_generichash_primitive: _crypto_generichash_primitive, _crypto_sign_ed25519_keypair: _crypto_sign_ed25519_keypair, _crypto_sign_ed25519ph_statebytes: _crypto_sign_ed25519ph_statebytes, _crypto_aead_xchacha20poly1305_ietf_keybytes: _crypto_aead_xchacha20poly1305_ietf_keybytes, _crypto_secretstream_xchacha20poly1305_rekey: _crypto_secretstream_xchacha20poly1305_rekey, _crypto_auth_primitive: _crypto_auth_primitive, _crypto_core_salsa2012_keybytes: _crypto_core_salsa2012_keybytes, _malloc: _malloc, _crypto_stream_noncebytes: _crypto_stream_noncebytes, _crypto_secretbox_xchacha20poly1305_keybytes: _crypto_secretbox_xchacha20poly1305_keybytes, _crypto_secretbox_xsalsa20poly1305_keybytes: _crypto_secretbox_xsalsa20poly1305_keybytes, _crypto_pwhash_saltbytes: _crypto_pwhash_saltbytes, _crypto_secretbox_noncebytes: _crypto_secretbox_noncebytes, _crypto_pwhash_str_alg: _crypto_pwhash_str_alg, _crypto_secretbox_xsalsa20poly1305_macbytes: _crypto_secretbox_xsalsa20poly1305_macbytes, _crypto_pwhash_argon2i_opslimit_max: _crypto_pwhash_argon2i_opslimit_max, _crypto_auth_hmacsha512_bytes: _crypto_auth_hmacsha512_bytes, _crypto_generichash_keybytes: _crypto_generichash_keybytes, _crypto_sign_publickeybytes: _crypto_sign_publickeybytes, _crypto_pwhash_scryptsalsa208sha256_memlimit_min: _crypto_pwhash_scryptsalsa208sha256_memlimit_min, _crypto_pwhash_argon2i_memlimit_moderate: _crypto_pwhash_argon2i_memlimit_moderate, _crypto_generichash_blake2b: _crypto_generichash_blake2b, _crypto_core_hchacha20_keybytes: _crypto_core_hchacha20_keybytes, ___uremdi3: ___uremdi3, _crypto_pwhash_argon2i_opslimit_moderate: _crypto_pwhash_argon2i_opslimit_moderate, _randombytes_implementation_name: _randombytes_implementation_name, _crypto_stream: _crypto_stream, _crypto_stream_xchacha20_noncebytes: _crypto_stream_xchacha20_noncebytes, _crypto_sign_ed25519_verify_detached: _crypto_sign_ed25519_verify_detached, _crypto_hash_sha512_statebytes: _crypto_hash_sha512_statebytes, _crypto_pwhash_argon2id_str_verify: _crypto_pwhash_argon2id_str_verify, _crypto_verify_32_bytes: _crypto_verify_32_bytes, stackRestore: stackRestore, _crypto_kdf_keygen: _crypto_kdf_keygen, _randombytes_buf: _randombytes_buf, _crypto_stream_chacha20_ietf_keygen: _crypto_stream_chacha20_ietf_keygen, _crypto_stream_chacha20_keygen: _crypto_stream_chacha20_keygen, _crypto_box_easy: _crypto_box_easy, _crypto_hash_sha256: _crypto_hash_sha256, _crypto_sign_ed25519_seedbytes: _crypto_sign_ed25519_seedbytes, _crypto_pwhash_alg_argon2i13: _crypto_pwhash_alg_argon2i13, _crypto_box_curve25519xchacha20poly1305_seal_open: _crypto_box_curve25519xchacha20poly1305_seal_open, _crypto_pwhash_opslimit_min: _crypto_pwhash_opslimit_min, _crypto_pwhash_argon2i_memlimit_max: _crypto_pwhash_argon2i_memlimit_max, _crypto_kdf_blake2b_bytes_max: _crypto_kdf_blake2b_bytes_max, _crypto_generichash_bytes_max: _crypto_generichash_bytes_max, _crypto_stream_chacha20_ietf_noncebytes: _crypto_stream_chacha20_ietf_noncebytes, _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive: _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive, _crypto_box_curve25519xchacha20poly1305_open_easy: _crypto_box_curve25519xchacha20poly1305_open_easy, _crypto_box_beforenm: _crypto_box_beforenm, _crypto_pwhash_scryptsalsa208sha256_bytes_max: _crypto_pwhash_scryptsalsa208sha256_bytes_max, _crypto_box_curve25519xsalsa20poly1305_afternm: _crypto_box_curve25519xsalsa20poly1305_afternm, _crypto_sign_statebytes: _crypto_sign_statebytes, _crypto_sign_open: _crypto_sign_open, _crypto_pwhash_argon2id_opslimit_interactive: _crypto_pwhash_argon2id_opslimit_interactive, _crypto_box_seed_keypair: _crypto_box_seed_keypair, _crypto_auth_hmacsha512_init: _crypto_auth_hmacsha512_init, _crypto_pwhash_scryptsalsa208sha256_str_needs_rehash: _crypto_pwhash_scryptsalsa208sha256_str_needs_rehash, _crypto_sign_ed25519_sk_to_pk: _crypto_sign_ed25519_sk_to_pk, _crypto_scalarmult_curve25519: _crypto_scalarmult_curve25519, _crypto_box_open_easy: _crypto_box_open_easy, _crypto_auth_hmacsha512: _crypto_auth_hmacsha512, _crypto_stream_keygen: _crypto_stream_keygen, _crypto_pwhash_argon2id_strprefix: _crypto_pwhash_argon2id_strprefix, _crypto_auth_hmacsha512256_keybytes: _crypto_auth_hmacsha512256_keybytes, _crypto_aead_chacha20poly1305_keybytes: _crypto_aead_chacha20poly1305_keybytes, _crypto_secretstream_xchacha20poly1305_tag_message: _crypto_secretstream_xchacha20poly1305_tag_message, _free: _free, _crypto_core_hsalsa20_keybytes: _crypto_core_hsalsa20_keybytes, _crypto_box_curve25519xchacha20poly1305_seedbytes: _crypto_box_curve25519xchacha20poly1305_seedbytes, _crypto_onetimeauth_poly1305_keybytes: _crypto_onetimeauth_poly1305_keybytes, _crypto_sign_ed25519_secretkeybytes: _crypto_sign_ed25519_secretkeybytes, _crypto_kdf_blake2b_contextbytes: _crypto_kdf_blake2b_contextbytes, _crypto_stream_salsa2012: _crypto_stream_salsa2012, _crypto_sign_seedbytes: _crypto_sign_seedbytes, _crypto_box_curve25519xchacha20poly1305_beforenmbytes: _crypto_box_curve25519xchacha20poly1305_beforenmbytes, _randombytes_random: _randombytes_random, _crypto_sign_ed25519ph_update: _crypto_sign_ed25519ph_update, _crypto_auth_hmacsha256_keygen: _crypto_auth_hmacsha256_keygen, _crypto_auth_hmacsha256_statebytes: _crypto_auth_hmacsha256_statebytes, _randombytes_buf_deterministic: _randombytes_buf_deterministic, _crypto_aead_chacha20poly1305_encrypt_detached: _crypto_aead_chacha20poly1305_encrypt_detached, _crypto_stream_xsalsa20_keygen: _crypto_stream_xsalsa20_keygen, _crypto_hash_primitive: _crypto_hash_primitive, _crypto_pwhash_argon2id_passwd_max: _crypto_pwhash_argon2id_passwd_max, _crypto_shorthash_siphash24: _crypto_shorthash_siphash24, _crypto_box_curve25519xsalsa20poly1305_macbytes: _crypto_box_curve25519xsalsa20poly1305_macbytes, _crypto_pwhash_scryptsalsa208sha256_saltbytes: _crypto_pwhash_scryptsalsa208sha256_saltbytes, _crypto_sign_ed25519: _crypto_sign_ed25519, _crypto_box_curve25519xchacha20poly1305_seal: _crypto_box_curve25519xchacha20poly1305_seal, _crypto_core_salsa20_constbytes: _crypto_core_salsa20_constbytes, _crypto_secretbox_primitive: _crypto_secretbox_primitive, _crypto_pwhash_argon2i_opslimit_interactive: _crypto_pwhash_argon2i_opslimit_interactive, _crypto_pwhash_argon2i_saltbytes: _crypto_pwhash_argon2i_saltbytes, _crypto_box_curve25519xchacha20poly1305_open_detached_afternm: _crypto_box_curve25519xchacha20poly1305_open_detached_afternm, _crypto_box_curve25519xsalsa20poly1305_beforenmbytes: _crypto_box_curve25519xsalsa20poly1305_beforenmbytes, _crypto_stream_xchacha20_keygen: _crypto_stream_xchacha20_keygen, _crypto_onetimeauth: _crypto_onetimeauth, _crypto_stream_xchacha20_xor: _crypto_stream_xchacha20_xor, _randombytes_seedbytes: _randombytes_seedbytes, _crypto_sign_final_create: _crypto_sign_final_create, _crypto_kx_secretkeybytes: _crypto_kx_secretkeybytes, _crypto_box_detached: _crypto_box_detached, _crypto_stream_xsalsa20_xor: _crypto_stream_xsalsa20_xor, _crypto_generichash_blake2b_saltbytes: _crypto_generichash_blake2b_saltbytes, _crypto_box_open_detached: _crypto_box_open_detached, _crypto_kx_seedbytes: _crypto_kx_seedbytes, _crypto_stream_chacha20_noncebytes: _crypto_stream_chacha20_noncebytes, _crypto_secretbox_xsalsa20poly1305_zerobytes: _crypto_secretbox_xsalsa20poly1305_zerobytes, _crypto_box_curve25519xchacha20poly1305_open_detached: _crypto_box_curve25519xchacha20poly1305_open_detached, _crypto_generichash_blake2b_keybytes: _crypto_generichash_blake2b_keybytes, _crypto_box_curve25519xchacha20poly1305_easy: _crypto_box_curve25519xchacha20poly1305_easy, _crypto_pwhash_argon2i_bytes_min: _crypto_pwhash_argon2i_bytes_min, _crypto_pwhash_scryptsalsa208sha256_str: _crypto_pwhash_scryptsalsa208sha256_str, _crypto_hash: _crypto_hash, _i64Subtract: _i64Subtract, _crypto_box_seedbytes: _crypto_box_seedbytes, _crypto_generichash_blake2b_bytes_min: _crypto_generichash_blake2b_bytes_min, _crypto_pwhash_argon2id_bytes_min: _crypto_pwhash_argon2id_bytes_min, _crypto_generichash_blake2b_statebytes: _crypto_generichash_blake2b_statebytes, _sodium_base64_encoded_len: _sodium_base64_encoded_len, _crypto_secretstream_xchacha20poly1305_headerbytes: _crypto_secretstream_xchacha20poly1305_headerbytes, _crypto_sign_ed25519ph_final_create: _crypto_sign_ed25519ph_final_create, _crypto_aead_chacha20poly1305_ietf_decrypt_detached: _crypto_aead_chacha20poly1305_ietf_decrypt_detached, _crypto_auth_hmacsha512256_bytes: _crypto_auth_hmacsha512256_bytes, _crypto_auth_hmacsha512_update: _crypto_auth_hmacsha512_update, _crypto_pwhash_argon2id_memlimit_moderate: _crypto_pwhash_argon2id_memlimit_moderate, _crypto_box_keypair: _crypto_box_keypair, _crypto_hash_sha256_bytes: _crypto_hash_sha256_bytes, ___udivdi3: ___udivdi3, _crypto_pwhash_argon2i_passwd_max: _crypto_pwhash_argon2i_passwd_max, _sodium_init: _sodium_init, _crypto_secretbox_macbytes: _crypto_secretbox_macbytes, _crypto_aead_xchacha20poly1305_ietf_npubbytes: _crypto_aead_xchacha20poly1305_ietf_npubbytes, _bitshift64Shl: _bitshift64Shl, _crypto_pwhash_argon2i_opslimit_min: _crypto_pwhash_argon2i_opslimit_min, setTempRet0: setTempRet0, _crypto_sign_seed_keypair: _crypto_sign_seed_keypair, _crypto_box_open_detached_afternm: _crypto_box_open_detached_afternm, ___muldi3: ___muldi3, _crypto_core_salsa2012_constbytes: _crypto_core_salsa2012_constbytes, _crypto_kx_seed_keypair: _crypto_kx_seed_keypair, _crypto_box_curve25519xchacha20poly1305_detached_afternm: _crypto_box_curve25519xchacha20poly1305_detached_afternm, _crypto_box_curve25519xsalsa20poly1305: _crypto_box_curve25519xsalsa20poly1305, _crypto_aead_chacha20poly1305_nsecbytes: _crypto_aead_chacha20poly1305_nsecbytes, _sodium_library_minimal: _sodium_library_minimal, _crypto_secretstream_xchacha20poly1305_keybytes: _crypto_secretstream_xchacha20poly1305_keybytes, _crypto_secretstream_xchacha20poly1305_pull: _crypto_secretstream_xchacha20poly1305_pull, _crypto_pwhash_argon2i_strbytes: _crypto_pwhash_argon2i_strbytes, _crypto_box_curve25519xsalsa20poly1305_publickeybytes: _crypto_box_curve25519xsalsa20poly1305_publickeybytes, _crypto_generichash_blake2b_salt_personal: _crypto_generichash_blake2b_salt_personal, _crypto_kdf_derive_from_key: _crypto_kdf_derive_from_key, _crypto_secretbox_xsalsa20poly1305_noncebytes: _crypto_secretbox_xsalsa20poly1305_noncebytes, _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive: _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive, _crypto_pwhash_argon2i_memlimit_interactive: _crypto_pwhash_argon2i_memlimit_interactive, _crypto_pwhash_alg_argon2id13: _crypto_pwhash_alg_argon2id13, _crypto_stream_keybytes: _crypto_stream_keybytes, _crypto_pwhash_memlimit_min: _crypto_pwhash_memlimit_min, _crypto_aead_chacha20poly1305_ietf_npubbytes: _crypto_aead_chacha20poly1305_ietf_npubbytes, _crypto_stream_salsa208_noncebytes: _crypto_stream_salsa208_noncebytes, _sodium_library_version_minor: _sodium_library_version_minor, _crypto_onetimeauth_bytes: _crypto_onetimeauth_bytes, _crypto_box_open: _crypto_box_open, _crypto_secretbox_xchacha20poly1305_open_easy: _crypto_secretbox_xchacha20poly1305_open_easy, _crypto_auth_hmacsha512_keygen: _crypto_auth_hmacsha512_keygen, _crypto_sign_ed25519_open: _crypto_sign_ed25519_open, _crypto_stream_chacha20_ietf_keybytes: _crypto_stream_chacha20_ietf_keybytes, _crypto_box_noncebytes: _crypto_box_noncebytes, _crypto_pwhash_argon2i_str_needs_rehash: _crypto_pwhash_argon2i_str_needs_rehash, _crypto_core_hchacha20_outputbytes: _crypto_core_hchacha20_outputbytes, _crypto_stream_salsa2012_xor: _crypto_stream_salsa2012_xor, _crypto_onetimeauth_keygen: _crypto_onetimeauth_keygen, _crypto_pwhash_strbytes: _crypto_pwhash_strbytes, _crypto_auth_hmacsha512256_update: _crypto_auth_hmacsha512256_update, _crypto_core_salsa208_outputbytes: _crypto_core_salsa208_outputbytes, _crypto_onetimeauth_poly1305: _crypto_onetimeauth_poly1305, _crypto_secretbox_xchacha20poly1305_macbytes: _crypto_secretbox_xchacha20poly1305_macbytes, _crypto_kdf_bytes_min: _crypto_kdf_bytes_min, _crypto_sign_ed25519_sk_to_seed: _crypto_sign_ed25519_sk_to_seed, _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive: _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive, _crypto_stream_xsalsa20: _crypto_stream_xsalsa20, _crypto_box_open_easy_afternm: _crypto_box_open_easy_afternm, _crypto_box_curve25519xsalsa20poly1305_seedbytes: _crypto_box_curve25519xsalsa20poly1305_seedbytes, _crypto_stream_salsa20_keybytes: _crypto_stream_salsa20_keybytes, _crypto_kdf_primitive: _crypto_kdf_primitive, _crypto_sign_ed25519ph_final_verify: _crypto_sign_ed25519ph_final_verify, _crypto_shorthash: _crypto_shorthash, _crypto_auth_keybytes: _crypto_auth_keybytes, _crypto_box_curve25519xsalsa20poly1305_open_afternm: _crypto_box_curve25519xsalsa20poly1305_open_afternm, _crypto_aead_chacha20poly1305_npubbytes: _crypto_aead_chacha20poly1305_npubbytes, _crypto_aead_xchacha20poly1305_ietf_abytes: _crypto_aead_xchacha20poly1305_ietf_abytes, _crypto_onetimeauth_poly1305_final: _crypto_onetimeauth_poly1305_final, _crypto_onetimeauth_poly1305_bytes: _crypto_onetimeauth_poly1305_bytes, _crypto_box_curve25519xsalsa20poly1305_seed_keypair: _crypto_box_curve25519xsalsa20poly1305_seed_keypair, _crypto_box_primitive: _crypto_box_primitive, _crypto_pwhash_str: _crypto_pwhash_str, _crypto_auth_hmacsha512_keybytes: _crypto_auth_hmacsha512_keybytes, _crypto_auth: _crypto_auth, _crypto_pwhash_scryptsalsa208sha256_bytes_min: _crypto_pwhash_scryptsalsa208sha256_bytes_min, _crypto_core_salsa20_keybytes: _crypto_core_salsa20_keybytes, _crypto_box_afternm: _crypto_box_afternm, _crypto_core_salsa208_constbytes: _crypto_core_salsa208_constbytes, _crypto_pwhash_argon2id_memlimit_sensitive: _crypto_pwhash_argon2id_memlimit_sensitive, _crypto_onetimeauth_primitive: _crypto_onetimeauth_primitive, _crypto_pwhash_scryptsalsa208sha256_str_verify: _crypto_pwhash_scryptsalsa208sha256_str_verify, _sodium_version_string: _sodium_version_string, _crypto_stream_xchacha20_xor_ic: _crypto_stream_xchacha20_xor_ic, _crypto_pwhash_scryptsalsa208sha256_passwd_min: _crypto_pwhash_scryptsalsa208sha256_passwd_min, _crypto_stream_chacha20_ietf: _crypto_stream_chacha20_ietf, _crypto_generichash: _crypto_generichash, _crypto_core_hsalsa20_outputbytes: _crypto_core_hsalsa20_outputbytes, _crypto_pwhash_opslimit_interactive: _crypto_pwhash_opslimit_interactive, getTempRet0: getTempRet0, _crypto_box_curve25519xsalsa20poly1305_noncebytes: _crypto_box_curve25519xsalsa20poly1305_noncebytes, _crypto_stream_salsa2012_noncebytes: _crypto_stream_salsa2012_noncebytes, _crypto_core_salsa208_keybytes: _crypto_core_salsa208_keybytes, _crypto_secretstream_xchacha20poly1305_tag_final: _crypto_secretstream_xchacha20poly1305_tag_final, _crypto_pwhash_argon2id_str_needs_rehash: _crypto_pwhash_argon2id_str_needs_rehash, _crypto_aead_chacha20poly1305_ietf_decrypt: _crypto_aead_chacha20poly1305_ietf_decrypt, _crypto_auth_hmacsha512256_init: _crypto_auth_hmacsha512256_init, _crypto_kx_server_session_keys: _crypto_kx_server_session_keys, _crypto_onetimeauth_poly1305_verify: _crypto_onetimeauth_poly1305_verify, _crypto_auth_hmacsha512_final: _crypto_auth_hmacsha512_final, _crypto_auth_hmacsha512256_verify: _crypto_auth_hmacsha512256_verify, _crypto_box_secretkeybytes: _crypto_box_secretkeybytes, _crypto_stream_salsa2012_keygen: _crypto_stream_salsa2012_keygen, _crypto_onetimeauth_update: _crypto_onetimeauth_update, _crypto_core_salsa20: _crypto_core_salsa20, _crypto_secretstream_xchacha20poly1305_abytes: _crypto_secretstream_xchacha20poly1305_abytes, _crypto_pwhash_memlimit_interactive: _crypto_pwhash_memlimit_interactive, _crypto_scalarmult_bytes: _crypto_scalarmult_bytes, _crypto_secretbox_zerobytes: _crypto_secretbox_zerobytes, _crypto_auth_hmacsha256: _crypto_auth_hmacsha256, _crypto_secretbox_detached: _crypto_secretbox_detached, _crypto_stream_xor: _crypto_stream_xor, _crypto_secretbox_xchacha20poly1305_easy: _crypto_secretbox_xchacha20poly1305_easy, _crypto_secretbox_easy: _crypto_secretbox_easy, _crypto_secretstream_xchacha20poly1305_init_pull: _crypto_secretstream_xchacha20poly1305_init_pull, _crypto_aead_xchacha20poly1305_ietf_decrypt_detached: _crypto_aead_xchacha20poly1305_ietf_decrypt_detached, _crypto_stream_salsa20: _crypto_stream_salsa20, _sodium_base642bin: _sodium_base642bin, _sodium_bin2hex: _sodium_bin2hex, _crypto_auth_hmacsha512_statebytes: _crypto_auth_hmacsha512_statebytes, _crypto_pwhash_argon2i_opslimit_sensitive: _crypto_pwhash_argon2i_opslimit_sensitive, _crypto_generichash_blake2b_bytes_max: _crypto_generichash_blake2b_bytes_max, _crypto_hash_sha256_update: _crypto_hash_sha256_update, _crypto_core_hsalsa20_constbytes: _crypto_core_hsalsa20_constbytes, _crypto_box_easy_afternm: _crypto_box_easy_afternm, _crypto_pwhash_memlimit_moderate: _crypto_pwhash_memlimit_moderate, _crypto_core_salsa20_inputbytes: _crypto_core_salsa20_inputbytes, _crypto_box_publickeybytes: _crypto_box_publickeybytes, _crypto_sign_secretkeybytes: _crypto_sign_secretkeybytes, _crypto_scalarmult_scalarbytes: _crypto_scalarmult_scalarbytes, _crypto_verify_32: _crypto_verify_32, _crypto_kx_sessionkeybytes: _crypto_kx_sessionkeybytes, _crypto_aead_chacha20poly1305_decrypt: _crypto_aead_chacha20poly1305_decrypt, _crypto_pwhash_argon2id_opslimit_moderate: _crypto_pwhash_argon2id_opslimit_moderate, _crypto_pwhash_argon2id_opslimit_min: _crypto_pwhash_argon2id_opslimit_min, _crypto_sign: _crypto_sign, _crypto_pwhash_argon2id_memlimit_min: _crypto_pwhash_argon2id_memlimit_min, _crypto_pwhash_passwd_max: _crypto_pwhash_passwd_max, _crypto_pwhash_scryptsalsa208sha256_opslimit_min: _crypto_pwhash_scryptsalsa208sha256_opslimit_min, _sodium_hex2bin: _sodium_hex2bin, _crypto_pwhash_argon2i_alg_argon2i13: _crypto_pwhash_argon2i_alg_argon2i13, _crypto_pwhash_bytes_max: _crypto_pwhash_bytes_max, _crypto_secretbox_keybytes: _crypto_secretbox_keybytes, _crypto_pwhash_argon2id_alg_argon2id13: _crypto_pwhash_argon2id_alg_argon2id13, _randombytes: _randombytes, _crypto_hash_bytes: _crypto_hash_bytes, _crypto_stream_salsa20_keygen: _crypto_stream_salsa20_keygen, _crypto_pwhash_str_needs_rehash: _crypto_pwhash_str_needs_rehash, _crypto_hash_sha256_statebytes: _crypto_hash_sha256_statebytes, _crypto_pwhash_argon2i_passwd_min: _crypto_pwhash_argon2i_passwd_min, _crypto_pwhash_opslimit_sensitive: _crypto_pwhash_opslimit_sensitive, _crypto_sign_init: _crypto_sign_init, _crypto_generichash_blake2b_personalbytes: _crypto_generichash_blake2b_personalbytes, _crypto_stream_chacha20_xor_ic: _crypto_stream_chacha20_xor_ic, _crypto_sign_verify_detached: _crypto_sign_verify_detached, _crypto_onetimeauth_verify: _crypto_onetimeauth_verify, _crypto_sign_ed25519_detached: _crypto_sign_ed25519_detached, _crypto_generichash_init: _crypto_generichash_init, _i64Add: _i64Add, _crypto_sign_bytes: _crypto_sign_bytes, _crypto_generichash_update: _crypto_generichash_update, _crypto_scalarmult: _crypto_scalarmult, _crypto_aead_chacha20poly1305_ietf_abytes: _crypto_aead_chacha20poly1305_ietf_abytes, _crypto_sign_detached: _crypto_sign_detached, _crypto_generichash_blake2b_update: _crypto_generichash_blake2b_update, _crypto_box_curve25519xsalsa20poly1305_beforenm: _crypto_box_curve25519xsalsa20poly1305_beforenm, _crypto_generichash_blake2b_bytes: _crypto_generichash_blake2b_bytes, _crypto_generichash_final: _crypto_generichash_final, _crypto_box_curve25519xchacha20poly1305_noncebytes: _crypto_box_curve25519xchacha20poly1305_noncebytes, _randombytes_uniform: _randombytes_uniform, _crypto_shorthash_siphash24_keybytes: _crypto_shorthash_siphash24_keybytes, _crypto_shorthash_keygen: _crypto_shorthash_keygen, _crypto_onetimeauth_init: _crypto_onetimeauth_init, _crypto_generichash_bytes: _crypto_generichash_bytes, _crypto_secretstream_xchacha20poly1305_init_push: _crypto_secretstream_xchacha20poly1305_init_push, _crypto_stream_salsa20_xor: _crypto_stream_salsa20_xor, _crypto_auth_hmacsha512_verify: _crypto_auth_hmacsha512_verify, _crypto_generichash_blake2b_keybytes_min: _crypto_generichash_blake2b_keybytes_min, _bitshift64Lshr: _bitshift64Lshr, _crypto_kx_publickeybytes: _crypto_kx_publickeybytes, _crypto_secretstream_xchacha20poly1305_statebytes: _crypto_secretstream_xchacha20poly1305_statebytes, _crypto_aead_chacha20poly1305_ietf_keybytes: _crypto_aead_chacha20poly1305_ietf_keybytes, _crypto_aead_chacha20poly1305_ietf_encrypt_detached: _crypto_aead_chacha20poly1305_ietf_encrypt_detached, _sodium_pad: _sodium_pad, _crypto_aead_chacha20poly1305_abytes: _crypto_aead_chacha20poly1305_abytes, _sbrk: _sbrk, _crypto_box_curve25519xchacha20poly1305_beforenm: _crypto_box_curve25519xchacha20poly1305_beforenm, _memcpy: _memcpy, _crypto_pwhash: _crypto_pwhash, _crypto_auth_hmacsha512256: _crypto_auth_hmacsha512256, _crypto_secretbox_xsalsa20poly1305: _crypto_secretbox_xsalsa20poly1305, _crypto_verify_16_bytes: _crypto_verify_16_bytes, _crypto_stream_salsa208_keygen: _crypto_stream_salsa208_keygen, _emscripten_get_global_libc: _emscripten_get_global_libc, _crypto_shorthash_siphashx24_bytes: _crypto_shorthash_siphashx24_bytes, _crypto_generichash_blake2b_final: _crypto_generichash_blake2b_final, _crypto_generichash_blake2b_init_salt_personal: _crypto_generichash_blake2b_init_salt_personal, _crypto_box_seal: _crypto_box_seal, _crypto_aead_xchacha20poly1305_ietf_keygen: _crypto_aead_xchacha20poly1305_ietf_keygen, _crypto_kx_keypair: _crypto_kx_keypair, runPostSets: runPostSets, _crypto_pwhash_alg_default: _crypto_pwhash_alg_default, _crypto_box: _crypto_box, _crypto_secretstream_xchacha20poly1305_tag_rekey: _crypto_secretstream_xchacha20poly1305_tag_rekey, _crypto_stream_primitive: _crypto_stream_primitive, _crypto_secretbox_xsalsa20poly1305_boxzerobytes: _crypto_secretbox_xsalsa20poly1305_boxzerobytes, _crypto_pwhash_str_verify: _crypto_pwhash_str_verify, _crypto_generichash_keybytes_min: _crypto_generichash_keybytes_min, _crypto_generichash_statebytes: _crypto_generichash_statebytes, _crypto_onetimeauth_poly1305_statebytes: _crypto_onetimeauth_poly1305_statebytes, _crypto_sign_final_verify: _crypto_sign_final_verify, _crypto_pwhash_strprefix: _crypto_pwhash_strprefix, _crypto_secretbox_keygen: _crypto_secretbox_keygen, _crypto_secretbox_xchacha20poly1305_noncebytes: _crypto_secretbox_xchacha20poly1305_noncebytes, _crypto_hash_sha512: _crypto_hash_sha512, _crypto_secretstream_xchacha20poly1305_push: _crypto_secretstream_xchacha20poly1305_push, _crypto_stream_xsalsa20_xor_ic: _crypto_stream_xsalsa20_xor_ic, _crypto_box_curve25519xchacha20poly1305_detached: _crypto_box_curve25519xchacha20poly1305_detached, _crypto_aead_chacha20poly1305_ietf_nsecbytes: _crypto_aead_chacha20poly1305_ietf_nsecbytes, _crypto_pwhash_scryptsalsa208sha256: _crypto_pwhash_scryptsalsa208sha256, _crypto_aead_chacha20poly1305_ietf_encrypt: _crypto_aead_chacha20poly1305_ietf_encrypt, _crypto_secretstream_xchacha20poly1305_tag_push: _crypto_secretstream_xchacha20poly1305_tag_push, _crypto_generichash_blake2b_init: _crypto_generichash_blake2b_init, _randombytes_close: _randombytes_close, _crypto_pwhash_primitive: _crypto_pwhash_primitive, _crypto_onetimeauth_keybytes: _crypto_onetimeauth_keybytes, _crypto_pwhash_argon2i: _crypto_pwhash_argon2i, _crypto_stream_xchacha20_keybytes: _crypto_stream_xchacha20_keybytes, _crypto_pwhash_argon2id_opslimit_max: _crypto_pwhash_argon2id_opslimit_max, _crypto_kdf_keybytes: _crypto_kdf_keybytes, establishStackSpace: establishStackSpace, _crypto_aead_chacha20poly1305_encrypt: _crypto_aead_chacha20poly1305_encrypt, _crypto_secretstream_xchacha20poly1305_messagebytes_max: _crypto_secretstream_xchacha20poly1305_messagebytes_max, _crypto_stream_salsa208_messagebytes_max: _crypto_stream_salsa208_messagebytes_max, _crypto_shorthash_siphash24_bytes: _crypto_shorthash_siphash24_bytes, _crypto_core_salsa208: _crypto_core_salsa208, _crypto_pwhash_opslimit_max: _crypto_pwhash_opslimit_max, _crypto_aead_xchacha20poly1305_ietf_nsecbytes: _crypto_aead_xchacha20poly1305_ietf_nsecbytes, _crypto_auth_verify: _crypto_auth_verify, _crypto_auth_hmacsha512256_keygen: _crypto_auth_hmacsha512256_keygen, _randombytes_stir: _randombytes_stir, _memset: _memset, _crypto_core_salsa2012_inputbytes: _crypto_core_salsa2012_inputbytes, _crypto_pwhash_argon2i_memlimit_sensitive: _crypto_pwhash_argon2i_memlimit_sensitive, _crypto_kx_primitive: _crypto_kx_primitive, _crypto_stream_salsa2012_keybytes: _crypto_stream_salsa2012_keybytes, _crypto_aead_xchacha20poly1305_ietf_decrypt: _crypto_aead_xchacha20poly1305_ietf_decrypt, _crypto_pwhash_scryptsalsa208sha256_strprefix: _crypto_pwhash_scryptsalsa208sha256_strprefix, _crypto_core_hchacha20_inputbytes: _crypto_core_hchacha20_inputbytes, _crypto_auth_keygen: _crypto_auth_keygen, _crypto_secretbox: _crypto_secretbox, _crypto_aead_xchacha20poly1305_ietf_encrypt_detached: _crypto_aead_xchacha20poly1305_ietf_encrypt_detached, _crypto_pwhash_scryptsalsa208sha256_passwd_max: _crypto_pwhash_scryptsalsa208sha256_passwd_max, _crypto_auth_hmacsha256_bytes: _crypto_auth_hmacsha256_bytes, _crypto_auth_hmacsha256_verify: _crypto_auth_hmacsha256_verify, _crypto_sign_keypair: _crypto_sign_keypair, _crypto_stream_xchacha20: _crypto_stream_xchacha20, _crypto_onetimeauth_statebytes: _crypto_onetimeauth_statebytes, _crypto_sign_ed25519ph_init: _crypto_sign_ed25519ph_init, _crypto_stream_salsa20_noncebytes: _crypto_stream_salsa20_noncebytes, _crypto_shorthash_keybytes: _crypto_shorthash_keybytes, _crypto_aead_chacha20poly1305_keygen: _crypto_aead_chacha20poly1305_keygen, _crypto_shorthash_siphashx24: _crypto_shorthash_siphashx24, _memmove: _memmove, _crypto_hash_sha512_final: _crypto_hash_sha512_final, _crypto_box_curve25519xsalsa20poly1305_zerobytes: _crypto_box_curve25519xsalsa20poly1305_zerobytes, _crypto_shorthash_siphashx24_keybytes: _crypto_shorthash_siphashx24_keybytes, _crypto_pwhash_passwd_min: _crypto_pwhash_passwd_min, _crypto_kdf_bytes_max: _crypto_kdf_bytes_max, _crypto_box_curve25519xsalsa20poly1305_boxzerobytes: _crypto_box_curve25519xsalsa20poly1305_boxzerobytes, _crypto_generichash_bytes_min: _crypto_generichash_bytes_min, _crypto_core_salsa2012_outputbytes: _crypto_core_salsa2012_outputbytes, _crypto_auth_hmacsha256_keybytes: _crypto_auth_hmacsha256_keybytes, _crypto_core_salsa208_inputbytes: _crypto_core_salsa208_inputbytes, _crypto_pwhash_scryptsalsa208sha256_opslimit_max: _crypto_pwhash_scryptsalsa208sha256_opslimit_max, _crypto_sign_update: _crypto_sign_update, _crypto_secretbox_xchacha20poly1305_detached: _crypto_secretbox_xchacha20poly1305_detached, _crypto_sign_ed25519_seed_keypair: _crypto_sign_ed25519_seed_keypair, _crypto_secretbox_open_detached: _crypto_secretbox_open_detached, _crypto_box_curve25519xchacha20poly1305_seed_keypair: _crypto_box_curve25519xchacha20poly1305_seed_keypair, _crypto_core_salsa20_outputbytes: _crypto_core_salsa20_outputbytes, _crypto_pwhash_argon2id_memlimit_max: _crypto_pwhash_argon2id_memlimit_max, _crypto_pwhash_argon2i_memlimit_min: _crypto_pwhash_argon2i_memlimit_min, _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive: _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive, _crypto_box_curve25519xsalsa20poly1305_secretkeybytes: _crypto_box_curve25519xsalsa20poly1305_secretkeybytes, _crypto_kdf_contextbytes: _crypto_kdf_contextbytes, _crypto_hash_sha256_final: _crypto_hash_sha256_final, _crypto_pwhash_argon2id_strbytes: _crypto_pwhash_argon2id_strbytes, _crypto_box_seal_open: _crypto_box_seal_open, _crypto_shorthash_primitive: _crypto_shorthash_primitive, _crypto_core_hsalsa20_inputbytes: _crypto_core_hsalsa20_inputbytes, _crypto_onetimeauth_final: _crypto_onetimeauth_final, _crypto_secretbox_open_easy: _crypto_secretbox_open_easy, _crypto_core_salsa2012: _crypto_core_salsa2012, _crypto_box_curve25519xchacha20poly1305_macbytes: _crypto_box_curve25519xchacha20poly1305_macbytes, _crypto_auth_hmacsha512256_statebytes: _crypto_auth_hmacsha512256_statebytes, _bitshift64Ashr: _bitshift64Ashr, _crypto_box_curve25519xchacha20poly1305_publickeybytes: _crypto_box_curve25519xchacha20poly1305_publickeybytes, _crypto_stream_chacha20_xor: _crypto_stream_chacha20_xor, _crypto_core_hsalsa20: _crypto_core_hsalsa20 };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var _crypto_onetimeauth_poly1305_init = Module["_crypto_onetimeauth_poly1305_init"] = asm["_crypto_onetimeauth_poly1305_init"];
var _crypto_hash_sha512_init = Module["_crypto_hash_sha512_init"] = asm["_crypto_hash_sha512_init"];
var _crypto_sign_ed25519_pk_to_curve25519 = Module["_crypto_sign_ed25519_pk_to_curve25519"] = asm["_crypto_sign_ed25519_pk_to_curve25519"];
var _sodium_unpad = Module["_sodium_unpad"] = asm["_sodium_unpad"];
var _crypto_scalarmult_primitive = Module["_crypto_scalarmult_primitive"] = asm["_crypto_scalarmult_primitive"];
var _crypto_scalarmult_base = Module["_crypto_scalarmult_base"] = asm["_crypto_scalarmult_base"];
var _crypto_auth_bytes = Module["_crypto_auth_bytes"] = asm["_crypto_auth_bytes"];
var _crypto_stream_chacha20_keybytes = Module["_crypto_stream_chacha20_keybytes"] = asm["_crypto_stream_chacha20_keybytes"];
var _crypto_aead_chacha20poly1305_decrypt_detached = Module["_crypto_aead_chacha20poly1305_decrypt_detached"] = asm["_crypto_aead_chacha20poly1305_decrypt_detached"];
var _crypto_kdf_blake2b_bytes_min = Module["_crypto_kdf_blake2b_bytes_min"] = asm["_crypto_kdf_blake2b_bytes_min"];
var _crypto_box_curve25519xchacha20poly1305_open_easy_afternm = Module["_crypto_box_curve25519xchacha20poly1305_open_easy_afternm"] = asm["_crypto_box_curve25519xchacha20poly1305_open_easy_afternm"];
var _crypto_generichash_blake2b_keybytes_max = Module["_crypto_generichash_blake2b_keybytes_max"] = asm["_crypto_generichash_blake2b_keybytes_max"];
var _crypto_box_beforenmbytes = Module["_crypto_box_beforenmbytes"] = asm["_crypto_box_beforenmbytes"];
var _crypto_stream_salsa208 = Module["_crypto_stream_salsa208"] = asm["_crypto_stream_salsa208"];
var _crypto_sign_ed25519_sk_to_curve25519 = Module["_crypto_sign_ed25519_sk_to_curve25519"] = asm["_crypto_sign_ed25519_sk_to_curve25519"];
var _crypto_stream_chacha20_ietf_xor_ic = Module["_crypto_stream_chacha20_ietf_xor_ic"] = asm["_crypto_stream_chacha20_ietf_xor_ic"];
var _crypto_secretbox_xsalsa20poly1305_open = Module["_crypto_secretbox_xsalsa20poly1305_open"] = asm["_crypto_secretbox_xsalsa20poly1305_open"];
var _crypto_box_zerobytes = Module["_crypto_box_zerobytes"] = asm["_crypto_box_zerobytes"];
var _crypto_secretbox_xchacha20poly1305_open_detached = Module["_crypto_secretbox_xchacha20poly1305_open_detached"] = asm["_crypto_secretbox_xchacha20poly1305_open_detached"];
var _crypto_stream_salsa208_keybytes = Module["_crypto_stream_salsa208_keybytes"] = asm["_crypto_stream_salsa208_keybytes"];
var _crypto_hash_sha512_bytes = Module["_crypto_hash_sha512_bytes"] = asm["_crypto_hash_sha512_bytes"];
var _crypto_pwhash_argon2id_opslimit_interactive = Module["_crypto_pwhash_argon2id_opslimit_interactive"] = asm["_crypto_pwhash_argon2id_opslimit_interactive"];
var _crypto_stream_xsalsa20_xor_ic = Module["_crypto_stream_xsalsa20_xor_ic"] = asm["_crypto_stream_xsalsa20_xor_ic"];
var _crypto_core_hsalsa20_keybytes = Module["_crypto_core_hsalsa20_keybytes"] = asm["_crypto_core_hsalsa20_keybytes"];
var _crypto_sign_primitive = Module["_crypto_sign_primitive"] = asm["_crypto_sign_primitive"];
var _crypto_scalarmult_curve25519_bytes = Module["_crypto_scalarmult_curve25519_bytes"] = asm["_crypto_scalarmult_curve25519_bytes"];
var _crypto_scalarmult_curve25519_scalarbytes = Module["_crypto_scalarmult_curve25519_scalarbytes"] = asm["_crypto_scalarmult_curve25519_scalarbytes"];
var _crypto_sign_ed25519_bytes = Module["_crypto_sign_ed25519_bytes"] = asm["_crypto_sign_ed25519_bytes"];
var _crypto_pwhash_argon2i_str_verify = Module["_crypto_pwhash_argon2i_str_verify"] = asm["_crypto_pwhash_argon2i_str_verify"];
var _crypto_box_curve25519xchacha20poly1305_secretkeybytes = Module["_crypto_box_curve25519xchacha20poly1305_secretkeybytes"] = asm["_crypto_box_curve25519xchacha20poly1305_secretkeybytes"];
var _crypto_auth_hmacsha512_keygen = Module["_crypto_auth_hmacsha512_keygen"] = asm["_crypto_auth_hmacsha512_keygen"];
var _crypto_box_curve25519xchacha20poly1305_sealbytes = Module["_crypto_box_curve25519xchacha20poly1305_sealbytes"] = asm["_crypto_box_curve25519xchacha20poly1305_sealbytes"];
var _crypto_box_detached_afternm = Module["_crypto_box_detached_afternm"] = asm["_crypto_box_detached_afternm"];
var _crypto_stream_salsa20_xor_ic = Module["_crypto_stream_salsa20_xor_ic"] = asm["_crypto_stream_salsa20_xor_ic"];
var _crypto_auth_hmacsha256_init = Module["_crypto_auth_hmacsha256_init"] = asm["_crypto_auth_hmacsha256_init"];
var _crypto_stream_chacha20_ietf_xor = Module["_crypto_stream_chacha20_ietf_xor"] = asm["_crypto_stream_chacha20_ietf_xor"];
var _crypto_auth_hmacsha512256_final = Module["_crypto_auth_hmacsha512256_final"] = asm["_crypto_auth_hmacsha512256_final"];
var _crypto_pwhash_argon2id_opslimit_sensitive = Module["_crypto_pwhash_argon2id_opslimit_sensitive"] = asm["_crypto_pwhash_argon2id_opslimit_sensitive"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _crypto_pwhash_argon2id_passwd_min = Module["_crypto_pwhash_argon2id_passwd_min"] = asm["_crypto_pwhash_argon2id_passwd_min"];
var _crypto_secretstream_xchacha20poly1305_keygen = Module["_crypto_secretstream_xchacha20poly1305_keygen"] = asm["_crypto_secretstream_xchacha20poly1305_keygen"];
var _crypto_aead_chacha20poly1305_ietf_nsecbytes = Module["_crypto_aead_chacha20poly1305_ietf_nsecbytes"] = asm["_crypto_aead_chacha20poly1305_ietf_nsecbytes"];
var _crypto_kdf_blake2b_derive_from_key = Module["_crypto_kdf_blake2b_derive_from_key"] = asm["_crypto_kdf_blake2b_derive_from_key"];
var _crypto_box_curve25519xsalsa20poly1305_keypair = Module["_crypto_box_curve25519xsalsa20poly1305_keypair"] = asm["_crypto_box_curve25519xsalsa20poly1305_keypair"];
var _crypto_hash_sha256_init = Module["_crypto_hash_sha256_init"] = asm["_crypto_hash_sha256_init"];
var _crypto_stream_xsalsa20_noncebytes = Module["_crypto_stream_xsalsa20_noncebytes"] = asm["_crypto_stream_xsalsa20_noncebytes"];
var _crypto_generichash_keybytes_max = Module["_crypto_generichash_keybytes_max"] = asm["_crypto_generichash_keybytes_max"];
var _crypto_verify_64 = Module["_crypto_verify_64"] = asm["_crypto_verify_64"];
var _crypto_pwhash_scryptsalsa208sha256 = Module["_crypto_pwhash_scryptsalsa208sha256"] = asm["_crypto_pwhash_scryptsalsa208sha256"];
var _crypto_box_curve25519xchacha20poly1305_keypair = Module["_crypto_box_curve25519xchacha20poly1305_keypair"] = asm["_crypto_box_curve25519xchacha20poly1305_keypair"];
var _crypto_box_curve25519xsalsa20poly1305_open = Module["_crypto_box_curve25519xsalsa20poly1305_open"] = asm["_crypto_box_curve25519xsalsa20poly1305_open"];
var _crypto_pwhash_memlimit_sensitive = Module["_crypto_pwhash_memlimit_sensitive"] = asm["_crypto_pwhash_memlimit_sensitive"];
var _crypto_pwhash_argon2i_opslimit_interactive = Module["_crypto_pwhash_argon2i_opslimit_interactive"] = asm["_crypto_pwhash_argon2i_opslimit_interactive"];
var _crypto_kdf_blake2b_keybytes = Module["_crypto_kdf_blake2b_keybytes"] = asm["_crypto_kdf_blake2b_keybytes"];
var _crypto_pwhash_argon2id_str = Module["_crypto_pwhash_argon2id_str"] = asm["_crypto_pwhash_argon2id_str"];
var _crypto_hash_sha512_update = Module["_crypto_hash_sha512_update"] = asm["_crypto_hash_sha512_update"];
var _crypto_core_hchacha20 = Module["_crypto_core_hchacha20"] = asm["_crypto_core_hchacha20"];
var _crypto_pwhash_bytes_min = Module["_crypto_pwhash_bytes_min"] = asm["_crypto_pwhash_bytes_min"];
var _crypto_secretbox_open = Module["_crypto_secretbox_open"] = asm["_crypto_secretbox_open"];
var _crypto_auth_hmacsha256_final = Module["_crypto_auth_hmacsha256_final"] = asm["_crypto_auth_hmacsha256_final"];
var _crypto_verify_16 = Module["_crypto_verify_16"] = asm["_crypto_verify_16"];
var _crypto_pwhash_argon2id = Module["_crypto_pwhash_argon2id"] = asm["_crypto_pwhash_argon2id"];
var _crypto_pwhash_scryptsalsa208sha256_memlimit_max = Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_max"] = asm["_crypto_pwhash_scryptsalsa208sha256_memlimit_max"];
var _crypto_pwhash_scryptsalsa208sha256_ll = Module["_crypto_pwhash_scryptsalsa208sha256_ll"] = asm["_crypto_pwhash_scryptsalsa208sha256_ll"];
var _crypto_pwhash_argon2id_memlimit_interactive = Module["_crypto_pwhash_argon2id_memlimit_interactive"] = asm["_crypto_pwhash_argon2id_memlimit_interactive"];
var _crypto_stream_salsa208_xor = Module["_crypto_stream_salsa208_xor"] = asm["_crypto_stream_salsa208_xor"];
var _crypto_secretbox_xsalsa20poly1305_keygen = Module["_crypto_secretbox_xsalsa20poly1305_keygen"] = asm["_crypto_secretbox_xsalsa20poly1305_keygen"];
var _crypto_aead_chacha20poly1305_abytes = Module["_crypto_aead_chacha20poly1305_abytes"] = asm["_crypto_aead_chacha20poly1305_abytes"];
var _crypto_pwhash_argon2i_bytes_max = Module["_crypto_pwhash_argon2i_bytes_max"] = asm["_crypto_pwhash_argon2i_bytes_max"];
var _crypto_box_curve25519xchacha20poly1305_easy_afternm = Module["_crypto_box_curve25519xchacha20poly1305_easy_afternm"] = asm["_crypto_box_curve25519xchacha20poly1305_easy_afternm"];
var _crypto_onetimeauth_poly1305_update = Module["_crypto_onetimeauth_poly1305_update"] = asm["_crypto_onetimeauth_poly1305_update"];
var _crypto_pwhash_memlimit_max = Module["_crypto_pwhash_memlimit_max"] = asm["_crypto_pwhash_memlimit_max"];
var _crypto_verify_64_bytes = Module["_crypto_verify_64_bytes"] = asm["_crypto_verify_64_bytes"];
var _crypto_onetimeauth_poly1305_keygen = Module["_crypto_onetimeauth_poly1305_keygen"] = asm["_crypto_onetimeauth_poly1305_keygen"];
var _crypto_generichash_blake2b_keygen = Module["_crypto_generichash_blake2b_keygen"] = asm["_crypto_generichash_blake2b_keygen"];
var _crypto_pwhash_argon2i_strprefix = Module["_crypto_pwhash_argon2i_strprefix"] = asm["_crypto_pwhash_argon2i_strprefix"];
var _crypto_auth_hmacsha256_update = Module["_crypto_auth_hmacsha256_update"] = asm["_crypto_auth_hmacsha256_update"];
var _crypto_aead_xchacha20poly1305_ietf_encrypt = Module["_crypto_aead_xchacha20poly1305_ietf_encrypt"] = asm["_crypto_aead_xchacha20poly1305_ietf_encrypt"];
var _crypto_pwhash_scryptsalsa208sha256_strbytes = Module["_crypto_pwhash_scryptsalsa208sha256_strbytes"] = asm["_crypto_pwhash_scryptsalsa208sha256_strbytes"];
var _crypto_stream_xsalsa20_keybytes = Module["_crypto_stream_xsalsa20_keybytes"] = asm["_crypto_stream_xsalsa20_keybytes"];
var _crypto_generichash_keygen = Module["_crypto_generichash_keygen"] = asm["_crypto_generichash_keygen"];
var _crypto_pwhash_argon2i_str = Module["_crypto_pwhash_argon2i_str"] = asm["_crypto_pwhash_argon2i_str"];
var _crypto_pwhash_argon2id_bytes_max = Module["_crypto_pwhash_argon2id_bytes_max"] = asm["_crypto_pwhash_argon2id_bytes_max"];
var _crypto_box_sealbytes = Module["_crypto_box_sealbytes"] = asm["_crypto_box_sealbytes"];
var _crypto_onetimeauth = Module["_crypto_onetimeauth"] = asm["_crypto_onetimeauth"];
var _crypto_secretbox_boxzerobytes = Module["_crypto_secretbox_boxzerobytes"] = asm["_crypto_secretbox_boxzerobytes"];
var _crypto_aead_chacha20poly1305_ietf_keygen = Module["_crypto_aead_chacha20poly1305_ietf_keygen"] = asm["_crypto_aead_chacha20poly1305_ietf_keygen"];
var _crypto_stream_chacha20 = Module["_crypto_stream_chacha20"] = asm["_crypto_stream_chacha20"];
var _crypto_box_open_afternm = Module["_crypto_box_open_afternm"] = asm["_crypto_box_open_afternm"];
var _sodium_bin2base64 = Module["_sodium_bin2base64"] = asm["_sodium_bin2base64"];
var _crypto_pwhash_opslimit_moderate = Module["_crypto_pwhash_opslimit_moderate"] = asm["_crypto_pwhash_opslimit_moderate"];
var _crypto_box_macbytes = Module["_crypto_box_macbytes"] = asm["_crypto_box_macbytes"];
var _crypto_shorthash_bytes = Module["_crypto_shorthash_bytes"] = asm["_crypto_shorthash_bytes"];
var _crypto_pwhash_argon2id_saltbytes = Module["_crypto_pwhash_argon2id_saltbytes"] = asm["_crypto_pwhash_argon2id_saltbytes"];
var _crypto_generichash_primitive = Module["_crypto_generichash_primitive"] = asm["_crypto_generichash_primitive"];
var _crypto_sign_ed25519_keypair = Module["_crypto_sign_ed25519_keypair"] = asm["_crypto_sign_ed25519_keypair"];
var _crypto_sign_ed25519ph_statebytes = Module["_crypto_sign_ed25519ph_statebytes"] = asm["_crypto_sign_ed25519ph_statebytes"];
var _crypto_aead_xchacha20poly1305_ietf_keybytes = Module["_crypto_aead_xchacha20poly1305_ietf_keybytes"] = asm["_crypto_aead_xchacha20poly1305_ietf_keybytes"];
var _crypto_secretstream_xchacha20poly1305_rekey = Module["_crypto_secretstream_xchacha20poly1305_rekey"] = asm["_crypto_secretstream_xchacha20poly1305_rekey"];
var _crypto_auth_primitive = Module["_crypto_auth_primitive"] = asm["_crypto_auth_primitive"];
var _crypto_core_salsa2012_keybytes = Module["_crypto_core_salsa2012_keybytes"] = asm["_crypto_core_salsa2012_keybytes"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _crypto_stream_noncebytes = Module["_crypto_stream_noncebytes"] = asm["_crypto_stream_noncebytes"];
var _crypto_secretbox_xchacha20poly1305_keybytes = Module["_crypto_secretbox_xchacha20poly1305_keybytes"] = asm["_crypto_secretbox_xchacha20poly1305_keybytes"];
var _crypto_secretbox_xsalsa20poly1305_keybytes = Module["_crypto_secretbox_xsalsa20poly1305_keybytes"] = asm["_crypto_secretbox_xsalsa20poly1305_keybytes"];
var _crypto_pwhash_saltbytes = Module["_crypto_pwhash_saltbytes"] = asm["_crypto_pwhash_saltbytes"];
var _crypto_secretbox_noncebytes = Module["_crypto_secretbox_noncebytes"] = asm["_crypto_secretbox_noncebytes"];
var _crypto_pwhash_str_alg = Module["_crypto_pwhash_str_alg"] = asm["_crypto_pwhash_str_alg"];
var _crypto_secretbox_xsalsa20poly1305_macbytes = Module["_crypto_secretbox_xsalsa20poly1305_macbytes"] = asm["_crypto_secretbox_xsalsa20poly1305_macbytes"];
var _crypto_pwhash_argon2i_opslimit_max = Module["_crypto_pwhash_argon2i_opslimit_max"] = asm["_crypto_pwhash_argon2i_opslimit_max"];
var _crypto_auth_hmacsha512_bytes = Module["_crypto_auth_hmacsha512_bytes"] = asm["_crypto_auth_hmacsha512_bytes"];
var _crypto_generichash_keybytes = Module["_crypto_generichash_keybytes"] = asm["_crypto_generichash_keybytes"];
var _crypto_hash_bytes = Module["_crypto_hash_bytes"] = asm["_crypto_hash_bytes"];
var _crypto_sign_publickeybytes = Module["_crypto_sign_publickeybytes"] = asm["_crypto_sign_publickeybytes"];
var _crypto_pwhash_argon2i_memlimit_moderate = Module["_crypto_pwhash_argon2i_memlimit_moderate"] = asm["_crypto_pwhash_argon2i_memlimit_moderate"];
var _crypto_generichash_blake2b = Module["_crypto_generichash_blake2b"] = asm["_crypto_generichash_blake2b"];
var _crypto_core_hchacha20_keybytes = Module["_crypto_core_hchacha20_keybytes"] = asm["_crypto_core_hchacha20_keybytes"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _crypto_pwhash_argon2i_opslimit_moderate = Module["_crypto_pwhash_argon2i_opslimit_moderate"] = asm["_crypto_pwhash_argon2i_opslimit_moderate"];
var _randombytes_implementation_name = Module["_randombytes_implementation_name"] = asm["_randombytes_implementation_name"];
var _crypto_stream_xchacha20_noncebytes = Module["_crypto_stream_xchacha20_noncebytes"] = asm["_crypto_stream_xchacha20_noncebytes"];
var _crypto_sign_ed25519_verify_detached = Module["_crypto_sign_ed25519_verify_detached"] = asm["_crypto_sign_ed25519_verify_detached"];
var _crypto_hash_sha512_statebytes = Module["_crypto_hash_sha512_statebytes"] = asm["_crypto_hash_sha512_statebytes"];
var _crypto_secretbox_primitive = Module["_crypto_secretbox_primitive"] = asm["_crypto_secretbox_primitive"];
var _crypto_verify_32_bytes = Module["_crypto_verify_32_bytes"] = asm["_crypto_verify_32_bytes"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _crypto_kdf_keygen = Module["_crypto_kdf_keygen"] = asm["_crypto_kdf_keygen"];
var _crypto_stream_xsalsa20_xor = Module["_crypto_stream_xsalsa20_xor"] = asm["_crypto_stream_xsalsa20_xor"];
var _crypto_stream_chacha20_ietf_keygen = Module["_crypto_stream_chacha20_ietf_keygen"] = asm["_crypto_stream_chacha20_ietf_keygen"];
var _crypto_stream_chacha20_keygen = Module["_crypto_stream_chacha20_keygen"] = asm["_crypto_stream_chacha20_keygen"];
var _crypto_box_easy = Module["_crypto_box_easy"] = asm["_crypto_box_easy"];
var _crypto_hash_sha256 = Module["_crypto_hash_sha256"] = asm["_crypto_hash_sha256"];
var _crypto_sign_ed25519_seedbytes = Module["_crypto_sign_ed25519_seedbytes"] = asm["_crypto_sign_ed25519_seedbytes"];
var _crypto_pwhash_alg_argon2i13 = Module["_crypto_pwhash_alg_argon2i13"] = asm["_crypto_pwhash_alg_argon2i13"];
var _crypto_box_curve25519xchacha20poly1305_seal_open = Module["_crypto_box_curve25519xchacha20poly1305_seal_open"] = asm["_crypto_box_curve25519xchacha20poly1305_seal_open"];
var _crypto_pwhash_opslimit_min = Module["_crypto_pwhash_opslimit_min"] = asm["_crypto_pwhash_opslimit_min"];
var _crypto_box_curve25519xsalsa20poly1305_publickeybytes = Module["_crypto_box_curve25519xsalsa20poly1305_publickeybytes"] = asm["_crypto_box_curve25519xsalsa20poly1305_publickeybytes"];
var _crypto_kdf_blake2b_bytes_max = Module["_crypto_kdf_blake2b_bytes_max"] = asm["_crypto_kdf_blake2b_bytes_max"];
var _crypto_hash_sha256_statebytes = Module["_crypto_hash_sha256_statebytes"] = asm["_crypto_hash_sha256_statebytes"];
var _crypto_stream_chacha20_ietf_noncebytes = Module["_crypto_stream_chacha20_ietf_noncebytes"] = asm["_crypto_stream_chacha20_ietf_noncebytes"];
var _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive = Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive"] = asm["_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive"];
var _crypto_box_curve25519xchacha20poly1305_open_easy = Module["_crypto_box_curve25519xchacha20poly1305_open_easy"] = asm["_crypto_box_curve25519xchacha20poly1305_open_easy"];
var _crypto_box_beforenm = Module["_crypto_box_beforenm"] = asm["_crypto_box_beforenm"];
var _crypto_box_curve25519xsalsa20poly1305_afternm = Module["_crypto_box_curve25519xsalsa20poly1305_afternm"] = asm["_crypto_box_curve25519xsalsa20poly1305_afternm"];
var _crypto_sign_statebytes = Module["_crypto_sign_statebytes"] = asm["_crypto_sign_statebytes"];
var _crypto_sign_open = Module["_crypto_sign_open"] = asm["_crypto_sign_open"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var _crypto_box_seed_keypair = Module["_crypto_box_seed_keypair"] = asm["_crypto_box_seed_keypair"];
var _crypto_auth_hmacsha512_init = Module["_crypto_auth_hmacsha512_init"] = asm["_crypto_auth_hmacsha512_init"];
var _crypto_pwhash_scryptsalsa208sha256_str_needs_rehash = Module["_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash"] = asm["_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash"];
var _crypto_sign_ed25519_sk_to_pk = Module["_crypto_sign_ed25519_sk_to_pk"] = asm["_crypto_sign_ed25519_sk_to_pk"];
var _crypto_scalarmult_curve25519 = Module["_crypto_scalarmult_curve25519"] = asm["_crypto_scalarmult_curve25519"];
var _crypto_box_open_easy = Module["_crypto_box_open_easy"] = asm["_crypto_box_open_easy"];
var _crypto_auth_hmacsha512 = Module["_crypto_auth_hmacsha512"] = asm["_crypto_auth_hmacsha512"];
var _crypto_stream_keygen = Module["_crypto_stream_keygen"] = asm["_crypto_stream_keygen"];
var _crypto_secretbox_xsalsa20poly1305_zerobytes = Module["_crypto_secretbox_xsalsa20poly1305_zerobytes"] = asm["_crypto_secretbox_xsalsa20poly1305_zerobytes"];
var _crypto_auth_hmacsha512256_keybytes = Module["_crypto_auth_hmacsha512256_keybytes"] = asm["_crypto_auth_hmacsha512256_keybytes"];
var _crypto_aead_chacha20poly1305_keybytes = Module["_crypto_aead_chacha20poly1305_keybytes"] = asm["_crypto_aead_chacha20poly1305_keybytes"];
var _crypto_secretstream_xchacha20poly1305_tag_message = Module["_crypto_secretstream_xchacha20poly1305_tag_message"] = asm["_crypto_secretstream_xchacha20poly1305_tag_message"];
var _free = Module["_free"] = asm["_free"];
var _crypto_kx_client_session_keys = Module["_crypto_kx_client_session_keys"] = asm["_crypto_kx_client_session_keys"];
var _crypto_sign_verify_detached = Module["_crypto_sign_verify_detached"] = asm["_crypto_sign_verify_detached"];
var _crypto_onetimeauth_poly1305_keybytes = Module["_crypto_onetimeauth_poly1305_keybytes"] = asm["_crypto_onetimeauth_poly1305_keybytes"];
var _crypto_sign_ed25519_secretkeybytes = Module["_crypto_sign_ed25519_secretkeybytes"] = asm["_crypto_sign_ed25519_secretkeybytes"];
var _crypto_kdf_blake2b_contextbytes = Module["_crypto_kdf_blake2b_contextbytes"] = asm["_crypto_kdf_blake2b_contextbytes"];
var _crypto_stream_salsa2012 = Module["_crypto_stream_salsa2012"] = asm["_crypto_stream_salsa2012"];
var _crypto_sign_seedbytes = Module["_crypto_sign_seedbytes"] = asm["_crypto_sign_seedbytes"];
var _crypto_box_curve25519xchacha20poly1305_beforenmbytes = Module["_crypto_box_curve25519xchacha20poly1305_beforenmbytes"] = asm["_crypto_box_curve25519xchacha20poly1305_beforenmbytes"];
var _randombytes_random = Module["_randombytes_random"] = asm["_randombytes_random"];
var _crypto_sign_ed25519ph_update = Module["_crypto_sign_ed25519ph_update"] = asm["_crypto_sign_ed25519ph_update"];
var _crypto_auth_hmacsha256_keygen = Module["_crypto_auth_hmacsha256_keygen"] = asm["_crypto_auth_hmacsha256_keygen"];
var _crypto_auth_hmacsha256_statebytes = Module["_crypto_auth_hmacsha256_statebytes"] = asm["_crypto_auth_hmacsha256_statebytes"];
var _randombytes_buf_deterministic = Module["_randombytes_buf_deterministic"] = asm["_randombytes_buf_deterministic"];
var _crypto_aead_chacha20poly1305_encrypt_detached = Module["_crypto_aead_chacha20poly1305_encrypt_detached"] = asm["_crypto_aead_chacha20poly1305_encrypt_detached"];
var _crypto_stream_xsalsa20_keygen = Module["_crypto_stream_xsalsa20_keygen"] = asm["_crypto_stream_xsalsa20_keygen"];
var _crypto_hash_primitive = Module["_crypto_hash_primitive"] = asm["_crypto_hash_primitive"];
var _crypto_pwhash_argon2id_passwd_max = Module["_crypto_pwhash_argon2id_passwd_max"] = asm["_crypto_pwhash_argon2id_passwd_max"];
var _crypto_shorthash_siphash24 = Module["_crypto_shorthash_siphash24"] = asm["_crypto_shorthash_siphash24"];
var _crypto_box_curve25519xsalsa20poly1305_macbytes = Module["_crypto_box_curve25519xsalsa20poly1305_macbytes"] = asm["_crypto_box_curve25519xsalsa20poly1305_macbytes"];
var _crypto_pwhash_scryptsalsa208sha256_saltbytes = Module["_crypto_pwhash_scryptsalsa208sha256_saltbytes"] = asm["_crypto_pwhash_scryptsalsa208sha256_saltbytes"];
var _crypto_sign_ed25519 = Module["_crypto_sign_ed25519"] = asm["_crypto_sign_ed25519"];
var _crypto_box_curve25519xchacha20poly1305_seal = Module["_crypto_box_curve25519xchacha20poly1305_seal"] = asm["_crypto_box_curve25519xchacha20poly1305_seal"];
var _crypto_core_salsa20_constbytes = Module["_crypto_core_salsa20_constbytes"] = asm["_crypto_core_salsa20_constbytes"];
var _crypto_pwhash_argon2id_str_verify = Module["_crypto_pwhash_argon2id_str_verify"] = asm["_crypto_pwhash_argon2id_str_verify"];
var _crypto_box_boxzerobytes = Module["_crypto_box_boxzerobytes"] = asm["_crypto_box_boxzerobytes"];
var _crypto_pwhash_argon2i_saltbytes = Module["_crypto_pwhash_argon2i_saltbytes"] = asm["_crypto_pwhash_argon2i_saltbytes"];
var _crypto_box_curve25519xchacha20poly1305_open_detached_afternm = Module["_crypto_box_curve25519xchacha20poly1305_open_detached_afternm"] = asm["_crypto_box_curve25519xchacha20poly1305_open_detached_afternm"];
var _crypto_box_curve25519xsalsa20poly1305_beforenmbytes = Module["_crypto_box_curve25519xsalsa20poly1305_beforenmbytes"] = asm["_crypto_box_curve25519xsalsa20poly1305_beforenmbytes"];
var _crypto_stream_xchacha20_keygen = Module["_crypto_stream_xchacha20_keygen"] = asm["_crypto_stream_xchacha20_keygen"];
var _crypto_core_hchacha20_constbytes = Module["_crypto_core_hchacha20_constbytes"] = asm["_crypto_core_hchacha20_constbytes"];
var _crypto_stream_xchacha20_xor = Module["_crypto_stream_xchacha20_xor"] = asm["_crypto_stream_xchacha20_xor"];
var _randombytes_seedbytes = Module["_randombytes_seedbytes"] = asm["_randombytes_seedbytes"];
var _crypto_sign_final_create = Module["_crypto_sign_final_create"] = asm["_crypto_sign_final_create"];
var _crypto_kx_secretkeybytes = Module["_crypto_kx_secretkeybytes"] = asm["_crypto_kx_secretkeybytes"];
var _crypto_box_detached = Module["_crypto_box_detached"] = asm["_crypto_box_detached"];
var _randombytes_buf = Module["_randombytes_buf"] = asm["_randombytes_buf"];
var _crypto_generichash_blake2b_saltbytes = Module["_crypto_generichash_blake2b_saltbytes"] = asm["_crypto_generichash_blake2b_saltbytes"];
var _crypto_box_open_detached = Module["_crypto_box_open_detached"] = asm["_crypto_box_open_detached"];
var _crypto_kx_seedbytes = Module["_crypto_kx_seedbytes"] = asm["_crypto_kx_seedbytes"];
var _crypto_pwhash_argon2id_strprefix = Module["_crypto_pwhash_argon2id_strprefix"] = asm["_crypto_pwhash_argon2id_strprefix"];
var _crypto_box_curve25519xchacha20poly1305_open_detached = Module["_crypto_box_curve25519xchacha20poly1305_open_detached"] = asm["_crypto_box_curve25519xchacha20poly1305_open_detached"];
var _crypto_generichash_blake2b_keybytes = Module["_crypto_generichash_blake2b_keybytes"] = asm["_crypto_generichash_blake2b_keybytes"];
var _crypto_box_curve25519xchacha20poly1305_easy = Module["_crypto_box_curve25519xchacha20poly1305_easy"] = asm["_crypto_box_curve25519xchacha20poly1305_easy"];
var _crypto_pwhash_argon2i_bytes_min = Module["_crypto_pwhash_argon2i_bytes_min"] = asm["_crypto_pwhash_argon2i_bytes_min"];
var _crypto_pwhash_scryptsalsa208sha256_str = Module["_crypto_pwhash_scryptsalsa208sha256_str"] = asm["_crypto_pwhash_scryptsalsa208sha256_str"];
var _crypto_pwhash_argon2id_bytes_min = Module["_crypto_pwhash_argon2id_bytes_min"] = asm["_crypto_pwhash_argon2id_bytes_min"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _crypto_box_seedbytes = Module["_crypto_box_seedbytes"] = asm["_crypto_box_seedbytes"];
var _crypto_generichash_blake2b_bytes_min = Module["_crypto_generichash_blake2b_bytes_min"] = asm["_crypto_generichash_blake2b_bytes_min"];
var _crypto_hash = Module["_crypto_hash"] = asm["_crypto_hash"];
var _crypto_generichash_blake2b_statebytes = Module["_crypto_generichash_blake2b_statebytes"] = asm["_crypto_generichash_blake2b_statebytes"];
var _crypto_box_curve25519xsalsa20poly1305_beforenm = Module["_crypto_box_curve25519xsalsa20poly1305_beforenm"] = asm["_crypto_box_curve25519xsalsa20poly1305_beforenm"];
var _crypto_secretstream_xchacha20poly1305_headerbytes = Module["_crypto_secretstream_xchacha20poly1305_headerbytes"] = asm["_crypto_secretstream_xchacha20poly1305_headerbytes"];
var _crypto_sign_ed25519ph_final_create = Module["_crypto_sign_ed25519ph_final_create"] = asm["_crypto_sign_ed25519ph_final_create"];
var _crypto_aead_chacha20poly1305_ietf_decrypt_detached = Module["_crypto_aead_chacha20poly1305_ietf_decrypt_detached"] = asm["_crypto_aead_chacha20poly1305_ietf_decrypt_detached"];
var _crypto_generichash_final = Module["_crypto_generichash_final"] = asm["_crypto_generichash_final"];
var _crypto_auth_hmacsha512_update = Module["_crypto_auth_hmacsha512_update"] = asm["_crypto_auth_hmacsha512_update"];
var _crypto_auth_hmacsha256 = Module["_crypto_auth_hmacsha256"] = asm["_crypto_auth_hmacsha256"];
var _crypto_box_keypair = Module["_crypto_box_keypair"] = asm["_crypto_box_keypair"];
var _crypto_hash_sha256_bytes = Module["_crypto_hash_sha256_bytes"] = asm["_crypto_hash_sha256_bytes"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _crypto_pwhash_argon2i_passwd_max = Module["_crypto_pwhash_argon2i_passwd_max"] = asm["_crypto_pwhash_argon2i_passwd_max"];
var _sodium_init = Module["_sodium_init"] = asm["_sodium_init"];
var _crypto_secretbox_macbytes = Module["_crypto_secretbox_macbytes"] = asm["_crypto_secretbox_macbytes"];
var _crypto_aead_xchacha20poly1305_ietf_npubbytes = Module["_crypto_aead_xchacha20poly1305_ietf_npubbytes"] = asm["_crypto_aead_xchacha20poly1305_ietf_npubbytes"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _crypto_pwhash_argon2i_opslimit_min = Module["_crypto_pwhash_argon2i_opslimit_min"] = asm["_crypto_pwhash_argon2i_opslimit_min"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _crypto_shorthash_siphash24_keybytes = Module["_crypto_shorthash_siphash24_keybytes"] = asm["_crypto_shorthash_siphash24_keybytes"];
var _crypto_core_hchacha20_inputbytes = Module["_crypto_core_hchacha20_inputbytes"] = asm["_crypto_core_hchacha20_inputbytes"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _crypto_core_salsa2012_constbytes = Module["_crypto_core_salsa2012_constbytes"] = asm["_crypto_core_salsa2012_constbytes"];
var _crypto_kx_seed_keypair = Module["_crypto_kx_seed_keypair"] = asm["_crypto_kx_seed_keypair"];
var _crypto_box_curve25519xchacha20poly1305_detached_afternm = Module["_crypto_box_curve25519xchacha20poly1305_detached_afternm"] = asm["_crypto_box_curve25519xchacha20poly1305_detached_afternm"];
var _crypto_box_curve25519xsalsa20poly1305 = Module["_crypto_box_curve25519xsalsa20poly1305"] = asm["_crypto_box_curve25519xsalsa20poly1305"];
var _crypto_aead_chacha20poly1305_nsecbytes = Module["_crypto_aead_chacha20poly1305_nsecbytes"] = asm["_crypto_aead_chacha20poly1305_nsecbytes"];
var _sodium_library_minimal = Module["_sodium_library_minimal"] = asm["_sodium_library_minimal"];
var _crypto_secretstream_xchacha20poly1305_keybytes = Module["_crypto_secretstream_xchacha20poly1305_keybytes"] = asm["_crypto_secretstream_xchacha20poly1305_keybytes"];
var _crypto_secretstream_xchacha20poly1305_pull = Module["_crypto_secretstream_xchacha20poly1305_pull"] = asm["_crypto_secretstream_xchacha20poly1305_pull"];
var _crypto_pwhash_argon2i_strbytes = Module["_crypto_pwhash_argon2i_strbytes"] = asm["_crypto_pwhash_argon2i_strbytes"];
var _crypto_pwhash_argon2i_memlimit_max = Module["_crypto_pwhash_argon2i_memlimit_max"] = asm["_crypto_pwhash_argon2i_memlimit_max"];
var _crypto_generichash_blake2b_salt_personal = Module["_crypto_generichash_blake2b_salt_personal"] = asm["_crypto_generichash_blake2b_salt_personal"];
var _crypto_kdf_derive_from_key = Module["_crypto_kdf_derive_from_key"] = asm["_crypto_kdf_derive_from_key"];
var _crypto_secretbox_xsalsa20poly1305_noncebytes = Module["_crypto_secretbox_xsalsa20poly1305_noncebytes"] = asm["_crypto_secretbox_xsalsa20poly1305_noncebytes"];
var _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive = Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive"] = asm["_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive"];
var _crypto_pwhash_argon2i_memlimit_interactive = Module["_crypto_pwhash_argon2i_memlimit_interactive"] = asm["_crypto_pwhash_argon2i_memlimit_interactive"];
var _crypto_pwhash_alg_argon2id13 = Module["_crypto_pwhash_alg_argon2id13"] = asm["_crypto_pwhash_alg_argon2id13"];
var _crypto_stream_keybytes = Module["_crypto_stream_keybytes"] = asm["_crypto_stream_keybytes"];
var _crypto_pwhash_memlimit_min = Module["_crypto_pwhash_memlimit_min"] = asm["_crypto_pwhash_memlimit_min"];
var _crypto_aead_chacha20poly1305_ietf_npubbytes = Module["_crypto_aead_chacha20poly1305_ietf_npubbytes"] = asm["_crypto_aead_chacha20poly1305_ietf_npubbytes"];
var _crypto_stream_salsa208_noncebytes = Module["_crypto_stream_salsa208_noncebytes"] = asm["_crypto_stream_salsa208_noncebytes"];
var _sodium_library_version_minor = Module["_sodium_library_version_minor"] = asm["_sodium_library_version_minor"];
var _crypto_onetimeauth_bytes = Module["_crypto_onetimeauth_bytes"] = asm["_crypto_onetimeauth_bytes"];
var _crypto_box_open = Module["_crypto_box_open"] = asm["_crypto_box_open"];
var _crypto_secretbox_xchacha20poly1305_open_easy = Module["_crypto_secretbox_xchacha20poly1305_open_easy"] = asm["_crypto_secretbox_xchacha20poly1305_open_easy"];
var _crypto_scalarmult_curve25519_base = Module["_crypto_scalarmult_curve25519_base"] = asm["_crypto_scalarmult_curve25519_base"];
var _crypto_sign_ed25519_open = Module["_crypto_sign_ed25519_open"] = asm["_crypto_sign_ed25519_open"];
var _crypto_stream_chacha20_ietf_keybytes = Module["_crypto_stream_chacha20_ietf_keybytes"] = asm["_crypto_stream_chacha20_ietf_keybytes"];
var _crypto_box_noncebytes = Module["_crypto_box_noncebytes"] = asm["_crypto_box_noncebytes"];
var _crypto_pwhash_argon2i_str_needs_rehash = Module["_crypto_pwhash_argon2i_str_needs_rehash"] = asm["_crypto_pwhash_argon2i_str_needs_rehash"];
var _crypto_core_hchacha20_outputbytes = Module["_crypto_core_hchacha20_outputbytes"] = asm["_crypto_core_hchacha20_outputbytes"];
var _crypto_stream_salsa2012_xor = Module["_crypto_stream_salsa2012_xor"] = asm["_crypto_stream_salsa2012_xor"];
var _crypto_onetimeauth_keygen = Module["_crypto_onetimeauth_keygen"] = asm["_crypto_onetimeauth_keygen"];
var _crypto_pwhash_strbytes = Module["_crypto_pwhash_strbytes"] = asm["_crypto_pwhash_strbytes"];
var _crypto_auth_hmacsha512256_update = Module["_crypto_auth_hmacsha512256_update"] = asm["_crypto_auth_hmacsha512256_update"];
var _crypto_core_salsa208_outputbytes = Module["_crypto_core_salsa208_outputbytes"] = asm["_crypto_core_salsa208_outputbytes"];
var _crypto_onetimeauth_poly1305 = Module["_crypto_onetimeauth_poly1305"] = asm["_crypto_onetimeauth_poly1305"];
var _crypto_secretbox_xchacha20poly1305_macbytes = Module["_crypto_secretbox_xchacha20poly1305_macbytes"] = asm["_crypto_secretbox_xchacha20poly1305_macbytes"];
var _crypto_kdf_bytes_min = Module["_crypto_kdf_bytes_min"] = asm["_crypto_kdf_bytes_min"];
var _crypto_sign_ed25519_sk_to_seed = Module["_crypto_sign_ed25519_sk_to_seed"] = asm["_crypto_sign_ed25519_sk_to_seed"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive = Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive"] = asm["_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive"];
var _crypto_stream_xsalsa20 = Module["_crypto_stream_xsalsa20"] = asm["_crypto_stream_xsalsa20"];
var _crypto_box_open_easy_afternm = Module["_crypto_box_open_easy_afternm"] = asm["_crypto_box_open_easy_afternm"];
var _crypto_box_curve25519xsalsa20poly1305_seedbytes = Module["_crypto_box_curve25519xsalsa20poly1305_seedbytes"] = asm["_crypto_box_curve25519xsalsa20poly1305_seedbytes"];
var _crypto_stream_salsa20_keybytes = Module["_crypto_stream_salsa20_keybytes"] = asm["_crypto_stream_salsa20_keybytes"];
var _crypto_kdf_primitive = Module["_crypto_kdf_primitive"] = asm["_crypto_kdf_primitive"];
var _crypto_sign_ed25519ph_final_verify = Module["_crypto_sign_ed25519ph_final_verify"] = asm["_crypto_sign_ed25519ph_final_verify"];
var _crypto_sign_ed25519_publickeybytes = Module["_crypto_sign_ed25519_publickeybytes"] = asm["_crypto_sign_ed25519_publickeybytes"];
var _crypto_shorthash = Module["_crypto_shorthash"] = asm["_crypto_shorthash"];
var _crypto_auth_keybytes = Module["_crypto_auth_keybytes"] = asm["_crypto_auth_keybytes"];
var _crypto_box_curve25519xsalsa20poly1305_open_afternm = Module["_crypto_box_curve25519xsalsa20poly1305_open_afternm"] = asm["_crypto_box_curve25519xsalsa20poly1305_open_afternm"];
var _crypto_aead_chacha20poly1305_npubbytes = Module["_crypto_aead_chacha20poly1305_npubbytes"] = asm["_crypto_aead_chacha20poly1305_npubbytes"];
var _crypto_aead_xchacha20poly1305_ietf_abytes = Module["_crypto_aead_xchacha20poly1305_ietf_abytes"] = asm["_crypto_aead_xchacha20poly1305_ietf_abytes"];
var _crypto_onetimeauth_poly1305_final = Module["_crypto_onetimeauth_poly1305_final"] = asm["_crypto_onetimeauth_poly1305_final"];
var _crypto_onetimeauth_poly1305_bytes = Module["_crypto_onetimeauth_poly1305_bytes"] = asm["_crypto_onetimeauth_poly1305_bytes"];
var _crypto_box_curve25519xsalsa20poly1305_seed_keypair = Module["_crypto_box_curve25519xsalsa20poly1305_seed_keypair"] = asm["_crypto_box_curve25519xsalsa20poly1305_seed_keypair"];
var _crypto_box_primitive = Module["_crypto_box_primitive"] = asm["_crypto_box_primitive"];
var _crypto_pwhash_str = Module["_crypto_pwhash_str"] = asm["_crypto_pwhash_str"];
var _crypto_auth_hmacsha512_keybytes = Module["_crypto_auth_hmacsha512_keybytes"] = asm["_crypto_auth_hmacsha512_keybytes"];
var _crypto_auth = Module["_crypto_auth"] = asm["_crypto_auth"];
var _crypto_pwhash_scryptsalsa208sha256_bytes_min = Module["_crypto_pwhash_scryptsalsa208sha256_bytes_min"] = asm["_crypto_pwhash_scryptsalsa208sha256_bytes_min"];
var _crypto_core_salsa20_keybytes = Module["_crypto_core_salsa20_keybytes"] = asm["_crypto_core_salsa20_keybytes"];
var _crypto_box_afternm = Module["_crypto_box_afternm"] = asm["_crypto_box_afternm"];
var _crypto_core_salsa208_constbytes = Module["_crypto_core_salsa208_constbytes"] = asm["_crypto_core_salsa208_constbytes"];
var _crypto_pwhash_argon2id_memlimit_sensitive = Module["_crypto_pwhash_argon2id_memlimit_sensitive"] = asm["_crypto_pwhash_argon2id_memlimit_sensitive"];
var _crypto_onetimeauth_primitive = Module["_crypto_onetimeauth_primitive"] = asm["_crypto_onetimeauth_primitive"];
var _crypto_pwhash_scryptsalsa208sha256_str_verify = Module["_crypto_pwhash_scryptsalsa208sha256_str_verify"] = asm["_crypto_pwhash_scryptsalsa208sha256_str_verify"];
var _sodium_version_string = Module["_sodium_version_string"] = asm["_sodium_version_string"];
var _crypto_stream_xchacha20_xor_ic = Module["_crypto_stream_xchacha20_xor_ic"] = asm["_crypto_stream_xchacha20_xor_ic"];
var _crypto_pwhash_scryptsalsa208sha256_passwd_min = Module["_crypto_pwhash_scryptsalsa208sha256_passwd_min"] = asm["_crypto_pwhash_scryptsalsa208sha256_passwd_min"];
var _crypto_stream_chacha20_ietf = Module["_crypto_stream_chacha20_ietf"] = asm["_crypto_stream_chacha20_ietf"];
var _crypto_generichash = Module["_crypto_generichash"] = asm["_crypto_generichash"];
var _crypto_core_hsalsa20_outputbytes = Module["_crypto_core_hsalsa20_outputbytes"] = asm["_crypto_core_hsalsa20_outputbytes"];
var _crypto_pwhash_opslimit_interactive = Module["_crypto_pwhash_opslimit_interactive"] = asm["_crypto_pwhash_opslimit_interactive"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _crypto_box_curve25519xsalsa20poly1305_noncebytes = Module["_crypto_box_curve25519xsalsa20poly1305_noncebytes"] = asm["_crypto_box_curve25519xsalsa20poly1305_noncebytes"];
var _crypto_stream_salsa2012_noncebytes = Module["_crypto_stream_salsa2012_noncebytes"] = asm["_crypto_stream_salsa2012_noncebytes"];
var _crypto_core_salsa208_keybytes = Module["_crypto_core_salsa208_keybytes"] = asm["_crypto_core_salsa208_keybytes"];
var _crypto_secretstream_xchacha20poly1305_tag_final = Module["_crypto_secretstream_xchacha20poly1305_tag_final"] = asm["_crypto_secretstream_xchacha20poly1305_tag_final"];
var _crypto_aead_chacha20poly1305_ietf_keybytes = Module["_crypto_aead_chacha20poly1305_ietf_keybytes"] = asm["_crypto_aead_chacha20poly1305_ietf_keybytes"];
var _crypto_aead_chacha20poly1305_ietf_decrypt = Module["_crypto_aead_chacha20poly1305_ietf_decrypt"] = asm["_crypto_aead_chacha20poly1305_ietf_decrypt"];
var _crypto_auth_hmacsha512256_init = Module["_crypto_auth_hmacsha512256_init"] = asm["_crypto_auth_hmacsha512256_init"];
var _crypto_kx_server_session_keys = Module["_crypto_kx_server_session_keys"] = asm["_crypto_kx_server_session_keys"];
var _crypto_onetimeauth_poly1305_verify = Module["_crypto_onetimeauth_poly1305_verify"] = asm["_crypto_onetimeauth_poly1305_verify"];
var _crypto_auth_hmacsha512_final = Module["_crypto_auth_hmacsha512_final"] = asm["_crypto_auth_hmacsha512_final"];
var _crypto_auth_hmacsha512256_verify = Module["_crypto_auth_hmacsha512256_verify"] = asm["_crypto_auth_hmacsha512256_verify"];
var _crypto_box_secretkeybytes = Module["_crypto_box_secretkeybytes"] = asm["_crypto_box_secretkeybytes"];
var _crypto_stream_salsa2012_keygen = Module["_crypto_stream_salsa2012_keygen"] = asm["_crypto_stream_salsa2012_keygen"];
var _crypto_onetimeauth_update = Module["_crypto_onetimeauth_update"] = asm["_crypto_onetimeauth_update"];
var _crypto_core_salsa20 = Module["_crypto_core_salsa20"] = asm["_crypto_core_salsa20"];
var _crypto_secretstream_xchacha20poly1305_abytes = Module["_crypto_secretstream_xchacha20poly1305_abytes"] = asm["_crypto_secretstream_xchacha20poly1305_abytes"];
var _crypto_pwhash_memlimit_interactive = Module["_crypto_pwhash_memlimit_interactive"] = asm["_crypto_pwhash_memlimit_interactive"];
var _crypto_scalarmult_bytes = Module["_crypto_scalarmult_bytes"] = asm["_crypto_scalarmult_bytes"];
var _crypto_secretbox_zerobytes = Module["_crypto_secretbox_zerobytes"] = asm["_crypto_secretbox_zerobytes"];
var _crypto_pwhash_argon2id_memlimit_moderate = Module["_crypto_pwhash_argon2id_memlimit_moderate"] = asm["_crypto_pwhash_argon2id_memlimit_moderate"];
var _crypto_secretbox_detached = Module["_crypto_secretbox_detached"] = asm["_crypto_secretbox_detached"];
var _crypto_stream_xor = Module["_crypto_stream_xor"] = asm["_crypto_stream_xor"];
var _crypto_secretbox_xchacha20poly1305_easy = Module["_crypto_secretbox_xchacha20poly1305_easy"] = asm["_crypto_secretbox_xchacha20poly1305_easy"];
var _crypto_secretbox_easy = Module["_crypto_secretbox_easy"] = asm["_crypto_secretbox_easy"];
var _crypto_secretstream_xchacha20poly1305_init_pull = Module["_crypto_secretstream_xchacha20poly1305_init_pull"] = asm["_crypto_secretstream_xchacha20poly1305_init_pull"];
var _crypto_aead_xchacha20poly1305_ietf_decrypt_detached = Module["_crypto_aead_xchacha20poly1305_ietf_decrypt_detached"] = asm["_crypto_aead_xchacha20poly1305_ietf_decrypt_detached"];
var _crypto_stream_salsa20 = Module["_crypto_stream_salsa20"] = asm["_crypto_stream_salsa20"];
var _sodium_base642bin = Module["_sodium_base642bin"] = asm["_sodium_base642bin"];
var _sodium_bin2hex = Module["_sodium_bin2hex"] = asm["_sodium_bin2hex"];
var _crypto_auth_hmacsha512_statebytes = Module["_crypto_auth_hmacsha512_statebytes"] = asm["_crypto_auth_hmacsha512_statebytes"];
var _crypto_pwhash_argon2i_opslimit_sensitive = Module["_crypto_pwhash_argon2i_opslimit_sensitive"] = asm["_crypto_pwhash_argon2i_opslimit_sensitive"];
var _crypto_generichash_blake2b_bytes_max = Module["_crypto_generichash_blake2b_bytes_max"] = asm["_crypto_generichash_blake2b_bytes_max"];
var _crypto_hash_sha256_update = Module["_crypto_hash_sha256_update"] = asm["_crypto_hash_sha256_update"];
var _crypto_core_hsalsa20_constbytes = Module["_crypto_core_hsalsa20_constbytes"] = asm["_crypto_core_hsalsa20_constbytes"];
var _crypto_box_easy_afternm = Module["_crypto_box_easy_afternm"] = asm["_crypto_box_easy_afternm"];
var _crypto_pwhash_memlimit_moderate = Module["_crypto_pwhash_memlimit_moderate"] = asm["_crypto_pwhash_memlimit_moderate"];
var _crypto_core_salsa20_inputbytes = Module["_crypto_core_salsa20_inputbytes"] = asm["_crypto_core_salsa20_inputbytes"];
var _crypto_box_publickeybytes = Module["_crypto_box_publickeybytes"] = asm["_crypto_box_publickeybytes"];
var _crypto_sign_secretkeybytes = Module["_crypto_sign_secretkeybytes"] = asm["_crypto_sign_secretkeybytes"];
var _crypto_scalarmult_scalarbytes = Module["_crypto_scalarmult_scalarbytes"] = asm["_crypto_scalarmult_scalarbytes"];
var _crypto_verify_32 = Module["_crypto_verify_32"] = asm["_crypto_verify_32"];
var _crypto_secretstream_xchacha20poly1305_statebytes = Module["_crypto_secretstream_xchacha20poly1305_statebytes"] = asm["_crypto_secretstream_xchacha20poly1305_statebytes"];
var _crypto_kx_sessionkeybytes = Module["_crypto_kx_sessionkeybytes"] = asm["_crypto_kx_sessionkeybytes"];
var _crypto_aead_chacha20poly1305_decrypt = Module["_crypto_aead_chacha20poly1305_decrypt"] = asm["_crypto_aead_chacha20poly1305_decrypt"];
var _crypto_pwhash_argon2id_opslimit_moderate = Module["_crypto_pwhash_argon2id_opslimit_moderate"] = asm["_crypto_pwhash_argon2id_opslimit_moderate"];
var _crypto_pwhash_argon2id_opslimit_min = Module["_crypto_pwhash_argon2id_opslimit_min"] = asm["_crypto_pwhash_argon2id_opslimit_min"];
var _crypto_sign = Module["_crypto_sign"] = asm["_crypto_sign"];
var _crypto_pwhash_argon2id_memlimit_min = Module["_crypto_pwhash_argon2id_memlimit_min"] = asm["_crypto_pwhash_argon2id_memlimit_min"];
var _crypto_pwhash_passwd_max = Module["_crypto_pwhash_passwd_max"] = asm["_crypto_pwhash_passwd_max"];
var _crypto_pwhash_scryptsalsa208sha256_opslimit_min = Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_min"] = asm["_crypto_pwhash_scryptsalsa208sha256_opslimit_min"];
var _sodium_hex2bin = Module["_sodium_hex2bin"] = asm["_sodium_hex2bin"];
var _crypto_pwhash_argon2i_alg_argon2i13 = Module["_crypto_pwhash_argon2i_alg_argon2i13"] = asm["_crypto_pwhash_argon2i_alg_argon2i13"];
var _crypto_secretbox_keybytes = Module["_crypto_secretbox_keybytes"] = asm["_crypto_secretbox_keybytes"];
var _crypto_pwhash_argon2id_alg_argon2id13 = Module["_crypto_pwhash_argon2id_alg_argon2id13"] = asm["_crypto_pwhash_argon2id_alg_argon2id13"];
var _randombytes = Module["_randombytes"] = asm["_randombytes"];
var _crypto_aead_chacha20poly1305_ietf_abytes = Module["_crypto_aead_chacha20poly1305_ietf_abytes"] = asm["_crypto_aead_chacha20poly1305_ietf_abytes"];
var _crypto_stream_salsa20_keygen = Module["_crypto_stream_salsa20_keygen"] = asm["_crypto_stream_salsa20_keygen"];
var _crypto_pwhash_str_needs_rehash = Module["_crypto_pwhash_str_needs_rehash"] = asm["_crypto_pwhash_str_needs_rehash"];
var _crypto_generichash_bytes_max = Module["_crypto_generichash_bytes_max"] = asm["_crypto_generichash_bytes_max"];
var _crypto_pwhash_argon2i_passwd_min = Module["_crypto_pwhash_argon2i_passwd_min"] = asm["_crypto_pwhash_argon2i_passwd_min"];
var _crypto_pwhash_opslimit_sensitive = Module["_crypto_pwhash_opslimit_sensitive"] = asm["_crypto_pwhash_opslimit_sensitive"];
var _crypto_sign_init = Module["_crypto_sign_init"] = asm["_crypto_sign_init"];
var _crypto_generichash_blake2b_personalbytes = Module["_crypto_generichash_blake2b_personalbytes"] = asm["_crypto_generichash_blake2b_personalbytes"];
var _crypto_stream_chacha20_xor_ic = Module["_crypto_stream_chacha20_xor_ic"] = asm["_crypto_stream_chacha20_xor_ic"];
var _crypto_box_curve25519xchacha20poly1305_seedbytes = Module["_crypto_box_curve25519xchacha20poly1305_seedbytes"] = asm["_crypto_box_curve25519xchacha20poly1305_seedbytes"];
var _crypto_onetimeauth_verify = Module["_crypto_onetimeauth_verify"] = asm["_crypto_onetimeauth_verify"];
var _crypto_sign_ed25519_detached = Module["_crypto_sign_ed25519_detached"] = asm["_crypto_sign_ed25519_detached"];
var _crypto_generichash_init = Module["_crypto_generichash_init"] = asm["_crypto_generichash_init"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _crypto_sign_bytes = Module["_crypto_sign_bytes"] = asm["_crypto_sign_bytes"];
var _crypto_generichash_update = Module["_crypto_generichash_update"] = asm["_crypto_generichash_update"];
var _crypto_scalarmult = Module["_crypto_scalarmult"] = asm["_crypto_scalarmult"];
var _crypto_sign_detached = Module["_crypto_sign_detached"] = asm["_crypto_sign_detached"];
var _crypto_generichash_blake2b_update = Module["_crypto_generichash_blake2b_update"] = asm["_crypto_generichash_blake2b_update"];
var _sodium_base64_encoded_len = Module["_sodium_base64_encoded_len"] = asm["_sodium_base64_encoded_len"];
var _crypto_generichash_blake2b_bytes = Module["_crypto_generichash_blake2b_bytes"] = asm["_crypto_generichash_blake2b_bytes"];
var _crypto_auth_hmacsha512256_bytes = Module["_crypto_auth_hmacsha512256_bytes"] = asm["_crypto_auth_hmacsha512256_bytes"];
var _crypto_box_curve25519xchacha20poly1305_noncebytes = Module["_crypto_box_curve25519xchacha20poly1305_noncebytes"] = asm["_crypto_box_curve25519xchacha20poly1305_noncebytes"];
var _randombytes_uniform = Module["_randombytes_uniform"] = asm["_randombytes_uniform"];
var _crypto_sign_seed_keypair = Module["_crypto_sign_seed_keypair"] = asm["_crypto_sign_seed_keypair"];
var _crypto_shorthash_keygen = Module["_crypto_shorthash_keygen"] = asm["_crypto_shorthash_keygen"];
var _crypto_onetimeauth_init = Module["_crypto_onetimeauth_init"] = asm["_crypto_onetimeauth_init"];
var _crypto_sign_ed25519_seed_keypair = Module["_crypto_sign_ed25519_seed_keypair"] = asm["_crypto_sign_ed25519_seed_keypair"];
var _crypto_secretstream_xchacha20poly1305_init_push = Module["_crypto_secretstream_xchacha20poly1305_init_push"] = asm["_crypto_secretstream_xchacha20poly1305_init_push"];
var _crypto_stream_salsa20_xor = Module["_crypto_stream_salsa20_xor"] = asm["_crypto_stream_salsa20_xor"];
var _crypto_auth_hmacsha512_verify = Module["_crypto_auth_hmacsha512_verify"] = asm["_crypto_auth_hmacsha512_verify"];
var _crypto_generichash_blake2b_keybytes_min = Module["_crypto_generichash_blake2b_keybytes_min"] = asm["_crypto_generichash_blake2b_keybytes_min"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _crypto_kx_publickeybytes = Module["_crypto_kx_publickeybytes"] = asm["_crypto_kx_publickeybytes"];
var _crypto_pwhash_bytes_max = Module["_crypto_pwhash_bytes_max"] = asm["_crypto_pwhash_bytes_max"];
var _crypto_pwhash_argon2id_str_needs_rehash = Module["_crypto_pwhash_argon2id_str_needs_rehash"] = asm["_crypto_pwhash_argon2id_str_needs_rehash"];
var _crypto_aead_chacha20poly1305_ietf_encrypt_detached = Module["_crypto_aead_chacha20poly1305_ietf_encrypt_detached"] = asm["_crypto_aead_chacha20poly1305_ietf_encrypt_detached"];
var _sodium_pad = Module["_sodium_pad"] = asm["_sodium_pad"];
var _crypto_stream = Module["_crypto_stream"] = asm["_crypto_stream"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _crypto_box_curve25519xchacha20poly1305_beforenm = Module["_crypto_box_curve25519xchacha20poly1305_beforenm"] = asm["_crypto_box_curve25519xchacha20poly1305_beforenm"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _crypto_pwhash = Module["_crypto_pwhash"] = asm["_crypto_pwhash"];
var _crypto_auth_hmacsha512256 = Module["_crypto_auth_hmacsha512256"] = asm["_crypto_auth_hmacsha512256"];
var _crypto_secretbox_xsalsa20poly1305 = Module["_crypto_secretbox_xsalsa20poly1305"] = asm["_crypto_secretbox_xsalsa20poly1305"];
var _crypto_verify_16_bytes = Module["_crypto_verify_16_bytes"] = asm["_crypto_verify_16_bytes"];
var _crypto_stream_salsa208_keygen = Module["_crypto_stream_salsa208_keygen"] = asm["_crypto_stream_salsa208_keygen"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _crypto_shorthash_siphashx24_bytes = Module["_crypto_shorthash_siphashx24_bytes"] = asm["_crypto_shorthash_siphashx24_bytes"];
var _crypto_generichash_blake2b_final = Module["_crypto_generichash_blake2b_final"] = asm["_crypto_generichash_blake2b_final"];
var _crypto_generichash_blake2b_init_salt_personal = Module["_crypto_generichash_blake2b_init_salt_personal"] = asm["_crypto_generichash_blake2b_init_salt_personal"];
var _crypto_box_seal = Module["_crypto_box_seal"] = asm["_crypto_box_seal"];
var _crypto_aead_xchacha20poly1305_ietf_keygen = Module["_crypto_aead_xchacha20poly1305_ietf_keygen"] = asm["_crypto_aead_xchacha20poly1305_ietf_keygen"];
var _crypto_kx_keypair = Module["_crypto_kx_keypair"] = asm["_crypto_kx_keypair"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _crypto_pwhash_alg_default = Module["_crypto_pwhash_alg_default"] = asm["_crypto_pwhash_alg_default"];
var _crypto_box = Module["_crypto_box"] = asm["_crypto_box"];
var _crypto_secretstream_xchacha20poly1305_tag_rekey = Module["_crypto_secretstream_xchacha20poly1305_tag_rekey"] = asm["_crypto_secretstream_xchacha20poly1305_tag_rekey"];
var _crypto_stream_primitive = Module["_crypto_stream_primitive"] = asm["_crypto_stream_primitive"];
var _crypto_secretbox_xsalsa20poly1305_boxzerobytes = Module["_crypto_secretbox_xsalsa20poly1305_boxzerobytes"] = asm["_crypto_secretbox_xsalsa20poly1305_boxzerobytes"];
var _crypto_pwhash_str_verify = Module["_crypto_pwhash_str_verify"] = asm["_crypto_pwhash_str_verify"];
var _crypto_generichash_keybytes_min = Module["_crypto_generichash_keybytes_min"] = asm["_crypto_generichash_keybytes_min"];
var _crypto_generichash_statebytes = Module["_crypto_generichash_statebytes"] = asm["_crypto_generichash_statebytes"];
var _crypto_onetimeauth_poly1305_statebytes = Module["_crypto_onetimeauth_poly1305_statebytes"] = asm["_crypto_onetimeauth_poly1305_statebytes"];
var _crypto_sign_final_verify = Module["_crypto_sign_final_verify"] = asm["_crypto_sign_final_verify"];
var _crypto_pwhash_strprefix = Module["_crypto_pwhash_strprefix"] = asm["_crypto_pwhash_strprefix"];
var _crypto_secretbox_keygen = Module["_crypto_secretbox_keygen"] = asm["_crypto_secretbox_keygen"];
var _crypto_secretbox_xchacha20poly1305_noncebytes = Module["_crypto_secretbox_xchacha20poly1305_noncebytes"] = asm["_crypto_secretbox_xchacha20poly1305_noncebytes"];
var _crypto_hash_sha512 = Module["_crypto_hash_sha512"] = asm["_crypto_hash_sha512"];
var _crypto_shorthash_siphash24_bytes = Module["_crypto_shorthash_siphash24_bytes"] = asm["_crypto_shorthash_siphash24_bytes"];
var _crypto_secretstream_xchacha20poly1305_push = Module["_crypto_secretstream_xchacha20poly1305_push"] = asm["_crypto_secretstream_xchacha20poly1305_push"];
var _crypto_pwhash_scryptsalsa208sha256_bytes_max = Module["_crypto_pwhash_scryptsalsa208sha256_bytes_max"] = asm["_crypto_pwhash_scryptsalsa208sha256_bytes_max"];
var _crypto_box_curve25519xchacha20poly1305_detached = Module["_crypto_box_curve25519xchacha20poly1305_detached"] = asm["_crypto_box_curve25519xchacha20poly1305_detached"];
var _sodium_library_version_major = Module["_sodium_library_version_major"] = asm["_sodium_library_version_major"];
var _crypto_aead_chacha20poly1305_ietf_encrypt = Module["_crypto_aead_chacha20poly1305_ietf_encrypt"] = asm["_crypto_aead_chacha20poly1305_ietf_encrypt"];
var _crypto_secretstream_xchacha20poly1305_tag_push = Module["_crypto_secretstream_xchacha20poly1305_tag_push"] = asm["_crypto_secretstream_xchacha20poly1305_tag_push"];
var _crypto_secretbox_xchacha20poly1305_detached = Module["_crypto_secretbox_xchacha20poly1305_detached"] = asm["_crypto_secretbox_xchacha20poly1305_detached"];
var _crypto_generichash_blake2b_init = Module["_crypto_generichash_blake2b_init"] = asm["_crypto_generichash_blake2b_init"];
var _randombytes_close = Module["_randombytes_close"] = asm["_randombytes_close"];
var _crypto_pwhash_primitive = Module["_crypto_pwhash_primitive"] = asm["_crypto_pwhash_primitive"];
var _crypto_onetimeauth_keybytes = Module["_crypto_onetimeauth_keybytes"] = asm["_crypto_onetimeauth_keybytes"];
var _crypto_pwhash_argon2i = Module["_crypto_pwhash_argon2i"] = asm["_crypto_pwhash_argon2i"];
var _crypto_pwhash_argon2id_strbytes = Module["_crypto_pwhash_argon2id_strbytes"] = asm["_crypto_pwhash_argon2id_strbytes"];
var _crypto_pwhash_argon2id_opslimit_max = Module["_crypto_pwhash_argon2id_opslimit_max"] = asm["_crypto_pwhash_argon2id_opslimit_max"];
var _crypto_kdf_keybytes = Module["_crypto_kdf_keybytes"] = asm["_crypto_kdf_keybytes"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _crypto_aead_chacha20poly1305_encrypt = Module["_crypto_aead_chacha20poly1305_encrypt"] = asm["_crypto_aead_chacha20poly1305_encrypt"];
var _crypto_core_salsa2012_inputbytes = Module["_crypto_core_salsa2012_inputbytes"] = asm["_crypto_core_salsa2012_inputbytes"];
var _crypto_secretstream_xchacha20poly1305_messagebytes_max = Module["_crypto_secretstream_xchacha20poly1305_messagebytes_max"] = asm["_crypto_secretstream_xchacha20poly1305_messagebytes_max"];
var _crypto_pwhash_scryptsalsa208sha256_memlimit_min = Module["_crypto_pwhash_scryptsalsa208sha256_memlimit_min"] = asm["_crypto_pwhash_scryptsalsa208sha256_memlimit_min"];
var _crypto_core_salsa208 = Module["_crypto_core_salsa208"] = asm["_crypto_core_salsa208"];
var _crypto_pwhash_opslimit_max = Module["_crypto_pwhash_opslimit_max"] = asm["_crypto_pwhash_opslimit_max"];
var _crypto_aead_xchacha20poly1305_ietf_nsecbytes = Module["_crypto_aead_xchacha20poly1305_ietf_nsecbytes"] = asm["_crypto_aead_xchacha20poly1305_ietf_nsecbytes"];
var _crypto_auth_verify = Module["_crypto_auth_verify"] = asm["_crypto_auth_verify"];
var _crypto_generichash_bytes = Module["_crypto_generichash_bytes"] = asm["_crypto_generichash_bytes"];
var _crypto_auth_hmacsha512256_keygen = Module["_crypto_auth_hmacsha512256_keygen"] = asm["_crypto_auth_hmacsha512256_keygen"];
var _randombytes_stir = Module["_randombytes_stir"] = asm["_randombytes_stir"];
var _memset = Module["_memset"] = asm["_memset"];
var _crypto_box_open_detached_afternm = Module["_crypto_box_open_detached_afternm"] = asm["_crypto_box_open_detached_afternm"];
var _crypto_pwhash_argon2i_memlimit_sensitive = Module["_crypto_pwhash_argon2i_memlimit_sensitive"] = asm["_crypto_pwhash_argon2i_memlimit_sensitive"];
var _crypto_kx_primitive = Module["_crypto_kx_primitive"] = asm["_crypto_kx_primitive"];
var _crypto_stream_salsa2012_keybytes = Module["_crypto_stream_salsa2012_keybytes"] = asm["_crypto_stream_salsa2012_keybytes"];
var _crypto_aead_xchacha20poly1305_ietf_decrypt = Module["_crypto_aead_xchacha20poly1305_ietf_decrypt"] = asm["_crypto_aead_xchacha20poly1305_ietf_decrypt"];
var _crypto_pwhash_scryptsalsa208sha256_strprefix = Module["_crypto_pwhash_scryptsalsa208sha256_strprefix"] = asm["_crypto_pwhash_scryptsalsa208sha256_strprefix"];
var _crypto_core_salsa20_outputbytes = Module["_crypto_core_salsa20_outputbytes"] = asm["_crypto_core_salsa20_outputbytes"];
var _crypto_auth_keygen = Module["_crypto_auth_keygen"] = asm["_crypto_auth_keygen"];
var _crypto_secretbox = Module["_crypto_secretbox"] = asm["_crypto_secretbox"];
var _crypto_aead_xchacha20poly1305_ietf_encrypt_detached = Module["_crypto_aead_xchacha20poly1305_ietf_encrypt_detached"] = asm["_crypto_aead_xchacha20poly1305_ietf_encrypt_detached"];
var _crypto_pwhash_scryptsalsa208sha256_passwd_max = Module["_crypto_pwhash_scryptsalsa208sha256_passwd_max"] = asm["_crypto_pwhash_scryptsalsa208sha256_passwd_max"];
var _crypto_auth_hmacsha256_bytes = Module["_crypto_auth_hmacsha256_bytes"] = asm["_crypto_auth_hmacsha256_bytes"];
var _crypto_auth_hmacsha256_verify = Module["_crypto_auth_hmacsha256_verify"] = asm["_crypto_auth_hmacsha256_verify"];
var _crypto_sign_keypair = Module["_crypto_sign_keypair"] = asm["_crypto_sign_keypair"];
var _crypto_stream_xchacha20 = Module["_crypto_stream_xchacha20"] = asm["_crypto_stream_xchacha20"];
var _crypto_onetimeauth_statebytes = Module["_crypto_onetimeauth_statebytes"] = asm["_crypto_onetimeauth_statebytes"];
var _crypto_sign_ed25519ph_init = Module["_crypto_sign_ed25519ph_init"] = asm["_crypto_sign_ed25519ph_init"];
var _crypto_stream_salsa20_noncebytes = Module["_crypto_stream_salsa20_noncebytes"] = asm["_crypto_stream_salsa20_noncebytes"];
var _crypto_shorthash_keybytes = Module["_crypto_shorthash_keybytes"] = asm["_crypto_shorthash_keybytes"];
var _crypto_aead_chacha20poly1305_keygen = Module["_crypto_aead_chacha20poly1305_keygen"] = asm["_crypto_aead_chacha20poly1305_keygen"];
var _crypto_shorthash_siphashx24 = Module["_crypto_shorthash_siphashx24"] = asm["_crypto_shorthash_siphashx24"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _crypto_hash_sha512_final = Module["_crypto_hash_sha512_final"] = asm["_crypto_hash_sha512_final"];
var _crypto_box_curve25519xsalsa20poly1305_zerobytes = Module["_crypto_box_curve25519xsalsa20poly1305_zerobytes"] = asm["_crypto_box_curve25519xsalsa20poly1305_zerobytes"];
var _crypto_shorthash_siphashx24_keybytes = Module["_crypto_shorthash_siphashx24_keybytes"] = asm["_crypto_shorthash_siphashx24_keybytes"];
var _crypto_pwhash_passwd_min = Module["_crypto_pwhash_passwd_min"] = asm["_crypto_pwhash_passwd_min"];
var _crypto_kdf_bytes_max = Module["_crypto_kdf_bytes_max"] = asm["_crypto_kdf_bytes_max"];
var _crypto_box_curve25519xsalsa20poly1305_boxzerobytes = Module["_crypto_box_curve25519xsalsa20poly1305_boxzerobytes"] = asm["_crypto_box_curve25519xsalsa20poly1305_boxzerobytes"];
var _crypto_generichash_bytes_min = Module["_crypto_generichash_bytes_min"] = asm["_crypto_generichash_bytes_min"];
var _crypto_core_salsa2012_outputbytes = Module["_crypto_core_salsa2012_outputbytes"] = asm["_crypto_core_salsa2012_outputbytes"];
var _crypto_auth_hmacsha256_keybytes = Module["_crypto_auth_hmacsha256_keybytes"] = asm["_crypto_auth_hmacsha256_keybytes"];
var _crypto_core_salsa208_inputbytes = Module["_crypto_core_salsa208_inputbytes"] = asm["_crypto_core_salsa208_inputbytes"];
var _crypto_pwhash_scryptsalsa208sha256_opslimit_max = Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_max"] = asm["_crypto_pwhash_scryptsalsa208sha256_opslimit_max"];
var _crypto_sign_update = Module["_crypto_sign_update"] = asm["_crypto_sign_update"];
var _crypto_stream_salsa208_messagebytes_max = Module["_crypto_stream_salsa208_messagebytes_max"] = asm["_crypto_stream_salsa208_messagebytes_max"];
var _crypto_stream_chacha20_noncebytes = Module["_crypto_stream_chacha20_noncebytes"] = asm["_crypto_stream_chacha20_noncebytes"];
var _crypto_secretbox_open_detached = Module["_crypto_secretbox_open_detached"] = asm["_crypto_secretbox_open_detached"];
var _crypto_box_curve25519xchacha20poly1305_seed_keypair = Module["_crypto_box_curve25519xchacha20poly1305_seed_keypair"] = asm["_crypto_box_curve25519xchacha20poly1305_seed_keypair"];
var _crypto_pwhash_argon2id_memlimit_max = Module["_crypto_pwhash_argon2id_memlimit_max"] = asm["_crypto_pwhash_argon2id_memlimit_max"];
var _crypto_pwhash_argon2i_memlimit_min = Module["_crypto_pwhash_argon2i_memlimit_min"] = asm["_crypto_pwhash_argon2i_memlimit_min"];
var _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive = Module["_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive"] = asm["_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive"];
var _crypto_box_curve25519xsalsa20poly1305_secretkeybytes = Module["_crypto_box_curve25519xsalsa20poly1305_secretkeybytes"] = asm["_crypto_box_curve25519xsalsa20poly1305_secretkeybytes"];
var _crypto_kdf_contextbytes = Module["_crypto_kdf_contextbytes"] = asm["_crypto_kdf_contextbytes"];
var _crypto_hash_sha256_final = Module["_crypto_hash_sha256_final"] = asm["_crypto_hash_sha256_final"];
var _crypto_stream_xchacha20_keybytes = Module["_crypto_stream_xchacha20_keybytes"] = asm["_crypto_stream_xchacha20_keybytes"];
var _crypto_box_seal_open = Module["_crypto_box_seal_open"] = asm["_crypto_box_seal_open"];
var _crypto_shorthash_primitive = Module["_crypto_shorthash_primitive"] = asm["_crypto_shorthash_primitive"];
var _crypto_core_hsalsa20_inputbytes = Module["_crypto_core_hsalsa20_inputbytes"] = asm["_crypto_core_hsalsa20_inputbytes"];
var _crypto_onetimeauth_final = Module["_crypto_onetimeauth_final"] = asm["_crypto_onetimeauth_final"];
var _crypto_secretbox_open_easy = Module["_crypto_secretbox_open_easy"] = asm["_crypto_secretbox_open_easy"];
var _crypto_core_salsa2012 = Module["_crypto_core_salsa2012"] = asm["_crypto_core_salsa2012"];
var _crypto_box_curve25519xchacha20poly1305_macbytes = Module["_crypto_box_curve25519xchacha20poly1305_macbytes"] = asm["_crypto_box_curve25519xchacha20poly1305_macbytes"];
var _crypto_auth_hmacsha512256_statebytes = Module["_crypto_auth_hmacsha512256_statebytes"] = asm["_crypto_auth_hmacsha512256_statebytes"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _crypto_box_curve25519xchacha20poly1305_publickeybytes = Module["_crypto_box_curve25519xchacha20poly1305_publickeybytes"] = asm["_crypto_box_curve25519xchacha20poly1305_publickeybytes"];
var _crypto_stream_chacha20_xor = Module["_crypto_stream_chacha20_xor"] = asm["_crypto_stream_chacha20_xor"];
var _crypto_core_hsalsa20 = Module["_crypto_core_hsalsa20"] = asm["_crypto_core_hsalsa20"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];

// All functions here should be maybeExported from jsifier.js

if (typeof maybeAssert !== 'function') {
  function maybeAssert() {}
}

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      maybeAssert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


Module["intArrayFromString"] = intArrayFromString;
Module["intArrayToString"] = intArrayToString;
// All functions here should be maybeExported from jsifier.js

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

var btoa = btoa || function (input) {
  /**
   * Encodes a string in base64
   * @param {String} input The string to encode in base64.
   */
  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  do {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++);

    enc1 = chr1 >> 2;
    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
    enc4 = chr3 & 63;

    if (isNaN(chr2)) {
      enc2 = ((chr1 & 3) << 4);
      enc3 = enc4 = 64;
    } else if (isNaN(chr3)) {
      enc4 = 64;
    }
    output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
  } while (i < input.length);
  return output;
};

var atob = atob || function (input) {
  /**
   * Decodes a base64 string.
   * @param {String} input The string to decode.
   */
  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = atob(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  var dataURIPrefix = 'data:application/octet-stream;base64,';

  if (!(
    String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0
  )) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}





// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;




if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, Runtime.GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, Runtime.GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
        if (memoryInitializerBytes) {
          applyMemoryInitializer(memoryInitializerBytes.buffer);
          return;
        }
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(request.response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_bitshift64Ashr","_i64Subtract","_i64Add","_memset","_bitshift64Lshr","_bitshift64Shl","_memcpy","_llvm_cttz_i32","___udivmoddi4","___udivdi3","___muldsi3","___muldi3","_sbrk","_memmove","___uremdi3"]
    });
    typeof(process) === 'object' && !process.removeAllListeners("uncaughtException");
    return Module;
}

if (typeof define === 'function' && define.amd) {
  define(['exports'], expose_libsodium);
} else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
  expose_libsodium(exports);
} else {
  root.libsodium = expose_libsodium(root.libsodium_mod || (root.commonJsStrict = {}));
}

})(this);
(function(root) {

function expose_wrappers(exports, libsodiumModule) {
    "use strict";

    var output_format = "uint8array";

    var libsodium;
    var ready = libsodiumModule.ready.then(function () {
        libsodium = libsodiumModule;
        if (libsodium._sodium_init() !== 0) {
            throw new Error("libsodium was not correctly initialized.");
        }
    });

    // List of functions and constants defined in the wrapped libsodium
    function symbols() {
        return Object.keys(exports).sort();
    }

    function increment(bytes) {
        if (!(bytes instanceof Uint8Array)) {
            throw new TypeError("Only Uint8Array instances can be incremented");
        }
        var c = 1 << 8;
        for (var i = 0 | 0, j = bytes.length; i < j; i++) {
            c >>= 8;
            c += bytes[i];
            bytes[i] = c & 0xff;
        }
    }

    function add(a, b) {
        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {
            throw new TypeError("Only Uint8Array instances can added");
        }
        var j = a.length, c = 0 | 0, i = 0 | 0;
        if (b.length != a.length) {
            throw new TypeError("Arguments must have the same length");
        }
        for (i = 0; i < j; i++) {
            c >>= 8;
            c += (a[i] + b[j]);
            a[i] = c & 0xff;
        }
    }

    function is_zero(bytes) {
        if (!(bytes instanceof Uint8Array)) {
            throw new TypeError("Only Uint8Array instances can be checked");
        }
        var d = 0 | 0;
        for (var i = 0 | 0, j = bytes.length; i < j; i++) {
            d |= bytes[i];
        }
        return d === 0;
    }

    function memzero(bytes) {
        if (!(bytes instanceof Uint8Array)) {
            throw new TypeError("Only Uint8Array instances can be wiped");
        }
        for (var i = 0 | 0, j = bytes.length; i < j; i++) {
            bytes[i] = 0;
        }
    }

    function memcmp(b1, b2) {
        if (!(b1 instanceof Uint8Array && b2 instanceof Uint8Array)) {
            throw new TypeError("Only Uint8Array instances can be compared");
        }
        if (b1.length !== b2.length) {
            throw new TypeError("Only instances of identical length can be compared");
        }
        for (var d = 0 | 0, i = 0 | 0, j = b1.length; i < j; i++) {
            d |= b1[i] ^ b2[i];
        }
        return d === 0;
    }

    function compare(b1, b2) {
        if (!(b1 instanceof Uint8Array && b2 instanceof Uint8Array)) {
            throw new TypeError("Only Uint8Array instances can be compared");
        }
        if (b1.length !== b2.length) {
            throw new TypeError("Only instances of identical length can be compared");
        }
        for (var gt = 0 | 0, eq = 1 | 1, i = b1.length; i-- > 0;) {
            gt |= ((b2[i] - b1[i]) >> 8) & eq;
            eq &= ((b2[i] ^ b1[i]) - 1) >> 8;
        }
        return (gt + gt + eq) - 1;
    }

    function pad(buf, blocksize) {
        if (!(buf instanceof Uint8Array)) {
            throw new TypeError("buffer must be a Uint8Array");
        }
        blocksize |= 0;
        if (blocksize <= 0) {
            throw new Error("block size must be > 0");
        }
        var address_pool = [],
            padded,
            padded_buflen_p = _malloc(4),
            st = 1 | 0, i = 0 | 0, k = buf.length | 0,
            bufx = new AllocatedBuf(k + blocksize);
        address_pool.push(padded_buflen_p);
        address_pool.push(bufx.address);
        for (var j = bufx.address, jmax = bufx.address + k + blocksize; j < jmax; j++) {
            libsodium.HEAPU8[j] = buf[i];
            k -= st;
            st = (~(((((k >>> 48) | (k >>> 32) | (k >>> 16) | k) & 0xffff) - 1) >> 16)) & 1;
            i += st;
        }
        if (libsodium._sodium_pad(padded_buflen_p, bufx.address, buf.length,
                                  blocksize, bufx.length) !== 0) {
            _free_and_throw_error(address_pool, "internal error");
        }
        bufx.length = libsodium.getValue(padded_buflen_p, 'i32');
        padded = bufx.to_Uint8Array();
        _free_all(address_pool);
        return padded;
    }

    function unpad(buf, blocksize) {
        if (!(buf instanceof Uint8Array)) {
            throw new TypeError("buffer must be a Uint8Array");
        }
        blocksize |= 0;
        if (blocksize <= 0) {
            throw new Error("block size must be > 0");
        }
        var address_pool = [],
            unpadded_address = _to_allocated_buf_address(buf),
            unpadded_buflen_p = _malloc(4);
        address_pool.push(unpadded_address);
        address_pool.push(unpadded_buflen_p);
        if (libsodium._sodium_unpad(unpadded_buflen_p, unpadded_address,
                                    buf.length, blocksize) !== 0) {
            _free_and_throw_error(address_pool, "unsupported/invalid padding");
        }
        buf = new Uint8Array(buf);
        buf = buf.subarray(0, libsodium.getValue(unpadded_buflen_p, 'i32'));
        _free_all(address_pool);
        return buf;
    }

    //---------------------------------------------------------------------------
    // Codecs
    //
    function from_string(str) {
        if (typeof TextEncoder === "function") {
            return new TextEncoder("utf-8").encode(str);
        }
        str = unescape(encodeURIComponent(str));
        var bytes = new Uint8Array(str.length);
        for (var i = 0; i < str.length; i++) {
            bytes[i] = str.charCodeAt(i);
        }
        return bytes;
    }

    function to_string(bytes) {
        if (typeof TextDecoder === "function") {
            return new TextDecoder("utf-8", {fatal: true}).decode(bytes);
        }

        var toStringChunkSize = 8192,
            numChunks = Math.ceil(bytes.length / toStringChunkSize);
        if (numChunks <= 1) {
            try {
                return decodeURIComponent(escape(String.fromCharCode.apply(null, bytes)));
            }
            catch (_) {
                throw new TypeError("The encoded data was not valid.");
            }
        }
        var totalString = '';
        var sequenceReadOffset = 0;
        for (var i = 0; i < numChunks; i++) {
            var currentChunk =
                Array.prototype.slice.call(bytes,
                                           i * toStringChunkSize + sequenceReadOffset,
                                           (i + 1) * toStringChunkSize + sequenceReadOffset);
            //Depending on how much we have shifted
            if (currentChunk.length == 0) {
                continue;
            }

            //Checking that we didn't cut the buffer in the middle of a UTF8 sequence.
            //If we did, remove the bytes of the "cut" sequence and
            //decrement sequenceReadOffset for each removed byte
            var sequenceDetectionComplete,
                sequenceIndex = currentChunk.length,
                sequenceLength = 0;

            //This loop will read the chunk from its end, looking for sequence start bytes
            do {
                sequenceIndex--;
                var currentByte = currentChunk[sequenceIndex];

                if (currentByte >= 240) { //Beginning of a 4-byte UTF-8 sequence
                    sequenceLength = 4;
                    sequenceDetectionComplete = true;
                } else if (currentByte >= 224) { //Beginning of a 3-byte UTF-8 sequence
                    sequenceLength = 3;
                    sequenceDetectionComplete = true;
                } else if (currentByte >= 192) { //Beginning of a 2-byte UTF-8 sequence
                    sequenceLength = 2;
                    sequenceDetectionComplete = true;
                } else if (currentByte < 128) { //A one byte UTF-8 char
                    sequenceLength = 1;
                    sequenceDetectionComplete = true;
                }
                //The values between [128, 192[ are part of a UTF-8 sequence.
                //The loop will not exit in that case, and will iterate one byte backwards instead
            } while (!sequenceDetectionComplete);

            var extraBytes = sequenceLength - (currentChunk.length - sequenceIndex);
            for (var j = 0; j < extraBytes; j++) {
                sequenceReadOffset--;
                currentChunk.pop();
            }

            totalString += to_string(currentChunk);
        }
        return totalString;
    }

    function from_hex(input) {
        var address_pool = [],
            input = _any_to_Uint8Array(address_pool, input, "input"),
            result = new AllocatedBuf(input.length / 2), result_str,
            input_address = _to_allocated_buf_address(input),
            hex_end_p = _malloc(4), hex_end;
        address_pool.push(input_address);
        address_pool.push(result.address);
        address_pool.push(result.hex_end_p);
        if (libsodium._sodium_hex2bin(result.address, result.length,
                                      input_address, input.length,
                                      0, 0, hex_end_p) !== 0) {
            _free_and_throw_error(address_pool, "invalid input");
        }
        hex_end = libsodium.getValue(hex_end_p, 'i32');
        if (hex_end - input_address !== input.length) {
            _free_and_throw_error(address_pool, "incomplete input");
        }
        result_str = result.to_Uint8Array();
        _free_all(address_pool);
        return result_str;
    }

    function to_hex(input) {
        input = _any_to_Uint8Array(null, input, "input");
        var str = "", b, c, x;
        for (var i = 0; i < input.length; i++) {
            c = input[i] & 0xf;
            b = input[i] >>> 4;
            x = (87 + c + (((c - 10) >> 8) & ~38)) << 8 |
                (87 + b + (((b - 10) >> 8) & ~38));
            str += String.fromCharCode(x & 0xff) + String.fromCharCode(x >>> 8);
        }
        return str;
    }

    var base64_variants = {
        ORIGINAL: 1 | 0, ORIGINAL_NO_PADDING: 3 | 0, URLSAFE: 5 | 0, URLSAFE_NO_PADDING: 7 | 0
    };

    function check_base64_variant(variant) {
        if (variant == undefined) {
            return base64_variants.URLSAFE_NO_PADDING;
        }
        if (variant !== base64_variants.ORIGINAL && variant !== base64_variants.ORIGINAL_NO_PADDING &&
            variant !== base64_variants.URLSAFE && variant != base64_variants.URLSAFE_NO_PADDING) {
            throw new Error("unsupported base64 variant");
        }
        return variant;
    }

    function from_base64(input, variant) {
        variant = check_base64_variant(variant);
        var address_pool = [],
            input = _any_to_Uint8Array(address_pool, input, "input"),
            result = new AllocatedBuf(input.length * 3 / 4), result_bin,
            input_address = _to_allocated_buf_address(input),
            result_bin_len_p = _malloc(4), b64_end_p = _malloc(4), b64_end;
        address_pool.push(input_address);
        address_pool.push(result.address);
        address_pool.push(result.result_bin_len_p);
        address_pool.push(result.b64_end_p);
        if (libsodium._sodium_base642bin(result.address, result.length,
                                         input_address, input.length,
                                         0, result_bin_len_p, b64_end_p, variant) !== 0) {
            _free_and_throw_error(address_pool, "invalid input");
        }
        b64_end = libsodium.getValue(b64_end_p, 'i32');
        if (b64_end - input_address !== input.length) {
            _free_and_throw_error(address_pool, "incomplete input");
        }
        result.length = libsodium.getValue(result_bin_len_p, 'i32');
        result_bin = result.to_Uint8Array();
        _free_all(address_pool);
        return result_bin;
    }

    function to_base64(input, variant) {
        variant = check_base64_variant(variant);
        input = _any_to_Uint8Array(address_pool, input, "input");
        var address_pool = [],
            nibbles = Math.floor(input.length / 3) | 0,
            remainder = input.length - 3 * nibbles,
            b64_len = nibbles * 4 + (remainder !== 0 ?
                                     ((variant & 2) === 0 ? 4 : 2 + (remainder >>> 1)) : 0),
            result = new AllocatedBuf(b64_len + 1), result_b64,
            input_address = _to_allocated_buf_address(input);
        address_pool.push(input_address);
        address_pool.push(result.address);
        if (libsodium._sodium_bin2base64(result.address, result.length,
                                         input_address, input.length,
                                         variant) === 0) {
            _free_and_throw_error(address_pool, "conversion failed");
        }
        result.length = b64_len;
        result_b64 = to_string(result.to_Uint8Array());
        _free_all(address_pool);
        return result_b64;
    }

    function output_formats() {
        return ["uint8array", "text", "hex", "base64"];
    }

    function _format_output(output, optionalOutputFormat) {
        var selectedOutputFormat = optionalOutputFormat || output_format;
        if (!_is_output_format(selectedOutputFormat)) {
            throw new Error(selectedOutputFormat + " output format is not available");
        }
        if (output instanceof AllocatedBuf) {
            if (selectedOutputFormat === "uint8array") {
                return output.to_Uint8Array();
            } else if (selectedOutputFormat === "text") {
                return to_string(output.to_Uint8Array());
            } else if (selectedOutputFormat === "hex") {
                return to_hex(output.to_Uint8Array());
            } else if (selectedOutputFormat === "base64") {
                return to_base64(output.to_Uint8Array(), base64_variants.URLSAFE_NO_PADDING);
            } else {
                throw new Error("What is output format \"" + selectedOutputFormat + "\"?");
            }
        } else if (typeof output === "object") { // Composed output. Example: key pairs
            var props = Object.keys(output);
            var formattedOutput = {};
            for (var i = 0; i < props.length; i++) {
                formattedOutput[props[i]] = _format_output(output[props[i]], selectedOutputFormat);
            }
            return formattedOutput;
        } else if (typeof output === "string") {
            return output;
        } else {
            throw new TypeError("Cannot format output");
        }
    }

    function _is_output_format(format) {
        var formats = output_formats();
        for (var i = 0; i < formats.length; i++) {
            if (formats[i] === format) {
                return true;
            }
        }
        return false;
    }

    function _check_output_format(format) {
        if (!format) {
            return;
        } else if (typeof format !== "string") {
            throw new TypeError("When defined, the output format must be a string");
        } else if (!_is_output_format(format)) {
            throw new Error(format + " is not a supported output format");
        }
    }

    //---------------------------------------------------------------------------
    // Memory management
    //
    // AllocatedBuf: address allocated using _malloc() + length
    function AllocatedBuf(length) {
        this.length = length;
        this.address = _malloc(length);
    }

    // Copy the content of a AllocatedBuf (_malloc()'d memory) into a Uint8Array
    AllocatedBuf.prototype.to_Uint8Array = function () {
        var result = new Uint8Array(this.length);
        result.set(libsodium.HEAPU8.subarray(this.address, this.address + this.length));
        return result;
    };

    // _malloc() a region and initialize it with the content of a Uint8Array
    function _to_allocated_buf_address(bytes) {
        var address = _malloc(bytes.length);
        libsodium.HEAPU8.set(bytes, address);
        return address;
    }

    function _malloc(length) {
        var result = libsodium._malloc(length);
        if (result === 0) {
            throw {
                message: "_malloc() failed",
                length: length
            };
        }
        return result;
    }

    function _free(address) {
        libsodium._free(address);
    }

    function _free_all(addresses) {
        if (addresses) {
            for (var i = 0; i < addresses.length; i++) {
                _free(addresses[i]);
            }
        }
    }

    function _free_and_throw_error(address_pool, err) {
        _free_all(address_pool);
        throw new Error(err);
    }

    function _free_and_throw_type_error(address_pool, err) {
        _free_all(address_pool);
        throw new TypeError(err);
    }

    function _require_defined(address_pool, varValue, varName) {
        if (varValue == undefined) {
            _free_and_throw_type_error(address_pool, varName + " cannot be null or undefined");
        }
    }

    function _any_to_Uint8Array(address_pool, varValue, varName) {
        _require_defined(address_pool, varValue, varName);
        if (varValue instanceof Uint8Array) {
            return varValue;
        } else if (typeof varValue === "string") {
            return from_string(varValue);
        }
        _free_and_throw_type_error(address_pool, "unsupported input type for " + varName);
    }

    
	function crypto_aead_chacha20poly1305_decrypt(secret_nonce, ciphertext, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_aead_chacha20poly1305_abytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_decrypt(message_address, null, secret_nonce_address, ciphertext_address, ciphertext_length, 0, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_chacha20poly1305_decrypt_detached(secret_nonce, ciphertext, mac, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_box_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_decrypt_detached(message_address, secret_nonce_address, ciphertext_address, ciphertext_length, 0, mac_address, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_chacha20poly1305_encrypt(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_aead_chacha20poly1305_abytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_encrypt(ciphertext_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_chacha20poly1305_encrypt_detached(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_aead_chacha20poly1305_abytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_encrypt_detached(ciphertext_address, mac_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output({ciphertext: ciphertext, mac: mac}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_chacha20poly1305_ietf_decrypt(secret_nonce, ciphertext, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_aead_chacha20poly1305_ietf_abytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_ietf_decrypt(message_address, null, secret_nonce_address, ciphertext_address, ciphertext_length, 0, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_chacha20poly1305_ietf_decrypt_detached(secret_nonce, ciphertext, mac, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_box_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_ietf_decrypt_detached(message_address, secret_nonce_address, ciphertext_address, ciphertext_length, 0, mac_address, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_chacha20poly1305_ietf_encrypt(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_aead_chacha20poly1305_ietf_abytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_ietf_encrypt(ciphertext_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_chacha20poly1305_ietf_encrypt_detached(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_aead_chacha20poly1305_ietf_abytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_ietf_encrypt_detached(ciphertext_address, mac_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output({ciphertext: ciphertext, mac: mac}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_chacha20poly1305_ietf_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_aead_chacha20poly1305_ietf_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_aead_chacha20poly1305_ietf_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_aead_chacha20poly1305_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_aead_chacha20poly1305_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_aead_xchacha20poly1305_ietf_decrypt(secret_nonce, ciphertext, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_aead_xchacha20poly1305_ietf_abytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_xchacha20poly1305_ietf_decrypt(message_address, null, secret_nonce_address, ciphertext_address, ciphertext_length, 0, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_xchacha20poly1305_ietf_decrypt_detached(secret_nonce, ciphertext, mac, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_box_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_xchacha20poly1305_ietf_decrypt_detached(message_address, secret_nonce_address, ciphertext_address, ciphertext_length, 0, mac_address, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_xchacha20poly1305_ietf_encrypt(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_aead_xchacha20poly1305_ietf_abytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_aead_xchacha20poly1305_ietf_encrypt(ciphertext_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_xchacha20poly1305_ietf_encrypt_detached(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
		        additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
		        additional_data_address = _to_allocated_buf_address(additional_data);
		        additional_data_length = additional_data.length;
		        address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
		        secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
		        secret_nonce_address = _to_allocated_buf_address(secret_nonce);
		        secret_nonce_length = secret_nonce.length;
		        address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_abytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_aead_xchacha20poly1305_ietf_encrypt_detached(ciphertext_address, mac_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output({ciphertext: ciphertext, mac: mac}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_aead_xchacha20poly1305_ietf_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_aead_xchacha20poly1305_ietf_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_aead_xchacha20poly1305_ietf_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output tag (buf)
		
		var tag_length = (libsodium._crypto_auth_bytes()) | 0,
		    tag = new AllocatedBuf(tag_length),
		    tag_address = tag.address;
		
		address_pool.push(tag_address);
		
		if ((libsodium._crypto_auth(tag_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(tag, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_auth_hmacsha256(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha256_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_auth_hmacsha256_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_auth_hmacsha256(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_auth_hmacsha256_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_auth_hmacsha256_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_auth_hmacsha256_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_hmacsha256_verify(tag, message, key) {
		var address_pool = [];

		// ---------- input: tag (buf)
		
		tag = _any_to_Uint8Array(address_pool, tag, "tag");
		var tag_address, tag_length = (libsodium._crypto_auth_hmacsha256_bytes()) | 0;
		if (tag.length !== tag_length) {
		        _free_and_throw_type_error(address_pool, "invalid tag length");
		}
		tag_address = _to_allocated_buf_address(tag);
		address_pool.push(tag_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha256_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_auth_hmacsha256_verify(tag_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_hmacsha512(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha512_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_auth_hmacsha512_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_auth_hmacsha512(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_auth_hmacsha512_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_auth_hmacsha512_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_auth_hmacsha512_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_hmacsha512_verify(tag, message, key) {
		var address_pool = [];

		// ---------- input: tag (buf)
		
		tag = _any_to_Uint8Array(address_pool, tag, "tag");
		var tag_address, tag_length = (libsodium._crypto_auth_hmacsha512_bytes()) | 0;
		if (tag.length !== tag_length) {
		        _free_and_throw_type_error(address_pool, "invalid tag length");
		}
		tag_address = _to_allocated_buf_address(tag);
		address_pool.push(tag_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha512_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_auth_hmacsha512_verify(tag_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_auth_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_auth_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_verify(tag, message, key) {
		var address_pool = [];

		// ---------- input: tag (buf)
		
		tag = _any_to_Uint8Array(address_pool, tag, "tag");
		var tag_address, tag_length = (libsodium._crypto_auth_bytes()) | 0;
		if (tag.length !== tag_length) {
		        _free_and_throw_type_error(address_pool, "invalid tag length");
		}
		tag_address = _to_allocated_buf_address(tag);
		address_pool.push(tag_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_auth_verify(tag_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_box_beforenm(publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output sharedKey (buf)
		
		var sharedKey_length = (libsodium._crypto_box_beforenmbytes()) | 0,
		    sharedKey = new AllocatedBuf(sharedKey_length),
		    sharedKey_address = sharedKey.address;
		
		address_pool.push(sharedKey_address);
		
		if ((libsodium._crypto_box_beforenm(sharedKey_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(sharedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_detached(message, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_box_macbytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_box_detached(ciphertext_address, mac_address, message_address, message_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output({ciphertext: ciphertext, mac: mac}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_easy(message, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_box_macbytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_box_easy(ciphertext_address, message_address, message_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_easy_afternm(message, nonce, sharedKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: sharedKey (buf)
		
		sharedKey = _any_to_Uint8Array(address_pool, sharedKey, "sharedKey");
		var sharedKey_address, sharedKey_length = (libsodium._crypto_box_beforenmbytes()) | 0;
		if (sharedKey.length !== sharedKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid sharedKey length");
		}
		sharedKey_address = _to_allocated_buf_address(sharedKey);
		address_pool.push(sharedKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_box_macbytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_box_easy_afternm(ciphertext_address, message_address, message_length, 0, nonce_address, sharedKey_address) | 0) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_keypair(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output secretKey (buf)
		
		var secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0,
		    secretKey = new AllocatedBuf(secretKey_length),
		    secretKey_address = secretKey.address;
		
		address_pool.push(secretKey_address);
		
		if ((libsodium._crypto_box_keypair(publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: secretKey, keyType: "curve25519"}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_open_detached(ciphertext, mac, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_box_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_open_detached(plaintext_address, ciphertext_address, mac_address, ciphertext_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_open_easy(ciphertext, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length - libsodium._crypto_box_macbytes()) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_open_easy(plaintext_address, ciphertext_address, ciphertext_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_open_easy_afternm(ciphertext, nonce, sharedKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: sharedKey (buf)
		
		sharedKey = _any_to_Uint8Array(address_pool, sharedKey, "sharedKey");
		var sharedKey_address, sharedKey_length = (libsodium._crypto_box_beforenmbytes()) | 0;
		if (sharedKey.length !== sharedKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid sharedKey length");
		}
		sharedKey_address = _to_allocated_buf_address(sharedKey);
		address_pool.push(sharedKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length - libsodium._crypto_box_macbytes()) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_open_easy_afternm(plaintext_address, ciphertext_address, ciphertext_length, 0, nonce_address, sharedKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_seal(message, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_box_sealbytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_box_seal(ciphertext_address, message_address, message_length, 0, publicKey_address) | 0) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_seal_open(ciphertext, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length - libsodium._crypto_box_sealbytes()) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_seal_open(plaintext_address, ciphertext_address, ciphertext_length, 0, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_box_seed_keypair(seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._crypto_box_seedbytes()) | 0;
		if (seed.length !== seed_length) {
		        _free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_box_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_box_seed_keypair(publicKey_address, privateKey_address, seed_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_generichash(hash_length, message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: hash_length (uint)
		
		_require_defined(address_pool, hash_length, "hash_length");
		
		if (!(typeof hash_length === "number" && (hash_length | 0) === hash_length) || hash_length < 0) {
		        _free_and_throw_type_error(address_pool, "hash_length must be an unsigned integer");
		}
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (unsized_buf_optional)
		
		var key_address = null, key_length = 0;
		if (key != undefined) {
		        key = _any_to_Uint8Array(address_pool, key, "key");
		        key_address = _to_allocated_buf_address(key);
		        key_length = key.length;
		        address_pool.push(key_address);
		}
		
		// ---------- output hash (buf)
		
		var hash_length = (hash_length) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_generichash(hash_address, hash_length, message_address, message_length, 0, key_address, key_length) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_generichash_final(state_address, hash_length, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (generichash_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: hash_length (uint)
		
		_require_defined(address_pool, hash_length, "hash_length");
		
		if (!(typeof hash_length === "number" && (hash_length | 0) === hash_length) || hash_length < 0) {
		        _free_and_throw_type_error(address_pool, "hash_length must be an unsigned integer");
		}
		
		// ---------- output hash (buf)
		
		var hash_length = (hash_length) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_generichash_final(state_address, hash_address, hash_length) | 0) === 0) {
			var ret = (libsodium._free(state_address), _format_output(hash, outputFormat));
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_generichash_init(key, hash_length, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: key (unsized_buf_optional)
		
		var key_address = null, key_length = 0;
		if (key != undefined) {
		        key = _any_to_Uint8Array(address_pool, key, "key");
		        key_address = _to_allocated_buf_address(key);
		        key_length = key.length;
		        address_pool.push(key_address);
		}
		
		// ---------- input: hash_length (uint)
		
		_require_defined(address_pool, hash_length, "hash_length");
		
		if (!(typeof hash_length === "number" && (hash_length | 0) === hash_length) || hash_length < 0) {
		        _free_and_throw_type_error(address_pool, "hash_length must be an unsigned integer");
		}
		
		// ---------- output state (generichash_state)
		
		var state_address = new AllocatedBuf(357).address;
		
		if ((libsodium._crypto_generichash_init(state_address, key_address, key_length, hash_length) | 0) === 0) {
			var ret = state_address;
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_generichash_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_generichash_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_generichash_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_generichash_update(state_address, message_chunk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (generichash_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: message_chunk (unsized_buf)
		
		message_chunk = _any_to_Uint8Array(address_pool, message_chunk, "message_chunk");
		var message_chunk_address = _to_allocated_buf_address(message_chunk),
		    message_chunk_length = message_chunk.length;
		address_pool.push(message_chunk_address);
		
		if ((libsodium._crypto_generichash_update(state_address, message_chunk_address, message_chunk_length) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_hash(message, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_hash_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_hash(hash_address, message_address, message_length, 0) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_hash_sha256(message, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_hash_sha256_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_hash_sha256(hash_address, message_address, message_length, 0) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_hash_sha512(message, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_hash_sha512_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_hash_sha512(hash_address, message_address, message_length, 0) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_kdf_derive_from_key(subkey_len, subkey_id, ctx, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: subkey_len (uint)
		
		_require_defined(address_pool, subkey_len, "subkey_len");
		
		if (!(typeof subkey_len === "number" && (subkey_len | 0) === subkey_len) || subkey_len < 0) {
		        _free_and_throw_type_error(address_pool, "subkey_len must be an unsigned integer");
		}
		
		// ---------- input: subkey_id (uint)
		
		_require_defined(address_pool, subkey_id, "subkey_id");
		
		if (!(typeof subkey_id === "number" && (subkey_id | 0) === subkey_id) || subkey_id < 0) {
		        _free_and_throw_type_error(address_pool, "subkey_id must be an unsigned integer");
		}
		
		// ---------- input: ctx (string)
		
		ctx = from_string(ctx + "\0");
		var ctx_address = _to_allocated_buf_address(ctx),
		    ctx_length = ctx.length - 1;
		address_pool.push(ctx_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_kdf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output subkey (buf)
		
		var subkey_length = (subkey_len) | 0,
		    subkey = new AllocatedBuf(subkey_length),
		    subkey_address = subkey.address;
		
		address_pool.push(subkey_address);
		
		libsodium._crypto_kdf_derive_from_key(subkey_address, subkey_len, subkey_id, 0, ctx_address, key_address);
		var ret = (_format_output(subkey, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_kdf_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_kdf_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_kdf_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: clientPublicKey (buf)
		
		clientPublicKey = _any_to_Uint8Array(address_pool, clientPublicKey, "clientPublicKey");
		var clientPublicKey_address, clientPublicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0;
		if (clientPublicKey.length !== clientPublicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid clientPublicKey length");
		}
		clientPublicKey_address = _to_allocated_buf_address(clientPublicKey);
		address_pool.push(clientPublicKey_address);
		
		// ---------- input: clientSecretKey (buf)
		
		clientSecretKey = _any_to_Uint8Array(address_pool, clientSecretKey, "clientSecretKey");
		var clientSecretKey_address, clientSecretKey_length = (libsodium._crypto_kx_secretkeybytes()) | 0;
		if (clientSecretKey.length !== clientSecretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid clientSecretKey length");
		}
		clientSecretKey_address = _to_allocated_buf_address(clientSecretKey);
		address_pool.push(clientSecretKey_address);
		
		// ---------- input: serverPublicKey (buf)
		
		serverPublicKey = _any_to_Uint8Array(address_pool, serverPublicKey, "serverPublicKey");
		var serverPublicKey_address, serverPublicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0;
		if (serverPublicKey.length !== serverPublicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid serverPublicKey length");
		}
		serverPublicKey_address = _to_allocated_buf_address(serverPublicKey);
		address_pool.push(serverPublicKey_address);
		
		// ---------- output sharedRx (buf)
		
		var sharedRx_length = (libsodium._crypto_kx_sessionkeybytes()) | 0,
		    sharedRx = new AllocatedBuf(sharedRx_length),
		    sharedRx_address = sharedRx.address;
		
		address_pool.push(sharedRx_address);
		
		// ---------- output sharedTx (buf)
		
		var sharedTx_length = (libsodium._crypto_kx_sessionkeybytes()) | 0,
		    sharedTx = new AllocatedBuf(sharedTx_length),
		    sharedTx_address = sharedTx.address;
		
		address_pool.push(sharedTx_address);
		
		if ((libsodium._crypto_kx_client_session_keys(sharedRx_address, sharedTx_address, clientPublicKey_address, clientSecretKey_address, serverPublicKey_address) | 0) === 0) {
			var ret = _format_output({sharedRx: sharedRx, sharedTx: sharedTx}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_kx_keypair(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_kx_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_kx_keypair(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_kx_seed_keypair(seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._crypto_kx_seedbytes()) | 0;
		if (seed.length !== seed_length) {
		        _free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_kx_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_kx_seed_keypair(publicKey_address, privateKey_address, seed_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: serverPublicKey (buf)
		
		serverPublicKey = _any_to_Uint8Array(address_pool, serverPublicKey, "serverPublicKey");
		var serverPublicKey_address, serverPublicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0;
		if (serverPublicKey.length !== serverPublicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid serverPublicKey length");
		}
		serverPublicKey_address = _to_allocated_buf_address(serverPublicKey);
		address_pool.push(serverPublicKey_address);
		
		// ---------- input: serverSecretKey (buf)
		
		serverSecretKey = _any_to_Uint8Array(address_pool, serverSecretKey, "serverSecretKey");
		var serverSecretKey_address, serverSecretKey_length = (libsodium._crypto_kx_secretkeybytes()) | 0;
		if (serverSecretKey.length !== serverSecretKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid serverSecretKey length");
		}
		serverSecretKey_address = _to_allocated_buf_address(serverSecretKey);
		address_pool.push(serverSecretKey_address);
		
		// ---------- input: clientPublicKey (buf)
		
		clientPublicKey = _any_to_Uint8Array(address_pool, clientPublicKey, "clientPublicKey");
		var clientPublicKey_address, clientPublicKey_length = (libsodium._crypto_kx_publickeybytes()) | 0;
		if (clientPublicKey.length !== clientPublicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid clientPublicKey length");
		}
		clientPublicKey_address = _to_allocated_buf_address(clientPublicKey);
		address_pool.push(clientPublicKey_address);
		
		// ---------- output sharedRx (buf)
		
		var sharedRx_length = (libsodium._crypto_kx_sessionkeybytes()) | 0,
		    sharedRx = new AllocatedBuf(sharedRx_length),
		    sharedRx_address = sharedRx.address;
		
		address_pool.push(sharedRx_address);
		
		// ---------- output sharedTx (buf)
		
		var sharedTx_length = (libsodium._crypto_kx_sessionkeybytes()) | 0,
		    sharedTx = new AllocatedBuf(sharedTx_length),
		    sharedTx_address = sharedTx.address;
		
		address_pool.push(sharedTx_address);
		
		if ((libsodium._crypto_kx_server_session_keys(sharedRx_address, sharedTx_address, serverPublicKey_address, serverSecretKey_address, clientPublicKey_address) | 0) === 0) {
			var ret = _format_output({sharedRx: sharedRx, sharedTx: sharedTx}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_onetimeauth(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_onetimeauth_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_onetimeauth_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_onetimeauth(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_onetimeauth_final(state_address, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (onetimeauth_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_onetimeauth_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_onetimeauth_final(state_address, hash_address) | 0) === 0) {
			var ret = (libsodium._free(state_address), _format_output(hash, outputFormat));
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_onetimeauth_init(key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: key (unsized_buf_optional)
		
		var key_address = null, key_length = 0;
		if (key != undefined) {
		        key = _any_to_Uint8Array(address_pool, key, "key");
		        key_address = _to_allocated_buf_address(key);
		        key_length = key.length;
		        address_pool.push(key_address);
		}
		
		// ---------- output state (onetimeauth_state)
		
		var state_address = new AllocatedBuf(144).address;
		
		if ((libsodium._crypto_onetimeauth_init(state_address, key_address) | 0) === 0) {
			var ret = state_address;
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_onetimeauth_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_onetimeauth_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_onetimeauth_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_onetimeauth_update(state_address, message_chunk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (onetimeauth_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: message_chunk (unsized_buf)
		
		message_chunk = _any_to_Uint8Array(address_pool, message_chunk, "message_chunk");
		var message_chunk_address = _to_allocated_buf_address(message_chunk),
		    message_chunk_length = message_chunk.length;
		address_pool.push(message_chunk_address);
		
		if ((libsodium._crypto_onetimeauth_update(state_address, message_chunk_address, message_chunk_length) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_onetimeauth_verify(hash, message, key) {
		var address_pool = [];

		// ---------- input: hash (buf)
		
		hash = _any_to_Uint8Array(address_pool, hash, "hash");
		var hash_address, hash_length = (libsodium._crypto_onetimeauth_bytes()) | 0;
		if (hash.length !== hash_length) {
		        _free_and_throw_type_error(address_pool, "invalid hash length");
		}
		hash_address = _to_allocated_buf_address(hash);
		address_pool.push(hash_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_onetimeauth_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_onetimeauth_verify(hash_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_pwhash(keyLength, password, salt, opsLimit, memLimit, algorithm, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: keyLength (uint)
		
		_require_defined(address_pool, keyLength, "keyLength");
		
		if (!(typeof keyLength === "number" && (keyLength | 0) === keyLength) || keyLength < 0) {
		        _free_and_throw_type_error(address_pool, "keyLength must be an unsigned integer");
		}
		
		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: salt (buf)
		
		salt = _any_to_Uint8Array(address_pool, salt, "salt");
		var salt_address, salt_length = (libsodium._crypto_pwhash_saltbytes()) | 0;
		if (salt.length !== salt_length) {
		        _free_and_throw_type_error(address_pool, "invalid salt length");
		}
		salt_address = _to_allocated_buf_address(salt);
		address_pool.push(salt_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) || opsLimit < 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) || memLimit < 0) {
		        _free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- input: algorithm (uint)
		
		_require_defined(address_pool, algorithm, "algorithm");
		
		if (!(typeof algorithm === "number" && (algorithm | 0) === algorithm) || algorithm < 0) {
		        _free_and_throw_type_error(address_pool, "algorithm must be an unsigned integer");
		}
		
		// ---------- output derivedKey (buf)
		
		var derivedKey_length = (keyLength) | 0,
		    derivedKey = new AllocatedBuf(derivedKey_length),
		    derivedKey_address = derivedKey.address;
		
		address_pool.push(derivedKey_address);
		
		if ((libsodium._crypto_pwhash(derivedKey_address, keyLength, 0, password_address, password_length, 0, salt_address, opsLimit, 0, memLimit, algorithm) | 0) === 0) {
			var ret = _format_output(derivedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_pwhash_scryptsalsa208sha256(keyLength, password, salt, opsLimit, memLimit, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: keyLength (uint)
		
		_require_defined(address_pool, keyLength, "keyLength");
		
		if (!(typeof keyLength === "number" && (keyLength | 0) === keyLength) || keyLength < 0) {
		        _free_and_throw_type_error(address_pool, "keyLength must be an unsigned integer");
		}
		
		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: salt (buf)
		
		salt = _any_to_Uint8Array(address_pool, salt, "salt");
		var salt_address, salt_length = (libsodium._crypto_pwhash_scryptsalsa208sha256_saltbytes()) | 0;
		if (salt.length !== salt_length) {
		        _free_and_throw_type_error(address_pool, "invalid salt length");
		}
		salt_address = _to_allocated_buf_address(salt);
		address_pool.push(salt_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) || opsLimit < 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) || memLimit < 0) {
		        _free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- output derivedKey (buf)
		
		var derivedKey_length = (keyLength) | 0,
		    derivedKey = new AllocatedBuf(derivedKey_length),
		    derivedKey_address = derivedKey.address;
		
		address_pool.push(derivedKey_address);
		
		if ((libsodium._crypto_pwhash_scryptsalsa208sha256(derivedKey_address, keyLength, 0, password_address, password_length, 0, salt_address, opsLimit, 0, memLimit) | 0) === 0) {
			var ret = _format_output(derivedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_pwhash_scryptsalsa208sha256_ll(password, salt, opsLimit, r, p, keyLength, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: salt (unsized_buf)
		
		salt = _any_to_Uint8Array(address_pool, salt, "salt");
		var salt_address = _to_allocated_buf_address(salt),
		    salt_length = salt.length;
		address_pool.push(salt_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) || opsLimit < 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: r (uint)
		
		_require_defined(address_pool, r, "r");
		
		if (!(typeof r === "number" && (r | 0) === r) || r < 0) {
		        _free_and_throw_type_error(address_pool, "r must be an unsigned integer");
		}
		
		// ---------- input: p (uint)
		
		_require_defined(address_pool, p, "p");
		
		if (!(typeof p === "number" && (p | 0) === p) || p < 0) {
		        _free_and_throw_type_error(address_pool, "p must be an unsigned integer");
		}
		
		// ---------- input: keyLength (uint)
		
		_require_defined(address_pool, keyLength, "keyLength");
		
		if (!(typeof keyLength === "number" && (keyLength | 0) === keyLength) || keyLength < 0) {
		        _free_and_throw_type_error(address_pool, "keyLength must be an unsigned integer");
		}
		
		// ---------- output derivedKey (buf)
		
		var derivedKey_length = (keyLength) | 0,
		    derivedKey = new AllocatedBuf(derivedKey_length),
		    derivedKey_address = derivedKey.address;
		
		address_pool.push(derivedKey_address);
		
		if ((libsodium._crypto_pwhash_scryptsalsa208sha256_ll(password_address, password_length, salt_address, salt_length, opsLimit, 0, r, p, derivedKey_address, keyLength) | 0) === 0) {
			var ret = _format_output(derivedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_pwhash_scryptsalsa208sha256_str(password, opsLimit, memLimit, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) || opsLimit < 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) || memLimit < 0) {
		        _free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- output hashed_password (buf)
		
		var hashed_password_length = (libsodium._crypto_pwhash_scryptsalsa208sha256_strbytes()) | 0,
		    hashed_password = new AllocatedBuf(hashed_password_length),
		    hashed_password_address = hashed_password.address;
		
		address_pool.push(hashed_password_address);
		
		if ((libsodium._crypto_pwhash_scryptsalsa208sha256_str(hashed_password_address, password_address, password_length, 0, opsLimit, 0, memLimit) | 0) === 0) {
			var ret = libsodium.Pointer_stringify(hashed_password_address);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_pwhash_scryptsalsa208sha256_str_verify(hashed_password, password, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: hashed_password (string)
		
		hashed_password = from_string(hashed_password + "\0");
		var hashed_password_address = _to_allocated_buf_address(hashed_password),
		    hashed_password_length = hashed_password.length - 1;
		address_pool.push(hashed_password_address);
		
		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		var result = libsodium._crypto_pwhash_scryptsalsa208sha256_str_verify(hashed_password_address, password_address, password_length, 0) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_pwhash_str(password, opsLimit, memLimit, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) || opsLimit < 0) {
		        _free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) || memLimit < 0) {
		        _free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- output hashed_password (buf)
		
		var hashed_password_length = (libsodium._crypto_pwhash_strbytes()) | 0,
		    hashed_password = new AllocatedBuf(hashed_password_length),
		    hashed_password_address = hashed_password.address;
		
		address_pool.push(hashed_password_address);
		
		if ((libsodium._crypto_pwhash_str(hashed_password_address, password_address, password_length, 0, opsLimit, 0, memLimit) | 0) === 0) {
			var ret = libsodium.Pointer_stringify(hashed_password_address);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_pwhash_str_verify(hashed_password, password, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: hashed_password (string)
		
		hashed_password = from_string(hashed_password + "\0");
		var hashed_password_address = _to_allocated_buf_address(hashed_password),
		    hashed_password_length = hashed_password.length - 1;
		address_pool.push(hashed_password_address);
		
		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		var result = libsodium._crypto_pwhash_str_verify(hashed_password_address, password_address, password_length, 0) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_scalarmult(privateKey, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- output sharedSecret (buf)
		
		var sharedSecret_length = (libsodium._crypto_scalarmult_bytes()) | 0,
		    sharedSecret = new AllocatedBuf(sharedSecret_length),
		    sharedSecret_address = sharedSecret.address;
		
		address_pool.push(sharedSecret_address);
		
		if ((libsodium._crypto_scalarmult(sharedSecret_address, privateKey_address, publicKey_address) | 0) === 0) {
			var ret = _format_output(sharedSecret, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_scalarmult_base(privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		if ((libsodium._crypto_scalarmult_base(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output(publicKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_secretbox_detached(message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output cipher (buf)
		
		var cipher_length = (message_length) | 0,
		    cipher = new AllocatedBuf(cipher_length),
		    cipher_address = cipher.address;
		
		address_pool.push(cipher_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_secretbox_macbytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_secretbox_detached(cipher_address, mac_address, message_address, message_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output({mac: mac, cipher: cipher}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_secretbox_easy(message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output cipher (buf)
		
		var cipher_length = (message_length + libsodium._crypto_secretbox_macbytes()) | 0,
		    cipher = new AllocatedBuf(cipher_length),
		    cipher_address = cipher.address;
		
		address_pool.push(cipher_address);
		
		if ((libsodium._crypto_secretbox_easy(cipher_address, message_address, message_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output(cipher, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_secretbox_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_secretbox_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_secretbox_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_secretbox_open_detached(ciphertext, mac, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_secretbox_macbytes()) | 0;
		if (mac.length !== mac_length) {
		        _free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_secretbox_open_detached(message_address, ciphertext_address, mac_address, ciphertext_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_secretbox_open_easy(ciphertext, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_secretbox_macbytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_secretbox_open_easy(message_address, ciphertext_address, ciphertext_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_shorthash(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_shorthash_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_shorthash_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_shorthash(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_shorthash_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_shorthash_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_shorthash_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_shorthash_siphashx24(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_shorthash_siphashx24_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_shorthash_siphashx24_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_shorthash_siphashx24(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign(message, privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output signature (buf)
		
		var signature_length = (message.length + libsodium._crypto_sign_bytes()) | 0,
		    signature = new AllocatedBuf(signature_length),
		    signature_address = signature.address;
		
		address_pool.push(signature_address);
		
		if ((libsodium._crypto_sign(signature_address, null, message_address, message_length, 0, privateKey_address) | 0) === 0) {
			var ret = _format_output(signature, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_detached(message, privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output signature (buf)
		
		var signature_length = (libsodium._crypto_sign_bytes()) | 0,
		    signature = new AllocatedBuf(signature_length),
		    signature_address = signature.address;
		
		address_pool.push(signature_address);
		
		if ((libsodium._crypto_sign_detached(signature_address, null, message_address, message_length, 0, privateKey_address) | 0) === 0) {
			var ret = _format_output(signature, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_ed25519_pk_to_curve25519(edPk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: edPk (buf)
		
		edPk = _any_to_Uint8Array(address_pool, edPk, "edPk");
		var edPk_address, edPk_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (edPk.length !== edPk_length) {
		        _free_and_throw_type_error(address_pool, "invalid edPk length");
		}
		edPk_address = _to_allocated_buf_address(edPk);
		address_pool.push(edPk_address);
		
		// ---------- output cPk (buf)
		
		var cPk_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0,
		    cPk = new AllocatedBuf(cPk_length),
		    cPk_address = cPk.address;
		
		address_pool.push(cPk_address);
		
		if ((libsodium._crypto_sign_ed25519_pk_to_curve25519(cPk_address, edPk_address) | 0) === 0) {
			var ret = _format_output(cPk, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_ed25519_sk_to_curve25519(edSk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: edSk (buf)
		
		edSk = _any_to_Uint8Array(address_pool, edSk, "edSk");
		var edSk_address, edSk_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (edSk.length !== edSk_length) {
		        _free_and_throw_type_error(address_pool, "invalid edSk length");
		}
		edSk_address = _to_allocated_buf_address(edSk);
		address_pool.push(edSk_address);
		
		// ---------- output cSk (buf)
		
		var cSk_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0,
		    cSk = new AllocatedBuf(cSk_length),
		    cSk_address = cSk.address;
		
		address_pool.push(cSk_address);
		
		if ((libsodium._crypto_sign_ed25519_sk_to_curve25519(cSk_address, edSk_address) | 0) === 0) {
			var ret = _format_output(cSk, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_ed25519_sk_to_pk(privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		if ((libsodium._crypto_sign_ed25519_sk_to_pk(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output(publicKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_ed25519_sk_to_seed(privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output seed (buf)
		
		var seed_length = (libsodium._crypto_sign_seedbytes()) | 0,
		    seed = new AllocatedBuf(seed_length),
		    seed_address = seed.address;
		
		address_pool.push(seed_address);
		
		if ((libsodium._crypto_sign_ed25519_sk_to_seed(seed_address, privateKey_address) | 0) === 0) {
			var ret = _format_output(seed, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_final_create(state_address, privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (sign_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output signature (buf)
		
		var signature_length = (libsodium._crypto_sign_bytes()) | 0,
		    signature = new AllocatedBuf(signature_length),
		    signature_address = signature.address;
		
		address_pool.push(signature_address);
		
		if ((libsodium._crypto_sign_final_create(state_address, signature_address, null, privateKey_address) | 0) === 0) {
			var ret = (libsodium._free(state_address), _format_output(signature, outputFormat));
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_final_verify(state_address, signature, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (sign_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: signature (buf)
		
		signature = _any_to_Uint8Array(address_pool, signature, "signature");
		var signature_address, signature_length = (libsodium._crypto_sign_bytes()) | 0;
		if (signature.length !== signature_length) {
		        _free_and_throw_type_error(address_pool, "invalid signature length");
		}
		signature_address = _to_allocated_buf_address(signature);
		address_pool.push(signature_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		var verificationResult = libsodium._crypto_sign_final_verify(state_address, signature_address, publicKey_address) | 0;
		var ret = (verificationResult === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_sign_init(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output state (sign_state)
		
		var state_address = new AllocatedBuf(208).address;
		
		if ((libsodium._crypto_sign_init(state_address) | 0) === 0) {
			var ret = state_address;
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_keypair(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_sign_keypair(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey, keyType: 'ed25519'}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_open(signedMessage, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: signedMessage (unsized_buf)
		
		signedMessage = _any_to_Uint8Array(address_pool, signedMessage, "signedMessage");
		var signedMessage_address = _to_allocated_buf_address(signedMessage),
		    signedMessage_length = signedMessage.length;
		address_pool.push(signedMessage_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- output message (buf)
		
		var message_length = (signedMessage_length - libsodium._crypto_sign_bytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_sign_open(message_address, null, signedMessage_address, signedMessage_length, 0, publicKey_address) | 0) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_seed_keypair(seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._crypto_sign_seedbytes()) | 0;
		if (seed.length !== seed_length) {
		        _free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_sign_seed_keypair(publicKey_address, privateKey_address, seed_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey, keyType: "ed25519"}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_update(state_address, message_chunk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (sign_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: message_chunk (unsized_buf)
		
		message_chunk = _any_to_Uint8Array(address_pool, message_chunk, "message_chunk");
		var message_chunk_address = _to_allocated_buf_address(message_chunk),
		    message_chunk_length = message_chunk.length;
		address_pool.push(message_chunk_address);
		
		if ((libsodium._crypto_sign_update(state_address, message_chunk_address, message_chunk_length) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_sign_verify_detached(signature, message, publicKey) {
		var address_pool = [];

		// ---------- input: signature (buf)
		
		signature = _any_to_Uint8Array(address_pool, signature, "signature");
		var signature_address, signature_length = (libsodium._crypto_sign_bytes()) | 0;
		if (signature.length !== signature_length) {
		        _free_and_throw_type_error(address_pool, "invalid signature length");
		}
		signature_address = _to_allocated_buf_address(signature);
		address_pool.push(signature_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
		        _free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		var verificationResult = libsodium._crypto_sign_verify_detached(signature_address, message_address, message_length, 0, publicKey_address) | 0;
		var ret = (verificationResult === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_stream_chacha20_ietf_xor(input_message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_chacha20_ietf_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_chacha20_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_chacha20_ietf_xor(output_message_address, input_message_address, input_message_length, 0, nonce_address, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_stream_chacha20_ietf_xor_ic(input_message, nonce, nonce_increment, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_chacha20_ietf_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: nonce_increment (uint)
		
		_require_defined(address_pool, nonce_increment, "nonce_increment");
		
		if (!(typeof nonce_increment === "number" && (nonce_increment | 0) === nonce_increment) || nonce_increment < 0) {
		        _free_and_throw_type_error(address_pool, "nonce_increment must be an unsigned integer");
		}
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_chacha20_ietf_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_chacha20_ietf_xor_ic(output_message_address, input_message_address, input_message_length, 0, nonce_address, nonce_increment, 0, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_stream_chacha20_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_stream_chacha20_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_stream_chacha20_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_stream_chacha20_xor(input_message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_chacha20_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_chacha20_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_chacha20_xor(output_message_address, input_message_address, input_message_length, 0, nonce_address, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_stream_chacha20_xor_ic(input_message, nonce, nonce_increment, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_chacha20_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: nonce_increment (uint)
		
		_require_defined(address_pool, nonce_increment, "nonce_increment");
		
		if (!(typeof nonce_increment === "number" && (nonce_increment | 0) === nonce_increment) || nonce_increment < 0) {
		        _free_and_throw_type_error(address_pool, "nonce_increment must be an unsigned integer");
		}
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_chacha20_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_chacha20_xor_ic(output_message_address, input_message_address, input_message_length, 0, nonce_address, nonce_increment, 0, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_stream_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_stream_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_stream_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_stream_xchacha20_keygen(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output output (buf)
		
		var output_length = (libsodium._crypto_stream_xchacha20_keybytes()) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._crypto_stream_xchacha20_keygen(output_address);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_stream_xchacha20_xor(input_message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_xchacha20_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_xchacha20_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_xchacha20_xor(output_message_address, input_message_address, input_message_length, 0, nonce_address, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function crypto_stream_xchacha20_xor_ic(input_message, nonce, nonce_increment, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: input_message (unsized_buf)
		
		input_message = _any_to_Uint8Array(address_pool, input_message, "input_message");
		var input_message_address = _to_allocated_buf_address(input_message),
		    input_message_length = input_message.length;
		address_pool.push(input_message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_stream_xchacha20_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
		        _free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: nonce_increment (uint)
		
		_require_defined(address_pool, nonce_increment, "nonce_increment");
		
		if (!(typeof nonce_increment === "number" && (nonce_increment | 0) === nonce_increment) || nonce_increment < 0) {
		        _free_and_throw_type_error(address_pool, "nonce_increment must be an unsigned integer");
		}
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_stream_xchacha20_keybytes()) | 0;
		if (key.length !== key_length) {
		        _free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output output_message (buf)
		
		var output_message_length = (input_message_length) | 0,
		    output_message = new AllocatedBuf(output_message_length),
		    output_message_address = output_message.address;
		
		address_pool.push(output_message_address);
		
		if ((libsodium._crypto_stream_xchacha20_xor_ic(output_message_address, input_message_address, input_message_length, 0, nonce_address, nonce_increment, 0, key_address)) === 0) {
			var ret = _format_output(output_message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function randombytes_buf(length, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: length (uint)
		
		_require_defined(address_pool, length, "length");
		
		if (!(typeof length === "number" && (length | 0) === length) || length < 0) {
		        _free_and_throw_type_error(address_pool, "length must be an unsigned integer");
		}
		
		// ---------- output output (buf)
		
		var output_length = (length) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._randombytes_buf(output_address, length);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function randombytes_buf_deterministic(length, seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: length (uint)
		
		_require_defined(address_pool, length, "length");
		
		if (!(typeof length === "number" && (length | 0) === length) || length < 0) {
		        _free_and_throw_type_error(address_pool, "length must be an unsigned integer");
		}
		
		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._randombytes_seedbytes()) | 0;
		if (seed.length !== seed_length) {
		        _free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output output (buf)
		
		var output_length = (length) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._randombytes_buf_deterministic(output_address, length, 0, seed);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function randombytes_close(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		libsodium._randombytes_close();
		
	}

	function randombytes_random(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		var random_value = libsodium._randombytes_random() >>> 0;
		var ret = (random_value);
		_free_all(address_pool);
		return ret;
		
	}

	function randombytes_set_implementation(implementation, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: implementation (randombytes_implementation)
		
		var implementation_address = libsodium._malloc(6 * 4);
		for (var i = 0; i < 6; i++) {
		        libsodium.setValue(implementation_address + i * 4,
		            libsodium.Runtime.addFunction(implementation
		            [["implementation_name", "random", "stir", "uniform", "buf", "close"][i]]),
		            "i32");
		}
		
		if ((libsodium._randombytes_set_implementation(implementation_address) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool, 'incorrect usage');
		
	}

	function randombytes_stir(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		libsodium._randombytes_stir();
		
	}

	function randombytes_uniform(upper_bound, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: upper_bound (uint)
		
		_require_defined(address_pool, upper_bound, "upper_bound");
		
		if (!(typeof upper_bound === "number" && (upper_bound | 0) === upper_bound) || upper_bound < 0) {
		        _free_and_throw_type_error(address_pool, "upper_bound must be an unsigned integer");
		}
		
		var random_value = libsodium._randombytes_uniform(upper_bound) >>> 0;
		var ret = (random_value);
		_free_all(address_pool);
		return ret;
		
	}

	function sodium_version_string() {
		var address_pool = [];

		var version = libsodium._sodium_version_string();
		var ret = (libsodium.Pointer_stringify(version));
		_free_all(address_pool);
		return ret;
		
	}


    exports.add = add;
    exports.base64_variants = base64_variants;
    exports.compare = compare;
    exports.from_base64 = from_base64;
    exports.from_hex = from_hex;
    exports.from_string = from_string;
    exports.increment = increment;
    exports.is_zero = is_zero;
    exports.libsodium = libsodiumModule;
    exports.memcmp = memcmp;
    exports.memzero = memzero;
    exports.output_formats = output_formats;
    exports.pad = pad;
    exports.unpad = unpad;
    exports.ready = ready;
    exports.symbols = symbols;
    exports.to_base64 = to_base64;
    exports.to_hex = to_hex;
    exports.to_string = to_string;

    
	var exported_functions = ["crypto_aead_chacha20poly1305_decrypt", "crypto_aead_chacha20poly1305_decrypt_detached", "crypto_aead_chacha20poly1305_encrypt", "crypto_aead_chacha20poly1305_encrypt_detached", "crypto_aead_chacha20poly1305_ietf_decrypt", "crypto_aead_chacha20poly1305_ietf_decrypt_detached", "crypto_aead_chacha20poly1305_ietf_encrypt", "crypto_aead_chacha20poly1305_ietf_encrypt_detached", "crypto_aead_chacha20poly1305_ietf_keygen", "crypto_aead_chacha20poly1305_keygen", "crypto_aead_xchacha20poly1305_ietf_decrypt", "crypto_aead_xchacha20poly1305_ietf_decrypt_detached", "crypto_aead_xchacha20poly1305_ietf_encrypt", "crypto_aead_xchacha20poly1305_ietf_encrypt_detached", "crypto_aead_xchacha20poly1305_ietf_keygen", "crypto_auth", "crypto_auth_hmacsha256", "crypto_auth_hmacsha256_keygen", "crypto_auth_hmacsha256_verify", "crypto_auth_hmacsha512", "crypto_auth_hmacsha512_keygen", "crypto_auth_hmacsha512_verify", "crypto_auth_keygen", "crypto_auth_verify", "crypto_box_beforenm", "crypto_box_detached", "crypto_box_easy", "crypto_box_easy_afternm", "crypto_box_keypair", "crypto_box_open_detached", "crypto_box_open_easy", "crypto_box_open_easy_afternm", "crypto_box_seal", "crypto_box_seal_open", "crypto_box_seed_keypair", "crypto_generichash", "crypto_generichash_final", "crypto_generichash_init", "crypto_generichash_keygen", "crypto_generichash_update", "crypto_hash", "crypto_hash_sha256", "crypto_hash_sha512", "crypto_kdf_derive_from_key", "crypto_kdf_keygen", "crypto_kx_client_session_keys", "crypto_kx_keypair", "crypto_kx_seed_keypair", "crypto_kx_server_session_keys", "crypto_onetimeauth", "crypto_onetimeauth_final", "crypto_onetimeauth_init", "crypto_onetimeauth_keygen", "crypto_onetimeauth_update", "crypto_onetimeauth_verify", "crypto_pwhash", "crypto_pwhash_scryptsalsa208sha256", "crypto_pwhash_scryptsalsa208sha256_ll", "crypto_pwhash_scryptsalsa208sha256_str", "crypto_pwhash_scryptsalsa208sha256_str_verify", "crypto_pwhash_str", "crypto_pwhash_str_verify", "crypto_scalarmult", "crypto_scalarmult_base", "crypto_secretbox_detached", "crypto_secretbox_easy", "crypto_secretbox_keygen", "crypto_secretbox_open_detached", "crypto_secretbox_open_easy", "crypto_shorthash", "crypto_shorthash_keygen", "crypto_shorthash_siphashx24", "crypto_sign", "crypto_sign_detached", "crypto_sign_ed25519_pk_to_curve25519", "crypto_sign_ed25519_sk_to_curve25519", "crypto_sign_ed25519_sk_to_pk", "crypto_sign_ed25519_sk_to_seed", "crypto_sign_final_create", "crypto_sign_final_verify", "crypto_sign_init", "crypto_sign_keypair", "crypto_sign_open", "crypto_sign_seed_keypair", "crypto_sign_update", "crypto_sign_verify_detached", "crypto_stream_chacha20_ietf_xor", "crypto_stream_chacha20_ietf_xor_ic", "crypto_stream_chacha20_keygen", "crypto_stream_chacha20_xor", "crypto_stream_chacha20_xor_ic", "crypto_stream_keygen", "crypto_stream_xchacha20_keygen", "crypto_stream_xchacha20_xor", "crypto_stream_xchacha20_xor_ic", "randombytes_buf", "randombytes_buf_deterministic", "randombytes_close", "randombytes_random", "randombytes_set_implementation", "randombytes_stir", "randombytes_uniform", "sodium_version_string"],
	      functions = [crypto_aead_chacha20poly1305_decrypt, crypto_aead_chacha20poly1305_decrypt_detached, crypto_aead_chacha20poly1305_encrypt, crypto_aead_chacha20poly1305_encrypt_detached, crypto_aead_chacha20poly1305_ietf_decrypt, crypto_aead_chacha20poly1305_ietf_decrypt_detached, crypto_aead_chacha20poly1305_ietf_encrypt, crypto_aead_chacha20poly1305_ietf_encrypt_detached, crypto_aead_chacha20poly1305_ietf_keygen, crypto_aead_chacha20poly1305_keygen, crypto_aead_xchacha20poly1305_ietf_decrypt, crypto_aead_xchacha20poly1305_ietf_decrypt_detached, crypto_aead_xchacha20poly1305_ietf_encrypt, crypto_aead_xchacha20poly1305_ietf_encrypt_detached, crypto_aead_xchacha20poly1305_ietf_keygen, crypto_auth, crypto_auth_hmacsha256, crypto_auth_hmacsha256_keygen, crypto_auth_hmacsha256_verify, crypto_auth_hmacsha512, crypto_auth_hmacsha512_keygen, crypto_auth_hmacsha512_verify, crypto_auth_keygen, crypto_auth_verify, crypto_box_beforenm, crypto_box_detached, crypto_box_easy, crypto_box_easy_afternm, crypto_box_keypair, crypto_box_open_detached, crypto_box_open_easy, crypto_box_open_easy_afternm, crypto_box_seal, crypto_box_seal_open, crypto_box_seed_keypair, crypto_generichash, crypto_generichash_final, crypto_generichash_init, crypto_generichash_keygen, crypto_generichash_update, crypto_hash, crypto_hash_sha256, crypto_hash_sha512, crypto_kdf_derive_from_key, crypto_kdf_keygen, crypto_kx_client_session_keys, crypto_kx_keypair, crypto_kx_seed_keypair, crypto_kx_server_session_keys, crypto_onetimeauth, crypto_onetimeauth_final, crypto_onetimeauth_init, crypto_onetimeauth_keygen, crypto_onetimeauth_update, crypto_onetimeauth_verify, crypto_pwhash, crypto_pwhash_scryptsalsa208sha256, crypto_pwhash_scryptsalsa208sha256_ll, crypto_pwhash_scryptsalsa208sha256_str, crypto_pwhash_scryptsalsa208sha256_str_verify, crypto_pwhash_str, crypto_pwhash_str_verify, crypto_scalarmult, crypto_scalarmult_base, crypto_secretbox_detached, crypto_secretbox_easy, crypto_secretbox_keygen, crypto_secretbox_open_detached, crypto_secretbox_open_easy, crypto_shorthash, crypto_shorthash_keygen, crypto_shorthash_siphashx24, crypto_sign, crypto_sign_detached, crypto_sign_ed25519_pk_to_curve25519, crypto_sign_ed25519_sk_to_curve25519, crypto_sign_ed25519_sk_to_pk, crypto_sign_ed25519_sk_to_seed, crypto_sign_final_create, crypto_sign_final_verify, crypto_sign_init, crypto_sign_keypair, crypto_sign_open, crypto_sign_seed_keypair, crypto_sign_update, crypto_sign_verify_detached, crypto_stream_chacha20_ietf_xor, crypto_stream_chacha20_ietf_xor_ic, crypto_stream_chacha20_keygen, crypto_stream_chacha20_xor, crypto_stream_chacha20_xor_ic, crypto_stream_keygen, crypto_stream_xchacha20_keygen, crypto_stream_xchacha20_xor, crypto_stream_xchacha20_xor_ic, randombytes_buf, randombytes_buf_deterministic, randombytes_close, randombytes_random, randombytes_set_implementation, randombytes_stir, randombytes_uniform, sodium_version_string];
	for (var i = 0; i < functions.length; i++) {
		if (typeof libsodium["_" + exported_functions[i]] === "function") {
			exports[exported_functions[i]] = functions[i];
		}
	}
	var constants = ["SODIUM_LIBRARY_VERSION_MAJOR", "SODIUM_LIBRARY_VERSION_MINOR", "crypto_aead_chacha20poly1305_ABYTES", "crypto_aead_chacha20poly1305_KEYBYTES", "crypto_aead_chacha20poly1305_NPUBBYTES", "crypto_aead_chacha20poly1305_NSECBYTES", "crypto_aead_chacha20poly1305_ietf_ABYTES", "crypto_aead_chacha20poly1305_ietf_KEYBYTES", "crypto_aead_chacha20poly1305_ietf_NPUBBYTES", "crypto_aead_chacha20poly1305_ietf_NSECBYTES", "crypto_aead_xchacha20poly1305_ietf_ABYTES", "crypto_aead_xchacha20poly1305_ietf_KEYBYTES", "crypto_aead_xchacha20poly1305_ietf_NPUBBYTES", "crypto_aead_xchacha20poly1305_ietf_NSECBYTES", "crypto_auth_BYTES", "crypto_auth_KEYBYTES", "crypto_auth_hmacsha256_BYTES", "crypto_auth_hmacsha256_KEYBYTES", "crypto_auth_hmacsha512_BYTES", "crypto_auth_hmacsha512_KEYBYTES", "crypto_box_BEFORENMBYTES", "crypto_box_MACBYTES", "crypto_box_NONCEBYTES", "crypto_box_PUBLICKEYBYTES", "crypto_box_SEALBYTES", "crypto_box_SECRETKEYBYTES", "crypto_box_SEEDBYTES", "crypto_generichash_BYTES", "crypto_generichash_BYTES_MAX", "crypto_generichash_BYTES_MIN", "crypto_generichash_KEYBYTES", "crypto_generichash_KEYBYTES_MAX", "crypto_generichash_KEYBYTES_MIN", "crypto_hash_BYTES", "crypto_kdf_BYTES_MAX", "crypto_kdf_BYTES_MIN", "crypto_kdf_CONTEXTBYTES", "crypto_kdf_KEYBYTES", "crypto_kx_PUBLICKEYBYTES", "crypto_kx_SECRETKEYBYTES", "crypto_kx_SEEDBYTES", "crypto_kx_SESSSIONKEYBYTES", "crypto_onetimeauth_BYTES", "crypto_onetimeauth_KEYBYTES", "crypto_pwhash_ALG_ARGON2I13", "crypto_pwhash_ALG_DEFAULT", "crypto_pwhash_BYTES_MAX", "crypto_pwhash_BYTES_MIN", "crypto_pwhash_MEMLIMIT_INTERACTIVE", "crypto_pwhash_MEMLIMIT_MAX", "crypto_pwhash_MEMLIMIT_MIN", "crypto_pwhash_MEMLIMIT_MODERATE", "crypto_pwhash_MEMLIMIT_SENSITIVE", "crypto_pwhash_OPSLIMIT_INTERACTIVE", "crypto_pwhash_OPSLIMIT_MAX", "crypto_pwhash_OPSLIMIT_MIN", "crypto_pwhash_OPSLIMIT_MODERATE", "crypto_pwhash_OPSLIMIT_SENSITIVE", "crypto_pwhash_PASSWD_MAX", "crypto_pwhash_PASSWD_MIN", "crypto_pwhash_SALTBYTES", "crypto_pwhash_STRBYTES", "crypto_pwhash_STR_VERIFY", "crypto_pwhash_scryptsalsa208sha256_BYTES_MAX", "crypto_pwhash_scryptsalsa208sha256_BYTES_MIN", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE", "crypto_pwhash_scryptsalsa208sha256_SALTBYTES", "crypto_pwhash_scryptsalsa208sha256_STRBYTES", "crypto_pwhash_scryptsalsa208sha256_STR_VERIFY", "crypto_scalarmult_BYTES", "crypto_scalarmult_SCALARBYTES", "crypto_secretbox_KEYBYTES", "crypto_secretbox_MACBYTES", "crypto_secretbox_NONCEBYTES", "crypto_shorthash_BYTES", "crypto_shorthash_KEYBYTES", "crypto_shorthash_siphashx24_BYTES", "crypto_shorthash_siphashx24_KEYBYTES", "crypto_sign_BYTES", "crypto_sign_PUBLICKEYBYTES", "crypto_sign_SECRETKEYBYTES", "crypto_sign_SEEDBYTES", "crypto_stream_chacha20_KEYBYTES", "crypto_stream_chacha20_NONCEBYTES", "crypto_stream_chacha20_ietf_KEYBYTES", "crypto_stream_chacha20_ietf_NONCEBYTES", "crypto_stream_xchacha20_ietf_KEYBYTES", "crypto_stream_xchacha20_ietf_NONCEBYTES", "randombytes_SEEDBYTES"];
	for (var i = 0; i < constants.length; i++) {
		var raw = libsodium["_" + constants[i].toLowerCase()];
		if (typeof raw === "function") exports[constants[i]] = raw()|0;
	}
	var constants_str = ["SODIUM_VERSION_STRING", "crypto_pwhash_STRPREFIX", "crypto_pwhash_scryptsalsa208sha256_STRPREFIX"];
	for (var i = 0; i < constants_str.length; i++) {
		var raw = libsodium["_" + constants_str[i].toLowerCase()];
		if (typeof raw === "function") exports[constants_str[i]] = libsodium.Pointer_stringify(raw());
	}

    return exports;
}

var _onload = (typeof root.sodium === 'object' && typeof root.sodium.onload === 'function') ? root.sodium.onload : null;
if (typeof define === 'function' && define.amd) {
  define(['exports', 'libsodium'], expose_libsodium_wrappers);
} else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
  expose_wrappers(exports, require('libsodium'));
} else {
  root.sodium = expose_wrappers((root.commonJsStrict = {}), root.libsodium);
}
_onload && _onload(root.sodium);

})(this);
